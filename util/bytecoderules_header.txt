/* Function Parser for C++ v5.0.0   

  NOTE:
  Do not include this file in your project. The fparser.cc file #includes
this file internally and thus you don't need to do anything (other than keep
this file in the same directory as fparser.cc).

  This file contains generated code and is thus not intended to be to
be modified by hand. It was generated by util/bytecoderules_parser, which
is available in the development package.
*/
//#define FP_BYTECODE_TRACE

#define HasInvalidRangesOpcode HasInvalidRangesOpcode<IsComplexType<Value_t>::value>

#define FP_BYTECODEADD_BYTECODEPTR \
	(!mData->mByteCode.empty() ? &mData->mByteCode[0] + mData->mByteCode.size() - 1 : nullptr)
#define FP_BYTECODEADD_IMMEDPTR \
	(!mData->mImmed.empty()    ? &mData->mImmed[0]    + mData->mImmed.size()    - 1 : nullptr)

#ifdef FP_BYTECODE_TRACE
# define FP_TRACE_OPCODENAME(op) \
    (op < VarBegin \
        ? FP_GetOpcodeName(OPCODE(op)) \
        : findName(mData->mNamePtrs,op,NameData<Value_t>::VARIABLE))

# define FP_TRACE_BYTECODE_OPTIMIZATION(srcline,from,to,with) \
    std::cout << "Changing \"" from "\"\t(line " #srcline ")\n" \
                   "    into \"" to "\"\n" with << std::flush
# define FP_TRACE_BYTECODE_DETAIL() \
                   ", bytecode length " << mData->mByteCode.size() \
                << ", stack ptr " << mStackPtr \
                << ", stack size " << mData->mStackSize \
                << ", pointer is " << (void*)FP_BYTECODEADD_BYTECODEPTR \
                << ", code is " << (mData->mByteCode.empty() \
                                       ? (void*)0 \
                                       : (void*)&mData->mByteCode[0]) \
                << std::endl
# define FP_TRACE_BYTECODE_ADD(opcode) \
    std::cout << "Adding opcode: " << FP_TRACE_OPCODENAME(opcode) \
              << FP_TRACE_BYTECODE_DETAIL()
# define FP_TRACE_BYTECODE_ADD_IMMED(value) \
    std::cout << "Adding opcode: cImmed: " << value \
              << FP_TRACE_BYTECODE_DETAIL()
# define FP_TRACE_BYTECODE_ADD_VAR(index) \
    std::cout << "Adding opcode: cVar" << index \
              << FP_TRACE_BYTECODE_DETAIL()
# define FP_TRACE_BYTECODE_RETRACT() \
    std::cout << "Retracting last opcode" \
              << FP_TRACE_BYTECODE_DETAIL()
#else
# define FP_TRACE_BYTECODE_OPTIMIZATION(srcline,from,to,with)
# define FP_TRACE_BYTECODE_ADD(opcode)
# define FP_TRACE_BYTECODE_ADD_IMMED(value)
# define FP_TRACE_BYTECODE_ADD_VAR(index)
# define FP_TRACE_BYTECODE_RETRACT()
#endif
