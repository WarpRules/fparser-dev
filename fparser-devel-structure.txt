
	The core of fparser, Parse() is constructed from the
	following components:

	Lexer
		This is written in re2c, and can be found
		in fparser.cc.re. It is translated into C++
		by re2c, when run from the Makefile.
		The lexer is responsible for interpreting the
		input string provided by the caller and translating
		it into a list of tokens, such as T_NumValue or T_Pow.
		These tokens have no semantic relationship, i.e.
		if your input is "++++", it will simply yield
		four T_Plus tokens in a row.

		To find, edit fparser.cc.re and search for "Parser & lexer".

	Parser SYNTAX
		This is written in Bison, and can be found
		in fparser.y.
		The Makefile runs Bison to produce the state
		tables for this parser, outputting a file
		called: fparser-parsingtree.output
		Then a PHP script, bison-parser-convert.php,
		reads the output file and creates C++ table
		declarations and writes them into fparser-parsingdefs.inc.
		That .inc file is embedded into the fparser.cc
		file as it is being produced by Makefile. It could
		alternatively be #included, but that would mean another
		file dependency for production distributions.

		To find, edit fparser.y.

	Parser SEMANTIC ACTIONS
		For each rule specified in fparser.y, a semantic
		action is specified, and those actions are inside
		fparser.cc.re. They are not in fparser.y, because
		the fparser.y file is only used to construct the
		parsing tables, and bison's C language parser output
		is discarded.
		These semantic actions are what ultimately creates
		the bytecode.

		To find, edit fparser.cc.re and search for "switch(-Action)".
		The list of actions in that switch-case must match the
		list of actions in fparser-parsingtree.output .

	Parser body
		The body of the LALR(1) parser is in fparser.cc.re.
		It uses the data from fparser-parsingdefs.inc to decide
		what to do with the tokens generated by the re2c lexer,
		and to decide which semantic actions to trigger.

		To find, edit fparser.cc.re and search for "parsing decision".
