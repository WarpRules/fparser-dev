# This documents all the optimizations that are done to bytecode
# by fparser.cc directly while parsing the input function
# (excluding powi).
#
# The idea is to generate automatically the optimizations from
# this file, but we are not there yet.
#

# identifiers: lowercase=cImmeds, uppercase=opcodes
# [bracketed expression in condition]: constraints to input immeds or opcodes
# [bracketed expression in replacement]: function that produces an immed

#y [isEvenInteger(y)&&!isEvenInteger(x*y)] cExp  x cPow -> cAbs [y*x] cExp
#y [isEvenInteger(y)&&!isEvenInteger(x*y)] cExp2 x cPow -> cAbs [y*x] cExp2
#  ^ y cExp never occurs (already optimized to literal)
IF(FP_FLOAT_VERSION) y [isEvenInteger(y)&&!isEvenInteger(x*y)] cPow  x cPow -> cAbs [y*x] cPow
IF(FP_FLOAT_VERSION) cSqr x [!isEvenInteger(x*Value_t(2))] cPow -> cAbs [x*Value_t(2)] cPow
IF(FP_FLOAT_VERSION) cSqr cSqrt  -> cAbs
#IF(FP_FLOAT_VERSION) cSqr cRSqrt -> cAbs cInv

 # (x^y)^1.5  is unacceptable,
 #            for y might be 2, resulting in x^3
 #              f(-2)  = 8
 #              f'(-2) = -8
 # (x^y)^5    is okay
 #            for y might be 1.2, reuslting in x^6
 #              f(-2) = nan
 #              f'(-2) = 64
 # (x^y)^2    is okay,
 #            for y might be 1.5, resulting in x^3
 #              f(-2) = nan  <- ok because of this
 #              f'(-2) = -8
 #
#y [!IsIntegerConst(y)] cExp  x	[IsIntegerConst(x)] cPow -> [y*x] cExp
#y [!IsIntegerConst(y)] cExp2 x	[IsIntegerConst(x)] cPow -> [y*x] cExp2
#  ^ y cExp never occurs (already optimized to literal)
IF(FP_FLOAT_VERSION) y [!IsIntegerConst(y)] cPow  x	[IsIntegerConst(x)] cPow -> [y*x] cPow
IF(FP_FLOAT_VERSION) cExp  x	[IsIntegerConst(x)] cPow -> [x] cMul cExp
IF(FP_FLOAT_VERSION) cExp2 x	[IsIntegerConst(x)] cPow -> [x] cMul cExp2
IF(FP_FLOAT_VERSION) cPow  x	[IsIntegerConst(x)] cPow -> [x] cMul cPow
IF(FP_FLOAT_VERSION) cSqr x cPow -> [x*Value_t(2)] cPow

IF(FP_FLOAT_VERSION) x cAbs	 		-> [fp_abs(x)]
IF(FP_FLOAT_VERSION) x cAcos	 		-> [fp_acos(x)]
IF(FP_FLOAT_VERSION) x [x>=Value_t(-1)&&x<=Value_t(1)] cAcosh -> [fp_acosh(x)]
IF(FP_FLOAT_VERSION) x [x>=Value_t(-1)&&x<=Value_t(1)] cAsinh -> [fp_asinh(x)]
IF(FP_FLOAT_VERSION) x cAtan	 		-> [fp_atan(x)]
IF(FP_FLOAT_VERSION) x cAtanh 		-> [fp_atanh(x)]
IF(FP_FLOAT_VERSION) x cCbrt	 		-> [fp_cbrt(x)]
IF(FP_FLOAT_VERSION) x cCeil	 		-> [fp_ceil(x)]
IF(FP_FLOAT_VERSION) x cCos	 		-> [fp_cos(x)]
IF(FP_FLOAT_VERSION) x cCosh	 		-> [fp_cosh(x)]
IF(FP_FLOAT_VERSION) x cExp	 		-> [fp_exp(x)]
IF(FP_FLOAT_VERSION) x cExp2	 		-> [fp_exp2(x)]
IF(FP_FLOAT_VERSION) x cFloor 		-> [fp_floor(x)]
IF(FP_FLOAT_VERSION) x cInt	 		-> [fp_int(x)]
IF(FP_FLOAT_VERSION) x [x>=Value_t(0)] cLog	-> [fp_log(x)]
IF(FP_FLOAT_VERSION) x [x>=Value_t(0)] cLog10 -> [fp_log10(x)]
IF(FP_FLOAT_VERSION) x [x>=Value_t(0)] cLog2	-> [fp_log2(x)]
IF(FP_FLOAT_VERSION) x cSin	 		-> [fp_sin(x)]
IF(FP_FLOAT_VERSION) x cSinh	 		-> [fp_sinh(x)]
IF(FP_FLOAT_VERSION) x [x>=Value_t(0)] cSqrt	-> [fp_sqrt(x)]
IF(FP_FLOAT_VERSION) x cTan	 		-> [fp_tan(x)]
IF(FP_FLOAT_VERSION) x cTanh	 		-> [fp_tanh(x)]
IF(FP_FLOAT_VERSION) x cTrunc 		-> [fp_trunc(x)]
IF(FP_FLOAT_VERSION) x cDeg	 		-> [RadiansToDegrees(x)]
IF(FP_FLOAT_VERSION) x cRad	 		-> [DegreesToRadians(x)]
x cNeg			-> [-x]
x [x!=Value_t(0)] cInv 	-> [Value_t(1)/x]
x [x==Value_t(1)] cMul	->
y x cMul		-> [y*x]
x [x==Value_t(1)] cDiv	->
y x [x!=Value_t(0)] cDiv -> [y/x]
y x [x!=Value_t(0)] cMod -> [fp_mod(y,x)]
x [x==Value_t(0)] cAdd	->
y x cAdd		-> [y+x]
x [x==Value_t(0)] cSub	->
y x cSub		-> [y-x]
#y [y!=Value_t(0)] x cRDiv -> [x/y]
#y x cRSub		-> [x-y]
y x cMin		-> [Min(x,y)]
y x cMax		-> [Max(x,y)]
IF(FP_FLOAT_VERSION) y x cAtan2		-> [fp_atan2(y,x)]
IF(FP_FLOAT_VERSION) y [ y!=Value_t(0) || x>=Value_t(0)] x cPow -> [fp_pow(y,x)]
x cNot			-> [!truthValue(x)]


A [A >= VarBegin] x [x==Value_t(0)] cMul -> [x]

x [x==Value_t(2)] cMul -> cDup cAdd
IF(FP_FLOAT_VERSION) x [x==GetRadiansToDegreesFactor<Value_t>()] cMul -> cDeg
IF(FP_FLOAT_VERSION) x [x==GetDegreesToRadiansFactor<Value_t>()] cMul -> cRad
IF(FP_FLOAT_VERSION) cSqr cLog   -> cAbs cLog   cDup cAdd
IF(FP_FLOAT_VERSION) cSqr cLog2  -> cAbs cLog2  cDup cAdd
IF(FP_FLOAT_VERSION) cSqr cLog10 -> cAbs cLog10 cDup cAdd
IF(FP_FLOAT_VERSION) cDeg x cMul -> [RadiansToDegrees(x)] cMul
IF(FP_FLOAT_VERSION) cRad x cMul -> [DegreesToRadians(x)] cMul
cDup cAdd cDup cAdd -> [Value_t(4)] cMul


y x cLess		-> [fp_less(y,x)]
y x cLessOrEq		-> [fp_lessOrEq(y,x)]
y x cGreater		-> [fp_less(x,y)]
y x cGreaterOrEq	-> [fp_lessOrEq(x,y)]
y x cEqual		-> [fp_equal(y,x)]
y x cNEqual		-> [fp_nequal(y,x)]
y x cAnd		-> [truthValue(x)&&truthValue(y)]
y x cOr			-> [truthValue(x)||truthValue(y)]
#y x cAbsAnd		-> [truthValue_abs(x)&&truthValue_abs(y)]
#y x cAbsOr		-> [truthValue_abs(x)||truthValue_abs(y)]

cNeg x cMul		-> [-x] cMul
cNeg x cDiv		-> [-x] cDiv
x cMul cNeg		-> [-x] cMul
x [x==Value_t(-1)] cMul	-> cNeg


y cAdd x cAdd		-> [y+x] cAdd
y cSub x cAdd		-> [y-x] cSub
y cSub x cSub		-> [y+x] cSub
y cAdd x cSub		-> [y-x] cAdd

IF(FP_FLOAT_VERSION) y [(y*x)==GetRadiansToDegreesFactor<Value_t>()] cMul x cMul -> cDeg
IF(FP_FLOAT_VERSION) y [(y*x)==GetDegreesToRadiansFactor<Value_t>()] cMul x cMul -> cRad
y cMul x cMul		-> [y*x] cMul
IF(FP_FLOAT_VERSION) y [(y/x)==GetRadiansToDegreesFactor<Value_t>()] cMul x [x!=Value_t(0)] cDiv -> cDeg
IF(FP_FLOAT_VERSION) y [(y/x)==GetDegreesToRadiansFactor<Value_t>()] cMul x [x!=Value_t(0)] cDiv -> cRad
IF(FP_FLOAT_VERSION) y cMul x [x!=Value_t(0)] cDiv 	-> [y/x] cMul

IF(FP_FLOAT_VERSION) x [x!=Value_t(0)] cDiv		-> [Value_t(1)/x] cMul

#IF(FP_FLOAT_VERSION) y cExp  x cPow -> [y*x] cExp
#IF(FP_FLOAT_VERSION) y cExp2 x cPow -> [y*x] cExp2
#  ^ y cExp never occurs (already optimized to literal)
IF(FP_FLOAT_VERSION) y cPow  x cPow -> [y*x] cPow

IF(FP_FLOAT_VERSION) x [x==Value_t(0.5)]      cPow -> cSqrt
IF(FP_FLOAT_VERSION) x [x==Value_t(1)/Value_t(3)]  cPow -> cCbrt
IF(FP_FLOAT_VERSION) x [x==Value_t(1)/Value_t(-3)] cPow -> cCbrt cInv
IF(FP_FLOAT_VERSION) x [x==Value_t(-0.5)]     cPow -> cRSqrt
IF(FP_FLOAT_VERSION) x [x==Value_t(-1)]     cPow -> cInv

IF(FP_FLOAT_VERSION) cLog  cExp  ->
IF(FP_FLOAT_VERSION) cLog2 cExp2 ->
IF(FP_FLOAT_VERSION) cExp  cLog  ->
IF(FP_FLOAT_VERSION) cExp2 cLog2 ->
IF(FP_FLOAT_VERSION) cAsin cSin ->
IF(FP_FLOAT_VERSION) cAcos cCos ->
IF(FP_FLOAT_VERSION) cAtan cTan ->
IF(FP_FLOAT_VERSION) cAsinh cSinh ->
IF(FP_FLOAT_VERSION) cAcosh cCosh ->
IF(FP_FLOAT_VERSION) cAtanh cTanh ->
IF(FP_FLOAT_VERSION) cAtan2 cTan -> cDiv
cNeg  cAbs -> cAbs
cInv  cInv ->
cNeg  cNeg ->
IF(FP_FLOAT_VERSION) cPow  cInv -> cNeg cPow

IF(FP_FLOAT_VERSION) cInv cDiv -> cMul
cInv cMul -> cDiv
cNeg cAdd -> cSub
cNeg cSub -> cAdd

IF(FP_FLOAT_VERSION) x [x<0] cPow cMul -> [-x] cPow cDiv

cLess        cNot -> cGreaterOrEq
cLessOrEq    cNot -> cGreater
cGreater     cNot -> cLessOrEq
cGreaterOrEq cNot -> cLess
cEqual       cNot -> cNEqual
cNEqual      cNot -> cEqual

B [B==A] A [A >= VarBegin]                               -> A cDup
D [D==B] C [C==A] B [B >= VarBegin] A [IsUnaryOpcode(A)] -> D C cDup
cDup cMul -> cSqr

cNeg  cNot -> cNot
cAbs  cNot -> cNot
cNot  cNot -> cNotNot
cNotNot cNot    -> cNot
cAbsNotNot cNot -> cAbsNot

A [IsLogicalOpcode(A)]            cAbsNot cNot -> A
A [A!=cImmed]                     cAbsNot cNot -> A cAbsNotNot
A [IsNeverNegativeValueOpcode(A)] cNot -> A cAbsNot

A [IsNeverNegativeValueOpcode(A)] cAbs   -> A
IF(FP_FLOAT_VERSION) A [IsAlwaysIntegerOpcode(A)]	  cTrunc-> A
IF(FP_FLOAT_VERSION) A [IsAlwaysIntegerOpcode(A)]	  cFloor-> A
IF(FP_FLOAT_VERSION) A [IsAlwaysIntegerOpcode(A)]	  cCeil -> A
IF(FP_FLOAT_VERSION) A [IsAlwaysIntegerOpcode(A)]	  cInt  -> A

IF(FP_FLOAT_VERSION) cFloor cNeg -> cNeg cCeil
IF(FP_FLOAT_VERSION) cCeil  cNeg -> cNeg cFloor

IF(FP_FLOAT_VERSION) x cAdd cExp  -> cExp  [fp_exp(x)]     cMul
IF(FP_FLOAT_VERSION) x cAdd cExp2 -> cExp2 [fp_exp2(x)] cMul

IF(FP_FLOAT_VERSION) x cMul cExp  cDiv -> [-x] cMul cExp  cMul
IF(FP_FLOAT_VERSION) x cMul cExp2 cDiv -> [-x] cMul cExp2 cMul

IF(FP_FLOAT_VERSION) cAbs x [x!=Value_t(0)] cLess         -> [Value_t(0.5)/x] cMul cNot
IF(FP_FLOAT_VERSION) cAbs x [x!=Value_t(0)] cGreaterOrEq  -> [Value_t(0.5)/x] cMul cNotNot
A [IsNeverNegativeValueOpcode(A)] x [x==Value_t(0)] cLess -> A [x] cMul

IF(FP_FLOAT_VERSION) cAbs      x [isEvenInteger(x)] cPow ->      [x] cPow
IF(FP_FLOAT_VERSION) cAbs cMul x [isEvenInteger(x)] cPow -> cMul [x] cPow

IF(FP_FLOAT_VERSION) cAbs cCos  -> cCos
IF(FP_FLOAT_VERSION) cAbs cCosh -> cCosh
IF(FP_FLOAT_VERSION) cNeg cCos  -> cCos
IF(FP_FLOAT_VERSION) cNeg cCosh -> cCosh
IF(FP_FLOAT_VERSION) cNeg cSin  -> cSin cNeg
IF(FP_FLOAT_VERSION) cNeg cSinh -> cSinh cNeg
IF(FP_FLOAT_VERSION) cNeg cTan  -> cTan cNeg
IF(FP_FLOAT_VERSION) cNeg cTanh -> cTanh cNeg
IF(FP_FLOAT_VERSION) x cMul cSin  cNeg -> [-x] cMul cSin
IF(FP_FLOAT_VERSION) x cMul cSinh cNeg -> [-x] cMul cSinh
IF(FP_FLOAT_VERSION) x cMul cTan  cNeg -> [-x] cMul cTan
IF(FP_FLOAT_VERSION) x cMul cTanh cNeg -> [-x] cMul cTanh

IF(FP_FLOAT_VERSION) cAcosh cSinh -> [DO_STACKPLUS1] cSqr [Value_t(-1)] cAdd cSqrt
IF(FP_FLOAT_VERSION) cAsinh cCosh -> [DO_STACKPLUS1] cSqr  [Value_t(1)] cAdd cSqrt

IF(FP_FLOAT_VERSION) cSin cDiv -> cCsc cMul
IF(FP_FLOAT_VERSION) cCos cDiv -> cSec cMul
IF(FP_FLOAT_VERSION) cTan cDiv -> cCot cMul
IF(FP_FLOAT_VERSION) cCsc cDiv -> cSin cMul
IF(FP_FLOAT_VERSION) cSec cDiv -> cCos cMul
IF(FP_FLOAT_VERSION) cCot cDiv -> cTan cMul
IF(FP_FLOAT_VERSION) cSin cInv -> cCsc
IF(FP_FLOAT_VERSION) cCos cInv -> cSec
IF(FP_FLOAT_VERSION) cTan cInv -> cCot
IF(FP_FLOAT_VERSION) cCsc cInv -> cSin
IF(FP_FLOAT_VERSION) cSec cInv -> cCos
IF(FP_FLOAT_VERSION) cCot cInv -> cTan

# Hardcoded optimizations that are too complex or
# impossible to convey using this rule file:
IF(FP_FLOAT_VERSION) x cPow -> [DO_POWI]
B [B==A] A [A >= VarBegin] cMul       -> B cSqr
B [B==A] cMul A [A >= VarBegin] cMul  -> B cSqr cMul
