#define YY_FPoptimizerGrammarParser_h_included
#define YY_USE_CLASS

/*  A Bison++ parser, made from fpoptimizer/grammar_parser.y  */

 /* with Bison++ version bison++ Version 1.21.9-1, adapted from GNU bison by coetmeur@icdc.fr
Maintained by Magnus Ekdahl <magnus@debian.org>
  */

#define YY_USE_CLASS

#line 1 "/usr/share/bison++/bison.cc"
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Bob Corbett and Richard Stallman

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 1, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  

   As a special exception, when this file is copied by Bison++ into a
   Bison++ output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison, and has been in Bison++ since 1.21.9.  

*/

/* HEADER SECTION */
#if defined( _MSDOS ) || defined(MSDOS) || defined(__MSDOS__) 
 #define __MSDOS_AND_ALIKE
#endif

#if defined(_WINDOWS) && defined(_MSC_VER)
 #define __HAVE_NO_ALLOCA
 #define __MSDOS_AND_ALIKE
#endif

#ifndef alloca
 #if defined( __GNUC__)
  #define alloca __builtin_alloca

 #elif (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc)  || defined (__sgi)
  #include <alloca.h>

 #elif defined (__MSDOS_AND_ALIKE)
  #include <malloc.h>
  #ifndef __TURBOC__
   /* MS C runtime lib */
   #define alloca _alloca
  #endif

 #elif defined(_AIX)
  /* pragma must be put before any C/C++ instruction !! */
  #pragma alloca
  #include <malloc.h>

 #elif defined(__hpux)
  #ifdef __cplusplus
   extern "C" {
     void *alloca (unsigned int);
   };
  #else /* not __cplusplus */
   void *alloca ();
  #endif /* not __cplusplus */

 #endif /* not _AIX  not MSDOS, or __TURBOC__ or _AIX, not sparc.  */
#endif /* alloca not defined.  */

#ifdef c_plusplus
 #ifndef __cplusplus
  #define __cplusplus
 #endif
#endif

#ifdef __cplusplus
 #ifndef YY_USE_CLASS
/*#warning "For C++ its recomended to use bison++, otherwise classes won't be generated"*/
 #endif
#else
 #ifndef __STDC__
  #define const
 #endif
 #ifdef YY_USE_CLASS
  #error "This is a C++ header generated by bison++, please use a C++ compiler!"
 #endif
#endif

#include <stdio.h>
#define YYBISON 1  

 #line 88 "/usr/share/bison++/bison.cc"
#line 1 "fpoptimizer/grammar_parser.y"

#define YYDEBUG 1
#define YYERROR_VERBOSE 1
#define YY_FPoptimizerGrammarParser_ERROR_VERBOSE 1
#include <string.h> // for error reporting

#include "fpconfig.hh"
#include "fparser.hh"
#include "fptypes.hh"

#include "fpoptimizer_grammar.hh"
#include "fpoptimizer_consts.hh"
#include "fpoptimizer_opcodename.hh"

#include <cctype>
#include <cstdlib>
#include <iostream>
#include <sstream>
#include <map>
#include <set>
#include <algorithm>
#include <assert.h>

#include "crc32.hh"

/*********/
using namespace FPoptimizer_Grammar;
using namespace FUNCTIONPARSERTYPES;

class GrammarDumper;

namespace GrammarData
{
    class ParamSpec;

    class MatchedParams
    {
    public:
        ParamMatchingType Type;
        std::vector<ParamSpec*> Params;
        unsigned RestHolderIndex;

    public:
        MatchedParams()                    : Type(PositionalParams), Params(), RestHolderIndex(0) { }
        MatchedParams(ParamMatchingType t) : Type(t),                Params(), RestHolderIndex(0) { }
        MatchedParams(ParamSpec* p)        : Type(PositionalParams), Params(), RestHolderIndex(0) { Params.push_back(p); }

        MatchedParams* SetType(ParamMatchingType t) { Type=t; return this; }
        MatchedParams* AddParam(ParamSpec* p) { Params.push_back(p); return this; }

        const std::vector<ParamSpec*>& GetParams() const { return Params; }

        void RecursivelySetDefaultParamMatchingType();
        bool EnsureNoRepeatedNamedHolders(std::set<unsigned>& used) const;
        bool EnsureNoRepeatedNamedHolders() const;
        bool EnsureNoVariableCoverageParams_InPositionalParamLists();

        unsigned CalcRequiredParamsCount() const;

        unsigned BuildDepMask();
        void BuildFinalDepMask();
    };

    class FunctionType
    {
    public:
        OPCODE        Opcode;
        MatchedParams Params;
    public:
        FunctionType(OPCODE o, const MatchedParams& p) : Opcode(o), Params(p) { }

        void RecursivelySetDefaultParamMatchingType()
        {
            Params.RecursivelySetDefaultParamMatchingType();
            if((Opcode == cAdd || Opcode == cMul
            || Opcode == cAnd || Opcode == cOr
            || Opcode == cAbsAnd || Opcode == cAbsOr)
            && Params.Type == PositionalParams)
                Params.Type = SelectedParams;
        }

        bool EnsureNoRepeatedNamedHolders() const
            { return Params.EnsureNoRepeatedNamedHolders(); }
    };

    class ParamSpec
    {
    public:
        unsigned DepMask;

        SpecialOpcode Opcode;      // specifies the type of the function
        union
        {
            double ConstantValue;           // for NumConstant
            unsigned Index;                 // for ParamHolder
            FunctionType* Func;             // for SubFunction
        };
        unsigned ImmedConstraint;
        bool     IsConst;                   // when SubFunction

    public:
        struct ParamHolderTag{};

        ParamSpec(FunctionType* f)
            : DepMask(),
              Opcode(SubFunction),
              Func(f),
              ImmedConstraint(0),
              IsConst(false)
        {
        }

        ParamSpec(double d)
            : DepMask(),
              Opcode(NumConstant),
              ConstantValue(d),
              ImmedConstraint(0),
              IsConst(true)
        {
        }

        ParamSpec(OPCODE o, const std::vector<ParamSpec*>& p)
            : DepMask(),
              Opcode(SubFunction),
              Func(new FunctionType(o, MatchedParams(PositionalParams))),
              ImmedConstraint(0),
              IsConst(true)
        {
            if(o == cNeg && p[0]->Opcode == NumConstant)
            {
                delete Func;
                Opcode        = NumConstant;
                ConstantValue = -p[0]->ConstantValue;
            }
            else
            {
                Func->Params.Params = p;
                /*
                if(o == cAdd && p[1]->Opcode == SubFunction
                             && p[1]->Func->Opcode == cNeg
                             && p.size() == 2)
                {
                    Func->Opcode = cSub;
                    Func->Params.Params[1] = p[1]->Func->Params.Params[0];
                } -- not done because ConstantFolding() cannot handle cSub
                */
            }
        }

        ParamSpec(unsigned i, ParamHolderTag)
            : DepMask(),
              Opcode(ParamHolder), Index(i),
              ImmedConstraint(0),
              IsConst(true)
        {
        }

/*
        // Order:
        //  NumConstant { ConstantValue }
        //  ParamHolder { Index }
        //  SubFunction { Opcode, IsConst }
        bool operator< (const ParamSpec& b) const
        {
            if(Opcode == NumConstant)
                return (b.Opcode == NumConstant)
                        ? ConstantValue < b.ConstantValue
                        : true;
            if(Opcode == ParamHolder)
                return (b.Opcode == ParamHolder)
                        ? Index < b.Index
                        : (b.Opcode == SubFunction)
                            ? true
                            : false;
            if(Opcode == SubFunction)
                return (b.Opcode == SubFunction)
                    ? (Func->Opcode != b.Func->Opcode
                         ? Func->Opcode < b.Func->Opcode
                         : IsConst < b.IsConst
                      )
                    : false;
            return false;
        }
        bool operator!= (const ParamSpec& b) const { return !operator==(b); }
        bool operator== (const ParamSpec& b) const
        {
            switch(Opcode)
            {
                case NumConstant:
                    return b.Opcode == Opcode && FloatEqual(ConstantValue, b.ConstantValue);
                case ParamHolder:
                    return b.Opcode == Opcode && ImmedConstraint == b.ImmedConstraint
                        && b.DepMask == DepMask && Index == b.Index;
                case SubFunction:
                    if(b.Opcode != SubFunction) return false;
                    if(Func->Opcode != b.Func->Opcode) return false;
                    if(ImmedConstraint != b.ImmedConstraint) return false;
                    if(DepMask != b.DepMask) return false;
                    if(IsConst != b.IsConst) return false;
                    if(Func->Params.Type != b.Func->Params.Type
                    || Func->Params.RestHolderIndex != b.Func->Params.RestHolderIndex
                    || Func->Params.Params.size() != b.Func->Params.Params.size())
                        return false;
                    for(size_t a=0; a<Func->Params.Params.size(); ++a)
                        if(*Func->Params.Params[a] != *b.Func->Params.Params[a])
                            return false;
            }
            return true;
        }
*/
        ParamSpec* SetConstraint(unsigned mask)
            { ImmedConstraint |= mask; return this; }

        unsigned BuildDepMask();

        void RecursivelySetDefaultParamMatchingType()
        {
            if(Opcode == SubFunction)
                Func->RecursivelySetDefaultParamMatchingType();
        }
        bool VerifyIsConstant()
        {
            switch(Opcode)
            {
                case NumConstant: return true;
                case ParamHolder: return ImmedConstraint & Constness_Const;
                case SubFunction:
                    if(!IsConst) return false; // subfunctions are not constant
            }
            // For const-subfunctions, all params must be const.
            for(size_t a=0; a<Func->Params.Params.size(); ++a)
                if(!Func->Params.Params[a]->VerifyIsConstant()) return false;
            return true;
        }

        bool EnsureNoRepeatedNamedHolders() const
        {
            if(Opcode != SubFunction) return true;
            MatchedParams tmp;
            tmp.Params = Func->Params.Params;
            return tmp.EnsureNoRepeatedNamedHolders();
        }

    private:
        ParamSpec(const ParamSpec&);
        ParamSpec& operator= (const ParamSpec&);
    };

    class Rule
    {
    public:
        friend class GrammarDumper;
        RuleType Type;

        FunctionType  Input;
        MatchedParams Replacement; // length should be 1 if ProduceNewTree is used
        bool LogicalContext;
    public:
        Rule(RuleType t, const FunctionType& f, const MatchedParams& r)
            : Type(t), Input(f), Replacement(r), LogicalContext(false)
        { }

        Rule(RuleType t, const FunctionType& f, ParamSpec* p)
            : Type(t), Input(f), Replacement(), LogicalContext(false)
        { Replacement.AddParam(p); }

        void BuildFinalDepMask()
        {
            Input.Params.BuildFinalDepMask();
            //Replacement.BuildFinalDepMask(); -- not needed, though not wrong either.
        }
        void SetLogicalContextOnly()
        {
            LogicalContext = true;
        }
    };

    class Grammar
    {
    public:
        std::vector<Rule> rules;
    public:
        Grammar(): rules() { }

        void AddRule(const Rule& r) { rules.push_back(r); }
        void BuildFinalDepMask()
        {
            for(size_t a=0; a<rules.size(); ++a)
                rules[a].BuildFinalDepMask();
        }
    };

    ////////////////////

    void MatchedParams::RecursivelySetDefaultParamMatchingType()
    {
        Type = PositionalParams;
        if(RestHolderIndex != 0)
            Type = AnyParams;

        for(size_t a=0; a<Params.size(); ++a)
            Params[a]->RecursivelySetDefaultParamMatchingType();
    }

    bool MatchedParams::EnsureNoRepeatedNamedHolders(std::set<unsigned>& used) const
    {
        for(size_t a=0; a<Params.size(); ++a)
        {
            if(Params[a]->Opcode == ParamHolder)
            {
                unsigned index = Params[a]->Index;
                std::set<unsigned>::iterator i = used.lower_bound(index);
                if(i != used.end() && *i == index)
                    return false;
                used.insert(i, index);
            }
            if(Params[a]->Opcode == SubFunction)
                if(!Params[a]->Func->Params.EnsureNoRepeatedNamedHolders(used))
                    return false;
        }
        return true;
    }

    bool MatchedParams::EnsureNoRepeatedNamedHolders() const
    {
        std::set<unsigned> used;
        return EnsureNoRepeatedNamedHolders(used);
    }

    bool MatchedParams::EnsureNoVariableCoverageParams_InPositionalParamLists()
    {
        if(Type != PositionalParams
        && Type != SelectedParams) return true;

        if(RestHolderIndex != 0) return false;

        for(size_t a=0; a<Params.size(); ++a)
        {
            if(Params[a]->Opcode == SubFunction)
                if(!Params[a]->Func->Params.EnsureNoVariableCoverageParams_InPositionalParamLists())
                    return false;
        }
        return true;
    }
    unsigned MatchedParams::CalcRequiredParamsCount() const
    {
        return (unsigned)Params.size();
    }

    unsigned MatchedParams::BuildDepMask()
    {
        unsigned result = 0;
        for(size_t a=0; a<Params.size(); ++a)
            result |= Params[a]->BuildDepMask();
        return result;
    }

    void MatchedParams::BuildFinalDepMask()
    {
        unsigned all_bits = BuildDepMask();

        // For each bit that is set in all_bits, unset
        // all of them that are only set in one of the parameters.
        for(unsigned bit=1; all_bits >= bit; bit <<= 1)
            if(all_bits & bit)
            {
                unsigned count_found = 0;
                for(size_t a=0; a<Params.size(); ++a)
                {
                    unsigned param_bitmask = Params[a]->DepMask;
                    if(param_bitmask & bit) ++count_found;
                }
                if(count_found <= 1)
                {
                    for(size_t a=0; a<Params.size(); ++a)
                        Params[a]->DepMask &= ~bit;
                }
            }

        // Recurse
        for(size_t a=0; a<Params.size(); ++a)
            if(Params[a]->Opcode == SubFunction)
                Params[a]->Func->Params.BuildFinalDepMask();
    }
}

#define YY_FPoptimizerGrammarParser_MEMBERS \
    GrammarData::Grammar grammar;

std::vector<ParamSpec> plist;
std::vector<Rule>      rlist;

struct RuleComparer
{
    bool operator() (const Rule& a, const Rule& b) const
    {
        if(a.match_tree.subfunc_opcode != b.match_tree.subfunc_opcode)
            return a.match_tree.subfunc_opcode < b.match_tree.subfunc_opcode;

        // Other rules to break ties
        if(a.logical_context != b.logical_context)
            return a.logical_context < b.logical_context;

        if(a.ruletype != b.ruletype)
            return a.ruletype < b.ruletype;

        if(a.match_tree.match_type != b.match_tree.match_type)
            return a.match_tree.match_type < b.match_tree.match_type;

        if(a.match_tree.param_count != b.match_tree.param_count)
            return a.match_tree.param_count < b.match_tree.param_count;

        if(a.repl_param_count != b.repl_param_count)
            return a.repl_param_count < b.repl_param_count;

        if(a.match_tree.param_list != b.match_tree.param_list)
            return a.match_tree.param_list < b.match_tree.param_list;

        if(a.repl_param_list != b.repl_param_list)
            return a.repl_param_list < b.repl_param_list;

        return false;
    }

    bool operator() (unsigned a, unsigned b) const
    {
        return this->operator() ( rlist[a], rlist[b] );
    }
};

class GrammarDumper
{
private:
    std::string GenName(const char* prefix)
    {
        static unsigned counter = 0;
        std::ostringstream tmp;
        tmp << prefix << ++counter;
        return tmp.str();
    }
private:
    std::map<std::string, size_t> n_index;

    std::vector<std::string>        nlist;
    std::map<std::string, Grammar>  glist;
public:
    GrammarDumper():
        n_index(),
        nlist(),glist()
    {
        plist.reserve(16384);
        nlist.reserve(16);
        rlist.reserve(16384);
    }

    unsigned ConvertNamedHolderNameIntoIndex(const std::string& n)
    {
        std::map<std::string, size_t>::const_iterator i = n_index.find(n);
        if(i != n_index.end()) return i->second;
        nlist.push_back(n);
        return n_index[n] = (unsigned)(nlist.size()-1);
    }
    size_t GetNumNamedHolderNames() const { return nlist.size(); }

    void DumpParamList(const std::vector<GrammarData::ParamSpec*>& Params,
                       unsigned&       param_count,
                       unsigned&       param_list)
    {
        param_count = (unsigned)Params.size();
        param_list  = 0;
        for(unsigned a=0; a<param_count; ++a)
        {
            ParamSpec p = CreateParam(*Params[a]);

            unsigned paramno = (unsigned)plist.size();

            for(size_t b = 0; b < plist.size(); ++b)
                if(plist[b].first == p.first
                && ParamSpec_Compare(plist[b].second, p.second, p.first))
                {
                    paramno = (unsigned)b;
                    break;
                }

            if(paramno == plist.size()) plist.push_back(p);

            param_list |= paramno << (a * PARAM_INDEX_BITS);
        }
    }

    ParamSpec CreateParam(const GrammarData::ParamSpec& p)
    {
        unsigned    pcount;
        unsigned    plist;
        switch(p.Opcode)
        {
            case SubFunction:
            {
                ParamSpec_SubFunction* result = new ParamSpec_SubFunction;
                result->constraints    = p.ImmedConstraint;
                result->data.subfunc_opcode = p.Func->Opcode;
                result->data.match_type     = p.Func->Params.Type;
                DumpParamList(p.Func->Params.Params, pcount, plist);
                result->data.param_count = pcount;
                result->data.param_list  = plist;
                result->depcode        = p.DepMask;
                result->data.restholder_index = p.Func->Params.RestHolderIndex;
                if(p.IsConst)
                {
                    result->data.match_type = GroupFunction;
                    result->constraints |= Constness_Const;
                }
                return std::make_pair(SubFunction, (void*)result);
            }
            case NumConstant:
            {
                ParamSpec_NumConstant* result = new ParamSpec_NumConstant;
                result->constvalue     = p.ConstantValue;
                return std::make_pair(NumConstant, (void*)result);
            }
            case ParamHolder:
            {
                ParamSpec_ParamHolder* result = new ParamSpec_ParamHolder;
                result->constraints    = p.ImmedConstraint;
                result->index          = p.Index;
                result->depcode        = p.DepMask;
                return std::make_pair(ParamHolder, (void*)result);
            }
        }
        std::cout << "???\n";
        return std::make_pair(SubFunction, (void*) 0);
    }

    Rule CreateRule(const GrammarData::Rule& r)
    {
        unsigned min_params = r.Input.Params.CalcRequiredParamsCount();

        Rule ritem;
        memset(&ritem, 0, sizeof(ritem));
        //ritem.n_minimum_params          = min_params;
        ritem.ruletype                  = r.Type;
        ritem.logical_context           = r.LogicalContext;
        ritem.match_tree.subfunc_opcode = r.Input.Opcode;
        ritem.match_tree.match_type     = r.Input.Params.Type;
        ritem.match_tree.restholder_index = r.Input.Params.RestHolderIndex;
        unsigned         pcount;
        unsigned         plist;
        DumpParamList(r.Input.Params.Params, pcount, plist);
        ritem.match_tree.param_count = pcount;
        ritem.match_tree.param_list  = plist;

        DumpParamList(r.Replacement.Params,  pcount, plist);
        ritem.repl_param_count = pcount;
        ritem.repl_param_list  = plist;
        return ritem;
    }

    void RegisterGrammar(const std::vector<GrammarData::Grammar>& gset)
    {
        std::vector<Rule> this_rules;

        for(size_t a=0; a<gset.size(); ++a)
        {
            const GrammarData::Grammar& g = gset[a];

            for(size_t a=0; a<g.rules.size(); ++a)
            {
                if(g.rules[a].Input.Opcode == cNop) continue;
                this_rules.push_back( CreateRule(g.rules[a]) );
            }
        }

        std::sort(this_rules.begin(), this_rules.end(),
                  RuleComparer());

        for(size_t a=0; a<this_rules.size(); ++a)
        {
            const Rule& r = this_rules[a];

            // Add to global rule list, unless it's already there
            bool dup=false;
            for(size_t c=0; c<rlist.size(); ++c)
                if(memcmp(&r, &rlist[c], sizeof(r)) == 0)
                {
                    // Already in global rule list...
                    dup = true;
                    break;
                }
            if(!dup)
                rlist.push_back(r);
        }
    }

    void DumpGrammar(const std::string& grammarname,
                     const std::vector<GrammarData::Grammar>& gset)
    {
        std::vector<unsigned> rule_list;

        std::vector<Rule> this_rules;

        for(size_t a=0; a<gset.size(); ++a)
        {
            const GrammarData::Grammar& g = gset[a];

            for(size_t a=0; a<g.rules.size(); ++a)
            {
                if(g.rules[a].Input.Opcode == cNop) continue;
                this_rules.push_back( CreateRule(g.rules[a]) );
            }
        }

        std::sort(this_rules.begin(), this_rules.end(),
                  RuleComparer());

        for(size_t a=0; a<this_rules.size(); ++a)
        {
            const Rule& r = this_rules[a];

            // Add to global rule list, unless it's already there
            bool dup=false;
            for(size_t c=0; c<rlist.size(); ++c)
                if(memcmp(&r, &rlist[c], sizeof(r)) == 0)
                {
                    // Already in global rule list...
                    // Add to grammar's rule list unless it's already there
                    dup = false;
                    for(size_t b=0; b<rule_list.size(); ++b)
                        if(c == rule_list[b])
                        {
                            dup = true;
                            break;
                        }
                    if(!dup)
                    {
                        // Global duplicate, but not yet in grammar.
                        rule_list.push_back(c);
                    }
                    dup = true;
                    break;
                }
            if(!dup)
            {
                // Not in global rule list. Add there and in grammar.
                rule_list.push_back( (unsigned) rlist.size() );
                rlist.push_back(r);
            }
        }

        Grammar& gitem = glist[grammarname];

        gitem.rule_count = (unsigned) rule_list.size();

        std::sort(rule_list.begin(), rule_list.end(),
                  RuleComparer());

        for(size_t a=0; a<rule_list.size(); ++a)
            gitem.rule_list[a] = rule_list[a];
    }

    static std::string ConstraintsToString(unsigned constraints)
    {
        std::ostringstream result;
        const char* sep = "";
        static const char s[] = " | ";
        switch( ImmedConstraint_Value( constraints & ValueMask ) )
        {
            case ValueMask: case Value_AnyNum: break;
            case Value_EvenInt: result << sep << "Value_EvenInt"; sep=s; break;
            case Value_OddInt: result << sep << "Value_OddInt"; sep=s; break;
            case Value_IsInteger: result << sep << "Value_IsInteger"; sep=s; break;
            case Value_NonInteger: result << sep << "Value_NonInteger"; sep=s; break;
            case Value_Logical: result << sep << "Value_Logical"; sep=s; break;
        }
        switch( ImmedConstraint_Sign( constraints & SignMask ) )
        {
            /*case SignMask:*/ case Sign_AnySign: break;
            case Sign_Positive: result << sep << "Sign_Positive"; sep=s; break;
            case Sign_Negative: result << sep << "Sign_Negative"; sep=s; break;
            case Sign_NoIdea:   result << sep << "Sign_NoIdea"; sep=s; break;
        }
        switch( ImmedConstraint_Oneness( constraints & OnenessMask ) )
        {
            case OnenessMask: case Oneness_Any: break;
            case Oneness_One: result << sep << "Oneness_One"; sep=s; break;
            case Oneness_NotOne: result << sep << "Oneness_NotOne"; sep=s; break;
        }
        switch( ImmedConstraint_Constness( constraints & ConstnessMask ) )
        {
            /*case ConstnessMask:*/ case Oneness_Any: break;
            case Constness_Const: result << sep << "Constness_Const"; sep=s; break;
        }
        if(!*sep) result << "0";
        return result.str();
    }

    static std::string ConstValueToString(double value)
    {
        std::ostringstream result;
        result.precision(50);
        #define if_const(n) \
            if(FloatEqual(value, n)) result << #n; \
            else if(FloatEqual(value, -n)) result << "-" #n;
        if_const(CONSTANT_E)
        else if_const(CONSTANT_EI)
        else if_const(CONSTANT_2E)
        else if_const(CONSTANT_2EI)
        else if_const(CONSTANT_PI)
        else if_const(CONSTANT_L10)
        else if_const(CONSTANT_L2)
        else if_const(CONSTANT_L10I)
        else if_const(CONSTANT_L2I)
        else if_const(CONSTANT_L10B)
        else if_const(CONSTANT_L10BI)
        else if_const(CONSTANT_DR)
        else if_const(CONSTANT_RD)
        else if_const(CONSTANT_PIHALF)
        else if_const(FPOPT_NAN_CONST)
        #undef if_const
        else result << value;
        return result.str();
    }

    struct ParamCollection
    {
        std::vector<ParamSpec_ParamHolder>   plist_p;
        std::vector<ParamSpec_NumConstant>   plist_n;
        std::vector<ParamSpec_SubFunction>   plist_s;

        void Populate(const ParamSpec& param)
        {
            #define set(when, list, code) \
                case when: \
                  { for(size_t a=0; a<list.size(); ++a) \
                        if(ParamSpec_Compare(param.second, (const void*) &list[a], when)) \
                            return; \
                    list.push_back( *(ParamSpec_##when*) param.second ); \
                    code; \
                    break; }
            switch(param.first)
            {
                set(ParamHolder, plist_p, );
                set(NumConstant, plist_n, );
                set(SubFunction, plist_s,
                     ParamSpec_SubFunction* p = (ParamSpec_SubFunction*)param.second;
                     for(size_t a=0; a<p->data.param_count; ++a)
                         Populate( ParamSpec_Extract( p->data.param_list, a) );
                    );
            }
            #undef set
        }

        struct p_compare { bool operator() (
            const ParamSpec_ParamHolder& a,
            const ParamSpec_ParamHolder& b) const
        {
            if(a.index != b.index) return a.index < b.index;
            return false;
        } };
        struct n_compare { bool operator() (
            const ParamSpec_NumConstant& a,
            const ParamSpec_NumConstant& b) const
        {
            return a.constvalue < b.constvalue;
        } };
        struct s_compare { bool operator() (
            const ParamSpec_SubFunction& a,
            const ParamSpec_SubFunction& b) const
        {
            if(a.data.subfunc_opcode != b.data.subfunc_opcode)
                return a.data.subfunc_opcode < b.data.subfunc_opcode;
            if(a.data.match_type != b.data.match_type)
                return a.data.match_type < b.data.match_type;
            size_t min_param_count = a.data.param_count;
            if(b.data.param_count < min_param_count)
                min_param_count = b.data.param_count;
            for(size_t c=0; c< min_param_count; ++c)
            {
                ParamSpec aa = ParamSpec_Extract(a.data.param_list, (unsigned)c);
                ParamSpec bb = ParamSpec_Extract(b.data.param_list, (unsigned)c);
                if(aa.first != bb.first)
                    return aa.first < bb.first;
                switch(aa.first)
                {
                    case ParamHolder:
                        if(p_compare() (*(const ParamSpec_ParamHolder*)aa.second,
                                        *(const ParamSpec_ParamHolder*)bb.second))
                            return true;
                        break;
                    case NumConstant:
                        if(n_compare() (*(const ParamSpec_NumConstant*)aa.second,
                                        *(const ParamSpec_NumConstant*)bb.second))
                            return true;
                        break;
                    case SubFunction:
                        if(s_compare() (*(const ParamSpec_SubFunction*)aa.second,
                                        *(const ParamSpec_SubFunction*)bb.second))
                            return true;
                        break;
                }
            }
            if(a.data.param_count != b.data.param_count)
                return a.data.param_count < b.data.param_count;
            return false;
        } };

        void Sort()
        {
            std::stable_sort(plist_p.begin(), plist_p.end(), p_compare());
            std::stable_sort(plist_n.begin(), plist_n.end(), n_compare());
            std::stable_sort(plist_s.begin(), plist_s.end(), s_compare());
        }

        std::string ParamPtrToString(unsigned paramlist, unsigned index) const
        {
            const ParamSpec& p = ParamSpec_Extract(paramlist, index);
            if(!p.second) return "0";
            #define set(when, list, c) \
                case when: \
                    for(size_t a=0; a<list.size(); ++a) \
                        if(ParamSpec_Compare(p.second, (const void*)&list[a], when)) \
                        { \
                            std::ostringstream result; \
                            result << #c "(" << a << ")"; \
                            return result.str(); \
                        } \
                    break;
            switch(p.first)
            {
                set(ParamHolder, plist_p, P);
                set(NumConstant, plist_n, N);
                set(SubFunction, plist_s, S);
            }
            #undef set
            return "?"+FP_GetOpcodeName(p.first);
        }

        std::string ParamListToString(unsigned paramlist, unsigned paramcount) const
        {
            std::ostringstream result;
            switch(paramcount)
            {
                case 0: result << "0"; break;
                case 1: result << "P1(" << ParamPtrToString(paramlist,0) << ")"; break;
                case 2: result << "P2(" << ParamPtrToString(paramlist,0) << ','
                                                   << ParamPtrToString(paramlist,1)
                                                   << ")"; break;
                case 3: result << "P3(" << ParamPtrToString(paramlist,0) << ','
                                                     << ParamPtrToString(paramlist,1) << ','
                                                     << ParamPtrToString(paramlist,2)
                                                     << ")"; break;
                default:
                    result << "?";
            }
            //result << ',' << param_count;
            std::string res = result.str();
            while(res.size() < 24) res += ' ';
            return res;
        }

        std::string ParamHolderToString(const ParamSpec_ParamHolder& i) const
        {
            std::ostringstream result;
            result << "{" << i.index
                   << ", " << ConstraintsToString(i.constraints)
                   << ", 0x" << i.depcode
                   << "}";
            return result.str();
        }

        std::string NumConstantToString(const ParamSpec_NumConstant& i) const
        {
            std::ostringstream result;
            result << "{" << ConstValueToString(i.constvalue)
                   << "}";
            return result.str();
        }

        std::string SubFunctionDataToString(const ParamSpec_SubFunctionData& i) const
        {
            std::ostringstream result;
            result << "{"  << i.param_count
                   <<  "," << ParamListToString(i.param_list, i.param_count)
                   << ", " << FP_GetOpcodeName(i.subfunc_opcode, true)
                   << ","  << (i.match_type == PositionalParams ? "PositionalParams"
                            :  i.match_type == SelectedParams   ? "SelectedParams  "
                            :  i.match_type == AnyParams        ? "AnyParams       "
                            :/*i.match_type == GroupFunction  ?*/ "GroupFunction   "
                            )
                   << "," << i.restholder_index
                   << "}";
            return result.str();
        }

        std::string SubFunctionToString(const ParamSpec_SubFunction& i) const
        {
            std::ostringstream result;
            result << "{" << SubFunctionDataToString(i.data)
                   << ", " << ConstraintsToString(i.constraints)
                   << ", 0x" << i.depcode
                   << "}";
            return result.str();
        }
    };

    void Flush()
    {
        ParamCollection collection;
        for(size_t a=0; a<rlist.size(); ++a)
        {
            for(unsigned b=0; b < rlist[a].match_tree.param_count; ++b)
                collection.Populate( ParamSpec_Extract(rlist[a].match_tree.param_list, b) );
            for(unsigned b=0; b < rlist[a].repl_param_count; ++b)
                collection.Populate( ParamSpec_Extract(rlist[a].repl_param_list, b) );
        }
        collection.Sort();

        for(std::map<std::string, Grammar>::const_iterator
             i = glist.begin(); i != glist.end(); ++i)
            std::cout << "#define grammar_" << i->first << " grammar_" << i->first << "_tweak\n";
        std::cout <<
            "#include \"fpoptimizer_grammar.hh\"\n";
        for(std::map<std::string, Grammar>::const_iterator
             i = glist.begin(); i != glist.end(); ++i)
            std::cout << "#undef grammar_" << i->first << "\n";

        std::cout <<
            "\n"
            "using namespace FPoptimizer_Grammar;\n"
            "using namespace FUNCTIONPARSERTYPES;\n"
            "\n"
            "namespace\n"
            "{\n"
            "    const struct ParamSpec_List\n"
            "    {\n";

        std::ostringstream undef_buf;
        { std::ostringstream buf;
        std::ostringstream base;

        #define set(type, list, c) \
            std::cout << \
            "        ParamSpec_" #type " " #list "[" << collection.list.size() << "];\n" \
            "#define " #c "(n) (n" << base.str() << ")\n"; \
            base << '+' << collection.list.size(); \
            undef_buf << \
            "#undef " #c "\n"; \
            buf << \
            "        { /* " << #list << " - ParamSpec_" #type "[" << collection.list.size() << "] */\n"; \
            for(size_t a=0; a<collection.list.size(); ++a) \
            { \
                buf << "        /* " << a << "\t*/ " \
                    << collection.type##ToString(collection.list[a]) \
                    << ", /* "; \
                FPoptimizer_Grammar::DumpParam( ParamSpec(type, (const void*) &collection.list[a]), buf); \
                buf << " */\n"; \
            } \
            buf << \
            "        },\n" \
            "\n";

        set(ParamHolder,   plist_p, P)
        set(NumConstant,   plist_n, N)
        set(SubFunction,   plist_s, S)

        std::cout <<
            "    } /*PACKED_GRAMMAR_ATTRIBUTE*/ plist =\n"
            "    {\n"
            << buf.str() <<
            "    };\n"
            "}\n";
        }

        #undef set

        std::cout <<
            "namespace FPoptimizer_Grammar\n"
            "{\n";
        std::cout <<
            "    const Rule grammar_rules[" << rlist.size() << "] =\n"
            "    {\n";
        for(size_t a=0; a<rlist.size(); ++a)
        {
            std::cout <<
            "        /* " << a << ":\t";
            ParamSpec_SubFunction tmp = {rlist[a].match_tree,0,0};
            if(rlist[a].logical_context) std::cout << "@L ";
            FPoptimizer_Grammar::DumpParam( ParamSpec(SubFunction, (const void*) &tmp) );
            switch(rlist[a].ruletype)
            {
                case ProduceNewTree:
                    std::cout <<
                    "\n"
                    "         *\t->\t";
                    FPoptimizer_Grammar::DumpParam(
                        ParamSpec_Extract(rlist[a].repl_param_list, 0) );
                    break;
                case ReplaceParams: default:
                    std::cout <<
                    "\n"
                    "         *\t:\t";
                    FPoptimizer_Grammar::DumpParams( rlist[a].repl_param_list, rlist[a].repl_param_count);
                    break;
            }
            std::cout <<
            "\n"
            "         */\t\t "
                        "{"
                        << (rlist[a].ruletype == ProduceNewTree  ? "ProduceNewTree"
                         :/*rlist[a].ruletype == ReplaceParams ?*/ "ReplaceParams "
                           )
                        << ", " << (rlist[a].logical_context ? "true " : "false")
                        << ", " << rlist[a].repl_param_count
                        <<  "," << collection.ParamListToString(rlist[a].repl_param_list, rlist[a].repl_param_count)
                        << ", " << collection.SubFunctionDataToString(rlist[a].match_tree)
                        << "},\n";
        }
        std::cout <<
            "    };\n"
            << undef_buf.str()
            <<
            "\n";
        for(std::map<std::string, Grammar>::const_iterator
             i = glist.begin(); i != glist.end(); ++i)
        {
            std::cout << "    struct grammar_" << i->first << "_type\n"
                         "    {\n"
                         "        unsigned c;\n"
                         "        unsigned char l[" << i->second.rule_count << "];\n"
                         "    };\n"
                         "    extern \"C\"\n"
                         "    {\n"
                         "        grammar_" << i->first << "_type grammar_" << i->first << " =\n"
                         "        {\n"
                         "            " << i->second.rule_count << ",\n"
                         "            { ";
            for(size_t p=0; p<i->second.rule_count; ++p)
            {
                std::cout << (unsigned) i->second.rule_list[p];
                if(p+1 == i->second.rule_count) std::cout << "\n";
                else
                {
                    std::cout << ',';
                    if(p%10 == 9)
                        std::cout << "\n              ";
                }
            }
            std::cout << "    }   };  }\n";
        }
        std::cout <<
            "}\n";
    }
private:
};

static GrammarDumper dumper;


#line 1062 "fpoptimizer/grammar_parser.y"
typedef union {
    /* Note: Because bison's token type is an union or a simple type,
     *       anything that has constructors and destructors must be
     *       carried behind pointers here.
     */
    GrammarData::Rule*          r;
    GrammarData::FunctionType*  f;
    GrammarData::MatchedParams* p;
    GrammarData::ParamSpec*     a;

    double             num;
    unsigned           index;
    OPCODE             opcode;
} yy_FPoptimizerGrammarParser_stype;
#define YY_FPoptimizerGrammarParser_STYPE yy_FPoptimizerGrammarParser_stype

#line 88 "/usr/share/bison++/bison.cc"
/* %{ and %header{ and %union, during decl */
#define YY_FPoptimizerGrammarParser_BISON 1

#ifndef YY_FPoptimizerGrammarParser_COMPATIBILITY
 #ifndef YY_USE_CLASS
  #define  YY_FPoptimizerGrammarParser_COMPATIBILITY 1
 #else
  #define  YY_FPoptimizerGrammarParser_COMPATIBILITY 0
 #endif
#endif

#if YY_FPoptimizerGrammarParser_COMPATIBILITY != 0
 /* backward compatibility */
 #ifdef YYLTYPE
  #ifndef YY_FPoptimizerGrammarParser_LTYPE
   #define YY_FPoptimizerGrammarParser_LTYPE YYLTYPE
  #endif
 #endif
/* Testing alternative bison solution
   /#ifdef YYSTYPE*/
#ifndef YY_FPoptimizerGrammarParser_STYPE 
   #define YY_FPoptimizerGrammarParser_STYPE YYSTYPE
#endif
/*#endif*/
 #ifdef YYDEBUG
  #ifndef YY_FPoptimizerGrammarParser_DEBUG
   #define  YY_FPoptimizerGrammarParser_DEBUG YYDEBUG
  #endif
 #endif
 
 /* use goto to be compatible */
 #ifndef YY_FPoptimizerGrammarParser_USE_GOTO
  #define YY_FPoptimizerGrammarParser_USE_GOTO 1
 #endif
#endif

/* use no goto to be clean in C++ */
#ifndef YY_FPoptimizerGrammarParser_USE_GOTO
 #define YY_FPoptimizerGrammarParser_USE_GOTO 0
#endif

#ifndef YY_FPoptimizerGrammarParser_PURE

 #line 130 "/usr/share/bison++/bison.cc"
#define YY_FPoptimizerGrammarParser_PURE 1

#line 130 "/usr/share/bison++/bison.cc"
/*  YY_FPoptimizerGrammarParser_PURE */
#endif

/* section apres lecture def, avant lecture grammaire S2 */

 #line 134 "/usr/share/bison++/bison.cc"

#line 134 "/usr/share/bison++/bison.cc"
/* prefix */
#ifndef YY_FPoptimizerGrammarParser_DEBUG

 #line 136 "/usr/share/bison++/bison.cc"

#line 136 "/usr/share/bison++/bison.cc"
/* YY_FPoptimizerGrammarParser_DEBUG */
#endif


#ifndef YY_FPoptimizerGrammarParser_LSP_NEEDED

 #line 141 "/usr/share/bison++/bison.cc"

#line 141 "/usr/share/bison++/bison.cc"
 /* YY_FPoptimizerGrammarParser_LSP_NEEDED*/
#endif



/* DEFAULT LTYPE*/
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
#ifndef YY_FPoptimizerGrammarParser_LTYPE
#ifndef BISON_YYLTYPE_ISDECLARED
#define BISON_YYLTYPE_ISDECLARED
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#endif
#define YY_FPoptimizerGrammarParser_LTYPE yyltype
#endif
#endif
/* DEFAULT STYPE*/
      /* We used to use `unsigned long' as YY_FPoptimizerGrammarParser_STYPE on MSDOS,
	 but it seems better to be consistent.
	 Most programs should declare their own type anyway.  */

#ifndef YY_FPoptimizerGrammarParser_STYPE
#define YY_FPoptimizerGrammarParser_STYPE int
#endif
/* DEFAULT MISCELANEOUS */
#ifndef YY_FPoptimizerGrammarParser_PARSE
#define YY_FPoptimizerGrammarParser_PARSE yyparse
#endif
#ifndef YY_FPoptimizerGrammarParser_LEX
#define YY_FPoptimizerGrammarParser_LEX yylex
#endif
#ifndef YY_FPoptimizerGrammarParser_LVAL
#define YY_FPoptimizerGrammarParser_LVAL yylval
#endif
#ifndef YY_FPoptimizerGrammarParser_LLOC
#define YY_FPoptimizerGrammarParser_LLOC yylloc
#endif
#ifndef YY_FPoptimizerGrammarParser_CHAR
#define YY_FPoptimizerGrammarParser_CHAR yychar
#endif
#ifndef YY_FPoptimizerGrammarParser_NERRS
#define YY_FPoptimizerGrammarParser_NERRS yynerrs
#endif
#ifndef YY_FPoptimizerGrammarParser_DEBUG_FLAG
#define YY_FPoptimizerGrammarParser_DEBUG_FLAG yydebug
#endif
#ifndef YY_FPoptimizerGrammarParser_ERROR
#define YY_FPoptimizerGrammarParser_ERROR yyerror
#endif

#ifndef YY_FPoptimizerGrammarParser_PARSE_PARAM
 #ifndef YY_USE_CLASS
  #ifdef YYPARSE_PARAM
   #define YY_FPoptimizerGrammarParser_PARSE_PARAM void* YYPARSE_PARAM 
  #else
   #ifndef __STDC__
    #ifndef __cplusplus
     #define YY_FPoptimizerGrammarParser_PARSE_PARAM
    #endif
   #endif
  #endif
 #endif
 #ifndef YY_FPoptimizerGrammarParser_PARSE_PARAM
  #define YY_FPoptimizerGrammarParser_PARSE_PARAM void
 #endif
#endif

#if YY_FPoptimizerGrammarParser_COMPATIBILITY != 0
/* backward compatibility */
#ifdef YY_FPoptimizerGrammarParser_LTYPE
#ifndef YYLTYPE
#define YYLTYPE YY_FPoptimizerGrammarParser_LTYPE
#else
/* WARNING obsolete !!! user defined YYLTYPE not reported into generated header */
#endif
#endif

/* Removed due to bison compabilityproblems
/#ifndef YYSTYPE
/#define YYSTYPE YY_FPoptimizerGrammarParser_STYPE
/#else*/
/* WARNING obsolete !!! user defined YYSTYPE not reported into generated header */
/*#endif*/

#ifdef YY_FPoptimizerGrammarParser_PURE
#  ifndef YYPURE
#    define YYPURE YY_FPoptimizerGrammarParser_PURE
#  endif
#endif

#ifdef YY_FPoptimizerGrammarParser_DEBUG
#  ifndef YYDEBUG
#    define YYDEBUG YY_FPoptimizerGrammarParser_DEBUG 
#  endif
#endif

#ifndef YY_FPoptimizerGrammarParser_ERROR_VERBOSE
 #ifdef YYERROR_VERBOSE
  #define YY_FPoptimizerGrammarParser_ERROR_VERBOSE YYERROR_VERBOSE
 #endif
#endif

#ifndef YY_FPoptimizerGrammarParser_LSP_NEEDED
#  ifdef YYLSP_NEEDED
#    define YY_FPoptimizerGrammarParser_LSP_NEEDED YYLSP_NEEDED
#  endif
#endif

#endif

#ifndef YY_USE_CLASS
/* TOKEN C */

 #line 263 "/usr/share/bison++/bison.cc"
#define	NUMERIC_CONSTANT	258
#define	NAMEDHOLDER_TOKEN	259
#define	RESTHOLDER_TOKEN	260
#define	IMMEDHOLDER_TOKEN	261
#define	BUILTIN_FUNC_NAME	262
#define	OPCODE	263
#define	UNARY_TRANSFORMATION	264
#define	PARAM_CONSTRAINT	265
#define	NEWLINE	266
#define	SUBST_OP_COLON	267
#define	SUBST_OP_ARROW	268


#line 263 "/usr/share/bison++/bison.cc"
 /* #defines tokens */
#else
/* CLASS */
#ifndef YY_FPoptimizerGrammarParser_CLASS
#define YY_FPoptimizerGrammarParser_CLASS FPoptimizerGrammarParser
#endif
#ifndef YY_FPoptimizerGrammarParser_INHERIT
#define YY_FPoptimizerGrammarParser_INHERIT
#endif
#ifndef YY_FPoptimizerGrammarParser_MEMBERS
#define YY_FPoptimizerGrammarParser_MEMBERS 
#endif
#ifndef YY_FPoptimizerGrammarParser_LEX_BODY
#define YY_FPoptimizerGrammarParser_LEX_BODY  
#endif
#ifndef YY_FPoptimizerGrammarParser_ERROR_BODY
#define YY_FPoptimizerGrammarParser_ERROR_BODY  
#endif
#ifndef YY_FPoptimizerGrammarParser_CONSTRUCTOR_PARAM
#define YY_FPoptimizerGrammarParser_CONSTRUCTOR_PARAM
#endif
#ifndef YY_FPoptimizerGrammarParser_CONSTRUCTOR_CODE
#define YY_FPoptimizerGrammarParser_CONSTRUCTOR_CODE
#endif
#ifndef YY_FPoptimizerGrammarParser_CONSTRUCTOR_INIT
#define YY_FPoptimizerGrammarParser_CONSTRUCTOR_INIT
#endif
/* choose between enum and const */
#ifndef YY_FPoptimizerGrammarParser_USE_CONST_TOKEN
#define YY_FPoptimizerGrammarParser_USE_CONST_TOKEN 0
/* yes enum is more compatible with flex,  */
/* so by default we use it */ 
#endif
#if YY_FPoptimizerGrammarParser_USE_CONST_TOKEN != 0
#ifndef YY_FPoptimizerGrammarParser_ENUM_TOKEN
#define YY_FPoptimizerGrammarParser_ENUM_TOKEN yy_FPoptimizerGrammarParser_enum_token
#endif
#endif

class YY_FPoptimizerGrammarParser_CLASS YY_FPoptimizerGrammarParser_INHERIT
{
public: 
#if YY_FPoptimizerGrammarParser_USE_CONST_TOKEN != 0
/* static const int token ... */

 #line 307 "/usr/share/bison++/bison.cc"
static const int NUMERIC_CONSTANT;
static const int NAMEDHOLDER_TOKEN;
static const int RESTHOLDER_TOKEN;
static const int IMMEDHOLDER_TOKEN;
static const int BUILTIN_FUNC_NAME;
static const int OPCODE;
static const int UNARY_TRANSFORMATION;
static const int PARAM_CONSTRAINT;
static const int NEWLINE;
static const int SUBST_OP_COLON;
static const int SUBST_OP_ARROW;


#line 307 "/usr/share/bison++/bison.cc"
 /* decl const */
#else
enum YY_FPoptimizerGrammarParser_ENUM_TOKEN { YY_FPoptimizerGrammarParser_NULL_TOKEN=0

 #line 310 "/usr/share/bison++/bison.cc"
	,NUMERIC_CONSTANT=258
	,NAMEDHOLDER_TOKEN=259
	,RESTHOLDER_TOKEN=260
	,IMMEDHOLDER_TOKEN=261
	,BUILTIN_FUNC_NAME=262
	,OPCODE=263
	,UNARY_TRANSFORMATION=264
	,PARAM_CONSTRAINT=265
	,NEWLINE=266
	,SUBST_OP_COLON=267
	,SUBST_OP_ARROW=268


#line 310 "/usr/share/bison++/bison.cc"
 /* enum token */
     }; /* end of enum declaration */
#endif
public:
 int YY_FPoptimizerGrammarParser_PARSE (YY_FPoptimizerGrammarParser_PARSE_PARAM);
 virtual void YY_FPoptimizerGrammarParser_ERROR(char *msg) YY_FPoptimizerGrammarParser_ERROR_BODY;
#ifdef YY_FPoptimizerGrammarParser_PURE
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
 virtual int  YY_FPoptimizerGrammarParser_LEX (YY_FPoptimizerGrammarParser_STYPE *YY_FPoptimizerGrammarParser_LVAL,YY_FPoptimizerGrammarParser_LTYPE *YY_FPoptimizerGrammarParser_LLOC) YY_FPoptimizerGrammarParser_LEX_BODY;
#else
 virtual int  YY_FPoptimizerGrammarParser_LEX (YY_FPoptimizerGrammarParser_STYPE *YY_FPoptimizerGrammarParser_LVAL) YY_FPoptimizerGrammarParser_LEX_BODY;
#endif
#else
 virtual int YY_FPoptimizerGrammarParser_LEX() YY_FPoptimizerGrammarParser_LEX_BODY;
 YY_FPoptimizerGrammarParser_STYPE YY_FPoptimizerGrammarParser_LVAL;
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
 YY_FPoptimizerGrammarParser_LTYPE YY_FPoptimizerGrammarParser_LLOC;
#endif
 int   YY_FPoptimizerGrammarParser_NERRS;
 int    YY_FPoptimizerGrammarParser_CHAR;
#endif
#if YY_FPoptimizerGrammarParser_DEBUG != 0
 int YY_FPoptimizerGrammarParser_DEBUG_FLAG;   /*  nonzero means print parse trace     */
#endif
public:
 YY_FPoptimizerGrammarParser_CLASS(YY_FPoptimizerGrammarParser_CONSTRUCTOR_PARAM);
public:
 YY_FPoptimizerGrammarParser_MEMBERS 
};
/* other declare folow */
#if YY_FPoptimizerGrammarParser_USE_CONST_TOKEN != 0

 #line 341 "/usr/share/bison++/bison.cc"
const int YY_FPoptimizerGrammarParser_CLASS::NUMERIC_CONSTANT=258;
const int YY_FPoptimizerGrammarParser_CLASS::NAMEDHOLDER_TOKEN=259;
const int YY_FPoptimizerGrammarParser_CLASS::RESTHOLDER_TOKEN=260;
const int YY_FPoptimizerGrammarParser_CLASS::IMMEDHOLDER_TOKEN=261;
const int YY_FPoptimizerGrammarParser_CLASS::BUILTIN_FUNC_NAME=262;
const int YY_FPoptimizerGrammarParser_CLASS::OPCODE=263;
const int YY_FPoptimizerGrammarParser_CLASS::UNARY_TRANSFORMATION=264;
const int YY_FPoptimizerGrammarParser_CLASS::PARAM_CONSTRAINT=265;
const int YY_FPoptimizerGrammarParser_CLASS::NEWLINE=266;
const int YY_FPoptimizerGrammarParser_CLASS::SUBST_OP_COLON=267;
const int YY_FPoptimizerGrammarParser_CLASS::SUBST_OP_ARROW=268;


#line 341 "/usr/share/bison++/bison.cc"
 /* const YY_FPoptimizerGrammarParser_CLASS::token */
#endif
/*apres const  */
YY_FPoptimizerGrammarParser_CLASS::YY_FPoptimizerGrammarParser_CLASS(YY_FPoptimizerGrammarParser_CONSTRUCTOR_PARAM) YY_FPoptimizerGrammarParser_CONSTRUCTOR_INIT
{
#if YY_FPoptimizerGrammarParser_DEBUG != 0
YY_FPoptimizerGrammarParser_DEBUG_FLAG=0;
#endif
YY_FPoptimizerGrammarParser_CONSTRUCTOR_CODE;
}
#endif

 #line 352 "/usr/share/bison++/bison.cc"


#define	YYFINAL		43
#define	YYFLAG		-32768
#define	YYNTBASE	20

#define YYTRANSLATE(x) ((unsigned)(x) <= 268 ? yytranslate[x] : 27)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,    18,
    19,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    14,     2,    15,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    16,     2,    17,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13
};

#if YY_FPoptimizerGrammarParser_DEBUG != 0
static const short yyprhs[] = {     0,
     0,     3,     7,    10,    11,    16,    21,    26,    28,    33,
    38,    41,    44,    47,    48,    50,    53,    58,    61,    66,
    69,    72
};

static const short yyrhs[] = {    20,
    21,     0,    20,    26,    21,     0,    20,    11,     0,     0,
    22,    13,    25,    11,     0,    22,    13,    23,    11,     0,
    22,    12,    24,    11,     0,    23,     0,     8,    14,    24,
    15,     0,     8,    16,    24,    17,     0,     8,    24,     0,
    24,    25,     0,    24,     5,     0,     0,     3,     0,     6,
    26,     0,     7,    18,    24,    19,     0,     4,    26,     0,
    18,    23,    19,    26,     0,     9,    25,     0,    26,    10,
     0,     0
};

#endif

#if (YY_FPoptimizerGrammarParser_DEBUG != 0) || defined(YY_FPoptimizerGrammarParser_ERROR_VERBOSE) 
static const short yyrline[] = { 0,
  1098,  1104,  1116,  1117,  1120,  1130,  1148,  1169,  1181,  1190,
  1198,  1207,  1212,  1222,  1228,  1233,  1238,  1249,  1254,  1259,
  1273,  1278
};

static const char * const yytname[] = {   "$","error","$illegal.","NUMERIC_CONSTANT",
"NAMEDHOLDER_TOKEN","RESTHOLDER_TOKEN","IMMEDHOLDER_TOKEN","BUILTIN_FUNC_NAME",
"OPCODE","UNARY_TRANSFORMATION","PARAM_CONSTRAINT","NEWLINE","SUBST_OP_COLON",
"SUBST_OP_ARROW","'['","']'","'{'","'}'","'('","')'","grammar","substitution",
"function_match","function","paramlist","param","param_constraints",""
};
#endif

static const short yyr1[] = {     0,
    20,    20,    20,    20,    21,    21,    21,    22,    23,    23,
    23,    24,    24,    24,    25,    25,    25,    25,    25,    25,
    26,    26
};

static const short yyr2[] = {     0,
     2,     3,     2,     0,     4,     4,     4,     1,     4,     4,
     2,     2,     2,     0,     1,     2,     4,     2,     4,     2,
     2,     0
};

static const short yydefact[] = {     4,
    22,    14,     3,     1,     0,     8,     0,    14,    14,    11,
    14,     0,    21,     2,     0,     0,    15,    22,    13,    22,
     0,     0,     0,    12,     0,     0,     0,     9,    10,    18,
    16,    14,    20,     0,     7,     6,     5,     0,    22,    17,
    19,     0,     0
};

static const short yydefgoto[] = {     1,
     4,     5,     6,    10,    24,     7
};

static const short yypact[] = {-32768,
    71,    20,-32768,-32768,    29,-32768,    30,-32768,-32768,    52,
-32768,    59,-32768,-32768,    10,    26,-32768,-32768,-32768,-32768,
     9,    69,    31,-32768,    42,    -1,     7,-32768,-32768,    40,
    40,-32768,-32768,    33,-32768,-32768,-32768,     2,-32768,-32768,
    40,    54,-32768
};

static const short yypgoto[] = {-32768,
    57,-32768,    14,    -8,     0,   -16
};


#define	YYLAST		87


static const short yytable[] = {    15,
    16,    30,    25,    31,    17,    18,    19,    20,    21,    36,
    22,    27,    17,    18,    19,    20,    21,    37,    22,    23,
    40,    33,    41,    38,    28,    26,    32,    23,    17,    18,
    19,    20,    21,     8,    22,     9,    34,     2,     2,    13,
    11,    12,    29,    23,    17,    18,    19,    20,    21,    13,
    22,    39,    35,    43,    17,    18,    19,    20,    21,    23,
    22,    17,    18,    14,    20,    21,     2,    22,     0,    23,
    42,    17,    18,     0,    20,    21,    23,    22,     2,     0,
     0,     3,     0,     0,     0,     0,    23
};

static const short yycheck[] = {     8,
     9,    18,    11,    20,     3,     4,     5,     6,     7,    11,
     9,    12,     3,     4,     5,     6,     7,    11,     9,    18,
    19,    22,    39,    32,    15,    12,    18,    18,     3,     4,
     5,     6,     7,    14,     9,    16,    23,     8,     8,    10,
    12,    13,    17,    18,     3,     4,     5,     6,     7,    10,
     9,    19,    11,     0,     3,     4,     5,     6,     7,    18,
     9,     3,     4,     7,     6,     7,     8,     9,    -1,    18,
     0,     3,     4,    -1,     6,     7,    18,     9,     8,    -1,
    -1,    11,    -1,    -1,    -1,    -1,    18
};

#line 352 "/usr/share/bison++/bison.cc"
 /* fattrs + tables */

/* parser code folow  */


/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: dollar marks section change
   the next  is replaced by the list of actions, each action
   as one case of the switch.  */ 

#if YY_FPoptimizerGrammarParser_USE_GOTO != 0
/* 
 SUPRESSION OF GOTO : on some C++ compiler (sun c++)
  the goto is strictly forbidden if any constructor/destructor
  is used in the whole function (very stupid isn't it ?)
 so goto are to be replaced with a 'while/switch/case construct'
 here are the macro to keep some apparent compatibility
*/
#define YYGOTO(lb) {yy_gotostate=lb;continue;}
#define YYBEGINGOTO  enum yy_labels yy_gotostate=yygotostart; \
                     for(;;) switch(yy_gotostate) { case yygotostart: {
#define YYLABEL(lb) } case lb: {
#define YYENDGOTO } } 
#define YYBEGINDECLARELABEL enum yy_labels {yygotostart
#define YYDECLARELABEL(lb) ,lb
#define YYENDDECLARELABEL  };
#else
/* macro to keep goto */
#define YYGOTO(lb) goto lb
#define YYBEGINGOTO 
#define YYLABEL(lb) lb:
#define YYENDGOTO
#define YYBEGINDECLARELABEL 
#define YYDECLARELABEL(lb)
#define YYENDDECLARELABEL 
#endif
/* LABEL DECLARATION */
YYBEGINDECLARELABEL
  YYDECLARELABEL(yynewstate)
  YYDECLARELABEL(yybackup)
/* YYDECLARELABEL(yyresume) */
  YYDECLARELABEL(yydefault)
  YYDECLARELABEL(yyreduce)
  YYDECLARELABEL(yyerrlab)   /* here on detecting error */
  YYDECLARELABEL(yyerrlab1)   /* here on error raised explicitly by an action */
  YYDECLARELABEL(yyerrdefault)  /* current state does not do anything special for the error token. */
  YYDECLARELABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */
  YYDECLARELABEL(yyerrhandle)  
YYENDDECLARELABEL
/* ALLOCA SIMULATION */
/* __HAVE_NO_ALLOCA */
#ifdef __HAVE_NO_ALLOCA
int __alloca_free_ptr(char *ptr,char *ref)
{if(ptr!=ref) free(ptr);
 return 0;}

#define __ALLOCA_alloca(size) malloc(size)
#define __ALLOCA_free(ptr,ref) __alloca_free_ptr((char *)ptr,(char *)ref)

#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		    __ALLOCA_free(yyls,yylsa)+\
		   (num)); } while(0)
#else
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		   (num)); } while(0)
#endif
#else
#define __ALLOCA_return(num) do { return(num); } while(0)
#define __ALLOCA_alloca(size) alloca(size)
#define __ALLOCA_free(ptr,ref) 
#endif

/* ENDALLOCA SIMULATION */

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (YY_FPoptimizerGrammarParser_CHAR = YYEMPTY)
#define YYEMPTY         -2
#define YYEOF           0
#define YYACCEPT        __ALLOCA_return(0)
#define YYABORT         __ALLOCA_return(1)
#define YYERROR         YYGOTO(yyerrlab1)
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL          YYGOTO(yyerrlab)
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do                                                              \
  if (YY_FPoptimizerGrammarParser_CHAR == YYEMPTY && yylen == 1)                               \
    { YY_FPoptimizerGrammarParser_CHAR = (token), YY_FPoptimizerGrammarParser_LVAL = (value);                 \
      yychar1 = YYTRANSLATE (YY_FPoptimizerGrammarParser_CHAR);                                \
      YYPOPSTACK;                                               \
      YYGOTO(yybackup);                                            \
    }                                                           \
  else                                                          \
    { YY_FPoptimizerGrammarParser_ERROR ("syntax error: cannot back up"); YYERROR; }   \
while (0)

#define YYTERROR        1
#define YYERRCODE       256

#ifndef YY_FPoptimizerGrammarParser_PURE
/* UNPURE */
#define YYLEX           YY_FPoptimizerGrammarParser_LEX()
#ifndef YY_USE_CLASS
/* If nonreentrant, and not class , generate the variables here */
int     YY_FPoptimizerGrammarParser_CHAR;                      /*  the lookahead symbol        */
YY_FPoptimizerGrammarParser_STYPE      YY_FPoptimizerGrammarParser_LVAL;              /*  the semantic value of the */
				/*  lookahead symbol    */
int YY_FPoptimizerGrammarParser_NERRS;                 /*  number of parse errors so far */
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
YY_FPoptimizerGrammarParser_LTYPE YY_FPoptimizerGrammarParser_LLOC;   /*  location data for the lookahead     */
			/*  symbol                              */
#endif
#endif


#else
/* PURE */
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
#define YYLEX           YY_FPoptimizerGrammarParser_LEX(&YY_FPoptimizerGrammarParser_LVAL, &YY_FPoptimizerGrammarParser_LLOC)
#else
#define YYLEX           YY_FPoptimizerGrammarParser_LEX(&YY_FPoptimizerGrammarParser_LVAL)
#endif
#endif
#ifndef YY_USE_CLASS
#if YY_FPoptimizerGrammarParser_DEBUG != 0
int YY_FPoptimizerGrammarParser_DEBUG_FLAG;                    /*  nonzero means print parse trace     */
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif
#endif



/*  YYINITDEPTH indicates the initial size of the parser's stacks       */

#ifndef YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif


#if __GNUC__ > 1                /* GNU C and GNU C++ define this.  */
#define __yy_bcopy(FROM,TO,COUNT)       __builtin_memcpy(TO,FROM,COUNT)
#else                           /* not GNU C or C++ */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */

#ifdef __cplusplus
static void __yy_bcopy (char *from, char *to, int count)
#else
#ifdef __STDC__
static void __yy_bcopy (char *from, char *to, int count)
#else
static void __yy_bcopy (from, to, count)
     char *from;
     char *to;
     int count;
#endif
#endif
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}
#endif


int
#ifdef YY_USE_CLASS
 YY_FPoptimizerGrammarParser_CLASS::
#endif
     YY_FPoptimizerGrammarParser_PARSE(YY_FPoptimizerGrammarParser_PARSE_PARAM)
#ifndef __STDC__
#ifndef __cplusplus
#ifndef YY_USE_CLASS
/* parameter definition without protypes */
YY_FPoptimizerGrammarParser_PARSE_PARAM_DEF
#endif
#endif
#endif
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YY_FPoptimizerGrammarParser_STYPE *yyvsp;
  int yyerrstatus;      /*  number of tokens to shift before error messages enabled */
  int yychar1=0;          /*  lookahead token as an internal (translated) token number */

  short yyssa[YYINITDEPTH];     /*  the state stack                     */
  YY_FPoptimizerGrammarParser_STYPE yyvsa[YYINITDEPTH];        /*  the semantic value stack            */

  short *yyss = yyssa;          /*  refer to the stacks thru separate pointers */
  YY_FPoptimizerGrammarParser_STYPE *yyvs = yyvsa;     /*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
  YY_FPoptimizerGrammarParser_LTYPE yylsa[YYINITDEPTH];        /*  the location stack                  */
  YY_FPoptimizerGrammarParser_LTYPE *yyls = yylsa;
  YY_FPoptimizerGrammarParser_LTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YY_FPoptimizerGrammarParser_PURE
  int YY_FPoptimizerGrammarParser_CHAR;
  YY_FPoptimizerGrammarParser_STYPE YY_FPoptimizerGrammarParser_LVAL;
  int YY_FPoptimizerGrammarParser_NERRS;
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
  YY_FPoptimizerGrammarParser_LTYPE YY_FPoptimizerGrammarParser_LLOC;
#endif
#endif

  YY_FPoptimizerGrammarParser_STYPE yyval;             /*  the variable used to return         */
				/*  semantic values from the action     */
				/*  routines                            */

  int yylen;
/* start loop, in which YYGOTO may be used. */
YYBEGINGOTO

#if YY_FPoptimizerGrammarParser_DEBUG != 0
  if (YY_FPoptimizerGrammarParser_DEBUG_FLAG)
    fprintf(stderr, "Starting parse\n");
#endif
  yystate = 0;
  yyerrstatus = 0;
  YY_FPoptimizerGrammarParser_NERRS = 0;
  YY_FPoptimizerGrammarParser_CHAR = YYEMPTY;          /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
YYLABEL(yynewstate)

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YY_FPoptimizerGrammarParser_STYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
      YY_FPoptimizerGrammarParser_LTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  YY_FPoptimizerGrammarParser_ERROR("parser stack overflow");
	  __ALLOCA_return(2);
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) __ALLOCA_alloca (yystacksize * sizeof (*yyssp));
      __yy_bcopy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      __ALLOCA_free(yyss1,yyssa);
      yyvs = (YY_FPoptimizerGrammarParser_STYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yyvsp));
      __yy_bcopy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
      __ALLOCA_free(yyvs1,yyvsa);
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
      yyls = (YY_FPoptimizerGrammarParser_LTYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yylsp));
      __yy_bcopy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
      __ALLOCA_free(yyls1,yylsa);
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YY_FPoptimizerGrammarParser_DEBUG != 0
      if (YY_FPoptimizerGrammarParser_DEBUG_FLAG)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YY_FPoptimizerGrammarParser_DEBUG != 0
  if (YY_FPoptimizerGrammarParser_DEBUG_FLAG)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  YYGOTO(yybackup);
YYLABEL(yybackup)

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* YYLABEL(yyresume) */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yydefault);

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (YY_FPoptimizerGrammarParser_CHAR == YYEMPTY)
    {
#if YY_FPoptimizerGrammarParser_DEBUG != 0
      if (YY_FPoptimizerGrammarParser_DEBUG_FLAG)
	fprintf(stderr, "Reading a token: ");
#endif
      YY_FPoptimizerGrammarParser_CHAR = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (YY_FPoptimizerGrammarParser_CHAR <= 0)           /* This means end of input. */
    {
      yychar1 = 0;
      YY_FPoptimizerGrammarParser_CHAR = YYEOF;                /* Don't call YYLEX any more */

#if YY_FPoptimizerGrammarParser_DEBUG != 0
      if (YY_FPoptimizerGrammarParser_DEBUG_FLAG)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(YY_FPoptimizerGrammarParser_CHAR);

#if YY_FPoptimizerGrammarParser_DEBUG != 0
      if (YY_FPoptimizerGrammarParser_DEBUG_FLAG)
	{
	  fprintf (stderr, "Next token is %d (%s", YY_FPoptimizerGrammarParser_CHAR, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, YY_FPoptimizerGrammarParser_CHAR, YY_FPoptimizerGrammarParser_LVAL);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    YYGOTO(yydefault);

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrlab);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrlab);

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YY_FPoptimizerGrammarParser_DEBUG != 0
  if (YY_FPoptimizerGrammarParser_DEBUG_FLAG)
    fprintf(stderr, "Shifting token %d (%s), ", YY_FPoptimizerGrammarParser_CHAR, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (YY_FPoptimizerGrammarParser_CHAR != YYEOF)
    YY_FPoptimizerGrammarParser_CHAR = YYEMPTY;

  *++yyvsp = YY_FPoptimizerGrammarParser_LVAL;
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
  *++yylsp = YY_FPoptimizerGrammarParser_LLOC;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  YYGOTO(yynewstate);

/* Do the default action for the current state.  */
YYLABEL(yydefault)

  yyn = yydefact[yystate];
  if (yyn == 0)
    YYGOTO(yyerrlab);

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
YYLABEL(yyreduce)
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YY_FPoptimizerGrammarParser_DEBUG != 0
  if (YY_FPoptimizerGrammarParser_DEBUG_FLAG)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


 #line 839 "/usr/share/bison++/bison.cc"

  switch (yyn) {

case 1:
#line 1100 "fpoptimizer/grammar_parser.y"
{
        this->grammar.AddRule(*yyvsp[0].r);
        delete yyvsp[0].r;
      ;
    break;}
case 2:
#line 1105 "fpoptimizer/grammar_parser.y"
{
        if(yyvsp[-1].index != Value_Logical)
        {
            char msg[] = "Only @L rule constraint is allowed for now";
            yyerror(msg); YYERROR;
        }
        if(yyvsp[-1].index & Value_Logical)
            yyvsp[0].r->SetLogicalContextOnly();
        this->grammar.AddRule(*yyvsp[0].r);
        delete yyvsp[0].r;
      ;
    break;}
case 5:
#line 1123 "fpoptimizer/grammar_parser.y"
{
        yyvsp[-1].a->RecursivelySetDefaultParamMatchingType();

        yyval.r = new GrammarData::Rule(ProduceNewTree, *yyvsp[-3].f, yyvsp[-1].a);
        delete yyvsp[-3].f;
      ;
    break;}
case 6:
#line 1133 "fpoptimizer/grammar_parser.y"
{
        GrammarData::ParamSpec* p = new GrammarData::ParamSpec(yyvsp[-1].f);
        p->RecursivelySetDefaultParamMatchingType();
        /*if(!$3->Params.EnsureNoRepeatedNamedHolders())
        {
            char msg[] = "The replacement function may not specify the same variable twice";
            yyerror(msg); YYERROR;
        }*/

        yyval.r = new GrammarData::Rule(ProduceNewTree, *yyvsp[-3].f, p);

        //std::cout << GrammarDumper().Dump(*new GrammarData::ParamSpec($3)) << "\n";
        delete yyvsp[-3].f;
      ;
    break;}
case 7:
#line 1150 "fpoptimizer/grammar_parser.y"
{
        /*if($1->Params.RestHolderIndex != 0)
        {
            char msg[] = "Restholder is not valid in the outermost function when ReplaceParams is used";
            yyerror(msg); YYERROR;
        }*/
        yyvsp[-1].p->RecursivelySetDefaultParamMatchingType();
        /*if(!$3->EnsureNoRepeatedNamedHolders())
        {
            char msg[] = "The replacement function may not specify the same variable twice";
            yyerror(msg); YYERROR;
        }*/

        yyval.r = new GrammarData::Rule(ReplaceParams, *yyvsp[-3].f, *yyvsp[-1].p);
        delete yyvsp[-3].f;
        delete yyvsp[-1].p;
      ;
    break;}
case 8:
#line 1171 "fpoptimizer/grammar_parser.y"
{
           if(!yyvsp[0].f->Params.EnsureNoVariableCoverageParams_InPositionalParamLists())
           {
               char msg[] = "Restholders such as <1>, must not occur in bracketed param lists on the matching side";
               yyerror(msg); YYERROR;
           }
           yyval.f = yyvsp[0].f;
       ;
    break;}
case 9:
#line 1186 "fpoptimizer/grammar_parser.y"
{
         yyval.f = new GrammarData::FunctionType(yyvsp[-3].opcode, *yyvsp[-1].p);
         delete yyvsp[-1].p;
       ;
    break;}
case 10:
#line 1194 "fpoptimizer/grammar_parser.y"
{
         yyval.f = new GrammarData::FunctionType(yyvsp[-3].opcode, *yyvsp[-1].p->SetType(SelectedParams));
         delete yyvsp[-1].p;
       ;
    break;}
case 11:
#line 1201 "fpoptimizer/grammar_parser.y"
{
         yyval.f = new GrammarData::FunctionType(yyvsp[-1].opcode, *yyvsp[0].p->SetType(AnyParams));
         delete yyvsp[0].p;
       ;
    break;}
case 12:
#line 1209 "fpoptimizer/grammar_parser.y"
{
          yyval.p = yyvsp[-1].p->AddParam(yyvsp[0].a);
        ;
    break;}
case 13:
#line 1213 "fpoptimizer/grammar_parser.y"
{
          if(yyvsp[-1].p->RestHolderIndex != 0)
          {
              char msg[] = "Illegal attempt to specify two restholders for the same param list";
              yyerror(msg); YYERROR;
          }
          yyvsp[-1].p->RestHolderIndex = yyvsp[0].index;
          yyval.p = yyvsp[-1].p;
        ;
    break;}
case 14:
#line 1223 "fpoptimizer/grammar_parser.y"
{
          yyval.p = new GrammarData::MatchedParams;
        ;
    break;}
case 15:
#line 1230 "fpoptimizer/grammar_parser.y"
{
         yyval.a = new GrammarData::ParamSpec(yyvsp[0].num);
       ;
    break;}
case 16:
#line 1234 "fpoptimizer/grammar_parser.y"
{
         yyval.a = new GrammarData::ParamSpec(yyvsp[-1].index, GrammarData::ParamSpec::ParamHolderTag());
         yyval.a->SetConstraint(yyvsp[0].index | Constness_Const);
       ;
    break;}
case 17:
#line 1239 "fpoptimizer/grammar_parser.y"
{
         /* Verify that $3 consists of constants */
         yyval.a = new GrammarData::ParamSpec(yyvsp[-3].opcode, yyvsp[-1].p->GetParams() );
         if(!yyval.a->VerifyIsConstant())
         {
             char msg[] = "Not constant";
             yyerror(msg); YYERROR;
         }
         delete yyvsp[-1].p;
       ;
    break;}
case 18:
#line 1250 "fpoptimizer/grammar_parser.y"
{
         yyval.a = new GrammarData::ParamSpec(yyvsp[-1].index + 2, GrammarData::ParamSpec::ParamHolderTag());
         yyval.a->SetConstraint(yyvsp[0].index);
       ;
    break;}
case 19:
#line 1255 "fpoptimizer/grammar_parser.y"
{
         yyval.a = new GrammarData::ParamSpec(yyvsp[-2].f);
         yyval.a->SetConstraint(yyvsp[0].index);
       ;
    break;}
case 20:
#line 1260 "fpoptimizer/grammar_parser.y"
{
         /* Verify that $2 is constant */
         if(!yyvsp[0].a->VerifyIsConstant())
         {
             char msg[] = "Not constant";
             yyerror(msg); YYERROR;
         }
         std::vector<GrammarData::ParamSpec*> tmp;
         tmp.push_back(yyvsp[0].a);
         yyval.a = new GrammarData::ParamSpec(yyvsp[-1].opcode, tmp);
       ;
    break;}
case 21:
#line 1275 "fpoptimizer/grammar_parser.y"
{
         yyval.index = yyvsp[-1].index | yyvsp[0].index;
       ;
    break;}
case 22:
#line 1279 "fpoptimizer/grammar_parser.y"
{
         yyval.index = 0;
       ;
    break;}
}

#line 839 "/usr/share/bison++/bison.cc"
   /* the action file gets copied in in place of this dollarsign  */
  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
  yylsp -= yylen;
#endif

#if YY_FPoptimizerGrammarParser_DEBUG != 0
  if (YY_FPoptimizerGrammarParser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = YY_FPoptimizerGrammarParser_LLOC.first_line;
      yylsp->first_column = YY_FPoptimizerGrammarParser_LLOC.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  YYGOTO(yynewstate);

YYLABEL(yyerrlab)   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++YY_FPoptimizerGrammarParser_NERRS;

#ifdef YY_FPoptimizerGrammarParser_ERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      YY_FPoptimizerGrammarParser_ERROR(msg);
	      free(msg);
	    }
	  else
	    YY_FPoptimizerGrammarParser_ERROR ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YY_FPoptimizerGrammarParser_ERROR_VERBOSE */
	YY_FPoptimizerGrammarParser_ERROR("parse error");
    }

  YYGOTO(yyerrlab1);
YYLABEL(yyerrlab1)   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (YY_FPoptimizerGrammarParser_CHAR == YYEOF)
	YYABORT;

#if YY_FPoptimizerGrammarParser_DEBUG != 0
      if (YY_FPoptimizerGrammarParser_DEBUG_FLAG)
	fprintf(stderr, "Discarding token %d (%s).\n", YY_FPoptimizerGrammarParser_CHAR, yytname[yychar1]);
#endif

      YY_FPoptimizerGrammarParser_CHAR = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;              /* Each real token shifted decrements this */

  YYGOTO(yyerrhandle);

YYLABEL(yyerrdefault)  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) YYGOTO(yydefault);
#endif

YYLABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
  yylsp--;
#endif

#if YY_FPoptimizerGrammarParser_DEBUG != 0
  if (YY_FPoptimizerGrammarParser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

YYLABEL(yyerrhandle)

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yyerrdefault);

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    YYGOTO(yyerrdefault);

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrpop);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrpop);

  if (yyn == YYFINAL)
    YYACCEPT;

#if YY_FPoptimizerGrammarParser_DEBUG != 0
  if (YY_FPoptimizerGrammarParser_DEBUG_FLAG)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = YY_FPoptimizerGrammarParser_LVAL;
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
  *++yylsp = YY_FPoptimizerGrammarParser_LLOC;
#endif

  yystate = yyn;
  YYGOTO(yynewstate);
/* end loop, in which YYGOTO may be used. */
  YYENDGOTO
}

/* END */

 #line 1038 "/usr/share/bison++/bison.cc"
#line 1283 "fpoptimizer/grammar_parser.y"


#ifndef FP_SUPPORT_OPTIMIZER
enum { cVar,cFetch,cPopNMov };
#endif

void FPoptimizerGrammarParser::yyerror(char* msg) // bison++ declares msg as char*.
{
    std::cerr << msg << std::endl;
    for(;;)
    {
        int c = std::fgetc(stdin);
        if(c == EOF) break;
        std::fputc(c, stderr);
    }
    exit(1);
}

int FPoptimizerGrammarParser::yylex(yy_FPoptimizerGrammarParser_stype* lval)
{
    int c = std::fgetc(stdin);
    switch(c)
    {
        case EOF: break;
        case '#':
            while(c != EOF && c != '\n') c = std::fgetc(stdin);
            return NEWLINE;
        case '\n':
        {
            c = std::fgetc(stdin);
            std::ungetc(c, stdin);
            if(c == '['
            || c == '$')
                return EOF;
            return NEWLINE;
        }
        case '+':
        {
            c = std::fgetc(stdin);
            std::ungetc(c, stdin);
            if(c == '(') { lval->opcode = cAdd; return BUILTIN_FUNC_NAME; }
            return '+';
        }
        case '*':
        {
            c = std::fgetc(stdin);
            std::ungetc(c, stdin);
            if(c == '(') { lval->opcode = cMul; return BUILTIN_FUNC_NAME; }
            return '*';
        }
        case '-':
        {
            int c2 = std::fgetc(stdin);
            if(c2 == '>') return SUBST_OP_ARROW;
            std::ungetc(c2, stdin);
            if(c2 >= '0' && c2 <= '9')
            {
                goto GotNumeric;
            }
            lval->opcode = cNeg;
            return UNARY_TRANSFORMATION;
        }
        case '/':
            lval->opcode = cInv;
            return UNARY_TRANSFORMATION;

        case '=':
        {
            int c2 = std::fgetc(stdin);
            std::ungetc(c2, stdin);
            return '=';
        }
        case '[': case '{':
        case ']': case '}':
        case '(':
        case ')':
            return c;
        case ' ':
        case '\t':
        case '\v':
        case '\r':
            return yylex(lval); // Counts as tail recursion, I hope
        case ':':
            return SUBST_OP_COLON;
        case '%': { lval->index = 0; return IMMEDHOLDER_TOKEN; }
        case '&': { lval->index = 1; return IMMEDHOLDER_TOKEN; }

        case '@':
        {
            int c2 = std::fgetc(stdin);
            switch(c2)
            {
                case 'E': { lval->index = Value_EvenInt; return PARAM_CONSTRAINT; }
                case 'O': { lval->index = Value_OddInt; return PARAM_CONSTRAINT; }
                case 'I': { lval->index = Value_IsInteger; return PARAM_CONSTRAINT; }
                case 'F': { lval->index = Value_NonInteger; return PARAM_CONSTRAINT; }
                case 'L': { lval->index = Value_Logical; return PARAM_CONSTRAINT; }
                case 'P': { lval->index = Sign_Positive; return PARAM_CONSTRAINT; }
                case 'N': { lval->index = Sign_Negative; return PARAM_CONSTRAINT; }
                case 'Q': { lval->index = Sign_NoIdea; return PARAM_CONSTRAINT; }
                case '1': { lval->index = Oneness_One; return PARAM_CONSTRAINT; }
                case 'M': { lval->index = Oneness_NotOne; return PARAM_CONSTRAINT; }
            }
            std::ungetc(c2, stdin);
            return '@';
        }
        case '<':
        {
            lval->index  = 0;
            for(;;)
            {
                c = std::fgetc(stdin);
                if(c < '0' || c > '9') { std::ungetc(c, stdin); break; }
                lval->index = lval->index * 10 + (c-'0');
            }
            c = std::fgetc(stdin);
            if(c != '>') std::ungetc(c, stdin);
            return RESTHOLDER_TOKEN;
        }
        case '0': case '1': case '2': case '3': case '4':
        case '5': case '6': case '7': case '8': case '9':
        {
        GotNumeric:;
            std::string NumBuf;
            NumBuf += (char)c;
            bool had_comma = false;
            for(;;)
            {
                c = std::fgetc(stdin);
                if(c >= '0' && c <= '9')  { NumBuf += (char)c; continue; }
                if(c == '.' && !had_comma){ had_comma = true; NumBuf += (char)c; continue; }
                std::ungetc(c, stdin);
                break;
            }
            lval->num = std::strtod(NumBuf.c_str(), 0);
            return NUMERIC_CONSTANT;
        }
        case 'A': case 'B': case 'C': case 'D': case 'E': case 'F':
        case 'G': case 'H': case 'I': case 'J': case 'K': case 'L':
        case 'M': case 'N': case 'O': case 'P': case 'Q': case 'R':
        case 'S': case 'T': case 'U': case 'V': case 'W': case 'X':
        case 'Y': case 'Z': case '_':
        case 'a': case 'b': case 'c': case 'd': case 'e': case 'f':
        case 'g': case 'h': case 'i': case 'j': case 'k': case 'l':
        case 'm': case 'n': case 'o': case 'p': case 'q': case 'r':
        case 's': case 't': case 'u': case 'v': case 'w': case 'x':
        case 'y': case 'z':
        {
            std::string IdBuf;
            IdBuf += (char)c;
            for(;;)
            {
                c = std::fgetc(stdin);
                if((c >= '0' && c <= '9')
                || c == '_'
                || (c >= 'a' && c <= 'z')
                || (c >= 'A' && c <= 'Z')) { IdBuf += (char)c; continue; }
                std::ungetc(c, stdin);
                break;
            }

            /* This code figures out if this is a named constant,
               an opcode, or a parse-time function name,
               or just an identifier
             */

            /* Detect named constants */
            if(IdBuf == "CONSTANT_E") { lval->num = CONSTANT_E; return NUMERIC_CONSTANT; }
            if(IdBuf == "CONSTANT_EI") { lval->num = CONSTANT_EI; return NUMERIC_CONSTANT; }
            if(IdBuf == "CONSTANT_2E") { lval->num = CONSTANT_2E; return NUMERIC_CONSTANT; }
            if(IdBuf == "CONSTANT_2EI") { lval->num = CONSTANT_2EI; return NUMERIC_CONSTANT; }
            if(IdBuf == "CONSTANT_RD") { lval->num = CONSTANT_RD; return NUMERIC_CONSTANT; }
            if(IdBuf == "CONSTANT_DR") { lval->num = CONSTANT_DR; return NUMERIC_CONSTANT; }
            if(IdBuf == "CONSTANT_PI") { lval->num = CONSTANT_PI; return NUMERIC_CONSTANT; }
            if(IdBuf == "CONSTANT_PIHALF") { lval->num = CONSTANT_PIHALF; return NUMERIC_CONSTANT; }
            if(IdBuf == "CONSTANT_L2I") { lval->num = CONSTANT_L2I; return NUMERIC_CONSTANT; }
            if(IdBuf == "CONSTANT_L10I") { lval->num = CONSTANT_L10I; return NUMERIC_CONSTANT; }
            if(IdBuf == "CONSTANT_L2") { lval->num = CONSTANT_L2; return NUMERIC_CONSTANT; }
            if(IdBuf == "CONSTANT_L10") { lval->num = CONSTANT_L10; return NUMERIC_CONSTANT; }
            if(IdBuf == "CONSTANT_L10B") { lval->num = CONSTANT_L10B; return NUMERIC_CONSTANT; }
            if(IdBuf == "CONSTANT_L10BI") { lval->num = CONSTANT_L10BI; return NUMERIC_CONSTANT; }
            if(IdBuf == "NaN") { lval->num = FPOPT_NAN_CONST; return NUMERIC_CONSTANT; }

            /* Detect opcodes */
            if(IdBuf == "cAdd") { lval->opcode = cAdd; return OPCODE; }
            if(IdBuf == "cAnd") { lval->opcode = cAnd; return OPCODE; }
            if(IdBuf == "cMul") { lval->opcode = cMul; return OPCODE; }
            if(IdBuf == "cOr")  { lval->opcode = cOr; return OPCODE; }

            if(IdBuf == "cNeg") { lval->opcode = cNeg; return OPCODE; }
            if(IdBuf == "cSub") { lval->opcode = cSub; return OPCODE; }
            if(IdBuf == "cDiv") { lval->opcode = cDiv; return OPCODE; }
            if(IdBuf == "cMod") { lval->opcode = cMod; return OPCODE; }
            if(IdBuf == "cEqual") { lval->opcode = cEqual; return OPCODE; }
            if(IdBuf == "cNEqual") { lval->opcode = cNEqual; return OPCODE; }
            if(IdBuf == "cLess") { lval->opcode = cLess; return OPCODE; }
            if(IdBuf == "cLessOrEq") { lval->opcode = cLessOrEq; return OPCODE; }
            if(IdBuf == "cGreater") { lval->opcode = cGreater; return OPCODE; }
            if(IdBuf == "cGreaterOrEq") { lval->opcode = cGreaterOrEq; return OPCODE; }
            if(IdBuf == "cNot") { lval->opcode = cNot; return OPCODE; }
            if(IdBuf == "cNotNot") { lval->opcode = cNotNot; return OPCODE; }
            if(IdBuf == "cAbsNot") { lval->opcode = cAbsNot; return OPCODE; }
            if(IdBuf == "cAbsNotNot") { lval->opcode = cAbsNotNot; return OPCODE; }
            if(IdBuf == "cAbsAnd") { lval->opcode = cAbsAnd; return OPCODE; }
            if(IdBuf == "cAbsOr") { lval->opcode = cAbsOr; return OPCODE; }
            if(IdBuf == "cAbsIf") { lval->opcode = cAbsIf; return OPCODE; }
            if(IdBuf == "cDeg")  { lval->opcode = cDeg; return OPCODE; }
            if(IdBuf == "cRad")  { lval->opcode = cRad; return OPCODE; }
            if(IdBuf == "cInv")  { lval->opcode = cInv; return OPCODE; }
            if(IdBuf == "cSqr")  { lval->opcode = cSqr; return OPCODE; }
            if(IdBuf == "cRDiv") { lval->opcode = cRDiv; return OPCODE; }
            if(IdBuf == "cRSub") { lval->opcode = cRSub; return OPCODE; }
            if(IdBuf == "cRSqrt") { lval->opcode = cRSqrt; return OPCODE; }
            if(IdBuf == "cLog2by") { lval->opcode = cLog2by; return OPCODE; }

            /* Detect other function opcodes */
            if(IdBuf[0] == 'c' && std::isupper(IdBuf[1]))
            {
                // This has a chance of being an opcode token
                std::string opcodetoken = IdBuf.substr(1);
                opcodetoken[0] = std::tolower(opcodetoken[0]);
                NamePtr nameptr(opcodetoken.c_str(), (unsigned)opcodetoken.size());
                const FuncDefinition* func = findFunction(nameptr);
                if(func)
                {
                    lval->opcode = func->opcode;
                    return OPCODE;
                }
                std::cerr <<
                    "Warning: Unrecognized opcode '" << IdBuf << "' interpreted as cNop\n";
                lval->opcode = cNop;
                return OPCODE;
            }

            // If it is typed entirely in capitals, it has a chance of being
            // a group token
            if(true)
            {
                std::string grouptoken = IdBuf;
                for(size_t a=0; a<grouptoken.size(); ++a)
                {
                    if(std::islower(grouptoken[a])) goto NotAGroupToken;
                    grouptoken[a] = std::tolower(grouptoken[a]);
                }
                if(1) // scope
                {
                    NamePtr nameptr(grouptoken.c_str(), (unsigned)grouptoken.size());
                    const FuncDefinition* func = findFunction(nameptr);
                    if(func)
                    {
                        lval->opcode = func->opcode;
                        return BUILTIN_FUNC_NAME;
                    }
                    if(IdBuf == "MOD")
                    {
                        lval->opcode = cMod;
                        return BUILTIN_FUNC_NAME;
                    }

                    std::cerr << "Warning: Unrecognized constant function '" << IdBuf
                              << "' interpreted as cNop\n";
                    lval->opcode = cNop;
                    return BUILTIN_FUNC_NAME;
                }
            NotAGroupToken:;
            }
            // Anything else is an identifier
            lval->index = dumper.ConvertNamedHolderNameIntoIndex(IdBuf);
            // std::cerr << "'" << IdBuf << "'' interpreted as PARAM\n";

            return NAMEDHOLDER_TOKEN;
        }
        default:
        {
            std::cerr << "Ignoring unidentifier character '" << char(c) << "'\n";
            return yylex(lval); // tail recursion
        }
    }
    return EOF;
}

unsigned GrammarData::ParamSpec::BuildDepMask()
{
    DepMask = 0;
    switch(Opcode)
    {
        case ParamHolder:
            DepMask |= 1 << Index;
            break;
        case SubFunction:
            DepMask = Func->Params.BuildDepMask();
            break;
        default: break;
    }
    return DepMask;
}

namespace FPoptimizer_Grammar
{
    ParamSpec ParamSpec_Extract(unsigned paramlist, unsigned index)
    {
        unsigned plist_index = (paramlist >> (index*PARAM_INDEX_BITS))
                               % (1 << PARAM_INDEX_BITS);
        return plist[plist_index];
    }
}

int main()
{
    std::map<std::string, GrammarData::Grammar> sections;

    std::string sectionname;

    for(;;)
    {
        FPoptimizerGrammarParser x;
        x.yyparse();

        x.grammar.BuildFinalDepMask();
        sections[sectionname] = x.grammar;

        int c = std::fgetc(stdin);
        if(c != '[')
        {
            std::ungetc(c, stdin);
            break;
        }

        sectionname.clear();
        for(;;)
        {
            c = std::fgetc(stdin);
            if(c == ']' || c == EOF) break;
            sectionname += (char)c;
        }
        std::cerr << "Parsing [" << sectionname << "]\n";
    }

    std::map<std::string, std::vector<std::string> > grammar_components;
    sectionname = "";
    for(;;)
    {
        int c = std::fgetc(stdin);
        if(c == ' ' || c == '\t' || c == '\r' || c == '\n') continue;
        if(c == '#')
            { do { c = std::fgetc(stdin); } while(!(c == '\n' || c == EOF));
              continue; }
        if(c == '$')
        {
            sectionname = "";
            for(;;)
            {
                c = std::fgetc(stdin);
                if(c == EOF) break;
                if(c == ' ' || c == '\t' || c == '\r' || c == '\n') break;
                if(c == ':') break;
                sectionname += char(c);
            }
            std::cerr << "Parsing $" << sectionname << "\n";
            continue;
        }
        if((c >= 'A' && c <= 'Z') || c == '_' || (c >= '0' && c <= '9'))
        {
            std::string componentname;
            for(;;)
            {
                if(c == EOF) break;
                if(c == ' ' || c == '\t' || c == '\r' || c == '\n') break;
                componentname += char(c);
                c = std::fgetc(stdin);
            }
            std::cerr << "- Has [" << componentname << "]\n";
            grammar_components[sectionname].push_back(componentname);
            //dumper.AddRulesFrom(sections[componentname]);
        }
        else break;
    }

    std::cout <<
        "/* This file is automatically generated. Do not edit... */\n"
        "#include \"fpoptimizer_consts.hh\"\n"
        "#include \"fpconfig.hh\"\n"
        "#include \"fptypes.hh\"\n"
        "#include <algorithm>\n"
        "\n"
        "#define P1(a) a\n"
        "#define P2(a,b) (P1(a) | (b << PARAM_INDEX_BITS))\n"
        "#define P3(a,b,c) (P2(a,b) | (c << (PARAM_INDEX_BITS*2)))\n"
        "\n";

    std::vector<GrammarData::Grammar> components;
    for(std::map<std::string, std::vector<std::string> >::const_iterator
        i = grammar_components.begin();
        i != grammar_components.end();
        ++i)
    {
        for(size_t a=0; a<i->second.size(); ++a)
            components.push_back(sections[ i->second[a] ]);
    }
    dumper.RegisterGrammar(components);

    for(std::map<std::string, std::vector<std::string> >::const_iterator
        i = grammar_components.begin();
        i != grammar_components.end();
        ++i)
    {
        components.clear();
        for(size_t a=0; a<i->second.size(); ++a)
            components.push_back(sections[ i->second[a] ]);
        dumper.DumpGrammar(i->first, components);
    }
    dumper.Flush();

    std::cout <<
        "#undef P1\n"
        "#undef P2\n"
        "#undef P3\n"
        "\n"
        "namespace FPoptimizer_Grammar\n"
        "{\n"
        "    ParamSpec ParamSpec_Extract(unsigned paramlist, unsigned index)\n"
        "    {\n"
        "        index = (paramlist >> (index * PARAM_INDEX_BITS)) % (1 << PARAM_INDEX_BITS);\n"
        "        const unsigned p_begin = 0;\n"
        "        const unsigned n_begin = p_begin + sizeof(plist.plist_p)/sizeof(*plist.plist_p);\n"
        "        const unsigned s_begin = n_begin + sizeof(plist.plist_n)/sizeof(*plist.plist_n);\n"
        "      /*const unsigned     end = s_begin + sizeof(plist.plist_s)/sizeof(*plist.plist_s);*/\n"
        "        if(index < s_begin)\n"
        "        {\n"
        "            if(index < n_begin)\n"
        "                return ParamSpec(ParamHolder,(const void*)&plist.plist_p[index-p_begin]);\n"
        "            else\n"
        "                return ParamSpec(NumConstant,(const void*)&plist.plist_n[index-n_begin]);\n"
        "        }\n"
        "        else\n"
        "            return ParamSpec(SubFunction,(const void*)&plist.plist_s[index-s_begin]);\n"
        "    }\n"
        "}\n";

    return 0;
}
