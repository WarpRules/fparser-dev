------------------------------------------------------
CODETREE - A REPRESENTATION OF MATHEMATICAL EXPRESSION
------------------------------------------------------
FPoptimizer changes the bytecode expression into tree format.

An FPoptimizer expression is called a CodeTree.

A CodeTree node has:
	- Single parent
	- 0 to N children
	- Type (Opcode)
	- Type-dependent other fields
	Different type of nodes:
		cVar:
			Has a type-dependent field "Var", which
			identifies the var number
		cImmed:
			Has a type-dependent field "Value", which
			describes the constant value of this node
		cFCall and cPCall:
			Has a type-dependent field "FuncNo", which
			describes the function number called
		Anything else:
			Has a number of children which describe
			the parameters to the operation.
			For example, if the type (Opcode) is cSin,
			it has a single child, which is a CodeTree
			that describes the parameter of the sin() call.
			If the type (Opcode) is cAdd, it has an arbitrary
			number of children, which are all added together.
	Examples of some expressions in tree format:
		Expression: sin(x)*cos(y)
		Tree:	Opcode=cMul
			Child[0]:
				Opcode=cSin
				Child[0]:
		       			Opcode=cVar
		       			Var=0
			Child[1]:
				Opcode=cCos
				Child[0]:
		       			Opcode=cVar
		       			Var=1
		Expression: 1.0 + 2.0 - 3.0 - (4.0 + -5.5)
		Actual expression (converted by bytecode reader):
		            1.0 + 2.0 + (-1 * 3.0) + (-1 * (4.0 + -5.5))
		Tree:	Opcode=cAdd
			Child[0]:
				Opcode=cImmed
				Value=1.0
			Child[1]:
				Opcode=cImmed
				Value=2.0
			Child[2]:
				Opcode=cMul
				Child[0]:
					Opcode=cImmed
					Value=-1.0
				Child[1]:
					Opcode=cImmed
					Value=3.0
			Child[3]:
				Opcode=cMul
				Child[0]:
					Opcode=cImmed
					Value=-1.0
				Child[1]:
					Opcode=cAdd
					Child[0]:
						Opcode=cImmed
						Value=4.0
					Child[1]:
						Opcode=cImmed
						Value=-5.5

------------------------------------------------------
GRAMMAR RULE - A TREE SUBSTITUTION RULE DESCRIPTION
------------------------------------------------------
The Grammar describes changes (optimizations) that
can be performed to the CodeTree.

The Grammar is composed of Rules, each of which describes
a matching-tree, and a replacement.

A matching-tree node (ParamSpec) has:
	-------
	- Opcode
	- Method of parameter matching
	- 0 to N params (ParamSpec)
	Different types of methods:
		PositionalParams:
			Indicates that the tree given must match
			the params given, in exactly that order;
			there may not be other children in the tree.
		SelectedParams:
			Indicates that the tree given must match
			the params given, in any order;
			there may not be other children in the tree.
		AnyParams:
			Indicates that the tree given must match
			the params given; in any order;
			the tree may additionally have other children,
			too. If the parameter list contains a RestHolder,
			those other children are captured there.

List of parameters (an index to MatchedParams)
	- Single parent
	- Type (opcode)
	- 0 to N children
	- Type-dependent other fields
	Different types of nodes:
		NumConstant:
			Indicates that a CodeTree
			with type=cImmed and
			a particular Value is matched.
			The value is found in pack.clist[node.index].
		ImmedHolder:
			Indicates that a CodeTree
			with type=cImmed and
			some Value is matched.
			The ImmedHolder fields are enumerated
			such that in a single CodeTree matching
			operation, all ImmedHolders having the
			same index value must match CodeTrees
			evaluating to the same numeric value.
			For example, if an ImmedHolder with index=0
			happens to match a CodeTree with Value=1.443,
			all other ImmedHolders with index=0 must
			also match a CodeTree with Value=1.443.
		NamedHolder
			Indicates that any CodeTree is matched regardless of type.
			The NamedHolder fields are enumerated
			such that in a single CodeTree matching
			operation, all NamedHolders having the
			same index value must match CodeTrees
			that are identical to the first one.
			For example, if an NamedHolder with index=0
			happens to match a CodeTree representing
			the expression sin(x),
			all other NamedHolders with index=0 must
			also match a CodeTree representing
			the expression sin(x).
		SubFunction
			Indicates a subtree that must be matched.
		RestHolder
			Within the target CodeTree, matches anything not
			matched by the other rules in the parent ParamSpec.
		Anything else:
			Indicates a mathematical expression whose
			value is treated by the NumConstant rules above.

Example rules:
	Grammar file syntax: cMin x x
	Internal structure: Function.opcode = cMin
	                    Function.index refers to MatchedParams where
	                      MatchedParams.type  = AnyParams
	                      MatchedParams.count = 2
	                      MatchedParams.index refers to ParamSpec where
	                        ParamSpec[0].opcode = NamedHolder
	                        ParamSpec[0].index  = 0   -- "x" is namedholder 0
	                        ParamSpec[1].opcode = NamedHolder
	                        ParamSpec[1].index  = 0   -- another x
	Explanation:
		This rule matches a CodeTree
	        where the opcode = cMin and that
	        tree has two identical subtrees.

	Grammar file syntax: cMul x <1> (cPow [(cMul x <2>) -1])
	Internal structure: Function.opcode = cMul
	                    Function.index refers to MatchedParams where
	                      MatchedParams.type = AnyParams
	                      MatchedParams.count = 3
	                      MatchedParams.index refers to ParamSpec where
	                        ParamSpec[0].opcode = NamedHolder
	                        ParamSpec[0].index  = 0   -- "x" is namedholder 0
	                        ParamSpec[1].opcode = RestHolder
	                        ParamSpec[1].index  = 1   -- RestHolder #1 captures anything else within that cMul group
	                        ParamSpec[2].opcode = SubFunction
	                        ParamSpec[2].index refers to Function where
	                          Function.opcode = cPow
	                          Function.index refers to MatchedParams where
	                            MatchedParams.type = PositionalParams
	                            MatchedParams.count = 2
	                            MatchedParams.index refers to ParamSpec where
	                              ParamSpec[0].opcode = SubFunction
	                              ParamSpec[0].index refers to Function where
	                                Function.opcode = cMul
	                                Function.index refers to MatchedParams where
	                                  MatchedParams.type  = AnyParams
	                                  MatchedParams.count = 2
	                                  MatchedParams.index refers to ParamSpec where
	                                    ParamSpec[0].opcode = NamedHolder
	                                    ParamSpec[0].index  = 0 -- must match a subtree identical to that of "x" earlier
	                                    ParamSpec[1].opcode = RestHolder
	                                    ParamSpec[1].index  = 2 -- RestHolder #2 captures anything else within that cMul group
	                              ParamSpec[1].opcode = NumConstant
	                              ParamSpec[1].value  = -1
	Explanation:
		This rule matches a CodeTree of type cMul,
		 where there exists at least two children,
		 where one of them is an arbitrary expression,
		  call that "x",
		 and one of them is a CodeTree of type cPow,
		  where there are exactly two children,
		  where the first child is a CodeTree of type cMul,
		   where there exists at least one child,
		   where that one child is an arbitrary expression,
		    which must match the "x" captured earlier,
		   and anything else from that inner cMul codetree
		   is captured into restholder <2>;
		  and the second child of the cPow codetree
		   is a CodeTree of type cImmed, where its Value equals -1;
		 and anything else from that outer cMul codetree
		 is captured into restholder <1>.
		This rule matches expressions such as:
			sin(z)*5*( (sin(z)*7) ^ (-1))
			sin(z) is captured into NamedHolder x
			5      is captured into RestHolder <1>
			7      is captured into RestHolder <2>
		Or
			6*((6*w)^(-1))
			value 6 is captured into NamedHolder x
			nothing is captured into RestHolder <1>
			w       is captured into RestHolder <2>.
