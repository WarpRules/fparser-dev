#define YY_FPoptimizerGrammarParser_h_included
#define YY_USE_CLASS

/*  A Bison++ parser, made from fpoptimizer/fpoptimizer_grammar_gen.y  */

 /* with Bison++ version bison++ Version 1.21.9-1, adapted from GNU bison by coetmeur@icdc.fr
Maintained by Magnus Ekdahl <magnus@debian.org>
  */

#define YY_USE_CLASS

#line 1 "/usr/share/bison++/bison.cc"
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Bob Corbett and Richard Stallman

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 1, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  

   As a special exception, when this file is copied by Bison++ into a
   Bison++ output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison, and has been in Bison++ since 1.21.9.  

*/

/* HEADER SECTION */
#if defined( _MSDOS ) || defined(MSDOS) || defined(__MSDOS__) 
 #define __MSDOS_AND_ALIKE
#endif

#if defined(_WINDOWS) && defined(_MSC_VER)
 #define __HAVE_NO_ALLOCA
 #define __MSDOS_AND_ALIKE
#endif

#ifndef alloca
 #if defined( __GNUC__)
  #define alloca __builtin_alloca

 #elif (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc)  || defined (__sgi)
  #include <alloca.h>

 #elif defined (__MSDOS_AND_ALIKE)
  #include <malloc.h>
  #ifndef __TURBOC__
   /* MS C runtime lib */
   #define alloca _alloca
  #endif

 #elif defined(_AIX)
  /* pragma must be put before any C/C++ instruction !! */
  #pragma alloca
  #include <malloc.h>

 #elif defined(__hpux)
  #ifdef __cplusplus
   extern "C" {
     void *alloca (unsigned int);
   };
  #else /* not __cplusplus */
   void *alloca ();
  #endif /* not __cplusplus */

 #endif /* not _AIX  not MSDOS, or __TURBOC__ or _AIX, not sparc.  */
#endif /* alloca not defined.  */

#ifdef c_plusplus
 #ifndef __cplusplus
  #define __cplusplus
 #endif
#endif

#ifdef __cplusplus
 #ifndef YY_USE_CLASS
/*#warning "For C++ its recomended to use bison++, otherwise classes won't be generated"*/
 #endif
#else
 #ifndef __STDC__
  #define const
 #endif
 #ifdef YY_USE_CLASS
  #error "This is a C++ header generated by bison++, please use a C++ compiler!"
 #endif
#endif

#include <stdio.h>
#define YYBISON 1  

 #line 88 "/usr/share/bison++/bison.cc"
#line 1 "fpoptimizer/fpoptimizer_grammar_gen.y"

#define YYDEBUG 1
#define YYERROR_VERBOSE 1
#define YY_FPoptimizerGrammarParser_ERROR_VERBOSE 1
#include <string.h> // for error reporting

#include "fpconfig.hh"
#include "fparser.hh"
#include "fptypes.hh"

#include "fpoptimizer_grammar.hh"
#include "fpoptimizer_consts.hh"
#include "fpoptimizer_opcodename.hh"

#include <cstdio>
#include <cctype>
#include <cstdlib>
#include <iostream>
#include <sstream>
#include <map>
#include <set>
#include <algorithm>
#include <assert.h>

#include "crc32.hh"

/*********/
using namespace FPoptimizer_Grammar;
using namespace FUNCTIONPARSERTYPES;

class GrammarDumper;

namespace GrammarData
{
    class ParamSpec;

    class MatchedParams
    {
    public:
        ParamMatchingType Type;
        SignBalanceType   Balance;
        std::vector<ParamSpec*> Params;

    public:
        MatchedParams()                    : Type(PositionalParams), Balance(BalanceDontCare), Params() { }
        MatchedParams(ParamMatchingType t) : Type(t),                Balance(BalanceDontCare), Params() { }
        MatchedParams(ParamSpec* p)        : Type(PositionalParams), Balance(BalanceDontCare), Params() { Params.push_back(p); }

        MatchedParams* SetType(ParamMatchingType t) { Type=t; return this; }
        MatchedParams* SetBalance(SignBalanceType b) { Balance=b; return this; }
        MatchedParams* AddParam(ParamSpec* p) { Params.push_back(p); return this; }

        const std::vector<ParamSpec*>& GetParams() const { return Params; }

        void RecursivelySetParamMatchingType(ParamMatchingType t);
        bool EnsureNoRepeatedNamedHolders(std::set<unsigned>& used) const;
        bool EnsureNoRepeatedNamedHolders() const;
        bool EnsureNoInversions();
        bool EnsureNoVariableCoverageParams_InPositionalParamLists();
        bool EnsureNoRepeatedRestHolders();
        bool EnsureNoRepeatedRestHolders(std::set<unsigned>& used);

        bool operator== (const MatchedParams& b) const;
        bool operator< (const MatchedParams& b) const;

        size_t CalcRequiredParamsCount() const;
    };

    class FunctionType
    {
    public:
        OpcodeType    Opcode;
        MatchedParams Params;
    public:
        FunctionType(OpcodeType o, const MatchedParams& p) : Opcode(o), Params(p) { }

        bool operator== (const FunctionType& b) const
        {
            return Opcode == b.Opcode && Params == b.Params;
        }
        bool operator< (const FunctionType& b) const
        {
            if(Opcode != b.Opcode) return Opcode < b.Opcode;
            return Params < b.Params;
        }

        void RecursivelySetParamMatchingType(ParamMatchingType t)
        {
            Params.Type = t;
            Params.RecursivelySetParamMatchingType(t);
        }

        bool EnsureNoRepeatedNamedHolders() const
            { return Params.EnsureNoRepeatedNamedHolders(); }
    };

    class ParamSpec
    {
    public:
        bool Negated;    // true means for: cAdd:-x; cMul:1/x; cAnd/cOr: !x; other: invalid

        TransformationType Transformation;

        unsigned MinimumRepeat; // default 1
        bool AnyRepetition;     // false: max=minimum; true: max=infinite

        OpcodeType Opcode;      // specifies the type of the function
        union
        {
            double ConstantValue;           // for NumConstant
            unsigned Index;                 // for ImmedHolder, RestHolder, NamedHolder
            FunctionType* Func;             // for SubFunction
        };
        unsigned ImmedConstraint;
        std::vector<ParamSpec*> Params;

    public:
        struct NamedHolderTag{};
        struct ImmedHolderTag{};
        struct RestHolderTag{};

        ParamSpec(FunctionType* f)
            : Negated(), Transformation(None),  MinimumRepeat(1), AnyRepetition(false),
              Opcode(SubFunction), Func(f),          ImmedConstraint(0), Params()
              {
              }

        ParamSpec(double d)
            : Negated(), Transformation(None),  MinimumRepeat(1), AnyRepetition(false),
              Opcode(NumConstant), ConstantValue(d), ImmedConstraint(0), Params() { }

        ParamSpec(OpcodeType o, const std::vector<ParamSpec*>& p)
            : Negated(), Transformation(None),  MinimumRepeat(1), AnyRepetition(false),
              Opcode(o),                             ImmedConstraint(0), Params(p) { }

        ParamSpec(unsigned i, NamedHolderTag)
            : Negated(), Transformation(None),  MinimumRepeat(1), AnyRepetition(false),
              Opcode(NamedHolder), Index(i),         ImmedConstraint(0), Params() { }

        ParamSpec(unsigned i, ImmedHolderTag)
            : Negated(), Transformation(None),  MinimumRepeat(1), AnyRepetition(false),
              Opcode(ImmedHolder), Index(i),         ImmedConstraint(0), Params() { }

        ParamSpec(unsigned i, RestHolderTag)
            : Negated(), Transformation(None),  MinimumRepeat(1), AnyRepetition(false),
              Opcode(RestHolder),  Index(i),         ImmedConstraint(0), Params() { }

        ParamSpec* SetNegated()                      { Negated=true; return this; }
        ParamSpec* SetRepeat(unsigned min, bool any) { MinimumRepeat=min; AnyRepetition=any; return this; }
        ParamSpec* SetTransformation(TransformationType t)
            { Transformation = t; return this; }
        ParamSpec* SetConstraint(unsigned mask)
            { ImmedConstraint |= mask; return this; }

        void RecursivelySetParamMatchingType(ParamMatchingType t)
        {
            for(size_t a=0; a<Params.size(); ++a)
                Params[a]->RecursivelySetParamMatchingType(t);
            if(Opcode == SubFunction)
                Func->RecursivelySetParamMatchingType(t);
        }
        bool VerifyIsConstant()
        {
            switch(SpecialOpcode(Opcode))
            {
                case NumConstant: return true;
                case ImmedHolder: return true;
                case NamedHolder: return AnyRepetition; // x+ is constant, x is not
                case RestHolder: return false; // <1> is not constant
                case SubFunction: return false; // subfunctions are not constant
            }
            // For GroupFunctions, all params must be const.
            for(size_t a=0; a<Params.size(); ++a)
                if(!Params[a]->VerifyIsConstant()) return false;
            return true;
        }

        bool EnsureNoRepeatedNamedHolders() const
        {
            MatchedParams tmp;
            tmp.Params = Params;
            return tmp.EnsureNoRepeatedNamedHolders();
        }

        bool operator== (const ParamSpec& b) const;
        bool operator< (const ParamSpec& b) const;

    private:
        ParamSpec(const ParamSpec&);
        ParamSpec& operator= (const ParamSpec&);
    };

    class Rule
    {
    public:
        friend class GrammarDumper;
        RuleType Type;

        FunctionType  Input;
        MatchedParams Replacement; // length should be 1 if ProduceNewTree is used
    public:
        Rule(RuleType t, const FunctionType& f, const MatchedParams& r)
            : Type(t), Input(f), Replacement(r) { }
        Rule(RuleType t, const FunctionType& f, ParamSpec* p)
            : Type(t), Input(f), Replacement() { Replacement.AddParam(p); }

        bool operator< (const Rule& b) const
        {
            return Input < b.Input;
        }
    };

    class Grammar
    {
    public:
        std::vector<Rule> rules;
    public:
        Grammar(): rules() { }

        void AddRule(const Rule& r) { rules.push_back(r); }
    };

    ////////////////////

    void MatchedParams::RecursivelySetParamMatchingType(ParamMatchingType t)
    {
        for(size_t a=0; a<Params.size(); ++a)
            Params[a]->RecursivelySetParamMatchingType(t);
    }

    bool MatchedParams::EnsureNoInversions()
    {
        for(size_t a=0; a<Params.size(); ++a)
            if(Params[a]->Negated)
                return false;
        return true;
    }

    bool MatchedParams::EnsureNoRepeatedNamedHolders(std::set<unsigned>& used) const
    {
        for(size_t a=0; a<Params.size(); ++a)
        {
            if(Params[a]->Opcode == NamedHolder
            && (Params[a]->MinimumRepeat == 1 && !Params[a]->AnyRepetition))
            {
                unsigned index = Params[a]->Index;
                std::set<unsigned>::iterator i = used.lower_bound(index);
                if(i != used.end() && *i == index)
                    return false;
                used.insert(i, index);
            }
            if(Params[a]->Opcode == SubFunction)
                if(!Params[a]->Func->Params.EnsureNoRepeatedNamedHolders(used))
                    return false;
        }
        return true;
    }

    bool MatchedParams::EnsureNoRepeatedNamedHolders() const
    {
        std::set<unsigned> used;
        return EnsureNoRepeatedNamedHolders(used);
    }

    bool MatchedParams::EnsureNoVariableCoverageParams_InPositionalParamLists()
    {
        if(Type != PositionalParams
        && Type != SelectedParams) return true;

        for(size_t a=0; a<Params.size(); ++a)
        {
            if(Params[a]->Opcode == RestHolder)
                return false;
            if(Params[a]->MinimumRepeat != 1
            || Params[a]->AnyRepetition)
                return false;

            if(Params[a]->Opcode == SubFunction)
                if(!Params[a]->Func->Params.EnsureNoVariableCoverageParams_InPositionalParamLists())
                    return false;
        }
        return true;
    }
    bool MatchedParams::EnsureNoRepeatedRestHolders()
    {
        std::set<unsigned> Used_RestHolders;
        return EnsureNoRepeatedRestHolders(Used_RestHolders);
    }

    bool MatchedParams::EnsureNoRepeatedRestHolders(std::set<unsigned>& used)
    {
        for(size_t a=0; a<Params.size(); ++a)
        {
            switch(SpecialOpcode(Params[a]->Opcode))
            {
                case RestHolder:
                    if(used.find(Params[a]->Index) != used.end()) return false;
                    used.insert(Params[a]->Index);
                    break;
                case NumConstant:
                case ImmedHolder:
                case NamedHolder:
                    break;
                case SubFunction:
                    if(!Params[a]->Func->Params.EnsureNoRepeatedRestHolders(used))
                        return false;
                    break;
                default: // GroupFunction:
                    break;
            }
        }
        return true;
    }
    size_t MatchedParams::CalcRequiredParamsCount() const
    {
        size_t res = 0;
        for(size_t a=0; a<Params.size(); ++a)
        {
            if(Params[a]->Opcode == RestHolder)
                continue; // Completely optional
            res += Params[a]->MinimumRepeat;
        }
        return res;
    }

    bool ParamSpec::operator== (const ParamSpec& b) const
    {
        if(Negated != b.Negated) return false;
        if(Transformation != b.Transformation) return false;
        if(MinimumRepeat != b.MinimumRepeat) return false;
        if(AnyRepetition != b.AnyRepetition) return false;
        if(ImmedConstraint != b.ImmedConstraint) return false;
        if(Opcode != b.Opcode) return false;
        switch(Opcode)
        {
            case NumConstant:
                return ConstantValue == b.ConstantValue;
            case ImmedHolder:
            case RestHolder:
            case NamedHolder:
                return Index == b.Index;
            case SubFunction:
                return *Func == *b.Func;
            default:
                if(Params.size() != b.Params.size()) return false;
                for(size_t a=0; a<Params.size(); ++a)
                    if(!(*Params[a] == *b.Params[a]))
                        return false;
                break;
        }
        return true;
    }

    bool ParamSpec::operator< (const ParamSpec& b) const
    {
        if(Negated != b.Negated) return Negated < b.Negated;
        if(Transformation != b.Transformation) return Transformation < b.Transformation;
        if(MinimumRepeat != b.MinimumRepeat) return MinimumRepeat < b.MinimumRepeat;
        if(AnyRepetition != b.AnyRepetition) return AnyRepetition < b.AnyRepetition;
        if(ImmedConstraint != b.ImmedConstraint) return ImmedConstraint < b.ImmedConstraint;
        if(Opcode != b.Opcode) return Opcode < b.Opcode;
        switch(Opcode)
        {
            case NumConstant:
                return ConstantValue < b.ConstantValue;
            case ImmedHolder:
            case RestHolder:
            case NamedHolder:
                return Index < b.Index;
            case SubFunction:
                return *Func < *b.Func;
            default:
                if(Params.size() != b.Params.size()) return Params.size() > b.Params.size();
                for(size_t a=0; a<Params.size(); ++a)
                    if(!(*Params[a] == *b.Params[a]))
                        return *Params[a] < *b.Params[a];
                break;
        }
        return false;
    }

    bool MatchedParams::operator== (const MatchedParams& b) const
    {
        size_t a_req =   CalcRequiredParamsCount();
        size_t b_req = b.CalcRequiredParamsCount();
        if(a_req != b_req) return false;

        if(Type != b.Type) return false;

        if(Params.size() != b.Params.size()) return false;
        for(size_t a=0; a<Params.size(); ++a)
            if(!(*Params[a] == *b.Params[a]))
                return false;
        return true;
    }

    bool MatchedParams::operator< (const MatchedParams& b) const
    {
        size_t a_req =   CalcRequiredParamsCount();
        size_t b_req = b.CalcRequiredParamsCount();
        if(a_req != b_req) return a_req < b_req;

        if(Type !=  b.Type) return Type < b.Type;

        if(Params.size() != b.Params.size()) return Params.size() > b.Params.size();
        for(size_t a=0; a < Params.size(); ++a)
            if(!(*Params[a] == *b.Params[a]))
                return *Params[a] < *b.Params[a];
        return false;
    }
}

#define YY_FPoptimizerGrammarParser_MEMBERS \
    GrammarData::Grammar grammar;

class GrammarDumper
{
private:
    std::string GenName(const char* prefix)
    {
        static unsigned counter = 0;
        char Buf[512];
        sprintf(Buf, "%s%u", prefix,++counter);
        return Buf;
    }
private:
    std::map<std::string, size_t>    n_index;
    std::map<double,      size_t>    c_index;
    std::multimap<crc32_t,size_t>    p_index;
    std::map<crc32_t,     size_t>    m_index;
    std::map<crc32_t,     size_t>    f_index;

    std::vector<std::string>   nlist;
    std::vector<double>        clist;
    std::vector<ParamSpec>     plist;
    std::vector<MatchedParams> mlist;
    std::vector<Function>      flist;
    std::vector<Rule>          rlist;
    std::vector<Grammar>       glist;
public:
    GrammarDumper():
        n_index(), c_index(), p_index(), m_index(), f_index(),
        nlist(),clist(),plist(),mlist(),flist(),rlist(),glist()
    {
    }

    ParamSpec CreateParamSpec(const GrammarData::ParamSpec& p)
    {
        ParamSpec  pitem;
        memset(&pitem, 0, sizeof(pitem));
        pitem.sign           = p.Negated;
        pitem.transformation = p.Transformation;
        pitem.minrepeat      = p.MinimumRepeat;
        pitem.anyrepeat      = p.AnyRepetition;
        pitem.opcode         = p.Opcode;
        size_t count = p.ImmedConstraint; // note: stored in "count"
        size_t index = 0;
        switch(p.Opcode)
        {
            case NumConstant:
            {
                index = DumpConstant(p.ConstantValue);
                break;
            }
            case NamedHolder:
            case ImmedHolder:
            case RestHolder:
            {
                index = p.Index;
                break;
            }
            case SubFunction:
            {
                index = DumpFunction(*p.Func);
                break;
            }
            default:
            {
                std::pair<size_t,size_t> r = DumpParamList(p.Params);
                index = r.first;
                count = r.second;
                break;
            }
        }
        pitem.index = index;
        pitem.count = count;

        /* These assertions catch mis-sized bitfields */
        assert(pitem.sign == p.Negated);
        assert(pitem.transformation == p.Transformation);
        assert(pitem.minrepeat == p.MinimumRepeat);
        assert(pitem.anyrepeat == p.AnyRepetition);
        assert(pitem.opcode == p.Opcode);
        assert(pitem.index == index);
        assert(pitem.count == count);
        return pitem;
    }

    size_t DumpName(const std::string& n)
    {
        std::map<std::string, size_t>::const_iterator i = n_index.find(n);
        if(i != n_index.end()) return i->second;
        nlist.push_back(n);
        return n_index[n] = nlist.size()-1;
    }
    size_t DumpConstant(double v)
    {
        std::map<double, size_t>::const_iterator i = c_index.find(v);
        if(i != c_index.end()) return i->second;
        clist.push_back(v);
        return c_index[v] = clist.size()-1;
    }

    std::pair<size_t/*index*/, size_t/*count*/>
        DumpParamList(const std::vector<GrammarData::ParamSpec*>& params)
    {
        if(params.empty())
        {
            return std::pair<size_t, size_t> (0,0); // "nothing" can be found anywhere!
        }

        const size_t count = params.size();

        std::vector<ParamSpec> pitems;
        pitems.reserve(count);
        for(size_t a=0; a<count; ++a)
            pitems.push_back( CreateParamSpec(*params[a]) );

        const crc32_t first_crc = crc32::calc( (const unsigned char*) &pitems[0], sizeof(pitems[0]) );

        /* Find a position within plist[] where to insert pitems[] */

        const size_t old_plist_size = plist.size();

        size_t decided_position = old_plist_size;
        size_t n_missing        = count;

        std::multimap<crc32_t, size_t>::const_iterator ppos = p_index.lower_bound( first_crc );
        for(; ppos != p_index.end() && ppos->first == first_crc; ++ppos)
        {
            size_t candidate_position = ppos->second;
            size_t n_candidate_items  = count;
            if(candidate_position + count > old_plist_size)
                n_candidate_items = old_plist_size - candidate_position;
            size_t n_missing_here = count - n_candidate_items;

            /* Using std::equal() ensures that we don't get crc collisions. */
            /* However, we cast to (const unsigned char*) because
             * our ParamSpec does not have operator== implemented.
             */
            if(std::equal(
                (const unsigned char*) &pitems[0],
                (const unsigned char*) (&pitems[0]+count),
                (const unsigned char*) &plist[candidate_position]))
            {
                /* Found a match */
                n_missing        = n_missing_here;
                decided_position = candidate_position;
                break;
            }
        }

        /* Insert those items that are missing */
        size_t source_offset = count - n_missing;
        plist.reserve(decided_position + count);
        for(size_t a=0; a<n_missing; ++a)
        {
            const ParamSpec& pitem = pitems[a + source_offset];
            const crc32_t crc = crc32::calc( (const unsigned char*) &pitem, sizeof(pitem) );
            p_index.insert( std::make_pair(crc, plist.size()) );
            plist.push_back(pitem);
        }
        return std::pair<size_t, size_t> (decided_position, count);
    }

    size_t DumpMatchedParams(const GrammarData::MatchedParams& m)
    {
        MatchedParams mitem;
        memset(&mitem, 0, sizeof(mitem));
        mitem.type    = m.Type;
        mitem.balance = m.Balance;
        std::pair<size_t,size_t> r = DumpParamList(m.Params);
        mitem.index = r.first;
        mitem.count = r.second;

        /* These assertions catch mis-sized bitfields */
        assert(mitem.type == m.Type);
        assert(mitem.balance == m.Balance);
        assert(mitem.index == r.first);
        assert(mitem.count == r.second);
      #if 1
        crc32_t crc = crc32::calc((const unsigned char*)&mitem, sizeof(mitem));
        std::map<crc32_t, size_t>::const_iterator mi = m_index.find(crc);
        if(mi != m_index.end())
            return mi->second;
        m_index[crc] = mlist.size();
      #endif
        mlist.push_back(mitem);
        return mlist.size()-1;
    }
    Function CreateFunction(const GrammarData::FunctionType& f)
    {
        Function fitem;
        memset(&fitem, 0, sizeof(fitem));
        size_t index = DumpMatchedParams(f.Params);
        fitem.opcode = f.Opcode;
        fitem.index  = index;
        /* These assertions catch mis-sized bitfields */
        assert(fitem.opcode == f.Opcode);
        assert(fitem.index  == index);
        return fitem;
    }
    size_t DumpFunction(const GrammarData::FunctionType& f)
    {
        Function fitem = CreateFunction(f);
      #if 1
        crc32_t crc = crc32::calc((const unsigned char*)&fitem, sizeof(fitem));
        std::map<crc32_t, size_t>::const_iterator fi = f_index.find(crc);
        if(fi != f_index.end())
            return fi->second;
        f_index[crc] = flist.size();
      #endif
        flist.push_back(fitem);
        return flist.size()-1;
    }
    size_t DumpRule(const GrammarData::Rule& r)
    {
        Rule ritem;
        ritem.type             = r.Type;
        ritem.func             = CreateFunction(r.Input);
        size_t repl_index = DumpMatchedParams(r.Replacement);
        size_t min_params = r.Input.Params.CalcRequiredParamsCount();
        ritem.repl_index       = repl_index;
        ritem.n_minimum_params = min_params;
        /* These assertions catch mis-sized bitfields */
        assert(ritem.type == r.Type);
        assert(ritem.repl_index == repl_index);
        assert(ritem.n_minimum_params == min_params);
        rlist.push_back(ritem);
        return rlist.size()-1;
    }
    size_t DumpGrammar(const GrammarData::Grammar& g)
    {
        Grammar gitem;
        gitem.index = rlist.size();
        gitem.count = 0;
        for(size_t a=0; a<g.rules.size(); ++a)
        {
            if(g.rules[a].Input.Opcode == cNop) continue;
            DumpRule(g.rules[a]);
            ++gitem.count;
        }
        glist.push_back(gitem);
        return glist.size()-1;
    }

    void Flush()
    {
        std::cout <<
            "namespace\n"
            "{\n"
            "    const double clist[] =\n"
            "    {\n";
        for(size_t a=0; a<clist.size(); ++a)
        {
            std::cout <<
            "        ";
            std::cout.precision(50);
            if(clist[a]+2-2 != clist[a] || clist[a]+1 == clist[a])
                std::cout << "FPOPT_NAN_CONST";
            else
                std::cout << clist[a];
            std::cout << ", /* " << a << " */\n";
        }
        std::cout <<
            "    };\n"
            "\n"
            "    const ParamSpec plist[] =\n"
            "    {\n";
        for(size_t a=0; a<plist.size(); ++a)
        {
            std::cout <<
            "        {"
                        << FP_GetOpcodeName(plist[a].opcode, true)
                        << ", "
                        << (plist[a].sign ? "true " : "false")
                        << ", "
                        << (plist[a].transformation == None    ? "None  "
                         :  plist[a].transformation == Negate  ? "Negate"
                         :/*plist[a].transformation == Invert?*/ "Invert"
                           )
                        << ", "
                        << plist[a].minrepeat
                        << ", "
                        << (plist[a].anyrepeat ? "true " : "false")
                        << ", ";
            switch(plist[a].opcode)
            {
                case NumConstant:
                case RestHolder:
                case SubFunction:
                default:
                    std::cout << plist[a].count;
                    break;
                case ImmedHolder:
                case NamedHolder:
                {
                    const char* sep = "";
                    static const char s[] = " | ";
                    switch( ImmedConstraint_Value( plist[a].count & ValueMask ) )
                    {
                        case ValueMask: case Value_AnyNum: break;
                        case Value_EvenInt: std::cout << sep << "Value_EvenInt"; sep=s; break;
                        case Value_OddInt: std::cout << sep << "Value_OddInt"; sep=s; break;
                        case Value_IsInteger: std::cout << sep << "Value_IsInteger"; sep=s; break;
                        case Value_NonInteger: std::cout << sep << "Value_NonInteger"; sep=s; break;
                    }
                    switch( ImmedConstraint_Sign( plist[a].count & SignMask ) )
                    {
                        /*case SignMask:*/ case Sign_AnySign: break;
                        case Sign_Positive: std::cout << sep << "Sign_Positive"; sep=s; break;
                        case Sign_Negative: std::cout << sep << "Sign_Negative"; sep=s; break;
                        case Sign_NoIdea:   std::cout << sep << "Sign_NoIdea"; sep=s; break;
                    }
                    switch( ImmedConstraint_Oneness( plist[a].count & OnenessMask ) )
                    {
                        case OnenessMask: case Oneness_Any: break;
                        case Oneness_One: std::cout << sep << "Oneness_One"; sep=s; break;
                        case Oneness_NotOne: std::cout << sep << "Oneness_NotOne"; sep=s; break;
                    }
                    if(!*sep) std::cout << "0";
                    break;
                }
            }
            std::cout   << ",\t" << plist[a].index
                        << " }, /* " << a;
            if(plist[a].opcode == NamedHolder)
                std::cout << " \"" << nlist[plist[a].index] << "\"";
            else
                std::cout << "    ";
            std::cout << "\t*/\n";
        }
        std::cout <<
            "    };\n"
            "\n"
            "    const MatchedParams mlist[] =\n"
            "    {\n";
        for(size_t a=0; a<mlist.size(); ++a)
        {
            std::cout <<
            "        {" << (mlist[a].type == PositionalParams ? "PositionalParams"
                         :  mlist[a].type == SelectedParams   ? "SelectedParams  "
                         :/*mlist[a].type == AnyParams      ?*/ "AnyParams       "
                           )
                        << ", "
                        << (mlist[a].balance == BalanceMoreNeg    ? "BalanceMoreNeg "
                         :  mlist[a].balance == BalanceMorePos    ? "BalanceMorePos "
                         :  mlist[a].balance == BalanceEqual      ? "BalanceEqual   "
                         :/*mlist[a].balance == BalanceDontCare ?*/ "BalanceDontCare"
                           )
                        << ", " << mlist[a].count
                        << ", " << mlist[a].index
                        << " }, /* " << a << " */\n";
        }
        std::cout <<
            "    };\n"
            "\n"
            "    const Function flist[] =\n"
            "    {\n";
        for(size_t a=0; a<flist.size(); ++a)
        {
            std::cout <<
            "        {" << FP_GetOpcodeName(flist[a].opcode, true)
                        << ", " << flist[a].index
                        << " }, /* " << a << " */\n";
        }
        std::cout <<
            "    };\n"
            "\n"
            "    const Rule rlist[] =\n"
            "    {\n";
        for(size_t a=0; a<rlist.size(); ++a)
        {
            std::cout <<
            "        {" << rlist[a].n_minimum_params
                        << ", "
                        << (rlist[a].type == ProduceNewTree  ? "ProduceNewTree"
                         :/*rlist[a].type == ReplaceParams ?*/ "ReplaceParams "
                           )
                        << ",    " << rlist[a].repl_index
                        << ",\t{ " << FP_GetOpcodeName(rlist[a].func.opcode, true)
                        <<   ", " << rlist[a].func.index
                        <<  " } }, /* " << a << " */\n";
        }
        std::cout <<
            "    };\n"
            "}\n"
            "\n"
            "namespace FPoptimizer_Grammar\n"
            "{\n"
            "    const GrammarPack pack =\n"
            "    {\n"
            "        clist, plist, mlist, flist, rlist,\n"
            "        {\n";
        for(size_t a=0; a<glist.size(); ++a)
        {
            std::cout <<
            "            {" << glist[a].index << ", " << glist[a].count
                        << " }, /* " << a << " */\n";
        }
        std::cout <<
            "        }\n"
            "    };\n"
            "}\n";
    }
private:
  /*
    void DumpParam(const ParamSpec& p)
    {
        //std::cout << "/""*p" << (&p-plist) << "*""/";

        static const char ImmedHolderNames[2][2] = {"%","&"};
        static const char NamedHolderNames[6][2] = {"x","y","z","a","b","c"};

        if(p.sign) std::cout << '~';
        if(p.transformation == Negate) std::cout << '-';
        if(p.transformation == Invert) std::cout << '/';

        switch(SpecialOpcode(p.opcode))
        {
            case NumConstant: std::cout << clist[p.index]; break;
            case ImmedHolder: std::cout << ImmedHolderNames[p.index]; break;
            case NamedHolder: std::cout << NamedHolderNames[p.index]; break;
            case RestHolder: std::cout << '<' << p.index << '>'; break;
            case SubFunction: DumpFunction(flist[p.index]); break;
            default:
            {
                std::string opcode = FP_GetOpcodeName(p.opcode).substr(1);
                for(size_t a=0; a<opcode.size(); ++a) opcode[a] = std::toupper(opcode[a]);
                std::cout << opcode << '(';
                for(unsigned a=0; a<p.count; ++a)
                {
                    if(a > 0) std::cout << ' ';
                    DumpParam(plist[p.index+a]);
                }
                std::cout << " )";
            }
        }
        if(p.anyrepeat && p.minrepeat==1) std::cout << '*';
        if(p.anyrepeat && p.minrepeat==2) std::cout << '+';
    }

    void DumpParams(const MatchedParams& mitem)
    {
        //std::cout << "/""*m" << (&mitem-mlist) << "*""/";

        if(mitem.type == PositionalParams) std::cout << '[';

        for(unsigned a=0; a<mitem.count; ++a)
        {
            std::cout << ' ';
            DumpParam(plist[mitem.index + a]);
        }

        if(mitem.type == PositionalParams) std::cout << " ]";
    }

    void DumpFunction(const Function& fitem)
    {
        //std::cout << "/""*f" << (&fitem-flist) << "*""/";

        std::cout << '(' << FP_GetOpcodeName(fitem.opcode);
        DumpParams(mlist[fitem.index]);
        std::cout << ')';
    }
  */
};

static GrammarDumper dumper;


#line 886 "fpoptimizer/fpoptimizer_grammar_gen.y"
typedef union {
    /* Note: Because bison's token type is an union or a simple type,
     *       anything that has constructors and destructors must be
     *       carried behind pointers here.
     */
    GrammarData::Rule*          r;
    GrammarData::FunctionType*  f;
    GrammarData::MatchedParams* p;
    GrammarData::ParamSpec*     a;

    double             num;
    std::string*       name;
    unsigned           index;
    OpcodeType         opcode;
    TransformationType transform;
} yy_FPoptimizerGrammarParser_stype;
#define YY_FPoptimizerGrammarParser_STYPE yy_FPoptimizerGrammarParser_stype

#line 88 "/usr/share/bison++/bison.cc"
/* %{ and %header{ and %union, during decl */
#define YY_FPoptimizerGrammarParser_BISON 1

#ifndef YY_FPoptimizerGrammarParser_COMPATIBILITY
 #ifndef YY_USE_CLASS
  #define  YY_FPoptimizerGrammarParser_COMPATIBILITY 1
 #else
  #define  YY_FPoptimizerGrammarParser_COMPATIBILITY 0
 #endif
#endif

#if YY_FPoptimizerGrammarParser_COMPATIBILITY != 0
 /* backward compatibility */
 #ifdef YYLTYPE
  #ifndef YY_FPoptimizerGrammarParser_LTYPE
   #define YY_FPoptimizerGrammarParser_LTYPE YYLTYPE
  #endif
 #endif
/* Testing alternative bison solution
   /#ifdef YYSTYPE*/
#ifndef YY_FPoptimizerGrammarParser_STYPE 
   #define YY_FPoptimizerGrammarParser_STYPE YYSTYPE
#endif
/*#endif*/
 #ifdef YYDEBUG
  #ifndef YY_FPoptimizerGrammarParser_DEBUG
   #define  YY_FPoptimizerGrammarParser_DEBUG YYDEBUG
  #endif
 #endif
 
 /* use goto to be compatible */
 #ifndef YY_FPoptimizerGrammarParser_USE_GOTO
  #define YY_FPoptimizerGrammarParser_USE_GOTO 1
 #endif
#endif

/* use no goto to be clean in C++ */
#ifndef YY_FPoptimizerGrammarParser_USE_GOTO
 #define YY_FPoptimizerGrammarParser_USE_GOTO 0
#endif

#ifndef YY_FPoptimizerGrammarParser_PURE

 #line 130 "/usr/share/bison++/bison.cc"
#define YY_FPoptimizerGrammarParser_PURE 1

#line 130 "/usr/share/bison++/bison.cc"
/*  YY_FPoptimizerGrammarParser_PURE */
#endif

/* section apres lecture def, avant lecture grammaire S2 */

 #line 134 "/usr/share/bison++/bison.cc"

#line 134 "/usr/share/bison++/bison.cc"
/* prefix */
#ifndef YY_FPoptimizerGrammarParser_DEBUG

 #line 136 "/usr/share/bison++/bison.cc"

#line 136 "/usr/share/bison++/bison.cc"
/* YY_FPoptimizerGrammarParser_DEBUG */
#endif


#ifndef YY_FPoptimizerGrammarParser_LSP_NEEDED

 #line 141 "/usr/share/bison++/bison.cc"

#line 141 "/usr/share/bison++/bison.cc"
 /* YY_FPoptimizerGrammarParser_LSP_NEEDED*/
#endif



/* DEFAULT LTYPE*/
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
#ifndef YY_FPoptimizerGrammarParser_LTYPE
#ifndef BISON_YYLTYPE_ISDECLARED
#define BISON_YYLTYPE_ISDECLARED
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#endif
#define YY_FPoptimizerGrammarParser_LTYPE yyltype
#endif
#endif
/* DEFAULT STYPE*/
      /* We used to use `unsigned long' as YY_FPoptimizerGrammarParser_STYPE on MSDOS,
	 but it seems better to be consistent.
	 Most programs should declare their own type anyway.  */

#ifndef YY_FPoptimizerGrammarParser_STYPE
#define YY_FPoptimizerGrammarParser_STYPE int
#endif
/* DEFAULT MISCELANEOUS */
#ifndef YY_FPoptimizerGrammarParser_PARSE
#define YY_FPoptimizerGrammarParser_PARSE yyparse
#endif
#ifndef YY_FPoptimizerGrammarParser_LEX
#define YY_FPoptimizerGrammarParser_LEX yylex
#endif
#ifndef YY_FPoptimizerGrammarParser_LVAL
#define YY_FPoptimizerGrammarParser_LVAL yylval
#endif
#ifndef YY_FPoptimizerGrammarParser_LLOC
#define YY_FPoptimizerGrammarParser_LLOC yylloc
#endif
#ifndef YY_FPoptimizerGrammarParser_CHAR
#define YY_FPoptimizerGrammarParser_CHAR yychar
#endif
#ifndef YY_FPoptimizerGrammarParser_NERRS
#define YY_FPoptimizerGrammarParser_NERRS yynerrs
#endif
#ifndef YY_FPoptimizerGrammarParser_DEBUG_FLAG
#define YY_FPoptimizerGrammarParser_DEBUG_FLAG yydebug
#endif
#ifndef YY_FPoptimizerGrammarParser_ERROR
#define YY_FPoptimizerGrammarParser_ERROR yyerror
#endif

#ifndef YY_FPoptimizerGrammarParser_PARSE_PARAM
 #ifndef YY_USE_CLASS
  #ifdef YYPARSE_PARAM
   #define YY_FPoptimizerGrammarParser_PARSE_PARAM void* YYPARSE_PARAM 
  #else
   #ifndef __STDC__
    #ifndef __cplusplus
     #define YY_FPoptimizerGrammarParser_PARSE_PARAM
    #endif
   #endif
  #endif
 #endif
 #ifndef YY_FPoptimizerGrammarParser_PARSE_PARAM
  #define YY_FPoptimizerGrammarParser_PARSE_PARAM void
 #endif
#endif

#if YY_FPoptimizerGrammarParser_COMPATIBILITY != 0
/* backward compatibility */
#ifdef YY_FPoptimizerGrammarParser_LTYPE
#ifndef YYLTYPE
#define YYLTYPE YY_FPoptimizerGrammarParser_LTYPE
#else
/* WARNING obsolete !!! user defined YYLTYPE not reported into generated header */
#endif
#endif

/* Removed due to bison compabilityproblems
/#ifndef YYSTYPE
/#define YYSTYPE YY_FPoptimizerGrammarParser_STYPE
/#else*/
/* WARNING obsolete !!! user defined YYSTYPE not reported into generated header */
/*#endif*/

#ifdef YY_FPoptimizerGrammarParser_PURE
#  ifndef YYPURE
#    define YYPURE YY_FPoptimizerGrammarParser_PURE
#  endif
#endif

#ifdef YY_FPoptimizerGrammarParser_DEBUG
#  ifndef YYDEBUG
#    define YYDEBUG YY_FPoptimizerGrammarParser_DEBUG 
#  endif
#endif

#ifndef YY_FPoptimizerGrammarParser_ERROR_VERBOSE
 #ifdef YYERROR_VERBOSE
  #define YY_FPoptimizerGrammarParser_ERROR_VERBOSE YYERROR_VERBOSE
 #endif
#endif

#ifndef YY_FPoptimizerGrammarParser_LSP_NEEDED
#  ifdef YYLSP_NEEDED
#    define YY_FPoptimizerGrammarParser_LSP_NEEDED YYLSP_NEEDED
#  endif
#endif

#endif

#ifndef YY_USE_CLASS
/* TOKEN C */

 #line 263 "/usr/share/bison++/bison.cc"
#define	NUMERIC_CONSTANT	258
#define	PARAMETER_TOKEN	259
#define	PLACEHOLDER_TOKEN	260
#define	IMMED_TOKEN	261
#define	BUILTIN_FUNC_NAME	262
#define	OPCODE	263
#define	UNARY_TRANSFORMATION	264
#define	PARAM_CONSTRAINT	265
#define	NEWLINE	266
#define	SUBST_OP_COLON	267
#define	SUBST_OP_ARROW	268
#define	BALANCE_POS	269
#define	BALANCE_EQUAL	270
#define	BALANCE_NEG	271


#line 263 "/usr/share/bison++/bison.cc"
 /* #defines tokens */
#else
/* CLASS */
#ifndef YY_FPoptimizerGrammarParser_CLASS
#define YY_FPoptimizerGrammarParser_CLASS FPoptimizerGrammarParser
#endif
#ifndef YY_FPoptimizerGrammarParser_INHERIT
#define YY_FPoptimizerGrammarParser_INHERIT
#endif
#ifndef YY_FPoptimizerGrammarParser_MEMBERS
#define YY_FPoptimizerGrammarParser_MEMBERS 
#endif
#ifndef YY_FPoptimizerGrammarParser_LEX_BODY
#define YY_FPoptimizerGrammarParser_LEX_BODY  
#endif
#ifndef YY_FPoptimizerGrammarParser_ERROR_BODY
#define YY_FPoptimizerGrammarParser_ERROR_BODY  
#endif
#ifndef YY_FPoptimizerGrammarParser_CONSTRUCTOR_PARAM
#define YY_FPoptimizerGrammarParser_CONSTRUCTOR_PARAM
#endif
#ifndef YY_FPoptimizerGrammarParser_CONSTRUCTOR_CODE
#define YY_FPoptimizerGrammarParser_CONSTRUCTOR_CODE
#endif
#ifndef YY_FPoptimizerGrammarParser_CONSTRUCTOR_INIT
#define YY_FPoptimizerGrammarParser_CONSTRUCTOR_INIT
#endif
/* choose between enum and const */
#ifndef YY_FPoptimizerGrammarParser_USE_CONST_TOKEN
#define YY_FPoptimizerGrammarParser_USE_CONST_TOKEN 0
/* yes enum is more compatible with flex,  */
/* so by default we use it */ 
#endif
#if YY_FPoptimizerGrammarParser_USE_CONST_TOKEN != 0
#ifndef YY_FPoptimizerGrammarParser_ENUM_TOKEN
#define YY_FPoptimizerGrammarParser_ENUM_TOKEN yy_FPoptimizerGrammarParser_enum_token
#endif
#endif

class YY_FPoptimizerGrammarParser_CLASS YY_FPoptimizerGrammarParser_INHERIT
{
public: 
#if YY_FPoptimizerGrammarParser_USE_CONST_TOKEN != 0
/* static const int token ... */

 #line 307 "/usr/share/bison++/bison.cc"
static const int NUMERIC_CONSTANT;
static const int PARAMETER_TOKEN;
static const int PLACEHOLDER_TOKEN;
static const int IMMED_TOKEN;
static const int BUILTIN_FUNC_NAME;
static const int OPCODE;
static const int UNARY_TRANSFORMATION;
static const int PARAM_CONSTRAINT;
static const int NEWLINE;
static const int SUBST_OP_COLON;
static const int SUBST_OP_ARROW;
static const int BALANCE_POS;
static const int BALANCE_EQUAL;
static const int BALANCE_NEG;


#line 307 "/usr/share/bison++/bison.cc"
 /* decl const */
#else
enum YY_FPoptimizerGrammarParser_ENUM_TOKEN { YY_FPoptimizerGrammarParser_NULL_TOKEN=0

 #line 310 "/usr/share/bison++/bison.cc"
	,NUMERIC_CONSTANT=258
	,PARAMETER_TOKEN=259
	,PLACEHOLDER_TOKEN=260
	,IMMED_TOKEN=261
	,BUILTIN_FUNC_NAME=262
	,OPCODE=263
	,UNARY_TRANSFORMATION=264
	,PARAM_CONSTRAINT=265
	,NEWLINE=266
	,SUBST_OP_COLON=267
	,SUBST_OP_ARROW=268
	,BALANCE_POS=269
	,BALANCE_EQUAL=270
	,BALANCE_NEG=271


#line 310 "/usr/share/bison++/bison.cc"
 /* enum token */
     }; /* end of enum declaration */
#endif
public:
 int YY_FPoptimizerGrammarParser_PARSE (YY_FPoptimizerGrammarParser_PARSE_PARAM);
 virtual void YY_FPoptimizerGrammarParser_ERROR(char *msg) YY_FPoptimizerGrammarParser_ERROR_BODY;
#ifdef YY_FPoptimizerGrammarParser_PURE
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
 virtual int  YY_FPoptimizerGrammarParser_LEX (YY_FPoptimizerGrammarParser_STYPE *YY_FPoptimizerGrammarParser_LVAL,YY_FPoptimizerGrammarParser_LTYPE *YY_FPoptimizerGrammarParser_LLOC) YY_FPoptimizerGrammarParser_LEX_BODY;
#else
 virtual int  YY_FPoptimizerGrammarParser_LEX (YY_FPoptimizerGrammarParser_STYPE *YY_FPoptimizerGrammarParser_LVAL) YY_FPoptimizerGrammarParser_LEX_BODY;
#endif
#else
 virtual int YY_FPoptimizerGrammarParser_LEX() YY_FPoptimizerGrammarParser_LEX_BODY;
 YY_FPoptimizerGrammarParser_STYPE YY_FPoptimizerGrammarParser_LVAL;
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
 YY_FPoptimizerGrammarParser_LTYPE YY_FPoptimizerGrammarParser_LLOC;
#endif
 int   YY_FPoptimizerGrammarParser_NERRS;
 int    YY_FPoptimizerGrammarParser_CHAR;
#endif
#if YY_FPoptimizerGrammarParser_DEBUG != 0
 int YY_FPoptimizerGrammarParser_DEBUG_FLAG;   /*  nonzero means print parse trace     */
#endif
public:
 YY_FPoptimizerGrammarParser_CLASS(YY_FPoptimizerGrammarParser_CONSTRUCTOR_PARAM);
public:
 YY_FPoptimizerGrammarParser_MEMBERS 
};
/* other declare folow */
#if YY_FPoptimizerGrammarParser_USE_CONST_TOKEN != 0

 #line 341 "/usr/share/bison++/bison.cc"
const int YY_FPoptimizerGrammarParser_CLASS::NUMERIC_CONSTANT=258;
const int YY_FPoptimizerGrammarParser_CLASS::PARAMETER_TOKEN=259;
const int YY_FPoptimizerGrammarParser_CLASS::PLACEHOLDER_TOKEN=260;
const int YY_FPoptimizerGrammarParser_CLASS::IMMED_TOKEN=261;
const int YY_FPoptimizerGrammarParser_CLASS::BUILTIN_FUNC_NAME=262;
const int YY_FPoptimizerGrammarParser_CLASS::OPCODE=263;
const int YY_FPoptimizerGrammarParser_CLASS::UNARY_TRANSFORMATION=264;
const int YY_FPoptimizerGrammarParser_CLASS::PARAM_CONSTRAINT=265;
const int YY_FPoptimizerGrammarParser_CLASS::NEWLINE=266;
const int YY_FPoptimizerGrammarParser_CLASS::SUBST_OP_COLON=267;
const int YY_FPoptimizerGrammarParser_CLASS::SUBST_OP_ARROW=268;
const int YY_FPoptimizerGrammarParser_CLASS::BALANCE_POS=269;
const int YY_FPoptimizerGrammarParser_CLASS::BALANCE_EQUAL=270;
const int YY_FPoptimizerGrammarParser_CLASS::BALANCE_NEG=271;


#line 341 "/usr/share/bison++/bison.cc"
 /* const YY_FPoptimizerGrammarParser_CLASS::token */
#endif
/*apres const  */
YY_FPoptimizerGrammarParser_CLASS::YY_FPoptimizerGrammarParser_CLASS(YY_FPoptimizerGrammarParser_CONSTRUCTOR_PARAM) YY_FPoptimizerGrammarParser_CONSTRUCTOR_INIT
{
#if YY_FPoptimizerGrammarParser_DEBUG != 0
YY_FPoptimizerGrammarParser_DEBUG_FLAG=0;
#endif
YY_FPoptimizerGrammarParser_CONSTRUCTOR_CODE;
}
#endif

 #line 352 "/usr/share/bison++/bison.cc"


#define	YYFINAL		52
#define	YYFLAG		-32768
#define	YYNTBASE	26

#define YYTRANSLATE(x) ((unsigned)(x) <= 271 ? yytranslate[x] : 37)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,    22,
    23,    25,    24,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    17,     2,    18,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    19,     2,    20,    21,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16
};

#if YY_FPoptimizerGrammarParser_DEBUG != 0
static const short yyprhs[] = {     0,
     0,     3,     6,     7,    12,    17,    22,    24,    29,    34,
    37,    39,    42,    45,    48,    52,    55,    56,    58,    60,
    65,    68,    70,    73,    76,    78,    80,    83,    86,    91,
    94
};

static const short yyrhs[] = {    26,
    27,     0,    26,    11,     0,     0,    28,    13,    32,    11,
     0,    28,    13,    29,    11,     0,    28,    12,    30,    11,
     0,    29,     0,     8,    17,    30,    18,     0,     8,    19,
    30,    20,     0,     8,    30,     0,    31,     0,    31,    14,
     0,    31,    16,     0,    31,    15,     0,    31,    21,    32,
     0,    31,    32,     0,     0,     3,     0,    34,     0,     7,
    22,    31,    23,     0,     9,    32,     0,    33,     0,    33,
    24,     0,    33,    25,     0,    35,     0,     5,     0,     4,
    36,     0,     6,    36,     0,    22,    29,    23,    36,     0,
    36,    10,     0,     0
};

#endif

#if (YY_FPoptimizerGrammarParser_DEBUG != 0) || defined(YY_FPoptimizerGrammarParser_ERROR_VERBOSE) 
static const short yyrline[] = { 0,
   927,   933,   934,   937,   947,   963,   987,   998,  1021,  1043,
  1066,  1068,  1069,  1070,  1073,  1078,  1082,  1088,  1093,  1094,
  1109,  1118,  1122,  1128,  1134,  1135,  1141,  1151,  1159,  1167,
  1172
};

static const char * const yytname[] = {   "$","error","$illegal.","NUMERIC_CONSTANT",
"PARAMETER_TOKEN","PLACEHOLDER_TOKEN","IMMED_TOKEN","BUILTIN_FUNC_NAME","OPCODE",
"UNARY_TRANSFORMATION","PARAM_CONSTRAINT","NEWLINE","SUBST_OP_COLON","SUBST_OP_ARROW",
"BALANCE_POS","BALANCE_EQUAL","BALANCE_NEG","'['","']'","'{'","'}'","'~'","'('",
"')'","'+'","'*'","grammar","substitution","function_match","function","paramlist",
"paramlist_loop","param","expression_param","immed_param","subtree_param","param_constraints",
""
};
#endif

static const short yyr1[] = {     0,
    26,    26,    26,    27,    27,    27,    28,    29,    29,    29,
    30,    30,    30,    30,    31,    31,    31,    32,    32,    32,
    32,    32,    32,    32,    32,    32,    33,    34,    35,    36,
    36
};

static const short yyr2[] = {     0,
     2,     2,     0,     4,     4,     4,     1,     4,     4,     2,
     1,     2,     2,     2,     3,     2,     0,     1,     1,     4,
     2,     1,     2,     2,     1,     1,     2,     2,     4,     2,
     0
};

static const short yydefact[] = {     3,
     0,    17,     2,     1,     0,     7,    17,    17,    10,    11,
    17,     0,     0,     0,    18,    31,    26,    31,     0,     0,
    12,    14,    13,     0,     0,    16,    22,    19,    25,     0,
     0,     0,     8,     9,    27,    28,    17,    21,    15,     0,
    23,    24,     6,     5,     4,    30,     0,    31,    20,    29,
     0,     0
};

static const short yydefgoto[] = {     1,
     4,     5,     6,     9,    10,    26,    27,    28,    29,    35
};

static const short yypact[] = {-32768,
    49,    46,-32768,-32768,    24,-32768,-32768,-32768,-32768,    19,
-32768,     5,   -12,    -5,-32768,-32768,-32768,-32768,     9,    39,
-32768,-32768,-32768,    39,    30,-32768,    -7,-32768,-32768,    21,
    43,    44,-32768,-32768,    40,    40,-32768,-32768,-32768,    35,
-32768,-32768,-32768,-32768,-32768,-32768,    -2,-32768,-32768,    40,
    59,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,     4,    45,    25,    27,-32768,-32768,-32768,   -18
};


#define	YYLAST		65


static const short yytable[] = {    36,
    15,    16,    17,    18,    19,    33,    20,    15,    16,    17,
    18,    19,     2,    20,    34,    31,    41,    42,    24,    25,
    49,    15,    16,    17,    18,    19,    25,    20,    40,    50,
    37,    43,    21,    22,    23,    11,    12,     2,    32,    24,
    25,    15,    16,    17,    18,    19,    38,    20,    51,    46,
    39,    13,    14,    44,    45,    30,     2,    48,    52,     3,
    25,    47,     7,     0,     8
};

static const short yycheck[] = {    18,
     3,     4,     5,     6,     7,    18,     9,     3,     4,     5,
     6,     7,     8,     9,    20,    12,    24,    25,    21,    22,
    23,     3,     4,     5,     6,     7,    22,     9,    25,    48,
    22,    11,    14,    15,    16,    12,    13,     8,    12,    21,
    22,     3,     4,     5,     6,     7,    20,     9,     0,    10,
    24,     7,     8,    11,    11,    11,     8,    23,     0,    11,
    22,    37,    17,    -1,    19
};

#line 352 "/usr/share/bison++/bison.cc"
 /* fattrs + tables */

/* parser code folow  */


/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: dollar marks section change
   the next  is replaced by the list of actions, each action
   as one case of the switch.  */ 

#if YY_FPoptimizerGrammarParser_USE_GOTO != 0
/* 
 SUPRESSION OF GOTO : on some C++ compiler (sun c++)
  the goto is strictly forbidden if any constructor/destructor
  is used in the whole function (very stupid isn't it ?)
 so goto are to be replaced with a 'while/switch/case construct'
 here are the macro to keep some apparent compatibility
*/
#define YYGOTO(lb) {yy_gotostate=lb;continue;}
#define YYBEGINGOTO  enum yy_labels yy_gotostate=yygotostart; \
                     for(;;) switch(yy_gotostate) { case yygotostart: {
#define YYLABEL(lb) } case lb: {
#define YYENDGOTO } } 
#define YYBEGINDECLARELABEL enum yy_labels {yygotostart
#define YYDECLARELABEL(lb) ,lb
#define YYENDDECLARELABEL  };
#else
/* macro to keep goto */
#define YYGOTO(lb) goto lb
#define YYBEGINGOTO 
#define YYLABEL(lb) lb:
#define YYENDGOTO
#define YYBEGINDECLARELABEL 
#define YYDECLARELABEL(lb)
#define YYENDDECLARELABEL 
#endif
/* LABEL DECLARATION */
YYBEGINDECLARELABEL
  YYDECLARELABEL(yynewstate)
  YYDECLARELABEL(yybackup)
/* YYDECLARELABEL(yyresume) */
  YYDECLARELABEL(yydefault)
  YYDECLARELABEL(yyreduce)
  YYDECLARELABEL(yyerrlab)   /* here on detecting error */
  YYDECLARELABEL(yyerrlab1)   /* here on error raised explicitly by an action */
  YYDECLARELABEL(yyerrdefault)  /* current state does not do anything special for the error token. */
  YYDECLARELABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */
  YYDECLARELABEL(yyerrhandle)  
YYENDDECLARELABEL
/* ALLOCA SIMULATION */
/* __HAVE_NO_ALLOCA */
#ifdef __HAVE_NO_ALLOCA
int __alloca_free_ptr(char *ptr,char *ref)
{if(ptr!=ref) free(ptr);
 return 0;}

#define __ALLOCA_alloca(size) malloc(size)
#define __ALLOCA_free(ptr,ref) __alloca_free_ptr((char *)ptr,(char *)ref)

#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		    __ALLOCA_free(yyls,yylsa)+\
		   (num)); } while(0)
#else
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		   (num)); } while(0)
#endif
#else
#define __ALLOCA_return(num) do { return(num); } while(0)
#define __ALLOCA_alloca(size) alloca(size)
#define __ALLOCA_free(ptr,ref) 
#endif

/* ENDALLOCA SIMULATION */

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (YY_FPoptimizerGrammarParser_CHAR = YYEMPTY)
#define YYEMPTY         -2
#define YYEOF           0
#define YYACCEPT        __ALLOCA_return(0)
#define YYABORT         __ALLOCA_return(1)
#define YYERROR         YYGOTO(yyerrlab1)
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL          YYGOTO(yyerrlab)
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do                                                              \
  if (YY_FPoptimizerGrammarParser_CHAR == YYEMPTY && yylen == 1)                               \
    { YY_FPoptimizerGrammarParser_CHAR = (token), YY_FPoptimizerGrammarParser_LVAL = (value);                 \
      yychar1 = YYTRANSLATE (YY_FPoptimizerGrammarParser_CHAR);                                \
      YYPOPSTACK;                                               \
      YYGOTO(yybackup);                                            \
    }                                                           \
  else                                                          \
    { YY_FPoptimizerGrammarParser_ERROR ("syntax error: cannot back up"); YYERROR; }   \
while (0)

#define YYTERROR        1
#define YYERRCODE       256

#ifndef YY_FPoptimizerGrammarParser_PURE
/* UNPURE */
#define YYLEX           YY_FPoptimizerGrammarParser_LEX()
#ifndef YY_USE_CLASS
/* If nonreentrant, and not class , generate the variables here */
int     YY_FPoptimizerGrammarParser_CHAR;                      /*  the lookahead symbol        */
YY_FPoptimizerGrammarParser_STYPE      YY_FPoptimizerGrammarParser_LVAL;              /*  the semantic value of the */
				/*  lookahead symbol    */
int YY_FPoptimizerGrammarParser_NERRS;                 /*  number of parse errors so far */
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
YY_FPoptimizerGrammarParser_LTYPE YY_FPoptimizerGrammarParser_LLOC;   /*  location data for the lookahead     */
			/*  symbol                              */
#endif
#endif


#else
/* PURE */
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
#define YYLEX           YY_FPoptimizerGrammarParser_LEX(&YY_FPoptimizerGrammarParser_LVAL, &YY_FPoptimizerGrammarParser_LLOC)
#else
#define YYLEX           YY_FPoptimizerGrammarParser_LEX(&YY_FPoptimizerGrammarParser_LVAL)
#endif
#endif
#ifndef YY_USE_CLASS
#if YY_FPoptimizerGrammarParser_DEBUG != 0
int YY_FPoptimizerGrammarParser_DEBUG_FLAG;                    /*  nonzero means print parse trace     */
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif
#endif



/*  YYINITDEPTH indicates the initial size of the parser's stacks       */

#ifndef YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif


#if __GNUC__ > 1                /* GNU C and GNU C++ define this.  */
#define __yy_bcopy(FROM,TO,COUNT)       __builtin_memcpy(TO,FROM,COUNT)
#else                           /* not GNU C or C++ */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */

#ifdef __cplusplus
static void __yy_bcopy (char *from, char *to, int count)
#else
#ifdef __STDC__
static void __yy_bcopy (char *from, char *to, int count)
#else
static void __yy_bcopy (from, to, count)
     char *from;
     char *to;
     int count;
#endif
#endif
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}
#endif


int
#ifdef YY_USE_CLASS
 YY_FPoptimizerGrammarParser_CLASS::
#endif
     YY_FPoptimizerGrammarParser_PARSE(YY_FPoptimizerGrammarParser_PARSE_PARAM)
#ifndef __STDC__
#ifndef __cplusplus
#ifndef YY_USE_CLASS
/* parameter definition without protypes */
YY_FPoptimizerGrammarParser_PARSE_PARAM_DEF
#endif
#endif
#endif
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YY_FPoptimizerGrammarParser_STYPE *yyvsp;
  int yyerrstatus;      /*  number of tokens to shift before error messages enabled */
  int yychar1=0;          /*  lookahead token as an internal (translated) token number */

  short yyssa[YYINITDEPTH];     /*  the state stack                     */
  YY_FPoptimizerGrammarParser_STYPE yyvsa[YYINITDEPTH];        /*  the semantic value stack            */

  short *yyss = yyssa;          /*  refer to the stacks thru separate pointers */
  YY_FPoptimizerGrammarParser_STYPE *yyvs = yyvsa;     /*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
  YY_FPoptimizerGrammarParser_LTYPE yylsa[YYINITDEPTH];        /*  the location stack                  */
  YY_FPoptimizerGrammarParser_LTYPE *yyls = yylsa;
  YY_FPoptimizerGrammarParser_LTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YY_FPoptimizerGrammarParser_PURE
  int YY_FPoptimizerGrammarParser_CHAR;
  YY_FPoptimizerGrammarParser_STYPE YY_FPoptimizerGrammarParser_LVAL;
  int YY_FPoptimizerGrammarParser_NERRS;
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
  YY_FPoptimizerGrammarParser_LTYPE YY_FPoptimizerGrammarParser_LLOC;
#endif
#endif

  YY_FPoptimizerGrammarParser_STYPE yyval;             /*  the variable used to return         */
				/*  semantic values from the action     */
				/*  routines                            */

  int yylen;
/* start loop, in which YYGOTO may be used. */
YYBEGINGOTO

#if YY_FPoptimizerGrammarParser_DEBUG != 0
  if (YY_FPoptimizerGrammarParser_DEBUG_FLAG)
    fprintf(stderr, "Starting parse\n");
#endif
  yystate = 0;
  yyerrstatus = 0;
  YY_FPoptimizerGrammarParser_NERRS = 0;
  YY_FPoptimizerGrammarParser_CHAR = YYEMPTY;          /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
YYLABEL(yynewstate)

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YY_FPoptimizerGrammarParser_STYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
      YY_FPoptimizerGrammarParser_LTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  YY_FPoptimizerGrammarParser_ERROR("parser stack overflow");
	  __ALLOCA_return(2);
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) __ALLOCA_alloca (yystacksize * sizeof (*yyssp));
      __yy_bcopy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      __ALLOCA_free(yyss1,yyssa);
      yyvs = (YY_FPoptimizerGrammarParser_STYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yyvsp));
      __yy_bcopy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
      __ALLOCA_free(yyvs1,yyvsa);
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
      yyls = (YY_FPoptimizerGrammarParser_LTYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yylsp));
      __yy_bcopy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
      __ALLOCA_free(yyls1,yylsa);
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YY_FPoptimizerGrammarParser_DEBUG != 0
      if (YY_FPoptimizerGrammarParser_DEBUG_FLAG)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YY_FPoptimizerGrammarParser_DEBUG != 0
  if (YY_FPoptimizerGrammarParser_DEBUG_FLAG)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  YYGOTO(yybackup);
YYLABEL(yybackup)

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* YYLABEL(yyresume) */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yydefault);

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (YY_FPoptimizerGrammarParser_CHAR == YYEMPTY)
    {
#if YY_FPoptimizerGrammarParser_DEBUG != 0
      if (YY_FPoptimizerGrammarParser_DEBUG_FLAG)
	fprintf(stderr, "Reading a token: ");
#endif
      YY_FPoptimizerGrammarParser_CHAR = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (YY_FPoptimizerGrammarParser_CHAR <= 0)           /* This means end of input. */
    {
      yychar1 = 0;
      YY_FPoptimizerGrammarParser_CHAR = YYEOF;                /* Don't call YYLEX any more */

#if YY_FPoptimizerGrammarParser_DEBUG != 0
      if (YY_FPoptimizerGrammarParser_DEBUG_FLAG)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(YY_FPoptimizerGrammarParser_CHAR);

#if YY_FPoptimizerGrammarParser_DEBUG != 0
      if (YY_FPoptimizerGrammarParser_DEBUG_FLAG)
	{
	  fprintf (stderr, "Next token is %d (%s", YY_FPoptimizerGrammarParser_CHAR, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, YY_FPoptimizerGrammarParser_CHAR, YY_FPoptimizerGrammarParser_LVAL);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    YYGOTO(yydefault);

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrlab);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrlab);

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YY_FPoptimizerGrammarParser_DEBUG != 0
  if (YY_FPoptimizerGrammarParser_DEBUG_FLAG)
    fprintf(stderr, "Shifting token %d (%s), ", YY_FPoptimizerGrammarParser_CHAR, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (YY_FPoptimizerGrammarParser_CHAR != YYEOF)
    YY_FPoptimizerGrammarParser_CHAR = YYEMPTY;

  *++yyvsp = YY_FPoptimizerGrammarParser_LVAL;
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
  *++yylsp = YY_FPoptimizerGrammarParser_LLOC;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  YYGOTO(yynewstate);

/* Do the default action for the current state.  */
YYLABEL(yydefault)

  yyn = yydefact[yystate];
  if (yyn == 0)
    YYGOTO(yyerrlab);

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
YYLABEL(yyreduce)
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YY_FPoptimizerGrammarParser_DEBUG != 0
  if (YY_FPoptimizerGrammarParser_DEBUG_FLAG)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


 #line 839 "/usr/share/bison++/bison.cc"

  switch (yyn) {

case 1:
#line 929 "fpoptimizer/fpoptimizer_grammar_gen.y"
{
        this->grammar.AddRule(*yyvsp[0].r);
        delete yyvsp[0].r;
      ;
    break;}
case 4:
#line 940 "fpoptimizer/fpoptimizer_grammar_gen.y"
{
        yyvsp[-1].a->RecursivelySetParamMatchingType(PositionalParams);

        yyval.r = new GrammarData::Rule(ProduceNewTree, *yyvsp[-3].f, yyvsp[-1].a);
        delete yyvsp[-3].f;
      ;
    break;}
case 5:
#line 950 "fpoptimizer/fpoptimizer_grammar_gen.y"
{
        yyvsp[-1].f->RecursivelySetParamMatchingType(PositionalParams);
        /*if(!$3->Params.EnsureNoRepeatedNamedHolders())
        {
            yyerror("The replacement function may not specify the same variable twise"); YYERROR;
        }*/

        yyval.r = new GrammarData::Rule(ProduceNewTree, *yyvsp[-3].f, new GrammarData::ParamSpec(yyvsp[-1].f));

        //std::cout << GrammarDumper().Dump(*new GrammarData::ParamSpec($3)) << "\n";
        delete yyvsp[-3].f;
      ;
    break;}
case 6:
#line 965 "fpoptimizer/fpoptimizer_grammar_gen.y"
{
        yyvsp[-1].p->RecursivelySetParamMatchingType(PositionalParams);
        /*if(!$3->EnsureNoRepeatedNamedHolders())
        {
            yyerror("The replacement function may not specify the same variable twise"); YYERROR;
        }*/

        if(yyvsp[-3].f->Opcode != cAnd && yyvsp[-3].f->Opcode != cOr)
        {
            /* If function opcode is "notinv", verify that $23 has no inversions */
            if(!yyvsp[-1].p->EnsureNoInversions())
            {
                yyerror("Can have no inversions"); YYERROR;
            }
        }

        yyval.r = new GrammarData::Rule(ReplaceParams, *yyvsp[-3].f, *yyvsp[-1].p);
        delete yyvsp[-3].f;
        delete yyvsp[-1].p;
      ;
    break;}
case 7:
#line 989 "fpoptimizer/fpoptimizer_grammar_gen.y"
{
           if(!yyvsp[0].f->Params.EnsureNoVariableCoverageParams_InPositionalParamLists())
           {
               yyerror("Variable coverage parameters, such as x* or <1>, must not occur in bracketed param lists on the matching side"); YYERROR;
           }
           yyval.f = yyvsp[0].f;
       ;
    break;}
case 8:
#line 1003 "fpoptimizer/fpoptimizer_grammar_gen.y"
{
         if(yyvsp[-3].opcode != cAnd && yyvsp[-3].opcode != cOr)
         {
             /* If function opcode is "notinv", verify that $3 has no inversions */
             if(!yyvsp[-1].p->EnsureNoInversions())
             {
                 yyerror("Can have no inversions"); YYERROR;
             }
         }
/**/
         if(!yyvsp[-1].p->EnsureNoRepeatedRestHolders())
         {
             yyerror("RestHolders such as <1> must not be repeated in a rule; make matching too difficult"); YYERROR;
         }
/**/
         yyval.f = new GrammarData::FunctionType(yyvsp[-3].opcode, *yyvsp[-1].p);
         delete yyvsp[-1].p;
       ;
    break;}
case 9:
#line 1025 "fpoptimizer/fpoptimizer_grammar_gen.y"
{
         if(yyvsp[-3].opcode != cAnd && yyvsp[-3].opcode != cOr)
         {
             /* If function opcode is "notinv", verify that $3 has no inversions */
             if(!yyvsp[-1].p->EnsureNoInversions())
             {
                 yyerror("Can have no inversions"); YYERROR;
             }
         }
/**/
         if(!yyvsp[-1].p->EnsureNoRepeatedRestHolders())
         {
             yyerror("RestHolders such as <1> must not be repeated in a rule; make matching too difficult"); YYERROR;
         }
/**/
         yyval.f = new GrammarData::FunctionType(yyvsp[-3].opcode, *yyvsp[-1].p->SetType(SelectedParams));
         delete yyvsp[-1].p;
       ;
    break;}
case 10:
#line 1046 "fpoptimizer/fpoptimizer_grammar_gen.y"
{
         if(yyvsp[-1].opcode != cAnd && yyvsp[-1].opcode != cOr)
         {
             /* If function opcode is "notinv", verify that $2 has no inversions */
             if(!yyvsp[0].p->EnsureNoInversions())
             {
                 yyerror("Can have no inversions"); YYERROR;
             }
         }
/**/
         if(!yyvsp[0].p->EnsureNoRepeatedRestHolders())
         {
             yyerror("RestHolders such as <1> must not be repeated in a rule; make matching too difficult"); YYERROR;
         }
/**/
         yyval.f = new GrammarData::FunctionType(yyvsp[-1].opcode, *yyvsp[0].p->SetType(AnyParams));
         delete yyvsp[0].p;
       ;
    break;}
case 12:
#line 1068 "fpoptimizer/fpoptimizer_grammar_gen.y"
{ yyval.p = yyvsp[-1].p->SetBalance(BalanceMorePos); ;
    break;}
case 13:
#line 1069 "fpoptimizer/fpoptimizer_grammar_gen.y"
{ yyval.p = yyvsp[-1].p->SetBalance(BalanceMoreNeg); ;
    break;}
case 14:
#line 1070 "fpoptimizer/fpoptimizer_grammar_gen.y"
{ yyval.p = yyvsp[-1].p->SetBalance(BalanceEqual); ;
    break;}
case 15:
#line 1075 "fpoptimizer/fpoptimizer_grammar_gen.y"
{
          yyval.p = yyvsp[-2].p->AddParam(yyvsp[0].a->SetNegated());
        ;
    break;}
case 16:
#line 1079 "fpoptimizer/fpoptimizer_grammar_gen.y"
{
          yyval.p = yyvsp[-1].p->AddParam(yyvsp[0].a);
        ;
    break;}
case 17:
#line 1083 "fpoptimizer/fpoptimizer_grammar_gen.y"
{
          yyval.p = new GrammarData::MatchedParams;
        ;
    break;}
case 18:
#line 1090 "fpoptimizer/fpoptimizer_grammar_gen.y"
{
         yyval.a = new GrammarData::ParamSpec(yyvsp[0].num);
       ;
    break;}
case 20:
#line 1095 "fpoptimizer/fpoptimizer_grammar_gen.y"
{
         /* Verify that $3 contains no inversions */
         if(!yyvsp[-1].p->EnsureNoInversions())
         {
             yyerror("Can have no inversions"); YYERROR;
         }
         /* Verify that $3 consists of constants */
         yyval.a = new GrammarData::ParamSpec(yyvsp[-3].opcode, yyvsp[-1].p->GetParams());
         if(!yyval.a->VerifyIsConstant())
         {
             yyerror("Not constant"); YYERROR;
         }
         delete yyvsp[-1].p;
       ;
    break;}
case 21:
#line 1110 "fpoptimizer/fpoptimizer_grammar_gen.y"
{
         /* Verify that $2 is constant */
         if(!yyvsp[0].a->VerifyIsConstant())
         {
             yyerror("Not constant"); YYERROR;
         }
         yyval.a = yyvsp[0].a->SetTransformation(yyvsp[-1].transform);
       ;
    break;}
case 22:
#line 1119 "fpoptimizer/fpoptimizer_grammar_gen.y"
{
         yyval.a = yyvsp[0].a;
       ;
    break;}
case 23:
#line 1123 "fpoptimizer/fpoptimizer_grammar_gen.y"
{
         /* In matching, matches TWO or more identical repetitions of namedparam */
         /* In substitution, yields an immed containing the number of repetitions */
         yyval.a = yyvsp[-1].a->SetRepeat(2, true);
       ;
    break;}
case 24:
#line 1129 "fpoptimizer/fpoptimizer_grammar_gen.y"
{
         /* In matching, matches TWO or more identical repetitions of namedparam */
         /* In substitution, yields an immed containing the number of repetitions */
         yyval.a = yyvsp[-1].a->SetRepeat(1, true);
       ;
    break;}
case 26:
#line 1136 "fpoptimizer/fpoptimizer_grammar_gen.y"
{
         yyval.a = new GrammarData::ParamSpec(yyvsp[0].index, GrammarData::ParamSpec::RestHolderTag());
       ;
    break;}
case 27:
#line 1143 "fpoptimizer/fpoptimizer_grammar_gen.y"
{
         unsigned nameindex = dumper.DumpName(*yyvsp[-1].name);
         yyval.a = new GrammarData::ParamSpec(nameindex, GrammarData::ParamSpec::NamedHolderTag());
         delete yyvsp[-1].name;
         yyval.a->SetConstraint(yyvsp[0].index);
       ;
    break;}
case 28:
#line 1153 "fpoptimizer/fpoptimizer_grammar_gen.y"
{
         yyval.a = new GrammarData::ParamSpec(yyvsp[-1].index, GrammarData::ParamSpec::ImmedHolderTag());
         yyval.a->SetConstraint(yyvsp[0].index);
       ;
    break;}
case 29:
#line 1161 "fpoptimizer/fpoptimizer_grammar_gen.y"
{
         yyval.a = new GrammarData::ParamSpec(yyvsp[-2].f);
         yyval.a->SetConstraint(yyvsp[0].index);
       ;
    break;}
case 30:
#line 1169 "fpoptimizer/fpoptimizer_grammar_gen.y"
{
         yyval.index = yyvsp[-1].index | yyvsp[0].index;
       ;
    break;}
case 31:
#line 1173 "fpoptimizer/fpoptimizer_grammar_gen.y"
{
         yyval.index = 0;
       ;
    break;}
}

#line 839 "/usr/share/bison++/bison.cc"
   /* the action file gets copied in in place of this dollarsign  */
  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
  yylsp -= yylen;
#endif

#if YY_FPoptimizerGrammarParser_DEBUG != 0
  if (YY_FPoptimizerGrammarParser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = YY_FPoptimizerGrammarParser_LLOC.first_line;
      yylsp->first_column = YY_FPoptimizerGrammarParser_LLOC.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  YYGOTO(yynewstate);

YYLABEL(yyerrlab)   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++YY_FPoptimizerGrammarParser_NERRS;

#ifdef YY_FPoptimizerGrammarParser_ERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      YY_FPoptimizerGrammarParser_ERROR(msg);
	      free(msg);
	    }
	  else
	    YY_FPoptimizerGrammarParser_ERROR ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YY_FPoptimizerGrammarParser_ERROR_VERBOSE */
	YY_FPoptimizerGrammarParser_ERROR("parse error");
    }

  YYGOTO(yyerrlab1);
YYLABEL(yyerrlab1)   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (YY_FPoptimizerGrammarParser_CHAR == YYEOF)
	YYABORT;

#if YY_FPoptimizerGrammarParser_DEBUG != 0
      if (YY_FPoptimizerGrammarParser_DEBUG_FLAG)
	fprintf(stderr, "Discarding token %d (%s).\n", YY_FPoptimizerGrammarParser_CHAR, yytname[yychar1]);
#endif

      YY_FPoptimizerGrammarParser_CHAR = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;              /* Each real token shifted decrements this */

  YYGOTO(yyerrhandle);

YYLABEL(yyerrdefault)  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) YYGOTO(yydefault);
#endif

YYLABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
  yylsp--;
#endif

#if YY_FPoptimizerGrammarParser_DEBUG != 0
  if (YY_FPoptimizerGrammarParser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

YYLABEL(yyerrhandle)

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yyerrdefault);

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    YYGOTO(yyerrdefault);

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrpop);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrpop);

  if (yyn == YYFINAL)
    YYACCEPT;

#if YY_FPoptimizerGrammarParser_DEBUG != 0
  if (YY_FPoptimizerGrammarParser_DEBUG_FLAG)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = YY_FPoptimizerGrammarParser_LVAL;
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
  *++yylsp = YY_FPoptimizerGrammarParser_LLOC;
#endif

  yystate = yyn;
  YYGOTO(yynewstate);
/* end loop, in which YYGOTO may be used. */
  YYENDGOTO
}

/* END */

 #line 1038 "/usr/share/bison++/bison.cc"
#line 1177 "fpoptimizer/fpoptimizer_grammar_gen.y"


#ifndef FP_SUPPORT_OPTIMIZER
enum { cVar,cDup,cInv,cFetch,cPopNMov,cSqr,cRDiv,cRSub,cNotNot,cRSqrt };
#endif

void FPoptimizerGrammarParser::yyerror(char* msg)
{
    fprintf(stderr, "%s\n", msg);
    for(;;)
    {
        int c = std::fgetc(stdin);
        if(c == EOF) break;
        std::fputc(c, stderr);
    }
    exit(1);
}

int FPoptimizerGrammarParser::yylex(yy_FPoptimizerGrammarParser_stype* lval)
{
    int c = std::fgetc(stdin);
    switch(c)
    {
        case EOF: break;
        case '#':
            while(c != EOF && c != '\n') c = std::fgetc(stdin);
            return NEWLINE;
        case '\n':
        {
            c = std::fgetc(stdin);
            std::ungetc(c, stdin);
            if(c == '[')
                return EOF;
            return NEWLINE;
        }
        case '+':
        {
            c = std::fgetc(stdin);
            std::ungetc(c, stdin);
            if(c == '(') { lval->opcode = cAdd; return BUILTIN_FUNC_NAME; }
            return '+';
        }
        case '*':
        {
            c = std::fgetc(stdin);
            std::ungetc(c, stdin);
            if(c == '(') { lval->opcode = cMul; return BUILTIN_FUNC_NAME; }
            return '*';
        }
        case '-':
        {
            int c2 = std::fgetc(stdin);
            if(c2 == '>') return SUBST_OP_ARROW;
            std::ungetc(c2, stdin);
            if(c2 >= '0' && c2 <= '9')
            {
                goto GotNumeric;
            }
            lval->transform = Negate;
            return UNARY_TRANSFORMATION;
        }
        case '/':
            lval->transform = Invert;
            return UNARY_TRANSFORMATION;

        case '=':
        {
            int c2 = std::fgetc(stdin);
            if(c2 == '-') return BALANCE_NEG;
            if(c2 == '+') return BALANCE_POS;
            if(c2 == '=') return BALANCE_EQUAL;
            std::ungetc(c2, stdin);
            return '=';
        }
        case '~':
        case '[': case '{':
        case ']': case '}':
        case '(':
        case ')':
            return c;
        case ' ':
        case '\t':
        case '\v':
        case '\r':
            return yylex(lval); // Counts as tail recursion, I hope
        case ':':
            return SUBST_OP_COLON;
        case '%': { lval->index = 0; return IMMED_TOKEN; }
        case '&': { lval->index = 1; return IMMED_TOKEN; }

        case '@':
        {
            int c2 = std::fgetc(stdin);
            switch(c2)
            {
                case 'E': { lval->index = Value_EvenInt; return PARAM_CONSTRAINT; }
                case 'O': { lval->index = Value_OddInt; return PARAM_CONSTRAINT; }
                case 'I': { lval->index = Value_IsInteger; return PARAM_CONSTRAINT; }
                case 'F': { lval->index = Value_NonInteger; return PARAM_CONSTRAINT; }
                case 'P': { lval->index = Sign_Positive; return PARAM_CONSTRAINT; }
                case 'N': { lval->index = Sign_Negative; return PARAM_CONSTRAINT; }
                case 'Q': { lval->index = Sign_NoIdea; return PARAM_CONSTRAINT; }
                case '1': { lval->index = Oneness_One; return PARAM_CONSTRAINT; }
                case 'M': { lval->index = Oneness_NotOne; return PARAM_CONSTRAINT; }
            }
            std::ungetc(c2, stdin);
            return '@';
        }
        case '<':
        {
            lval->index  = 0;
            for(;;)
            {
                c = std::fgetc(stdin);
                if(c < '0' || c > '9') { std::ungetc(c, stdin); break; }
                lval->index = lval->index * 10 + (c-'0');
            }
            c = std::fgetc(stdin);
            if(c != '>') std::ungetc(c, stdin);
            return PLACEHOLDER_TOKEN;
        }
        case '0': case '1': case '2': case '3': case '4':
        case '5': case '6': case '7': case '8': case '9':
        {
        GotNumeric:;
            std::string NumBuf;
            NumBuf += (char)c;
            bool had_comma = false;
            for(;;)
            {
                c = std::fgetc(stdin);
                if(c >= '0' && c <= '9')  { NumBuf += (char)c; continue; }
                if(c == '.' && !had_comma){ had_comma = true; NumBuf += (char)c; continue; }
                std::ungetc(c, stdin);
                break;
            }
            lval->num = std::strtod(NumBuf.c_str(), 0);
            return NUMERIC_CONSTANT;
        }
        case 'A': case 'B': case 'C': case 'D': case 'E': case 'F':
        case 'G': case 'H': case 'I': case 'J': case 'K': case 'L':
        case 'M': case 'N': case 'O': case 'P': case 'Q': case 'R':
        case 'S': case 'T': case 'U': case 'V': case 'W': case 'X':
        case 'Y': case 'Z': case '_':
        case 'a': case 'b': case 'c': case 'd': case 'e': case 'f':
        case 'g': case 'h': case 'i': case 'j': case 'k': case 'l':
        case 'm': case 'n': case 'o': case 'p': case 'q': case 'r':
        case 's': case 't': case 'u': case 'v': case 'w': case 'x':
        case 'y': case 'z':
        {
            std::string IdBuf;
            IdBuf += (char)c;
            for(;;)
            {
                c = std::fgetc(stdin);
                if((c >= '0' && c <= '9')
                || c == '_'
                || (c >= 'a' && c <= 'z')
                || (c >= 'A' && c <= 'Z')) { IdBuf += (char)c; continue; }
                std::ungetc(c, stdin);
                break;
            }

            /* This code figures out if this is a named constant,
               an opcode, or a parse-time function name,
               or just an identifier
             */

            /* Detect named constants */
            if(IdBuf == "CONSTANT_E") { lval->num = CONSTANT_E; return NUMERIC_CONSTANT; }
            if(IdBuf == "CONSTANT_EI") { lval->num = CONSTANT_EI; return NUMERIC_CONSTANT; }
            if(IdBuf == "CONSTANT_2E") { lval->num = CONSTANT_2E; return NUMERIC_CONSTANT; }
            if(IdBuf == "CONSTANT_2EI") { lval->num = CONSTANT_2EI; return NUMERIC_CONSTANT; }
            if(IdBuf == "CONSTANT_RD") { lval->num = CONSTANT_RD; return NUMERIC_CONSTANT; }
            if(IdBuf == "CONSTANT_DR") { lval->num = CONSTANT_DR; return NUMERIC_CONSTANT; }
            if(IdBuf == "CONSTANT_PI") { lval->num = CONSTANT_PI; return NUMERIC_CONSTANT; }
            if(IdBuf == "CONSTANT_PIHALF") { lval->num = CONSTANT_PIHALF; return NUMERIC_CONSTANT; }
            if(IdBuf == "CONSTANT_L2I") { lval->num = CONSTANT_L2I; return NUMERIC_CONSTANT; }
            if(IdBuf == "CONSTANT_L10I") { lval->num = CONSTANT_L10I; return NUMERIC_CONSTANT; }
            if(IdBuf == "CONSTANT_L2") { lval->num = CONSTANT_L2; return NUMERIC_CONSTANT; }
            if(IdBuf == "CONSTANT_L10") { lval->num = CONSTANT_L10; return NUMERIC_CONSTANT; }
            if(IdBuf == "CONSTANT_L10B") { lval->num = CONSTANT_L10B; return NUMERIC_CONSTANT; }
            if(IdBuf == "CONSTANT_L10BI") { lval->num = CONSTANT_L10BI; return NUMERIC_CONSTANT; }
            if(IdBuf == "NaN") { lval->num = FPOPT_NAN_CONST; return NUMERIC_CONSTANT; }

            /* Detect opcodes */
            if(IdBuf == "cAdd") { lval->opcode = cAdd; return OPCODE; }
            if(IdBuf == "cAnd") { lval->opcode = cAnd; return OPCODE; }
            if(IdBuf == "cMul") { lval->opcode = cMul; return OPCODE; }
            if(IdBuf == "cOr")  { lval->opcode = cOr; return OPCODE; }

            if(IdBuf == "cNeg") { lval->opcode = cNeg; return OPCODE; }
            if(IdBuf == "cSub") { lval->opcode = cSub; return OPCODE; }
            if(IdBuf == "cDiv") { lval->opcode = cDiv; return OPCODE; }
            if(IdBuf == "cMod") { lval->opcode = cMod; return OPCODE; }
            if(IdBuf == "cEqual") { lval->opcode = cEqual; return OPCODE; }
            if(IdBuf == "cNEqual") { lval->opcode = cNEqual; return OPCODE; }
            if(IdBuf == "cLess") { lval->opcode = cLess; return OPCODE; }
            if(IdBuf == "cLessOrEq") { lval->opcode = cLessOrEq; return OPCODE; }
            if(IdBuf == "cGreater") { lval->opcode = cGreater; return OPCODE; }
            if(IdBuf == "cGreaterOrEq") { lval->opcode = cGreaterOrEq; return OPCODE; }
            if(IdBuf == "cNot") { lval->opcode = cNot; return OPCODE; }
            if(IdBuf == "cNotNot") { lval->opcode = cNotNot; return OPCODE; }
            if(IdBuf == "cDeg")  { lval->opcode = cDeg; return OPCODE; }
            if(IdBuf == "cRad")  { lval->opcode = cRad; return OPCODE; }
            if(IdBuf == "cInv")  { lval->opcode = cInv; return OPCODE; }
            if(IdBuf == "cSqr")  { lval->opcode = cSqr; return OPCODE; }
            if(IdBuf == "cRDiv") { lval->opcode = cRDiv; return OPCODE; }
            if(IdBuf == "cRSub") { lval->opcode = cRSub; return OPCODE; }
            if(IdBuf == "cRSqrt") { lval->opcode = cRSqrt; return OPCODE; }

            /* Detect other function opcodes */
            if(IdBuf[0] == 'c' && std::isupper(IdBuf[1]))
            {
                // This has a chance of being an opcode token
                std::string opcodetoken = IdBuf.substr(1);
                opcodetoken[0] = std::tolower(opcodetoken[0]);
                NamePtr nameptr(opcodetoken.c_str(), opcodetoken.size());
                const FuncDefinition* func = findFunction(nameptr);
                if(func)
                {
                    lval->opcode = func->opcode;
                    return OPCODE;
                }
                fprintf(stderr,
                    "Warning: Unrecognized opcode '%s' interpreted as cNop\n",
                        IdBuf.c_str());
                lval->opcode = cNop;
                return OPCODE;
            }

            // If it is typed entirely in capitals, it has a chance of being
            // a group token
            if(true)
            {
                std::string grouptoken = IdBuf;
                for(size_t a=0; a<grouptoken.size(); ++a)
                {
                    if(std::islower(grouptoken[a])) goto NotAGroupToken;
                    grouptoken[a] = std::tolower(grouptoken[a]);
                }
                if(1) // scope
                {
                    NamePtr nameptr(grouptoken.c_str(), grouptoken.size());
                    const FuncDefinition* func = findFunction(nameptr);
                    if(func)
                    {
                        lval->opcode = func->opcode;
                        return BUILTIN_FUNC_NAME;
                    }
                    if(IdBuf == "MOD")
                    {
                        lval->opcode = cMod;
                        return BUILTIN_FUNC_NAME;
                    }

                    fprintf(stderr, "Warning: Unrecognized constant function '%s' interpreted as cNop\n",
                        IdBuf.c_str());
                    lval->opcode = cNop;
                    return BUILTIN_FUNC_NAME;
                }
            NotAGroupToken:;
            }
            // Anything else is an identifier
            lval->name = new std::string(IdBuf);
            // fprintf(stderr, "'%s' interpreted as PARAM\n", IdBuf.c_str());

            return PARAMETER_TOKEN;
        }
        default:
        {
            fprintf(stderr, "Ignoring unidentifier character '%c'\n", c);
            return yylex(lval); // tail recursion
        }
    }
    return EOF;
}

int main()
{
    GrammarData::Grammar Grammar_Basic;
    GrammarData::Grammar Grammar_Entry;
    GrammarData::Grammar Grammar_Intermediate;
    GrammarData::Grammar Grammar_Final1;
    GrammarData::Grammar Grammar_Final2;

    std::string sectionname;

    for(;;)
    {
        FPoptimizerGrammarParser x;
        x.yyparse();

        if(sectionname == "BASIC")
            Grammar_Basic = x.grammar;
        else if(sectionname == "ENTRY")
            Grammar_Entry = x.grammar;
        else if(sectionname == "INTERMEDIATE")
            Grammar_Intermediate = x.grammar;
        else if(sectionname == "FINAL1")
            Grammar_Final1 = x.grammar;
        else if(sectionname == "FINAL2")
            Grammar_Final2 = x.grammar;
        else if(!sectionname.empty())
            fprintf(stderr, "Warning: Ignored rules in unknown section '%s'\n",
                sectionname.c_str());

        int c = std::fgetc(stdin);
        if(c != '[') break;

        sectionname.clear();
        for(;;)
        {
            c = std::fgetc(stdin);
            if(c == ']' || c == EOF) break;
            sectionname += (char)c;
        }
        fprintf(stderr, "Parsing [%s]\n",
            sectionname.c_str());
    }

    std::sort(Grammar_Entry.rules.begin(), Grammar_Entry.rules.end());

    Grammar_Intermediate.rules.insert(
       Grammar_Intermediate.rules.end(),
       Grammar_Basic.rules.begin(),
       Grammar_Basic.rules.end());

    std::sort(Grammar_Intermediate.rules.begin(), Grammar_Intermediate.rules.end());

    Grammar_Final1.rules.insert(
       Grammar_Final1.rules.end(),
       Grammar_Basic.rules.begin(),
       Grammar_Basic.rules.end());

    std::sort(Grammar_Final1.rules.begin(), Grammar_Final1.rules.end());

    std::sort(Grammar_Final2.rules.begin(), Grammar_Final2.rules.end());

    std::cout <<
        "/* This file is automatically generated. Do not edit... */\n"
        "#include \"fpoptimizer_grammar.hh\"\n"
        "#include \"fpconfig.hh\"\n"
        "#include \"fptypes.hh\"\n"
        "\n"
        "using namespace FPoptimizer_Grammar;\n"
        "using namespace FUNCTIONPARSERTYPES;\n"
        "\n";

    /*size_t e = */dumper.DumpGrammar(Grammar_Entry);
    /*size_t i = */dumper.DumpGrammar(Grammar_Intermediate);
    /*size_t f = */dumper.DumpGrammar(Grammar_Final1);
    /*size_t f = */dumper.DumpGrammar(Grammar_Final2);

    dumper.Flush();

    return 0;
}
