/* Function Parser for C++ v5.0.0   

  NOTE:
  Do not include this file in your project. The fparser.cc file #includes
this file internally and thus you don't need to do anything (other than keep
this file in the same directory as fparser.cc).

  This file contains generated code and is thus not intended to be to
be modified by hand. It was generated by util/bytecoderules_parser, which
is available in the development package.
*/
#define HasInvalidRangesOpcode HasInvalidRangesOpcode<IsComplexType<Value_t>::value>
#define FP_TRACE_BYTECODE_OPTIMIZATION(srcline,from,to,with) \
    /*std::cout << "Changing \"" from "\"\t(line " #srcline ")\n" \
                   "    into \"" to "\"\n" with << std::flush*/
#define FP_TRACE_OPCODENAME(op) \
    (op < VarBegin \
        ? FP_GetOpcodeName(OPCODE(op)) \
        : findName(mData->mNamePtrs,op,NameData<Value_t>::VARIABLE))
#define FP_TRACE_BYTECODE_ADD(opcode) \
    /*std::cout << "Adding opcode: " << FP_TRACE_OPCODENAME(opcode) \
                << ", bytecode length " << mData->mByteCode.size() \
                << ", pointer is " << (void*)ByteCodePtr \
                << ", code is " << (mData->mByteCode.empty() \
                                       ? (void*)0 \
                                       : (void*)&mData->mByteCode[0]) \
                << std::endl*/
  unsigned* ByteCodePtr;
  Value_t*   ImmedPtr;

  #define FP_ReDefinePointers() \
    ByteCodePtr = !mData->mByteCode.empty() ? &mData->mByteCode[0] + mData->mByteCode.size() - 1 : 0; \
    ImmedPtr    = !mData->mImmed.empty()    ? &mData->mImmed[0]    + mData->mImmed.size()    - 1 : 0;
  FP_ReDefinePointers();
  FP_TRACE_BYTECODE_ADD(opcode);

#if(!(FP_COMPLEX_VERSION) && !(FP_FLOAT_VERSION))
	Value_t x;
	unsigned A;
	Value_t y;
	unsigned B;
	unsigned C;
	unsigned D;
	switch(opcode)
	{
	TailCall_cAbs:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAbs:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(199,"cNeg cAbs", "cAbs", "");
			/* opcode = cAbs; */ // redundant, matches cAbs @ 0
			goto Lab;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(130,
				"x cAbs",
				"[fp_abs(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lac;
		default:
			A = ByteCodePtr[0];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(212,
					"A[IsNeverNegativeValueOpcode(A)] cAbs",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cAdd:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAdd:
		switch(ByteCodePtr[0])
		{
		case cDup:
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(317,"cDup cAdd cDup cAdd", "[Value_t(4)] cMul", "");
					goto Lad;
				}
				break;
			case cMul:
				if(ByteCodePtr[-2] == cAdd)
				{
					if(ByteCodePtr[-3] == cDup)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(318,"cDup cAdd cMul cDup cAdd", "cMul [Value_t(4)] cMul", "");
						goto Lae;
					}
				}
				break;
			}
			goto Default1;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(320,
						"cDup x cMul cAdd",
						"[x+Value_t(1)] cMul",
						"    with x = " << x << "\n");
					goto Laf;
				}
			}
			goto Default1;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(197,"cNeg cAdd", "cSub", "");
			goto Lag;
		case cImmed:
			x = ImmedPtr[0];
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(125,
						"y cAdd x cAdd",
						"[y+x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cAdd; */ // redundant, matches cAdd @ 0
					goto Lah;
				}
				break;
			case cRSub:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(305,
							"y cAdd cRSub x cAdd",
							"[ y+x] cAdd cRSub",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lai;
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(306,
						"cNeg cRSub x cAdd",
						"[-x] cAdd cRSub",
						"    with x = " << x << "\n");
					goto Laj;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(304,
						"y cRSub x cAdd",
						"[ y+x] cRSub",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lak;
				}
				break;
			case cSub:
				B = ByteCodePtr[-2];
				if(IsVarOpcode(B))
				{
					switch(ByteCodePtr[-3])
					{
					case cAdd:
						if(ByteCodePtr[-4] == cImmed)
						{
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(299,
								"y cAdd B[IsVarOpcode(B)] cSub x cAdd",
								"[ y+x] cAdd B cSub",
								"    with x = " << x
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-4] = cImmed; */ // redundant, matches y @ 5
							goto Lal;
						}
						break;
					case cNeg:
						FP_TRACE_BYTECODE_OPTIMIZATION(300,
							"cNeg B[IsVarOpcode(B)] cSub x cAdd",
							"[-x] cAdd B cSub",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						goto Lam;
					case cImmed:
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(298,
							"y B[IsVarOpcode(B)] cSub x cAdd",
							"[ y+x] B cSub",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lan;
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(103,
					"y x cAdd",
					"[y+x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lao;
			}
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(55,
					"x[x==Value_t()] cAdd",
					"",
					"    with x = " << x << "\n");
				goto Lap;
			}
			break;
		default: Default1:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				if(ByteCodePtr[-1] == cRSub)
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(297,
							"x cRSub A[IsVarOpcode(A)] cAdd",
							"[DO_STACKPLUS1] A [x] cAdd cRSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						incStackPtr();
						--mStackPtr;
						goto Laq;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(302,
						"cRSub A[IsVarOpcode(A)] cAdd",
						"[DO_STACKPLUS1] A cAdd cRSub",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Lar;
				}
			}
		}
		goto Default0;
	TailCall_cAnd:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAnd:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(231,"cDup cAnd", "cNotNot", "");
			goto Lba;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(115,
					"y x cAnd",
					"[fp_and(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbb;
			}
			break;
		}
		goto Default0;
	TailCall_cDiv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cDiv:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(76,"cDup cDiv", "[Value_t()] cMul [Value_t(1)] cAdd", "");
			goto Lbc;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(123,
						"cNeg x[x!=Value_t()] cDiv",
						"[-x] cDiv",
						"    with x = " << x << "\n");
					/* opcode = cDiv; */ // redundant, matches cDiv @ 0
					goto Lbd;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(101,
						"y x[x!=Value_t()] cDiv",
						"[y/x]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Lbe;
				}
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(54,
					"x[x==Value_t(1)] cDiv",
					"",
					"    with x = " << x << "\n");
				goto Lap;
			}
			break;
		}
		goto Default0;
	TailCall_cEqual:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				A = ByteCodePtr[-1];
				if(IsLogicalOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(435,
						"A[IsLogicalOpcode(A)] x[x==Value_t(1)] cEqual",
						"A",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					goto Lap;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(113,
					"y x cEqual",
					"[fp_equal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbf;
			}
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(369,
						"cAbs x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Lbg;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(371,
						"cSqr x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Lbg;
				default:
					A = ByteCodePtr[-1];
					if(IsLogicalOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(437,
							"A[IsLogicalOpcode(A)] x[x==Value_t(0)] cEqual",
							"A cNot",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lbh;
					}
				}
				FP_TRACE_BYTECODE_OPTIMIZATION(425,
					"x[x==Value_t(0)] cEqual",
					"cNot",
					"    with x = " << x << "\n");
				goto Lbh;
			}
		}
		goto Default0;
	TailCall_cGreater:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cGreater:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(427,
						"cAbs x[x==Value_t(0)] cGreater",
						"cNotNot",
						"    with x = " << x << "\n");
					goto Lbi;
				default:
					A = ByteCodePtr[-1];
					if(IsNeverNegativeValueOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(431,
							"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(0)] cGreater",
							"A cNotNot",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lbj;
					}
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(111,
					"y x cGreater",
					"[fp_less(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbk;
			}
		}
		goto Default0;
	TailCall_cGreaterOrEq:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cGreaterOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(428,
						"cAbs x[x==Value_t(1)] cGreaterOrEq",
						"cNotNot",
						"    with x = " << x << "\n");
					goto Lbi;
				default:
					A = ByteCodePtr[-1];
					if(IsNeverNegativeValueOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(432,
							"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(1)] cGreaterOrEq",
							"A cNotNot",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lbj;
					}
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(112,
					"y x cGreaterOrEq",
					"[fp_lessOrEq(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbl;
			}
		}
		goto Default0;
	TailCall_cInv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cInv:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(99,
					"x[x!=Value_t()] cInv",
					"[Value_t(1)/x]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lbm;
			}
		}
		goto Default0;
	TailCall_cLess:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLess:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				A = ByteCodePtr[-1];
				if(IsNeverNegativeValueOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(308,
						"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(0)] cLess",
						"A [x] cMul",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
					goto Lbn;
				}
			}
			if(x==Value_t(1))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(429,
						"cAbs x[x==Value_t(1)] cLess",
						"cNot",
						"    with x = " << x << "\n");
					goto Lbo;
				default:
					A = ByteCodePtr[-1];
					if(IsNeverNegativeValueOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(433,
							"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(1)] cLess",
							"A cNot",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lbh;
					}
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(109,
					"y x cLess",
					"[fp_less(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbp;
			}
		}
		goto Default0;
	TailCall_cLessOrEq:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLessOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(430,
						"cAbs x[x==Value_t(0)] cLessOrEq",
						"cNot",
						"    with x = " << x << "\n");
					goto Lbo;
				default:
					A = ByteCodePtr[-1];
					if(IsNeverNegativeValueOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(434,
							"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(0)] cLessOrEq",
							"A cNot",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lbh;
					}
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(110,
					"y x cLessOrEq",
					"[fp_lessOrEq(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbq;
			}
		}
		goto Default0;
	TailCall_cMax:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMax:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(58,"cDup cMax", "", "");
			goto Lbr;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(139,
					"y x cMax",
					"[fp_max(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lca;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(64,
							"B[B==A] cDup A[IsVarOpcode(A)] cMax",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Lbr;
					}
					break;
				case cMax:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(66,
							"B[B==A] cMax A[IsVarOpcode(A)] cMax",
							"B cMax",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMax; */ // redundant, matches cMax @ 2
						goto Lbr;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cMin:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMin:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(57,"cDup cMin", "", "");
			goto Lbr;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(138,
					"y x cMin",
					"[fp_min(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lcb;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(63,
							"B[B==A] cDup A[IsVarOpcode(A)] cMin",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Lbr;
					}
					break;
				case cMin:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(65,
							"B[B==A] cMin A[IsVarOpcode(A)] cMin",
							"B cMin",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMin; */ // redundant, matches cMin @ 2
						goto Lbr;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cMod:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMod:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				if(ByteCodePtr[-1] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(102,
						"y x[x!=Value_t()] cMod",
						"[fp_mod(y,x)]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Lcc;
				}
			}
		}
		goto Default0;
	TailCall_cMul:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMul:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(200,"cDup cMul", "cSqr", "");
			goto Lcd;
		case cNeg:
			switch(ByteCodePtr[-1])
			{
			case cDup:
				FP_TRACE_BYTECODE_OPTIMIZATION(483,"cDup cNeg cMul", "cSqr cNeg", "");
				goto Lce;
			default:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cMul)
					{
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(489,
								"B[B==A] cMul A[IsVarOpcode(A)] cNeg cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lcf;
						}
					}
				}
			}
			goto Default2;
		case cPow:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(321,
						"cDup x cPow cMul",
						"[x+Value_t(1)] cPow",
						"    with x = " << x << "\n");
					goto Lcg;
				}
			}
			goto Default2;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(91,
							"A[IsVarOpcode(A)] cMul x[x==Value_t()] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lch;
					}
					goto Default3;
				default: Default3:;
					A = ByteCodePtr[-1];
					if(IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						switch(ByteCodePtr[-2])
						{
						case cImmed:
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(90,
								"y A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
								"[x] cMul",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lci;
						default:
							B = ByteCodePtr[-2];
							if(IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								switch(ByteCodePtr[-3])
								{
								case cImmed:
									y = ImmedPtr[-1];
									FP_TRACE_BYTECODE_OPTIMIZATION(94,
										"y B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
										"A [x] cMul",
										"    with x = " << x
										    << ", A = " << FP_TRACE_OPCODENAME(A)
										    << ", B = " << FP_TRACE_OPCODENAME(B)
										    << ", y = " << y
										    << "\n");
									/* opcode = cMul; */ // redundant, matches cMul @ 0
									goto Lcj;
								default:
									C = ByteCodePtr[-3];
									if(IsVarOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(92,
											"C[IsVarOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
											"A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lck;
									}
									if(IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(93,
											"C[IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
											"B A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lcl;
									}
								}
							}
							if(IsVarOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(88,
									"B[IsVarOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
									"[x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lch;
							}
							if(IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(89,
									"B[IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
									"A [x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lcm;
							}
						}
					}
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(86,
							"A[IsVarOpcode(A)] x[x==Value_t()] cMul",
							"[x]",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						goto Lcn;
					}
					if(IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(87,
							"A[IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lco;
					}
				}
			}
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				switch(ByteCodePtr[-2])
				{
				case cDup:
					FP_TRACE_BYTECODE_OPTIMIZATION(324,
						"cDup cAdd x cMul",
						"[x+x] cMul",
						"    with x = " << x << "\n");
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Lcp;
				case cMul:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(IsVarOpcode(A))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(396,
								"A[IsVarOpcode(A)] y cMul cAdd x cMul",
								"[x] cMul A [y*x] cMul cAdd",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lcq;
						}
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(395,
						"y cAdd x cMul",
						"[x] cMul [y*x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lcr;
				}
				break;
			case cMul:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cDup)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(326,
							"cDup cAdd cMul x cMul",
							"cMul [x+x] cMul",
							"    with x = " << x << "\n");
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lda;
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					if(y*x==Value_t(1))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(68,
							"y[y*x==Value_t(1)] cMul x cMul",
							"",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Ldb;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(126,
						"y cMul x cMul",
						"[y*x] cMul",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Ldc;
				}
				break;
			case cNeg:
				FP_TRACE_BYTECODE_OPTIMIZATION(120,
					"cNeg x cMul",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Ldd;
			case cSub:
				if(ByteCodePtr[-2] == cMul)
				{
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(IsVarOpcode(A))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(397,
								"A[IsVarOpcode(A)] y cMul cSub x cMul",
								"[x] cMul A [y*x] cMul cSub",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lde;
						}
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(100,
					"y x cMul",
					"[y*x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldf;
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(53,
					"x[x==Value_t(1)] cMul",
					"",
					"    with x = " << x << "\n");
				goto Lap;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(122,
					"x[x==Value_t(-1)] cMul",
					"cNeg",
					"    with x = " << x << "\n");
				goto Ldg;
			}
			if(x==Value_t(2))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(196,
					"x[x==Value_t(2)] cMul",
					"cDup cAdd",
					"    with x = " << x << "\n");
				goto Ldh;
			}
			break;
		default: Default2:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					switch(ByteCodePtr[-2])
					{
					case cNeg:
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(486,
								"B[B==A] cNeg cMul A[IsVarOpcode(A)] cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lcf;
						}
						goto Default4;
					default: Default4:;
						B = ByteCodePtr[-2];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(477,
								"B[B==A] cMul A[IsVarOpcode(A)] cMul",
								"B cSqr cMul",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Ldi;
						}
					}
					goto Default5;
				case cNeg:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(480,
							"B[B==A] cNeg A[IsVarOpcode(A)] cMul",
							"B cSqr cNeg",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lce;
					}
					goto Default5;
				default: Default5:;
					B = ByteCodePtr[-1];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(474,
							"B[B==A] A[IsVarOpcode(A)] cMul",
							"B cSqr",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-1] = B; */ // redundant, matches B @ 2
						goto Lcd;
					}
				}
			}
			if(IsUnaryOpcode(A))
			{
				B = ByteCodePtr[-1];
				if(IsVarOpcode(B)&&mData->mByteCode.size()>1)
				{
					if(ByteCodePtr[-2] == cMul)
					{
						C = ByteCodePtr[-3];
						if(C==A)
						{
							D = ByteCodePtr[-4];
							if(D==B)
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(493,
									"D[D==B] C[C==A] cMul B[IsVarOpcode(B)&&mData->mByteCode.size()>1] A[IsUnaryOpcode(A)] cMul",
									"D C cSqr cMul",
									"    with A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << ", C = " << FP_TRACE_OPCODENAME(C)
									    << ", D = " << FP_TRACE_OPCODENAME(D)
									    << "\n");
								/* ByteCodePtr[-4] = D; */ // redundant, matches D @ 5
								/* ByteCodePtr[-3] = C; */ // redundant, matches C @ 4
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Ldj;
							}
						}
					}
				}
			}
		}
		goto Default0;
	TailCall_cNEqual:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				A = ByteCodePtr[-1];
				if(IsLogicalOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(436,
						"A[IsLogicalOpcode(A)] x[x==Value_t(1)] cNEqual",
						"A cNot",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					goto Lbh;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(114,
					"y x cNEqual",
					"[fp_nequal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldk;
			}
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(370,
						"cAbs x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Ldl;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(372,
						"cSqr x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Ldl;
				default:
					A = ByteCodePtr[-1];
					if(IsLogicalOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(438,
							"A[IsLogicalOpcode(A)] x[x==Value_t(0)] cNEqual",
							"A",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lap;
					}
				}
				FP_TRACE_BYTECODE_OPTIMIZATION(426,
					"x[x==Value_t(0)] cNEqual",
					"cNotNot",
					"    with x = " << x << "\n");
				goto Lbj;
			}
		}
		goto Default0;
	TailCall_cNeg:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNeg:
		switch(ByteCodePtr[0])
		{
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(121,
					"x cMul cNeg",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Ldm;
			}
			break;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(59,"cNeg cNeg", "", "");
			goto Lbr;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(98,
				"x cNeg",
				"[-x]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Ldn;
		}
		goto Default0;
	TailCall_cNot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNot:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(234,"cAbs cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Ldo;
		case cAbsNot:
			A = ByteCodePtr[-1];
			if(IsLogicalOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(399,
					"A[IsLogicalOpcode(A)] cAbsNot cNot",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Lbr;
			}
			if(A!=cImmed)
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(400,
					"A[A!=cImmed] cAbsNot cNot",
					"A cAbsNotNot",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Ldp;
			}
			goto Default6;
		case cAbsNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(238,"cAbsNotNot cNot", "cAbsNot", "");
			goto Ldq;
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(440,
					"x cAdd cNot",
					"[-x] cEqual",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Ldr;
			}
			goto Default6;
		case cEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(227,"cEqual cNot", "cNEqual", "");
			goto Lea;
		case cGreater:
			FP_TRACE_BYTECODE_OPTIMIZATION(225,"cGreater cNot", "cLessOrEq", "");
			goto Leb;
		case cGreaterOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(226,"cGreaterOrEq cNot", "cLess", "");
			goto Lec;
		case cLess:
			FP_TRACE_BYTECODE_OPTIMIZATION(223,"cLess cNot", "cGreaterOrEq", "");
			goto Led;
		case cLessOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(224,"cLessOrEq cNot", "cGreater", "");
			goto Lee;
		case cNEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(228,"cNEqual cNot", "cEqual", "");
			goto Lef;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(233,"cNeg cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Ldo;
		case cNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(236,"cNot cNot", "cNotNot", "");
			goto Lba;
		case cNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(237,"cNotNot cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Ldo;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(105,
				"x cNot",
				"[fp_not(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Leg;
		default: Default6:;
			A = ByteCodePtr[0];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(401,
					"A[IsNeverNegativeValueOpcode(A)] cNot",
					"A cAbsNot",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				goto Leh;
			}
		}
		goto Default0;
	TailCall_cNotNot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNotNot:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(439,
					"x cAdd cNotNot",
					"[-x] cNEqual",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Lei;
			}
			break;
		case cNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(239,"cNot cNotNot", "cNot", "");
			/* ByteCodePtr[0] = cNot; */ // redundant, matches cNot @ 1
			return;
		}
		goto Default0;
	TailCall_cOr:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cOr:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(230,"cDup cOr", "cNotNot", "");
			goto Lba;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(116,
					"y x cOr",
					"[fp_or(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lej;
			}
			break;
		}
		goto Default0;
	TailCall_cRDiv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRDiv:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(275,
					"x[x==Value_t(1)] cRDiv",
					"cInv",
					"    with x = " << x << "\n");
				goto Lek;
			}
		}
		goto Default0;
	TailCall_cRSub:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRSub:
		if(ByteCodePtr[0] == cDup)
		{
			FP_TRACE_BYTECODE_OPTIMIZATION(75,"cDup cRSub", "[Value_t()] cMul", "");
			goto Lel;
		}
		goto Default0;
	TailCall_cSqr:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSqr:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(202,"cAbs cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Lem;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(201,"cNeg cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Lem;
		default:
			A = ByteCodePtr[0];
			if(IsComparisonOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(540,
					"A[IsComparisonOpcode(A)] cSqr",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cSub:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSub:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(74,"cDup cSub", "[Value_t()] cMul", "");
			goto Lel;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(198,"cNeg cSub", "cAdd", "");
			goto Len;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(56,
					"x[x==Value_t()] cSub",
					"",
					"    with x = " << x << "\n");
				goto Lap;
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(104,
					"y x cSub",
					"[y-x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Leo;
			}
			FP_TRACE_BYTECODE_OPTIMIZATION(49,
				"x cSub",
				"[-x] cAdd",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lep;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				if(ByteCodePtr[-1] == cRSub)
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(296,
							"x cRSub A[IsVarOpcode(A)] cSub",
							"A cAdd [x] cRSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Leq;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(303,
						"cRSub A[IsVarOpcode(A)] cSub",
						"[DO_STACKPLUS1] A cSub cRSub",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Ler;
				}
			}
		}
		goto Default0;
	default: Default0:;
		A = opcode;
		if(IsComparisonOpcode(A))
		{
			if(ByteCodePtr[0] == cImmed)
			{
				x = ImmedPtr[0];
				switch(ByteCodePtr[-1])
				{
				case cAdd:
					if(ByteCodePtr[-2] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(374,
							"y cAdd x A[IsComparisonOpcode(A)]",
							"[x-y] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
						goto Lfa;
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(375,
						"cNeg x A[IsComparisonOpcode(A)]",
						"[-x] {OppositeComparisonOpcode(A)}",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", x = " << x
						    << "\n");
					goto Lfb;
				}
			}
		}
		if(IsVarOpcode(A)&&mData->mByteCode.size()>0)
		{
			B = ByteCodePtr[0];
			if(B==A)
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(491,
					"B[B==A] A[IsVarOpcode(A)&&mData->mByteCode.size()>0]",
					"B cDup",
					"    with A = " << FP_TRACE_OPCODENAME(A)
					    << ", B = " << FP_TRACE_OPCODENAME(B)
					    << "\n");
				/* ByteCodePtr[0] = B; */ // redundant, matches B @ 1
				goto Lfc;
			}
		}
		if(IsUnaryOpcode(A))
		{
			B = ByteCodePtr[0];
			if(IsVarOpcode(B)&&mData->mByteCode.size()>1)
			{
				C = ByteCodePtr[-1];
				if(C==A)
				{
					D = ByteCodePtr[-2];
					if(D==B)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(492,
							"D[D==B] C[C==A] B[IsVarOpcode(B)&&mData->mByteCode.size()>1] A[IsUnaryOpcode(A)]",
							"D C cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", C = " << FP_TRACE_OPCODENAME(C)
							    << ", D = " << FP_TRACE_OPCODENAME(D)
							    << "\n");
						/* ByteCodePtr[-2] = D; */ // redundant, matches D @ 3
						/* ByteCodePtr[-1] = C; */ // redundant, matches C @ 2
						goto Lfd;
					}
				}
			}
		}
	}
	goto Laa;
Laa: mData->mByteCode.push_back(opcode); return;
Lab: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     FP_TRACE_BYTECODE_ADD(cAbs);
     goto TailCall_cAbs;
Lac: ImmedPtr[0] = fp_abs(x); return;
Lad: mData->mImmed.push_back(Value_t(4));
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
Lfe: opcode = cMul;
Lff: FP_ReDefinePointers();
Lfg: FP_TRACE_BYTECODE_ADD(cMul);
     goto TailCall_cMul;
Lae: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(Value_t(4));
     mData->mByteCode.push_back(cImmed); goto Lfe;
Laf: ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
Lbn: opcode = cMul; goto Lfg;
Lag: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSub;
Lfh: FP_TRACE_BYTECODE_ADD(cSub);
     goto TailCall_cSub;
Lah: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lfi: FP_ReDefinePointers();
Lfj: FP_TRACE_BYTECODE_ADD(cAdd);
     goto TailCall_cAdd;
Lai: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Lfk: AddFunctionOpcode(cAdd);
Lfl: opcode = cRSub;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cRSub);
     goto TailCall_cRSub;
Laj: ImmedPtr[0] = -x;
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lfk;
Lak: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lfl;
Lal: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lfm: AddFunctionOpcode(cAdd);
Lfn: AddFunctionOpcode(B);
Lfo: opcode = cSub;
     FP_ReDefinePointers(); goto Lfh;
Lam: ImmedPtr[0] = -x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lfm;
Lan: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lfn;
Lao: ImmedPtr[-1] = y+x;
Lap: mData->mImmed.pop_back();
Lbr: mData->mByteCode.pop_back(); return;
Laq: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lfk;
Lar: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lfk;
Lba: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cNotNot;
Lfp: FP_TRACE_BYTECODE_ADD(cNotNot);
     goto TailCall_cNotNot;
Lbb: ImmedPtr[-1] = fp_and(x,y); goto Lap;
Lbc: mData->mImmed.push_back(Value_t());
     ByteCodePtr[0] = cImmed;
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(Value_t(1));
Lfq: mData->mByteCode.push_back(cImmed);
Lfr: opcode = cAdd; goto Lfi;
Lbd: ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     FP_TRACE_BYTECODE_ADD(cDiv);
     goto TailCall_cDiv;
Lbe: ImmedPtr[-1] = y/x; goto Lap;
Lbf: ImmedPtr[-1] = fp_equal(y,x); goto Lap;
Lbg: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lga: FP_TRACE_BYTECODE_ADD(cEqual);
     goto TailCall_cEqual;
Lbh: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
Lgb: opcode = cNot;
     FP_ReDefinePointers();
Lgc: FP_TRACE_BYTECODE_ADD(cNot);
     goto TailCall_cNot;
Lbi: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lgd: opcode = cNotNot;
     FP_ReDefinePointers(); goto Lfp;
Lbj: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lgd;
Lbk: ImmedPtr[-1] = fp_less(x,y); goto Lap;
Lbl: ImmedPtr[-1] = fp_lessOrEq(x,y); goto Lap;
Lbm: ImmedPtr[0] = Value_t(1)/x; return;
Lbo: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lgb;
Lbp: ImmedPtr[-1] = fp_less(y,x); goto Lap;
Lbq: ImmedPtr[-1] = fp_lessOrEq(y,x); goto Lap;
Lca: ImmedPtr[-1] = fp_max(x,y); goto Lap;
Lcb: ImmedPtr[-1] = fp_min(x,y); goto Lap;
Lcc: ImmedPtr[-1] = fp_mod(y,x); goto Lap;
Lcd: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSqr;
Lge: FP_TRACE_BYTECODE_ADD(cSqr);
     goto TailCall_cSqr;
Lce: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr);
Lgf: opcode = cNeg;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cNeg);
     goto TailCall_cNeg;
Lcf: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr);
     AddFunctionOpcode(cMul); goto Lgf;
Lcg: ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cPow); return;
Lch: ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2; goto Lfg;
Lci: ImmedPtr[-1] = x;
Lgg: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lff;
Lcj: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
Lgh: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lgi: AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
Lgj: mData->mByteCode.push_back(cImmed); goto Lff;
Lck: mData->mImmed.pop_back(); goto Lgh;
Lcl: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(B); goto Lgi;
Lcm: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lgi;
Lcn: ByteCodePtr[-1] = cImmed; goto Lbr;
Lco: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lfg;
Lcp: ImmedPtr[0] = x+x; goto Lch;
Lcq: ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     mData->mImmed.push_back(y*x);
     mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cMul); goto Lfr;
Lcr: ImmedPtr[-1] = x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(y*x); goto Lfq;
Lda: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(x+x); goto Lgj;
Ldb: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} return;
Ldc: ImmedPtr[-1] = y*x; goto Lgg;
Ldd: ImmedPtr[0] = -x; goto Lco;
Lde: ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     mData->mImmed.push_back(y*x);
     mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cMul); goto Lfo;
Ldf: ImmedPtr[-1] = y*x; goto Lap;
Ldg: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lgf;
Ldh: ByteCodePtr[0] = cDup;
     ImmedPtr -= 1;
     mData->mImmed.pop_back();
Lgk: opcode = cAdd; goto Lfj;
Ldi: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lgl: AddFunctionOpcode(cSqr); goto Lff;
Ldj: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lgl;
Ldk: ImmedPtr[-1] = fp_nequal(y,x); goto Lap;
Ldl: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lgm: FP_TRACE_BYTECODE_ADD(cNEqual);
     goto TailCall_cNEqual;
Ldm: ImmedPtr[0] = -x;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lbn;
Ldn: ImmedPtr[0] = -x; return;
Ldo: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lgc;
Ldp: mData->mByteCode.pop_back();
     AddFunctionOpcode(cAbsNotNot); return;
Ldq: mData->mByteCode.pop_back();
Leh: AddFunctionOpcode(cAbsNot); return;
Ldr: ImmedPtr[0] = -x;
Lef: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cEqual; goto Lga;
Lea: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cNEqual; goto Lgm;
Leb: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cLessOrEq;
     FP_TRACE_BYTECODE_ADD(cLessOrEq);
     goto TailCall_cLessOrEq;
Lec: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cLess;
     FP_TRACE_BYTECODE_ADD(cLess);
     goto TailCall_cLess;
Led: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cGreaterOrEq;
     FP_TRACE_BYTECODE_ADD(cGreaterOrEq);
     goto TailCall_cGreaterOrEq;
Lee: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cGreater;
     FP_TRACE_BYTECODE_ADD(cGreater);
     goto TailCall_cGreater;
Leg: ImmedPtr[0] = fp_not(x); return;
Lei: ImmedPtr[0] = -x; goto Lea;
Lej: ImmedPtr[-1] = fp_or(x,y); goto Lap;
Lek: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     opcode = cInv;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cInv);
     goto TailCall_cInv;
Lel: mData->mImmed.push_back(Value_t());
     ByteCodePtr[0] = cImmed; goto Lfe;
Lem: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lge;
Len: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lgk;
Leo: ImmedPtr[-1] = y-x; goto Lap;
Lep: ImmedPtr[0] = -x; goto Lgk;
Leq: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cAdd);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lfl;
Ler: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cSub); goto Lfl;
Lfa: ImmedPtr[-1] = x-y;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); return;
Lfb: ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     AddFunctionOpcode(OppositeComparisonOpcode(A)); return;
Lfc: mData->mByteCode.push_back(cDup); return;
Lfd: ByteCodePtr[0] = cDup; return;
return;
// This list of dummy gotos is here to inhibit
// compiler warnings on unused labels
goto TailCall_cAnd;goto TailCall_cMax;goto TailCall_cMin;
goto TailCall_cMod;goto TailCall_cNeg;goto TailCall_cOr;
goto TailCall_cRDiv;goto TailCall_cSub;
#endif

#if((FP_COMPLEX_VERSION) && !(FP_FLOAT_VERSION))
	Value_t x;
	Value_t y;
	unsigned B;
	unsigned A;
	unsigned C;
	unsigned D;
	switch(opcode)
	{
	TailCall_cAbs:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAbs:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(199,"cNeg cAbs", "cAbs", "");
			/* opcode = cAbs; */ // redundant, matches cAbs @ 0
			goto Lab;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(130,
				"x cAbs",
				"[fp_abs(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lac;
		}
		goto Default0;
	TailCall_cAdd:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAdd:
		switch(ByteCodePtr[0])
		{
		case cDup:
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(317,"cDup cAdd cDup cAdd", "[Value_t(4)] cMul", "");
					goto Lad;
				}
				break;
			case cMul:
				if(ByteCodePtr[-2] == cAdd)
				{
					if(ByteCodePtr[-3] == cDup)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(318,"cDup cAdd cMul cDup cAdd", "cMul [Value_t(4)] cMul", "");
						goto Lae;
					}
				}
				break;
			}
			goto Default1;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(320,
						"cDup x cMul cAdd",
						"[x+Value_t(1)] cMul",
						"    with x = " << x << "\n");
					goto Laf;
				}
			}
			goto Default1;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(197,"cNeg cAdd", "cSub", "");
			goto Lag;
		case cImmed:
			x = ImmedPtr[0];
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(125,
						"y cAdd x cAdd",
						"[y+x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cAdd; */ // redundant, matches cAdd @ 0
					goto Lah;
				}
				break;
			case cRSub:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(305,
							"y cAdd cRSub x cAdd",
							"[ y+x] cAdd cRSub",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lai;
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(306,
						"cNeg cRSub x cAdd",
						"[-x] cAdd cRSub",
						"    with x = " << x << "\n");
					goto Laj;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(304,
						"y cRSub x cAdd",
						"[ y+x] cRSub",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lak;
				}
				break;
			case cSub:
				B = ByteCodePtr[-2];
				if(IsVarOpcode(B))
				{
					switch(ByteCodePtr[-3])
					{
					case cAdd:
						if(ByteCodePtr[-4] == cImmed)
						{
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(299,
								"y cAdd B[IsVarOpcode(B)] cSub x cAdd",
								"[ y+x] cAdd B cSub",
								"    with x = " << x
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-4] = cImmed; */ // redundant, matches y @ 5
							goto Lal;
						}
						break;
					case cNeg:
						FP_TRACE_BYTECODE_OPTIMIZATION(300,
							"cNeg B[IsVarOpcode(B)] cSub x cAdd",
							"[-x] cAdd B cSub",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						goto Lam;
					case cImmed:
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(298,
							"y B[IsVarOpcode(B)] cSub x cAdd",
							"[ y+x] B cSub",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lan;
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(103,
					"y x cAdd",
					"[y+x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lao;
			}
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(55,
					"x[x==Value_t()] cAdd",
					"",
					"    with x = " << x << "\n");
				goto Lap;
			}
			break;
		default: Default1:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				if(ByteCodePtr[-1] == cRSub)
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(297,
							"x cRSub A[IsVarOpcode(A)] cAdd",
							"[DO_STACKPLUS1] A [x] cAdd cRSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						incStackPtr();
						--mStackPtr;
						goto Laq;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(302,
						"cRSub A[IsVarOpcode(A)] cAdd",
						"[DO_STACKPLUS1] A cAdd cRSub",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Lar;
				}
			}
		}
		goto Default0;
	TailCall_cAnd:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAnd:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(231,"cDup cAnd", "cNotNot", "");
			goto Lba;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(115,
					"y x cAnd",
					"[fp_and(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbb;
			}
			break;
		}
		goto Default0;
	TailCall_cConj:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cConj:
		switch(ByteCodePtr[0])
		{
		case cConj:
			FP_TRACE_BYTECODE_OPTIMIZATION(61,"cConj cConj", "", "");
			goto Lbc;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(191,
				"x cConj",
				"[fp_conj(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbd;
		}
		goto Default0;
	TailCall_cDiv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cDiv:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(76,"cDup cDiv", "[Value_t()] cMul [Value_t(1)] cAdd", "");
			goto Lbe;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(123,
						"cNeg x[x!=Value_t()] cDiv",
						"[-x] cDiv",
						"    with x = " << x << "\n");
					/* opcode = cDiv; */ // redundant, matches cDiv @ 0
					goto Lbf;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(101,
						"y x[x!=Value_t()] cDiv",
						"[y/x]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Lbg;
				}
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(54,
					"x[x==Value_t(1)] cDiv",
					"",
					"    with x = " << x << "\n");
				goto Lap;
			}
			break;
		}
		goto Default0;
	TailCall_cEqual:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				A = ByteCodePtr[-1];
				if(IsLogicalOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(435,
						"A[IsLogicalOpcode(A)] x[x==Value_t(1)] cEqual",
						"A",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					goto Lap;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(113,
					"y x cEqual",
					"[fp_equal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbh;
			}
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(369,
						"cAbs x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Lbi;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(371,
						"cSqr x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Lbi;
				default:
					A = ByteCodePtr[-1];
					if(IsLogicalOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(437,
							"A[IsLogicalOpcode(A)] x[x==Value_t(0)] cEqual",
							"A cNot",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lbj;
					}
				}
				FP_TRACE_BYTECODE_OPTIMIZATION(425,
					"x[x==Value_t(0)] cEqual",
					"cNot",
					"    with x = " << x << "\n");
				goto Lbj;
			}
		}
		goto Default0;
	TailCall_cGreater:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cGreater:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(111,
					"y x cGreater",
					"[fp_less(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbk;
			}
		}
		goto Default0;
	TailCall_cGreaterOrEq:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cGreaterOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(112,
					"y x cGreaterOrEq",
					"[fp_lessOrEq(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbl;
			}
		}
		goto Default0;
	TailCall_cImag:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cImag:
		switch(ByteCodePtr[0])
		{
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(190,
				"x cImag",
				"[fp_imag(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbm;
		default:
			A = ByteCodePtr[0];
			if(IsAlwaysRealOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(78,
					"A[IsAlwaysRealOpcode(A)] cImag",
					"A [DO_STACKPLUS1] [Value_t()] cMul",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				incStackPtr();
				--mStackPtr;
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				goto Lbn;
			}
		}
		goto Default0;
	TailCall_cInv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cInv:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(99,
					"x[x!=Value_t()] cInv",
					"[Value_t(1)/x]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lbo;
			}
		}
		goto Default0;
	TailCall_cLess:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLess:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				A = ByteCodePtr[-1];
				if(IsNeverNegativeValueOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(308,
						"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(0)] cLess",
						"A [x] cMul",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
					goto Lbp;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(109,
					"y x cLess",
					"[fp_less(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbq;
			}
		}
		goto Default0;
	TailCall_cLessOrEq:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLessOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(110,
					"y x cLessOrEq",
					"[fp_lessOrEq(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbr;
			}
		}
		goto Default0;
	TailCall_cMax:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMax:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(58,"cDup cMax", "", "");
			goto Lbc;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(139,
					"y x cMax",
					"[fp_max(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lca;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(64,
							"B[B==A] cDup A[IsVarOpcode(A)] cMax",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Lbc;
					}
					break;
				case cMax:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(66,
							"B[B==A] cMax A[IsVarOpcode(A)] cMax",
							"B cMax",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMax; */ // redundant, matches cMax @ 2
						goto Lbc;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cMin:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMin:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(57,"cDup cMin", "", "");
			goto Lbc;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(138,
					"y x cMin",
					"[fp_min(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lcb;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(63,
							"B[B==A] cDup A[IsVarOpcode(A)] cMin",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Lbc;
					}
					break;
				case cMin:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(65,
							"B[B==A] cMin A[IsVarOpcode(A)] cMin",
							"B cMin",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMin; */ // redundant, matches cMin @ 2
						goto Lbc;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cMod:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMod:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				if(ByteCodePtr[-1] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(102,
						"y x[x!=Value_t()] cMod",
						"[fp_mod(y,x)]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Lcc;
				}
			}
		}
		goto Default0;
	TailCall_cMul:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMul:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(200,"cDup cMul", "cSqr", "");
			goto Lcd;
		case cNeg:
			switch(ByteCodePtr[-1])
			{
			case cDup:
				FP_TRACE_BYTECODE_OPTIMIZATION(483,"cDup cNeg cMul", "cSqr cNeg", "");
				goto Lce;
			default:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cMul)
					{
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(489,
								"B[B==A] cMul A[IsVarOpcode(A)] cNeg cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lcf;
						}
					}
				}
			}
			goto Default2;
		case cPow:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(321,
						"cDup x cPow cMul",
						"[x+Value_t(1)] cPow",
						"    with x = " << x << "\n");
					goto Lcg;
				}
			}
			goto Default2;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(91,
							"A[IsVarOpcode(A)] cMul x[x==Value_t()] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lch;
					}
					goto Default3;
				default: Default3:;
					A = ByteCodePtr[-1];
					if(IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						switch(ByteCodePtr[-2])
						{
						case cImmed:
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(90,
								"y A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
								"[x] cMul",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lci;
						default:
							B = ByteCodePtr[-2];
							if(IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								switch(ByteCodePtr[-3])
								{
								case cImmed:
									y = ImmedPtr[-1];
									FP_TRACE_BYTECODE_OPTIMIZATION(94,
										"y B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
										"A [x] cMul",
										"    with x = " << x
										    << ", A = " << FP_TRACE_OPCODENAME(A)
										    << ", B = " << FP_TRACE_OPCODENAME(B)
										    << ", y = " << y
										    << "\n");
									/* opcode = cMul; */ // redundant, matches cMul @ 0
									goto Lcj;
								default:
									C = ByteCodePtr[-3];
									if(IsVarOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(92,
											"C[IsVarOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
											"A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lck;
									}
									if(IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(93,
											"C[IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
											"B A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lcl;
									}
								}
							}
							if(IsVarOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(88,
									"B[IsVarOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
									"[x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lch;
							}
							if(IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(89,
									"B[IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
									"A [x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lcm;
							}
						}
					}
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(86,
							"A[IsVarOpcode(A)] x[x==Value_t()] cMul",
							"[x]",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						goto Lcn;
					}
					if(IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(87,
							"A[IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lco;
					}
				}
			}
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				switch(ByteCodePtr[-2])
				{
				case cDup:
					FP_TRACE_BYTECODE_OPTIMIZATION(324,
						"cDup cAdd x cMul",
						"[x+x] cMul",
						"    with x = " << x << "\n");
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Lcp;
				case cMul:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(IsVarOpcode(A))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(396,
								"A[IsVarOpcode(A)] y cMul cAdd x cMul",
								"[x] cMul A [y*x] cMul cAdd",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lcq;
						}
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(395,
						"y cAdd x cMul",
						"[x] cMul [y*x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lcr;
				}
				break;
			case cMul:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cDup)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(326,
							"cDup cAdd cMul x cMul",
							"cMul [x+x] cMul",
							"    with x = " << x << "\n");
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lda;
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					if(y*x==Value_t(1))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(68,
							"y[y*x==Value_t(1)] cMul x cMul",
							"",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Ldb;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(126,
						"y cMul x cMul",
						"[y*x] cMul",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Ldc;
				}
				break;
			case cNeg:
				FP_TRACE_BYTECODE_OPTIMIZATION(120,
					"cNeg x cMul",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Ldd;
			case cSub:
				if(ByteCodePtr[-2] == cMul)
				{
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(IsVarOpcode(A))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(397,
								"A[IsVarOpcode(A)] y cMul cSub x cMul",
								"[x] cMul A [y*x] cMul cSub",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lde;
						}
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(100,
					"y x cMul",
					"[y*x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldf;
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(53,
					"x[x==Value_t(1)] cMul",
					"",
					"    with x = " << x << "\n");
				goto Lap;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(122,
					"x[x==Value_t(-1)] cMul",
					"cNeg",
					"    with x = " << x << "\n");
				goto Ldg;
			}
			if(x==Value_t(2))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(196,
					"x[x==Value_t(2)] cMul",
					"cDup cAdd",
					"    with x = " << x << "\n");
				goto Ldh;
			}
			break;
		default: Default2:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					switch(ByteCodePtr[-2])
					{
					case cNeg:
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(486,
								"B[B==A] cNeg cMul A[IsVarOpcode(A)] cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lcf;
						}
						goto Default4;
					default: Default4:;
						B = ByteCodePtr[-2];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(477,
								"B[B==A] cMul A[IsVarOpcode(A)] cMul",
								"B cSqr cMul",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Ldi;
						}
					}
					goto Default5;
				case cNeg:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(480,
							"B[B==A] cNeg A[IsVarOpcode(A)] cMul",
							"B cSqr cNeg",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lce;
					}
					goto Default5;
				default: Default5:;
					B = ByteCodePtr[-1];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(474,
							"B[B==A] A[IsVarOpcode(A)] cMul",
							"B cSqr",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-1] = B; */ // redundant, matches B @ 2
						goto Lcd;
					}
				}
			}
			if(IsUnaryOpcode(A))
			{
				B = ByteCodePtr[-1];
				if(IsVarOpcode(B)&&mData->mByteCode.size()>1)
				{
					if(ByteCodePtr[-2] == cMul)
					{
						C = ByteCodePtr[-3];
						if(C==A)
						{
							D = ByteCodePtr[-4];
							if(D==B)
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(493,
									"D[D==B] C[C==A] cMul B[IsVarOpcode(B)&&mData->mByteCode.size()>1] A[IsUnaryOpcode(A)] cMul",
									"D C cSqr cMul",
									"    with A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << ", C = " << FP_TRACE_OPCODENAME(C)
									    << ", D = " << FP_TRACE_OPCODENAME(D)
									    << "\n");
								/* ByteCodePtr[-4] = D; */ // redundant, matches D @ 5
								/* ByteCodePtr[-3] = C; */ // redundant, matches C @ 4
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Ldj;
							}
						}
					}
				}
			}
		}
		goto Default0;
	TailCall_cNEqual:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				A = ByteCodePtr[-1];
				if(IsLogicalOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(436,
						"A[IsLogicalOpcode(A)] x[x==Value_t(1)] cNEqual",
						"A cNot",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					goto Lbj;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(114,
					"y x cNEqual",
					"[fp_nequal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldk;
			}
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(370,
						"cAbs x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Ldl;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(372,
						"cSqr x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Ldl;
				default:
					A = ByteCodePtr[-1];
					if(IsLogicalOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(438,
							"A[IsLogicalOpcode(A)] x[x==Value_t(0)] cNEqual",
							"A",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lap;
					}
				}
				FP_TRACE_BYTECODE_OPTIMIZATION(426,
					"x[x==Value_t(0)] cNEqual",
					"cNotNot",
					"    with x = " << x << "\n");
				goto Ldm;
			}
		}
		goto Default0;
	TailCall_cNeg:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNeg:
		switch(ByteCodePtr[0])
		{
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(121,
					"x cMul cNeg",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Ldn;
			}
			break;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(59,"cNeg cNeg", "", "");
			goto Lbc;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(98,
				"x cNeg",
				"[-x]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Ldo;
		}
		goto Default0;
	TailCall_cNot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNot:
		switch(ByteCodePtr[0])
		{
		case cAbsNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(238,"cAbsNotNot cNot", "cAbsNot", "");
			goto Ldp;
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(440,
					"x cAdd cNot",
					"[-x] cEqual",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Ldq;
			}
			break;
		case cEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(227,"cEqual cNot", "cNEqual", "");
			goto Ldr;
		case cGreater:
			FP_TRACE_BYTECODE_OPTIMIZATION(225,"cGreater cNot", "cLessOrEq", "");
			goto Lea;
		case cGreaterOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(226,"cGreaterOrEq cNot", "cLess", "");
			goto Leb;
		case cLess:
			FP_TRACE_BYTECODE_OPTIMIZATION(223,"cLess cNot", "cGreaterOrEq", "");
			goto Lec;
		case cLessOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(224,"cLessOrEq cNot", "cGreater", "");
			goto Led;
		case cNEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(228,"cNEqual cNot", "cEqual", "");
			goto Lee;
		case cNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(236,"cNot cNot", "cNotNot", "");
			goto Lba;
		case cNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(237,"cNotNot cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Lef;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(105,
				"x cNot",
				"[fp_not(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Leg;
		}
		goto Default0;
	TailCall_cNotNot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNotNot:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(439,
					"x cAdd cNotNot",
					"[-x] cNEqual",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Leh;
			}
			break;
		case cNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(239,"cNot cNotNot", "cNot", "");
			/* ByteCodePtr[0] = cNot; */ // redundant, matches cNot @ 1
			return;
		}
		goto Default0;
	TailCall_cOr:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cOr:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(230,"cDup cOr", "cNotNot", "");
			goto Lba;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(116,
					"y x cOr",
					"[fp_or(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lei;
			}
			break;
		}
		goto Default0;
	TailCall_cRDiv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRDiv:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(275,
					"x[x==Value_t(1)] cRDiv",
					"cInv",
					"    with x = " << x << "\n");
				goto Lej;
			}
		}
		goto Default0;
	TailCall_cRSub:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRSub:
		if(ByteCodePtr[0] == cDup)
		{
			FP_TRACE_BYTECODE_OPTIMIZATION(75,"cDup cRSub", "[Value_t()] cMul", "");
			goto Lek;
		}
		goto Default0;
	TailCall_cReal:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cReal:
		switch(ByteCodePtr[0])
		{
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(189,
				"x cReal",
				"[fp_real(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lel;
		default:
			A = ByteCodePtr[0];
			if(IsAlwaysRealOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(79,
					"A[IsAlwaysRealOpcode(A)] cReal",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cSqr:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSqr:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(202,"cAbs cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Lem;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(201,"cNeg cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Lem;
		default:
			A = ByteCodePtr[0];
			if(IsComparisonOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(540,
					"A[IsComparisonOpcode(A)] cSqr",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cSub:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSub:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(74,"cDup cSub", "[Value_t()] cMul", "");
			goto Lek;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(198,"cNeg cSub", "cAdd", "");
			goto Len;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(56,
					"x[x==Value_t()] cSub",
					"",
					"    with x = " << x << "\n");
				goto Lap;
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(104,
					"y x cSub",
					"[y-x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Leo;
			}
			FP_TRACE_BYTECODE_OPTIMIZATION(49,
				"x cSub",
				"[-x] cAdd",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lep;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				if(ByteCodePtr[-1] == cRSub)
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(296,
							"x cRSub A[IsVarOpcode(A)] cSub",
							"A cAdd [x] cRSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Leq;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(303,
						"cRSub A[IsVarOpcode(A)] cSub",
						"[DO_STACKPLUS1] A cSub cRSub",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Ler;
				}
			}
		}
		goto Default0;
	default: Default0:;
		A = opcode;
		if(IsVarOpcode(A)&&mData->mByteCode.size()>0)
		{
			B = ByteCodePtr[0];
			if(B==A)
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(491,
					"B[B==A] A[IsVarOpcode(A)&&mData->mByteCode.size()>0]",
					"B cDup",
					"    with A = " << FP_TRACE_OPCODENAME(A)
					    << ", B = " << FP_TRACE_OPCODENAME(B)
					    << "\n");
				/* ByteCodePtr[0] = B; */ // redundant, matches B @ 1
				goto Lfa;
			}
		}
		if(IsUnaryOpcode(A))
		{
			B = ByteCodePtr[0];
			if(IsVarOpcode(B)&&mData->mByteCode.size()>1)
			{
				C = ByteCodePtr[-1];
				if(C==A)
				{
					D = ByteCodePtr[-2];
					if(D==B)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(492,
							"D[D==B] C[C==A] B[IsVarOpcode(B)&&mData->mByteCode.size()>1] A[IsUnaryOpcode(A)]",
							"D C cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", C = " << FP_TRACE_OPCODENAME(C)
							    << ", D = " << FP_TRACE_OPCODENAME(D)
							    << "\n");
						/* ByteCodePtr[-2] = D; */ // redundant, matches D @ 3
						/* ByteCodePtr[-1] = C; */ // redundant, matches C @ 2
						goto Lfb;
					}
				}
			}
		}
	}
	goto Laa;
Laa: mData->mByteCode.push_back(opcode); return;
Lab: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     FP_TRACE_BYTECODE_ADD(cAbs);
     goto TailCall_cAbs;
Lac: ImmedPtr[0] = fp_abs(x); return;
Lad: mData->mImmed.push_back(Value_t(4));
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
Lfc: opcode = cMul;
Lfd: FP_ReDefinePointers();
Lfe: FP_TRACE_BYTECODE_ADD(cMul);
     goto TailCall_cMul;
Lae: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(Value_t(4));
Lff: mData->mByteCode.push_back(cImmed); goto Lfc;
Laf: ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
Lbp: opcode = cMul; goto Lfe;
Lag: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSub;
Lfg: FP_TRACE_BYTECODE_ADD(cSub);
     goto TailCall_cSub;
Lah: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lfh: FP_ReDefinePointers();
Lfi: FP_TRACE_BYTECODE_ADD(cAdd);
     goto TailCall_cAdd;
Lai: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Lfj: AddFunctionOpcode(cAdd);
Lfk: opcode = cRSub;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cRSub);
     goto TailCall_cRSub;
Laj: ImmedPtr[0] = -x;
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lfj;
Lak: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lfk;
Lal: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lfl: AddFunctionOpcode(cAdd);
Lfm: AddFunctionOpcode(B);
Lfn: opcode = cSub;
     FP_ReDefinePointers(); goto Lfg;
Lam: ImmedPtr[0] = -x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lfl;
Lan: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lfm;
Lao: ImmedPtr[-1] = y+x;
Lap: mData->mImmed.pop_back();
Lbc: mData->mByteCode.pop_back(); return;
Laq: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lfj;
Lar: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lfj;
Lba: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cNotNot;
Lfo: FP_TRACE_BYTECODE_ADD(cNotNot);
     goto TailCall_cNotNot;
Lbb: ImmedPtr[-1] = fp_and(x,y); goto Lap;
Lbd: ImmedPtr[0] = fp_conj(x); return;
Lbe: mData->mImmed.push_back(Value_t());
     ByteCodePtr[0] = cImmed;
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(Value_t(1));
Lfp: mData->mByteCode.push_back(cImmed);
Lfq: opcode = cAdd; goto Lfh;
Lbf: ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     FP_TRACE_BYTECODE_ADD(cDiv);
     goto TailCall_cDiv;
Lbg: ImmedPtr[-1] = y/x; goto Lap;
Lbh: ImmedPtr[-1] = fp_equal(y,x); goto Lap;
Lbi: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lfr: FP_TRACE_BYTECODE_ADD(cEqual);
     goto TailCall_cEqual;
Lbj: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     opcode = cNot;
     FP_ReDefinePointers();
Lga: FP_TRACE_BYTECODE_ADD(cNot);
     goto TailCall_cNot;
Lbk: ImmedPtr[-1] = fp_less(x,y); goto Lap;
Lbl: ImmedPtr[-1] = fp_lessOrEq(x,y); goto Lap;
Lbm: ImmedPtr[0] = fp_imag(x); return;
Lbn: mData->mImmed.push_back(Value_t()); goto Lff;
Lbo: ImmedPtr[0] = Value_t(1)/x; return;
Lbq: ImmedPtr[-1] = fp_less(y,x); goto Lap;
Lbr: ImmedPtr[-1] = fp_lessOrEq(y,x); goto Lap;
Lca: ImmedPtr[-1] = fp_max(x,y); goto Lap;
Lcb: ImmedPtr[-1] = fp_min(x,y); goto Lap;
Lcc: ImmedPtr[-1] = fp_mod(y,x); goto Lap;
Lcd: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSqr;
Lgb: FP_TRACE_BYTECODE_ADD(cSqr);
     goto TailCall_cSqr;
Lce: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr);
Lgc: opcode = cNeg;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cNeg);
     goto TailCall_cNeg;
Lcf: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr);
     AddFunctionOpcode(cMul); goto Lgc;
Lcg: ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cPow); return;
Lch: ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2; goto Lfe;
Lci: ImmedPtr[-1] = x;
Lgd: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lfd;
Lcj: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
Lge: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lgf: AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
Lgg: mData->mByteCode.push_back(cImmed); goto Lfd;
Lck: mData->mImmed.pop_back(); goto Lge;
Lcl: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(B); goto Lgf;
Lcm: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lgf;
Lcn: ByteCodePtr[-1] = cImmed; goto Lbc;
Lco: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lfe;
Lcp: ImmedPtr[0] = x+x; goto Lch;
Lcq: ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     mData->mImmed.push_back(y*x);
     mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cMul); goto Lfq;
Lcr: ImmedPtr[-1] = x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(y*x); goto Lfp;
Lda: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(x+x); goto Lgg;
Ldb: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} return;
Ldc: ImmedPtr[-1] = y*x; goto Lgd;
Ldd: ImmedPtr[0] = -x; goto Lco;
Lde: ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     mData->mImmed.push_back(y*x);
     mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cMul); goto Lfn;
Ldf: ImmedPtr[-1] = y*x; goto Lap;
Ldg: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lgc;
Ldh: ByteCodePtr[0] = cDup;
     ImmedPtr -= 1;
     mData->mImmed.pop_back();
Lgh: opcode = cAdd; goto Lfi;
Ldi: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lgi: AddFunctionOpcode(cSqr); goto Lfd;
Ldj: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lgi;
Ldk: ImmedPtr[-1] = fp_nequal(y,x); goto Lap;
Ldl: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lgj: FP_TRACE_BYTECODE_ADD(cNEqual);
     goto TailCall_cNEqual;
Ldm: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     opcode = cNotNot;
     FP_ReDefinePointers(); goto Lfo;
Ldn: ImmedPtr[0] = -x;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lbp;
Ldo: ImmedPtr[0] = -x; return;
Ldp: mData->mByteCode.pop_back();
     AddFunctionOpcode(cAbsNot); return;
Ldq: ImmedPtr[0] = -x;
Lee: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cEqual; goto Lfr;
Ldr: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cNEqual; goto Lgj;
Lea: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cLessOrEq;
     FP_TRACE_BYTECODE_ADD(cLessOrEq);
     goto TailCall_cLessOrEq;
Leb: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cLess;
     FP_TRACE_BYTECODE_ADD(cLess);
     goto TailCall_cLess;
Lec: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cGreaterOrEq;
     FP_TRACE_BYTECODE_ADD(cGreaterOrEq);
     goto TailCall_cGreaterOrEq;
Led: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cGreater;
     FP_TRACE_BYTECODE_ADD(cGreater);
     goto TailCall_cGreater;
Lef: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lga;
Leg: ImmedPtr[0] = fp_not(x); return;
Leh: ImmedPtr[0] = -x; goto Ldr;
Lei: ImmedPtr[-1] = fp_or(x,y); goto Lap;
Lej: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     opcode = cInv;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cInv);
     goto TailCall_cInv;
Lek: mData->mImmed.push_back(Value_t());
     ByteCodePtr[0] = cImmed; goto Lfc;
Lel: ImmedPtr[0] = fp_real(x); return;
Lem: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lgb;
Len: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lgh;
Leo: ImmedPtr[-1] = y-x; goto Lap;
Lep: ImmedPtr[0] = -x; goto Lgh;
Leq: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cAdd);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lfk;
Ler: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cSub); goto Lfk;
Lfa: mData->mByteCode.push_back(cDup); return;
Lfb: ByteCodePtr[0] = cDup; return;
return;
// This list of dummy gotos is here to inhibit
// compiler warnings on unused labels
goto TailCall_cAnd;goto TailCall_cConj;goto TailCall_cImag;
goto TailCall_cMax;goto TailCall_cMin;goto TailCall_cMod;
goto TailCall_cNeg;goto TailCall_cOr;goto TailCall_cRDiv;
goto TailCall_cReal;goto TailCall_cSub;
#endif

#if((FP_FLOAT_VERSION) && !(FP_COMPLEX_VERSION))
	Value_t x;
	unsigned A;
	Value_t y;
	unsigned B;
	unsigned C;
	unsigned D;
	switch(opcode)
	{
	TailCall_cAbs:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAbs:
		switch(ByteCodePtr[0])
		{
		case cInv:
			if(ByteCodePtr[-1] == cSqr)
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(211,"cSqr cInv cAbs", "cSqr cInv", "");
				/* ByteCodePtr[-1] = cSqr; */ // redundant, matches cSqr @ 2
				/* ByteCodePtr[0] = cInv; */ // redundant, matches cInv @ 1
				return;
			}
			goto Default0;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(199,"cNeg cAbs", "cAbs", "");
			/* opcode = cAbs; */ // redundant, matches cAbs @ 0
			goto Lab;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(130,
				"x cAbs",
				"[fp_abs(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lac;
		default: Default0:;
			A = ByteCodePtr[0];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(212,
					"A[IsNeverNegativeValueOpcode(A)] cAbs",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default1;
	TailCall_cAcos:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAcos:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(fp_abs(x)<=Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(146,
					"x[fp_abs(x)<=Value_t(1)] cAcos",
					"[fp_acos(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lad;
			}
		}
		goto Default1;
	TailCall_cAcosh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAcosh:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x>=Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(143,
					"x[x>=Value_t(1)] cAcosh",
					"[fp_acosh(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lae;
			}
		}
		goto Default1;
	TailCall_cAdd:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAdd:
		switch(ByteCodePtr[0])
		{
		case cDup:
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(317,"cDup cAdd cDup cAdd", "[Value_t(4)] cMul", "");
					goto Laf;
				}
				break;
			case cMul:
				if(ByteCodePtr[-2] == cAdd)
				{
					if(ByteCodePtr[-3] == cDup)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(318,"cDup cAdd cMul cDup cAdd", "cMul [Value_t(4)] cMul", "");
						goto Lag;
					}
				}
				break;
			}
			goto Default2;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(320,
						"cDup x cMul cAdd",
						"[x+Value_t(1)] cMul",
						"    with x = " << x << "\n");
					goto Lah;
				}
			}
			goto Default2;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(197,"cNeg cAdd", "cSub", "");
			goto Lai;
		case cImmed:
			x = ImmedPtr[0];
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(125,
						"y cAdd x cAdd",
						"[y+x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cAdd; */ // redundant, matches cAdd @ 0
					goto Laj;
				}
				break;
			case cRSub:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(305,
							"y cAdd cRSub x cAdd",
							"[ y+x] cAdd cRSub",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lak;
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(306,
						"cNeg cRSub x cAdd",
						"[-x] cAdd cRSub",
						"    with x = " << x << "\n");
					goto Lal;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(304,
						"y cRSub x cAdd",
						"[ y+x] cRSub",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lam;
				}
				break;
			case cSub:
				B = ByteCodePtr[-2];
				if(IsVarOpcode(B))
				{
					switch(ByteCodePtr[-3])
					{
					case cAdd:
						if(ByteCodePtr[-4] == cImmed)
						{
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(299,
								"y cAdd B[IsVarOpcode(B)] cSub x cAdd",
								"[ y+x] cAdd B cSub",
								"    with x = " << x
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-4] = cImmed; */ // redundant, matches y @ 5
							goto Lan;
						}
						break;
					case cNeg:
						FP_TRACE_BYTECODE_OPTIMIZATION(300,
							"cNeg B[IsVarOpcode(B)] cSub x cAdd",
							"[-x] cAdd B cSub",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						goto Lao;
					case cImmed:
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(298,
							"y B[IsVarOpcode(B)] cSub x cAdd",
							"[ y+x] B cSub",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lap;
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(103,
					"y x cAdd",
					"[y+x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Laq;
			}
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(55,
					"x[x==Value_t()] cAdd",
					"",
					"    with x = " << x << "\n");
				goto Lar;
			}
			break;
		default: Default2:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				if(ByteCodePtr[-1] == cRSub)
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(297,
							"x cRSub A[IsVarOpcode(A)] cAdd",
							"[DO_STACKPLUS1] A [x] cAdd cRSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						incStackPtr();
						--mStackPtr;
						goto Lba;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(302,
						"cRSub A[IsVarOpcode(A)] cAdd",
						"[DO_STACKPLUS1] A cAdd cRSub",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Lbb;
				}
			}
		}
		goto Default1;
	TailCall_cAnd:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAnd:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(231,"cDup cAnd", "cNotNot", "");
			goto Lbc;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(115,
					"y x cAnd",
					"[fp_and(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbd;
			}
			break;
		}
		goto Default1;
	TailCall_cAsin:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAsin:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(fp_abs(x)<=Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(147,
					"x[fp_abs(x)<=Value_t(1)] cAsin",
					"[fp_asin(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lbe;
			}
		}
		goto Default1;
	TailCall_cAsinh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAsinh:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(144,
				"x cAsinh",
				"[fp_asinh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbf;
		}
		goto Default1;
	TailCall_cAtan:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAtan:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(148,
				"x cAtan",
				"[fp_atan(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbg;
		}
		goto Default1;
	TailCall_cAtan2:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAtan2:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(137,
					"y x cAtan2",
					"[fp_atan2(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbh;
			}
		}
		goto Default1;
	TailCall_cAtanh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAtanh:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(fp_abs(x)<Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(145,
					"x[fp_abs(x)<Value_t(1)] cAtanh",
					"[fp_atanh(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lbi;
			}
		}
		goto Default1;
	TailCall_cCbrt:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCbrt:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(149,
				"x cCbrt",
				"[fp_cbrt(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbj;
		}
		goto Default1;
	TailCall_cCeil:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCeil:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			B = ByteCodePtr[-1];
			if(IsUnaryOpcode(B)&&IsAlwaysIntegerOpcode(B))
			{
				A = ByteCodePtr[-2];
				if(IsVarOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(409,
						"A[IsVarOpcode(A)] B[IsUnaryOpcode(B)&&IsAlwaysIntegerOpcode(B)] cAdd cCeil",
						"cCeil A B cAdd",
						"    with B = " << FP_TRACE_OPCODENAME(B)
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					goto Lbk;
				}
			}
			goto Default3;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(416,"cNeg cCeil", "cFloor cNeg", "");
			goto Lbl;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(133,
				"x cCeil",
				"[fp_ceil(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbm;
		default: Default3:;
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(405,
					"A[IsAlwaysIntegerOpcode(A)] cCeil",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default1;
	TailCall_cCos:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCos:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(242,"cAbs cCos", "cCos", "");
			/* opcode = cCos; */ // redundant, matches cCos @ 0
			goto Lbn;
		case cAtan:
			FP_TRACE_BYTECODE_OPTIMIZATION(532,"cAtan cCos", "cSqr [DO_STACKPLUS1] [Value_t(1)] cAdd cRSqrt", "");
			incStackPtr();
			--mStackPtr;
			goto Lbo;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(245,"cNeg cCos", "cCos", "");
			/* opcode = cCos; */ // redundant, matches cCos @ 0
			goto Lbn;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(150,
				"x cCos",
				"[fp_cos(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbp;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				switch(ByteCodePtr[-1])
				{
				case cSec:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(516,
							"B[B==A] cSec A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCos",
							"B cSec cDup cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cSec; */ // redundant, matches cSec @ 2
						goto Lbq;
					}
					break;
				case cSin:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(510,
							"B[B==A] cSin A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCos",
							"B cSinCos",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lbr;
					}
					break;
				}
			}
		}
		goto Default1;
	TailCall_cCosh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCosh:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(243,"cAbs cCosh", "cCosh", "");
			/* opcode = cCosh; */ // redundant, matches cCosh @ 0
			goto Lca;
		case cAsinh:
			FP_TRACE_BYTECODE_OPTIMIZATION(466,"cAsinh cCosh", "[DO_STACKPLUS1] cSqr [Value_t(1)] cAdd cSqrt", "");
			incStackPtr();
			--mStackPtr;
			goto Lcb;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(246,"cNeg cCosh", "cCosh", "");
			/* opcode = cCosh; */ // redundant, matches cCosh @ 0
			goto Lca;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(151,
				"x cCosh",
				"[fp_cosh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lcc;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				if(ByteCodePtr[-1] == cSinh)
				{
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(523,
							"B[B==A] cSinh A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCosh",
							"B cSinhCosh",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lcd;
					}
				}
			}
		}
		goto Default1;
	TailCall_cCot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCot:
		A = ByteCodePtr[0];
		if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
		{
			if(ByteCodePtr[-1] == cTan)
			{
				B = ByteCodePtr[-2];
				if(B==A)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(514,
						"B[B==A] cTan A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCot",
						"B cTan cDup cInv",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", B = " << FP_TRACE_OPCODENAME(B)
						    << "\n");
					/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
					/* ByteCodePtr[-1] = cTan; */ // redundant, matches cTan @ 2
					goto Lbq;
				}
			}
		}
		goto Default1;
	TailCall_cCsc:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCsc:
		switch(ByteCodePtr[0])
		{
		case cAtan:
			A = ByteCodePtr[-1];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(537,
					"A[IsNeverNegativeValueOpcode(A)] cAtan cCsc",
					"A cSqr cInv [DO_STACKPLUS1] [Value_t(1)] cAdd cSqrt",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				incStackPtr();
				--mStackPtr;
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Lce;
			}
			goto Default4;
		default: Default4:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				if(ByteCodePtr[-1] == cSin)
				{
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(512,
							"B[B==A] cSin A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCsc",
							"B cSin cDup cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cSin; */ // redundant, matches cSin @ 2
						goto Lbq;
					}
				}
			}
		}
		goto Default1;
	TailCall_cDeg:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cDeg:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(131,
				"x cDeg",
				"[RadiansToDegrees(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lcf;
		}
		goto Default1;
	TailCall_cDiv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cDiv:
		switch(ByteCodePtr[0])
		{
		case cCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(257,"cCos cDiv", "cSec cMul", "");
			goto Lcg;
		case cCot:
			FP_TRACE_BYTECODE_OPTIMIZATION(261,"cCot cDiv", "cTan cMul", "");
			goto Lch;
		case cCsc:
			FP_TRACE_BYTECODE_OPTIMIZATION(259,"cCsc cDiv", "cSin cMul", "");
			goto Lci;
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(76,"cDup cDiv", "[Value_t()] cMul [Value_t(1)] cAdd", "");
			goto Lcj;
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(422,"cExp cDiv", "cNeg cExp cMul", "");
			goto Lck;
		case cExp2:
			FP_TRACE_BYTECODE_OPTIMIZATION(423,"cExp2 cDiv", "cNeg cExp2 cMul", "");
			goto Lcl;
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(220,"cInv cDiv", "cMul", "");
			goto Lcm;
		case cPow:
			FP_TRACE_BYTECODE_OPTIMIZATION(421,"cPow cDiv", "cNeg cPow cMul", "");
			goto Lcn;
		case cSec:
			FP_TRACE_BYTECODE_OPTIMIZATION(260,"cSec cDiv", "cCos cMul", "");
			goto Lco;
		case cSin:
			FP_TRACE_BYTECODE_OPTIMIZATION(256,"cSin cDiv", "cCsc cMul", "");
			goto Lcp;
		case cSinCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(518,"cSinCos cDiv", "cTan", "");
			goto Lcq;
		case cSinhCosh:
			FP_TRACE_BYTECODE_OPTIMIZATION(525,"cSinhCosh cDiv", "cTanh", "");
			goto Lcr;
		case cTan:
			FP_TRACE_BYTECODE_OPTIMIZATION(258,"cTan cDiv", "cCot cMul", "");
			goto Lda;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(123,
						"cNeg x[x!=Value_t()] cDiv",
						"[-x] cDiv",
						"    with x = " << x << "\n");
					/* opcode = cDiv; */ // redundant, matches cDiv @ 0
					goto Ldb;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(101,
						"y x[x!=Value_t()] cDiv",
						"[y/x]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Ldc;
				}
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(54,
					"x[x==Value_t(1)] cDiv",
					"",
					"    with x = " << x << "\n");
				goto Lar;
			}
			if(x!=Value_t(0))
			{
				if(ByteCodePtr[-1] == cMul)
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						y = ImmedPtr[-1];
						if((y/x)==fp_const_rad_to_deg<Value_t>())
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(328,
								"y[(y/x)==fp_const_rad_to_deg<Value_t>()] cMul x[x!=Value_t(0)] cDiv",
								"cDeg",
								"    with x = " << x
								    << ", y = " << y
								    << "\n");
							goto Ldd;
						}
						if((y/x)==fp_const_deg_to_rad<Value_t>())
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(329,
								"y[(y/x)==fp_const_deg_to_rad<Value_t>()] cMul x[x!=Value_t(0)] cDiv",
								"cRad",
								"    with x = " << x
								    << ", y = " << y
								    << "\n");
							goto Lde;
						}
						FP_TRACE_BYTECODE_OPTIMIZATION(330,
							"y cMul x[x!=Value_t(0)] cDiv",
							"[y/x] cMul",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
						goto Ldf;
					}
				}
				FP_TRACE_BYTECODE_OPTIMIZATION(332,
					"x[x!=Value_t(0)] cDiv",
					"[Value_t(1)/x] cMul",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Ldg;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDiv:
					B = ByteCodePtr[-2];
					if(IsVarOpcode(B))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(278,
							"B[IsVarOpcode(B)] cDiv A[IsVarOpcode(A)] cDiv",
							"[DO_STACKPLUS1] B A cMul cDiv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						incStackPtr();
						--mStackPtr;
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* opcode = cDiv; */ // redundant, matches cDiv @ 0
						goto Ldh;
					}
					break;
				case cRDiv:
					switch(ByteCodePtr[-2])
					{
					case cImmed:
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(273,
							"x cRDiv A[IsVarOpcode(A)] cDiv",
							"A cMul [x] cRDiv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Ldi;
					default:
						B = ByteCodePtr[-2];
						if(IsVarOpcode(B))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(272,
								"B[IsVarOpcode(B)] cRDiv A[IsVarOpcode(A)] cDiv",
								"A cMul B cRDiv",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							goto Ldj;
						}
					}
					break;
				}
			}
		}
		goto Default1;
	TailCall_cEqual:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(369,
						"cAbs x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Ldk;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(371,
						"cSqr x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Ldk;
				default:
					A = ByteCodePtr[-1];
					if(IsLogicalOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(437,
							"A[IsLogicalOpcode(A)] x[x==Value_t(0)] cEqual",
							"A cNot",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Ldl;
					}
				}
			}
			if(x==Value_t(1))
			{
				A = ByteCodePtr[-1];
				if(IsLogicalOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(435,
						"A[IsLogicalOpcode(A)] x[x==Value_t(1)] cEqual",
						"A",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					goto Lar;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(113,
					"y x cEqual",
					"[fp_equal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldm;
			}
		}
		goto Default1;
	TailCall_cExp:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cExp:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(418,
					"x cAdd cExp",
					"cExp [fp_exp(x)] cMul",
					"    with x = " << x << "\n");
				goto Ldn;
			}
			break;
		case cLog:
			A = ByteCodePtr[-1];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(347,
					"A[IsNeverNegativeValueOpcode(A)] cLog cExp",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Ldo;
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(152,
				"x cExp",
				"[fp_exp(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Ldp;
		}
		goto Default1;
	TailCall_cExp2:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cExp2:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(419,
					"x cAdd cExp2",
					"cExp2 [fp_exp2(x)] cMul",
					"    with x = " << x << "\n");
				goto Ldq;
			}
			break;
		case cLog2:
			A = ByteCodePtr[-1];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(348,
					"A[IsNeverNegativeValueOpcode(A)] cLog2 cExp2",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Ldo;
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(153,
				"x cExp2",
				"[fp_exp2(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Ldr;
		}
		FP_TRACE_BYTECODE_OPTIMIZATION(495,"cExp2", "[DO_STACKPLUS1] [fp_log(Value_t(2))] cMul cExp", "");
		incStackPtr();
		--mStackPtr;
		goto Lea;
	TailCall_cFloor:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFloor:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			B = ByteCodePtr[-1];
			if(IsUnaryOpcode(B)&&IsAlwaysIntegerOpcode(B))
			{
				A = ByteCodePtr[-2];
				if(IsVarOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(408,
						"A[IsVarOpcode(A)] B[IsUnaryOpcode(B)&&IsAlwaysIntegerOpcode(B)] cAdd cFloor",
						"cFloor A B cAdd",
						"    with B = " << FP_TRACE_OPCODENAME(B)
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					goto Leb;
				}
			}
			goto Default5;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(415,"cNeg cFloor", "cCeil cNeg", "");
			goto Lec;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(134,
				"x cFloor",
				"[fp_floor(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Led;
		default: Default5:;
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(404,
					"A[IsAlwaysIntegerOpcode(A)] cFloor",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default1;
	TailCall_cGreater:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cGreater:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(111,
					"y x cGreater",
					"[fp_less(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lee;
			}
			if(x==Value_t(-0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(447,
					"x[x==Value_t(-0.5)] cGreater",
					"cNeg cAbsNot",
					"    with x = " << x << "\n");
				goto Lef;
			}
		}
		goto Default1;
	TailCall_cGreaterOrEq:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cGreaterOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x!=Value_t(0))
			{
				if(ByteCodePtr[-1] == cAbs)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(443,
						"cAbs x[x!=Value_t(0)] cGreaterOrEq",
						"[Value_t(0.5)/x] cMul cNotNot",
						"    with x = " << x << "\n");
					goto Leg;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(112,
					"y x cGreaterOrEq",
					"[fp_lessOrEq(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Leh;
			}
			if(x==Value_t(0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(446,
					"x[x==Value_t(0.5)] cGreaterOrEq",
					"cAbsNotNot",
					"    with x = " << x << "\n");
				goto Lei;
			}
		}
		goto Default1;
	TailCall_cHypot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cHypot:
		switch(ByteCodePtr[0])
		{
		case cSinCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(82,"cSinCos cHypot", "[DO_STACKPLUS1] [Value_t()] cMul [Value_t(1)] cAdd", "");
			incStackPtr();
			--mStackPtr;
			goto Lcj;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(533,
				"x cHypot",
				"cSqr [x*x] cAdd cSqrt",
				"    with x = " << x << "\n");
			goto Lej;
		}
		goto Default1;
	TailCall_cInt:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cInt:
		switch(ByteCodePtr[0])
		{
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(135,
				"x cInt",
				"[fp_int(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lek;
		default:
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(406,
					"A[IsAlwaysIntegerOpcode(A)] cInt",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default1;
	TailCall_cInv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cInv:
		switch(ByteCodePtr[0])
		{
		case cCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(263,"cCos cInv", "cSec", "");
			goto Lel;
		case cCot:
			FP_TRACE_BYTECODE_OPTIMIZATION(267,"cCot cInv", "cTan", "");
			goto Lcq;
		case cCsc:
			FP_TRACE_BYTECODE_OPTIMIZATION(265,"cCsc cInv", "cSin", "");
			goto Lem;
		case cHypot:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(534,
					"x cHypot cInv",
					"cSqr [x*x] cAdd cRSqrt",
					"    with x = " << x << "\n");
				goto Len;
			}
			break;
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(60,"cInv cInv", "", "");
			goto Ldo;
		case cPow:
			FP_TRACE_BYTECODE_OPTIMIZATION(365,"cPow cInv", "cNeg cPow", "");
			goto Leo;
		case cRSqrt:
			FP_TRACE_BYTECODE_OPTIMIZATION(207,"cRSqrt cInv", "cSqrt", "");
			goto Lep;
		case cSec:
			FP_TRACE_BYTECODE_OPTIMIZATION(266,"cSec cInv", "cCos", "");
			goto Leq;
		case cSin:
			FP_TRACE_BYTECODE_OPTIMIZATION(262,"cSin cInv", "cCsc", "");
			goto Ler;
		case cSqrt:
			FP_TRACE_BYTECODE_OPTIMIZATION(205,"cSqrt cInv", "cRSqrt", "");
			goto Lfa;
		case cTan:
			FP_TRACE_BYTECODE_OPTIMIZATION(264,"cTan cInv", "cCot", "");
			goto Lfb;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(99,
					"x[x!=Value_t()] cInv",
					"[Value_t(1)/x]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lfc;
			}
			break;
		}
		goto Default1;
	TailCall_cLess:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLess:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				A = ByteCodePtr[-1];
				if(IsNeverNegativeValueOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(308,
						"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(0)] cLess",
						"A [x] cMul",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
					goto Lfd;
				}
			}
			if(x!=Value_t(0))
			{
				if(ByteCodePtr[-1] == cAbs)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(442,
						"cAbs x[x!=Value_t(0)] cLess",
						"[Value_t(0.5)/x] cMul cNot",
						"    with x = " << x << "\n");
					goto Lfe;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(109,
					"y x cLess",
					"[fp_less(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lff;
			}
			if(x==Value_t(0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(445,
					"x[x==Value_t(0.5)] cLess",
					"cAbsNot",
					"    with x = " << x << "\n");
				goto Lfg;
			}
		}
		goto Default1;
	TailCall_cLessOrEq:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLessOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(110,
					"y x cLessOrEq",
					"[fp_lessOrEq(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lfh;
			}
			if(x==Value_t(-0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(448,
					"x[x==Value_t(-0.5)] cLessOrEq",
					"cNeg cAbsNotNot",
					"    with x = " << x << "\n");
				goto Lfi;
			}
		}
		goto Default1;
	TailCall_cLog:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLog:
		switch(ByteCodePtr[0])
		{
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(350,"cExp cLog", "", "");
			goto Ldo;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(x>Value_t(0))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(507,
						"x[x>Value_t(0)] cMul cLog",
						"cLog [fp_log(x)] cAdd",
						"    with x = " << x << "\n");
					goto Lfj;
				}
			}
			break;
		case cSqr:
			FP_TRACE_BYTECODE_OPTIMIZATION(310,"cSqr cLog", "cAbs cLog cDup cAdd", "");
			goto Lfk;
		case cImmed:
			x = ImmedPtr[0];
			if(x>Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(154,
					"x[x>Value_t(0)] cLog",
					"[fp_log(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lfl;
			}
			break;
		}
		goto Default1;
	TailCall_cLog10:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLog10:
		switch(ByteCodePtr[0])
		{
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(497,"cExp cLog10", "[DO_STACKPLUS1] [fp_log10(fp_const_e<Value_t>())] cMul", "");
			incStackPtr();
			--mStackPtr;
			goto Lfm;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(x>Value_t(0))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(508,
						"x[x>Value_t(0)] cMul cLog10",
						"cLog10 [fp_log10(x)] cAdd",
						"    with x = " << x << "\n");
					goto Lfn;
				}
			}
			break;
		case cSqr:
			FP_TRACE_BYTECODE_OPTIMIZATION(312,"cSqr cLog10", "cAbs cLog10 cDup cAdd", "");
			goto Lfo;
		case cImmed:
			x = ImmedPtr[0];
			if(x>Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(155,
					"x[x>Value_t(0)] cLog10",
					"[fp_log10(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lfp;
			}
			break;
		}
		goto Default1;
	TailCall_cLog2:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLog2:
		switch(ByteCodePtr[0])
		{
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(496,"cExp cLog2", "[DO_STACKPLUS1] [fp_log2(fp_const_e<Value_t>())] cMul", "");
			incStackPtr();
			--mStackPtr;
			goto Lfq;
		case cExp2:
			FP_TRACE_BYTECODE_OPTIMIZATION(351,"cExp2 cLog2", "", "");
			goto Ldo;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(x>Value_t(0))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(506,
						"x[x>Value_t(0)] cMul cLog2",
						"cLog2 [fp_log2(x)] cAdd",
						"    with x = " << x << "\n");
					goto Lfr;
				}
			}
			break;
		case cSqr:
			FP_TRACE_BYTECODE_OPTIMIZATION(311,"cSqr cLog2", "cAbs cLog2 cDup cAdd", "");
			goto Lga;
		case cImmed:
			x = ImmedPtr[0];
			if(x>Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(156,
					"x[x>Value_t(0)] cLog2",
					"[fp_log2(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lgb;
			}
			break;
		}
		goto Default1;
	TailCall_cMax:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMax:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(58,"cDup cMax", "", "");
			goto Ldo;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(139,
					"y x cMax",
					"[fp_max(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lgc;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(64,
							"B[B==A] cDup A[IsVarOpcode(A)] cMax",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Ldo;
					}
					break;
				case cMax:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(66,
							"B[B==A] cMax A[IsVarOpcode(A)] cMax",
							"B cMax",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMax; */ // redundant, matches cMax @ 2
						goto Ldo;
					}
					break;
				}
			}
		}
		goto Default1;
	TailCall_cMin:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMin:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(57,"cDup cMin", "", "");
			goto Ldo;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(138,
					"y x cMin",
					"[fp_min(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lgd;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(63,
							"B[B==A] cDup A[IsVarOpcode(A)] cMin",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Ldo;
					}
					break;
				case cMin:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(65,
							"B[B==A] cMin A[IsVarOpcode(A)] cMin",
							"B cMin",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMin; */ // redundant, matches cMin @ 2
						goto Ldo;
					}
					break;
				}
			}
		}
		goto Default1;
	TailCall_cMod:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMod:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				if(ByteCodePtr[-1] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(102,
						"y x[x!=Value_t()] cMod",
						"[fp_mod(y,x)]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Lge;
				}
			}
		}
		goto Default1;
	TailCall_cMul:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMul:
		switch(ByteCodePtr[0])
		{
		case cCsc:
			A = ByteCodePtr[-1];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>3)
			{
				if(ByteCodePtr[-2] == cCos)
				{
					B = ByteCodePtr[-3];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(524,
							"B[B==A] cCos A[IsVarOpcode(A)&&mData->mByteCode.size()>3] cCsc cMul",
							"B cCot",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
						goto Lgf;
					}
				}
			}
			goto Default6;
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(200,"cDup cMul", "cSqr", "");
			goto Lgg;
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(221,"cInv cMul", "cDiv", "");
			goto Lgh;
		case cNeg:
			switch(ByteCodePtr[-1])
			{
			case cDup:
				FP_TRACE_BYTECODE_OPTIMIZATION(483,"cDup cNeg cMul", "cSqr cNeg", "");
				goto Lgi;
			default:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cMul)
					{
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(489,
								"B[B==A] cMul A[IsVarOpcode(A)] cNeg cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lgj;
						}
					}
				}
			}
			goto Default6;
		case cPow:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(321,
						"cDup x cPow cMul",
						"[x+Value_t(1)] cPow",
						"    with x = " << x << "\n");
					goto Lgk;
				}
			}
			goto Default6;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(91,
							"A[IsVarOpcode(A)] cMul x[x==Value_t()] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lgl;
					}
					goto Default7;
				default: Default7:;
					A = ByteCodePtr[-1];
					if(IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						switch(ByteCodePtr[-2])
						{
						case cImmed:
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(90,
								"y A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
								"[x] cMul",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lgm;
						default:
							B = ByteCodePtr[-2];
							if(IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								switch(ByteCodePtr[-3])
								{
								case cImmed:
									y = ImmedPtr[-1];
									FP_TRACE_BYTECODE_OPTIMIZATION(94,
										"y B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
										"A [x] cMul",
										"    with x = " << x
										    << ", A = " << FP_TRACE_OPCODENAME(A)
										    << ", B = " << FP_TRACE_OPCODENAME(B)
										    << ", y = " << y
										    << "\n");
									/* opcode = cMul; */ // redundant, matches cMul @ 0
									goto Lgn;
								default:
									C = ByteCodePtr[-3];
									if(IsVarOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(92,
											"C[IsVarOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
											"A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lgo;
									}
									if(IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(93,
											"C[IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
											"B A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lgp;
									}
								}
							}
							if(IsVarOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(88,
									"B[IsVarOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
									"[x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lgl;
							}
							if(IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(89,
									"B[IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
									"A [x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lgq;
							}
						}
					}
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(86,
							"A[IsVarOpcode(A)] x[x==Value_t()] cMul",
							"[x]",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						goto Lgr;
					}
					if(IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(87,
							"A[IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lha;
					}
				}
			}
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				switch(ByteCodePtr[-2])
				{
				case cDup:
					if(x+x==Value_t(1))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(323,
							"cDup[x+x==Value_t(1)] cAdd x cMul",
							"",
							"    with x = " << x << "\n");
						goto Lhb;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(324,
						"cDup cAdd x cMul",
						"[x+x] cMul",
						"    with x = " << x << "\n");
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Lhc;
				case cMul:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(IsVarOpcode(A))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(396,
								"A[IsVarOpcode(A)] y cMul cAdd x cMul",
								"[x] cMul A [y*x] cMul cAdd",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lhd;
						}
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(395,
						"y cAdd x cMul",
						"[x] cMul [y*x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lhe;
				}
				break;
			case cDeg:
				FP_TRACE_BYTECODE_OPTIMIZATION(216,
					"cDeg x cMul",
					"[DO_STACKPLUS1] [RadiansToDegrees(x)] cMul",
					"    with x = " << x << "\n");
				incStackPtr();
				--mStackPtr;
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Lhf;
			case cDiv:
				B = ByteCodePtr[-2];
				if(IsVarOpcode(B))
				{
					switch(ByteCodePtr[-3])
					{
					case cMul:
						if(ByteCodePtr[-4] == cImmed)
						{
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(285,
								"y cMul B[IsVarOpcode(B)] cDiv x cMul",
								"[y*x] cMul B cDiv",
								"    with x = " << x
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-4] = cImmed; */ // redundant, matches y @ 5
							goto Lhg;
						}
						break;
					case cNeg:
						FP_TRACE_BYTECODE_OPTIMIZATION(286,
							"cNeg B[IsVarOpcode(B)] cDiv x cMul",
							"[-x] cMul B cDiv",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						goto Lhh;
					case cImmed:
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(284,
							"y B[IsVarOpcode(B)] cDiv x cMul",
							"[y*x] B cDiv",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lhi;
					}
				}
				break;
			case cMul:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cDup)
					{
						if(x+x==Value_t(1))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(325,
								"cDup[x+x==Value_t(1)] cAdd cMul x cMul",
								"cMul",
								"    with x = " << x << "\n");
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lhj;
						}
						FP_TRACE_BYTECODE_OPTIMIZATION(326,
							"cDup cAdd cMul x cMul",
							"cMul [x+x] cMul",
							"    with x = " << x << "\n");
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lhk;
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					if(y*x==Value_t(1))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(68,
							"y[y*x==Value_t(1)] cMul x cMul",
							"",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Lhl;
					}
					if((y*x)==fp_const_rad_to_deg<Value_t>())
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(314,
							"y[(y*x)==fp_const_rad_to_deg<Value_t>()] cMul x cMul",
							"cDeg",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Ldd;
					}
					if((y*x)==fp_const_deg_to_rad<Value_t>())
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(315,
							"y[(y*x)==fp_const_deg_to_rad<Value_t>()] cMul x cMul",
							"cRad",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Lde;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(126,
						"y cMul x cMul",
						"[y*x] cMul",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Lhm;
				}
				break;
			case cNeg:
				FP_TRACE_BYTECODE_OPTIMIZATION(120,
					"cNeg x cMul",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Lhn;
			case cRDiv:
				switch(ByteCodePtr[-2])
				{
				case cMul:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(292,
							"y cMul cRDiv x cMul",
							"[y*x] cMul cRDiv",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lho;
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(293,
						"cNeg cRDiv x cMul",
						"[-x] cMul cRDiv",
						"    with x = " << x << "\n");
					goto Lhp;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(291,
						"y cRDiv x cMul",
						"[y*x] cRDiv",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lhq;
				}
				break;
			case cRad:
				FP_TRACE_BYTECODE_OPTIMIZATION(217,
					"cRad x cMul",
					"[DO_STACKPLUS1] [DegreesToRadians(x)] cMul",
					"    with x = " << x << "\n");
				incStackPtr();
				--mStackPtr;
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Lhr;
			case cSub:
				if(ByteCodePtr[-2] == cMul)
				{
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(IsVarOpcode(A))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(397,
								"A[IsVarOpcode(A)] y cMul cSub x cMul",
								"[x] cMul A [y*x] cMul cSub",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lia;
						}
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(100,
					"y x cMul",
					"[y*x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lib;
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(53,
					"x[x==Value_t(1)] cMul",
					"",
					"    with x = " << x << "\n");
				goto Lar;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(122,
					"x[x==Value_t(-1)] cMul",
					"cNeg",
					"    with x = " << x << "\n");
				goto Lic;
			}
			if(x==Value_t(2))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(196,
					"x[x==Value_t(2)] cMul",
					"cDup cAdd",
					"    with x = " << x << "\n");
				goto Lid;
			}
			if(x==fp_const_rad_to_deg<Value_t>())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(214,
					"x[x==fp_const_rad_to_deg<Value_t>()] cMul",
					"cDeg",
					"    with x = " << x << "\n");
				goto Lie;
			}
			if(x==fp_const_deg_to_rad<Value_t>())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(215,
					"x[x==fp_const_deg_to_rad<Value_t>()] cMul",
					"cRad",
					"    with x = " << x << "\n");
				goto Lif;
			}
			break;
		default: Default6:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDiv:
					B = ByteCodePtr[-2];
					if(IsVarOpcode(B))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(281,
							"B[IsVarOpcode(B)] cDiv A[IsVarOpcode(A)] cMul",
							"[DO_STACKPLUS1] A cMul B cDiv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						incStackPtr();
						--mStackPtr;
						goto Lig;
					}
					goto Default8;
				case cMul:
					switch(ByteCodePtr[-2])
					{
					case cNeg:
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(486,
								"B[B==A] cNeg cMul A[IsVarOpcode(A)] cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lgj;
						}
						goto Default9;
					default: Default9:;
						B = ByteCodePtr[-2];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(477,
								"B[B==A] cMul A[IsVarOpcode(A)] cMul",
								"B cSqr cMul",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lih;
						}
					}
					goto Default8;
				case cNeg:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(480,
							"B[B==A] cNeg A[IsVarOpcode(A)] cMul",
							"B cSqr cNeg",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lgi;
					}
					goto Default8;
				case cRDiv:
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(274,
							"x cRDiv A[IsVarOpcode(A)] cMul",
							"[DO_STACKPLUS1] A [x] cMul cRDiv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						incStackPtr();
						--mStackPtr;
						goto Lii;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(288,
						"cRDiv A[IsVarOpcode(A)] cMul",
						"[DO_STACKPLUS1] A cMul cRDiv",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Lij;
				default: Default8:;
					B = ByteCodePtr[-1];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(474,
							"B[B==A] A[IsVarOpcode(A)] cMul",
							"B cSqr",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-1] = B; */ // redundant, matches B @ 2
						goto Lgg;
					}
				}
			}
			if(IsUnaryOpcode(A))
			{
				B = ByteCodePtr[-1];
				if(IsVarOpcode(B)&&mData->mByteCode.size()>1)
				{
					if(ByteCodePtr[-2] == cMul)
					{
						C = ByteCodePtr[-3];
						if(C==A)
						{
							D = ByteCodePtr[-4];
							if(D==B)
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(493,
									"D[D==B] C[C==A] cMul B[IsVarOpcode(B)&&mData->mByteCode.size()>1] A[IsUnaryOpcode(A)] cMul",
									"D C cSqr cMul",
									"    with A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << ", C = " << FP_TRACE_OPCODENAME(C)
									    << ", D = " << FP_TRACE_OPCODENAME(D)
									    << "\n");
								/* ByteCodePtr[-4] = D; */ // redundant, matches D @ 5
								/* ByteCodePtr[-3] = C; */ // redundant, matches C @ 4
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lik;
							}
						}
					}
				}
			}
		}
		goto Default1;
	TailCall_cNEqual:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(370,
						"cAbs x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Lil;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(372,
						"cSqr x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Lil;
				default:
					A = ByteCodePtr[-1];
					if(IsLogicalOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(438,
							"A[IsLogicalOpcode(A)] x[x==Value_t(0)] cNEqual",
							"A",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lar;
					}
				}
			}
			if(x==Value_t(1))
			{
				A = ByteCodePtr[-1];
				if(IsLogicalOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(436,
						"A[IsLogicalOpcode(A)] x[x==Value_t(1)] cNEqual",
						"A cNot",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					goto Ldl;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(114,
					"y x cNEqual",
					"[fp_nequal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lim;
			}
		}
		goto Default1;
	TailCall_cNeg:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNeg:
		switch(ByteCodePtr[0])
		{
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(121,
					"x cMul cNeg",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Lin;
			}
			break;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(59,"cNeg cNeg", "", "");
			goto Ldo;
		case cSin:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(251,
						"x cMul cSin cNeg",
						"[-x] cMul cSin",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Lio;
				}
			}
			break;
		case cSinh:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(252,
						"x cMul cSinh cNeg",
						"[-x] cMul cSinh",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Lip;
				}
			}
			break;
		case cTan:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(253,
						"x cMul cTan cNeg",
						"[-x] cMul cTan",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Liq;
				}
			}
			break;
		case cTanh:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(254,
						"x cMul cTanh cNeg",
						"[-x] cMul cTanh",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Lir;
				}
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(98,
				"x cNeg",
				"[-x]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lja;
		}
		goto Default1;
	TailCall_cNot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNot:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(234,"cAbs cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Ljb;
		case cAbsNot:
			A = ByteCodePtr[-1];
			if(IsLogicalOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(399,
					"A[IsLogicalOpcode(A)] cAbsNot cNot",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Ldo;
			}
			if(A!=cImmed)
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(400,
					"A[A!=cImmed] cAbsNot cNot",
					"A cAbsNotNot",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Ljc;
			}
			goto Default10;
		case cAbsNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(238,"cAbsNotNot cNot", "cAbsNot", "");
			goto Ljd;
		case cEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(227,"cEqual cNot", "cNEqual", "");
			goto Lje;
		case cGreater:
			FP_TRACE_BYTECODE_OPTIMIZATION(225,"cGreater cNot", "cLessOrEq", "");
			goto Ljf;
		case cGreaterOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(226,"cGreaterOrEq cNot", "cLess", "");
			goto Ljg;
		case cLess:
			FP_TRACE_BYTECODE_OPTIMIZATION(223,"cLess cNot", "cGreaterOrEq", "");
			goto Ljh;
		case cLessOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(224,"cLessOrEq cNot", "cGreater", "");
			goto Lji;
		case cNEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(228,"cNEqual cNot", "cEqual", "");
			goto Ljj;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(233,"cNeg cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Ljb;
		case cNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(236,"cNot cNot", "cNotNot", "");
			goto Lbc;
		case cNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(237,"cNotNot cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Ljb;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(105,
				"x cNot",
				"[fp_not(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Ljk;
		default: Default10:;
			A = ByteCodePtr[0];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(401,
					"A[IsNeverNegativeValueOpcode(A)] cNot",
					"A cAbsNot",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				goto Ljl;
			}
		}
		goto Default1;
	TailCall_cNotNot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNotNot:
		if(ByteCodePtr[0] == cNot)
		{
			FP_TRACE_BYTECODE_OPTIMIZATION(239,"cNot cNotNot", "cNot", "");
			/* ByteCodePtr[0] = cNot; */ // redundant, matches cNot @ 1
			return;
		}
		goto Default1;
	TailCall_cOr:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cOr:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(230,"cDup cOr", "cNotNot", "");
			goto Lbc;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(116,
					"y x cOr",
					"[fp_or(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ljm;
			}
			break;
		}
		goto Default1;
	TailCall_cPow:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cPow:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(!isEvenInteger(x+x))
			{
				if(ByteCodePtr[-1] == cSqr)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(22,
						"cSqr x[!isEvenInteger(x+x)] cPow",
						"cAbs [x+x] cPow",
						"    with x = " << x << "\n");
					/* opcode = cPow; */ // redundant, matches cPow @ 0
					goto Ljn;
				}
			}
			if(isInteger(x))
			{
				switch(ByteCodePtr[-1])
				{
				case cExp:
					FP_TRACE_BYTECODE_OPTIMIZATION(41,
						"cExp x[isInteger(x)] cPow",
						"[x] cMul cExp",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					goto Ljo;
				case cExp2:
					FP_TRACE_BYTECODE_OPTIMIZATION(42,
						"cExp2 x[isInteger(x)] cPow",
						"[x] cMul cExp2",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					goto Ljp;
				case cPow:
					if(ByteCodePtr[-2] == cImmed)
					{
						y = ImmedPtr[-1];
						if(!isInteger(y))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(40,
								"y[!isInteger(y)] cPow x[isInteger(x)] cPow",
								"[y*x] cPow",
								"    with x = " << x
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cPow; */ // redundant, matches cPow @ 0
							goto Ljq;
						}
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(43,
						"cPow x[isInteger(x)] cPow",
						"[x] cMul cPow",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cPow; */ // redundant, matches cPow @ 0
					goto Ljr;
				}
			}
			if(isEvenInteger(x))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(450,
						"cAbs x[isEvenInteger(x)] cPow",
						"[x] cPow",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cPow; */ // redundant, matches cPow @ 0
					goto Lka;
				case cMul:
					if(ByteCodePtr[-2] == cAbs)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(451,
							"cAbs cMul x[isEvenInteger(x)] cPow",
							"cMul [x] cPow",
							"    with x = " << x << "\n");
						/* opcode = cPow; */ // redundant, matches cPow @ 0
						goto Lkb;
					}
					break;
				}
			}
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(81,
					"x[x==Value_t()] cPow",
					"[DO_STACKPLUS1] [Value_t()] cMul [Value_t(1)] cAdd",
					"    with x = " << x << "\n");
				incStackPtr();
				--mStackPtr;
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lkc;
			}
			if(x==Value_t(0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(339,
					"x[x==Value_t(0.5)] cPow",
					"cSqrt",
					"    with x = " << x << "\n");
				goto Lkd;
			}
			if(x==Value_t(1)/Value_t(3))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(340,
					"x[x==Value_t(1)/Value_t(3)] cPow",
					"cCbrt",
					"    with x = " << x << "\n");
				goto Lke;
			}
			if(x==Value_t(1)/Value_t(-3))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(341,
					"x[x==Value_t(1)/Value_t(-3)] cPow",
					"cCbrt cInv",
					"    with x = " << x << "\n");
				goto Lkf;
			}
			if(x==Value_t(-0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(342,
					"x[x==Value_t(-0.5)] cPow",
					"cRSqrt",
					"    with x = " << x << "\n");
				goto Lkg;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(343,
					"x[x==Value_t(-1)] cPow",
					"cInv",
					"    with x = " << x << "\n");
				goto Lkh;
			}
			switch(ByteCodePtr[-1])
			{
			case cPow:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					if(isEvenInteger(y)&&!isEvenInteger(x*y))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(21,
							"y[isEvenInteger(y)&&!isEvenInteger(x*y)] cPow x cPow",
							"cAbs [y*x] cPow",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* opcode = cPow; */ // redundant, matches cPow @ 0
						goto Lki;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(337,
						"y cPow x cPow",
						"[y*x] cPow",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cPow; */ // redundant, matches cPow @ 0
					goto Ljq;
				}
				break;
			case cSqr:
				FP_TRACE_BYTECODE_OPTIMIZATION(44,
					"cSqr x cPow",
					"[x+x] cPow",
					"    with x = " << x << "\n");
				/* opcode = cPow; */ // redundant, matches cPow @ 0
				goto Lkj;
			case cImmed:
				y = ImmedPtr[-1];
				if(y!=Value_t(0)||x>=Value_t(0))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(163,
						"y[y!=Value_t(0)||x>=Value_t(0)] x cPow",
						"[fp_pow(y,x)]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Lkk;
				}
				break;
			}
			FP_TRACE_BYTECODE_OPTIMIZATION(471,
				"x cPow",
				"[DO_POWI]",
				"    with x = " << x << "\n");
			if(TryCompilePowi(x))
			  return;
		}
		goto Default1;
	TailCall_cRDiv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRDiv:
		switch(ByteCodePtr[0])
		{
		case cSinCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(519,"cSinCos cRDiv", "cCot", "");
			goto Lfb;
		case cSinhCosh:
			FP_TRACE_BYTECODE_OPTIMIZATION(526,"cSinhCosh cRDiv", "cTanh cInv", "");
			goto Lkl;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(275,
					"x[x==Value_t(1)] cRDiv",
					"cInv",
					"    with x = " << x << "\n");
				goto Lkh;
			}
			break;
		}
		goto Default1;
	TailCall_cRSqrt:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRSqrt:
		switch(ByteCodePtr[0])
		{
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(208,"cInv cRSqrt", "cSqrt", "");
			goto Lep;
		case cSqr:
			FP_TRACE_BYTECODE_OPTIMIZATION(210,"cSqr cRSqrt", "cInv cAbs", "");
			goto Lkm;
		}
		goto Default1;
	TailCall_cRSub:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRSub:
		if(ByteCodePtr[0] == cDup)
		{
			FP_TRACE_BYTECODE_OPTIMIZATION(75,"cDup cRSub", "[Value_t()] cMul", "");
			goto Lkn;
		}
		goto Default1;
	TailCall_cRad:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRad:
		switch(ByteCodePtr[0])
		{
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(218,
					"x cMul cRad",
					"[DO_STACKPLUS1] [DegreesToRadians(x)] cMul",
					"    with x = " << x << "\n");
				incStackPtr();
				--mStackPtr;
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Lko;
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(132,
				"x cRad",
				"[DegreesToRadians(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lkp;
		}
		goto Default1;
	TailCall_cSec:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSec:
		switch(ByteCodePtr[0])
		{
		case cAtan:
			FP_TRACE_BYTECODE_OPTIMIZATION(531,"cAtan cSec", "cSqr [DO_STACKPLUS1] [Value_t(1)] cAdd cSqrt", "");
			incStackPtr();
			--mStackPtr;
			goto Lcb;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				switch(ByteCodePtr[-1])
				{
				case cCos:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(513,
							"B[B==A] cCos A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cSec",
							"B cCos cDup cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cCos; */ // redundant, matches cCos @ 2
						goto Lbq;
					}
					break;
				case cSin:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(511,
							"B[B==A] cSin A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cSec",
							"B cSinCos cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lkq;
					}
					break;
				}
			}
		}
		goto Default1;
	TailCall_cSin:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSin:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(247,"cNeg cSin", "cSin cNeg", "");
			goto Lkr;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(157,
				"x cSin",
				"[fp_sin(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lla;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				if(ByteCodePtr[-1] == cCsc)
				{
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(515,
							"B[B==A] cCsc A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cSin",
							"B cCsc cDup cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cCsc; */ // redundant, matches cCsc @ 2
						goto Lbq;
					}
				}
			}
		}
		goto Default1;
	TailCall_cSinh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSinh:
		switch(ByteCodePtr[0])
		{
		case cAcosh:
			FP_TRACE_BYTECODE_OPTIMIZATION(453,"cAcosh cSinh", "[DO_STACKPLUS1] cSqr [Value_t(-1)] cAdd cSqrt", "");
			incStackPtr();
			--mStackPtr;
			goto Llb;
		case cAsinh:
			FP_TRACE_BYTECODE_OPTIMIZATION(356,"cAsinh cSinh", "", "");
			goto Ldo;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(248,"cNeg cSinh", "cSinh cNeg", "");
			goto Llc;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(158,
				"x cSinh",
				"[fp_sinh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lld;
		}
		goto Default1;
	TailCall_cSqr:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSqr:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(202,"cAbs cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Lle;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(201,"cNeg cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Lle;
		case cRSqrt:
			FP_TRACE_BYTECODE_OPTIMIZATION(209,"cRSqrt cSqr", "cInv", "");
			goto Llf;
		case cSqrt:
			A = ByteCodePtr[-1];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(345,
					"A[IsNeverNegativeValueOpcode(A)] cSqrt cSqr",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Ldo;
			}
			goto Default11;
		default: Default11:;
			A = ByteCodePtr[0];
			if(IsComparisonOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(540,
					"A[IsComparisonOpcode(A)] cSqr",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default1;
	TailCall_cSqrt:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSqrt:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cSqr)
			{
				A = ByteCodePtr[-2];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-3] == cSqr)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(528,
							"cSqr A[IsVarOpcode(A)] cSqr cAdd cSqrt",
							"A cHypot",
							"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
						goto Llg;
					}
				}
				B = ByteCodePtr[-2];
				if(IsUnaryOpcode(B))
				{
					A = ByteCodePtr[-3];
					if(IsVarOpcode(A))
					{
						if(ByteCodePtr[-4] == cSqr)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(529,
								"cSqr A[IsVarOpcode(A)] B[IsUnaryOpcode(B)] cSqr cAdd cSqrt",
								"A B cHypot",
								"    with B = " << FP_TRACE_OPCODENAME(B)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Llh;
						}
					}
				}
			}
			break;
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(206,"cInv cSqrt", "cRSqrt", "");
			goto Lfa;
		case cSqr:
			FP_TRACE_BYTECODE_OPTIMIZATION(204,"cSqr cSqrt", "cAbs", "");
			goto Lli;
		case cImmed:
			x = ImmedPtr[0];
			if(x>=Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(159,
					"x[x>=Value_t(0)] cSqrt",
					"[fp_sqrt(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Llj;
			}
			break;
		}
		goto Default1;
	TailCall_cSub:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSub:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(74,"cDup cSub", "[Value_t()] cMul", "");
			goto Lkn;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(198,"cNeg cSub", "cAdd", "");
			goto Llk;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(56,
					"x[x==Value_t()] cSub",
					"",
					"    with x = " << x << "\n");
				goto Lar;
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(104,
					"y x cSub",
					"[y-x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lll;
			}
			FP_TRACE_BYTECODE_OPTIMIZATION(49,
				"x cSub",
				"[-x] cAdd",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Llm;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				if(ByteCodePtr[-1] == cRSub)
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(296,
							"x cRSub A[IsVarOpcode(A)] cSub",
							"A cAdd [x] cRSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Lln;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(303,
						"cRSub A[IsVarOpcode(A)] cSub",
						"[DO_STACKPLUS1] A cSub cRSub",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Llo;
				}
			}
		}
		goto Default1;
	TailCall_cTan:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cTan:
		switch(ByteCodePtr[0])
		{
		case cAtan2:
			FP_TRACE_BYTECODE_OPTIMIZATION(362,"cAtan2 cTan", "cDiv", "");
			goto Lgh;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(249,"cNeg cTan", "cTan cNeg", "");
			goto Llp;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(161,
				"x cTan",
				"[fp_tan(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Llq;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				if(ByteCodePtr[-1] == cCot)
				{
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(517,
							"B[B==A] cCot A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cTan",
							"B cCot cDup cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cCot; */ // redundant, matches cCot @ 2
						goto Lbq;
					}
				}
			}
		}
		goto Default1;
	TailCall_cTanh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cTanh:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(250,"cNeg cTanh", "cTanh cNeg", "");
			goto Llr;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(162,
				"x cTanh",
				"[fp_tanh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lma;
		}
		goto Default1;
	TailCall_cTrunc:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cTrunc:
		switch(ByteCodePtr[0])
		{
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(136,
				"x cTrunc",
				"[fp_trunc(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lmb;
		default:
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(403,
					"A[IsAlwaysIntegerOpcode(A)] cTrunc",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default1;
	default: Default1:;
		A = opcode;
		if(IsComparisonOpcode(A))
		{
			if(ByteCodePtr[0] == cImmed)
			{
				x = ImmedPtr[0];
				switch(ByteCodePtr[-1])
				{
				case cAdd:
					if(ByteCodePtr[-2] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(374,
							"y cAdd x A[IsComparisonOpcode(A)]",
							"[x-y] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
						goto Lmc;
					}
					break;
				case cAtan:
					if(fp_abs(x)<fp_const_pi<Value_t>()*Value_t(0.5))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(390,
							"cAtan[fp_abs(x)<fp_const_pi<Value_t>()*Value_t(0.5)] x A[IsComparisonOpcode(A)]",
							"[fp_tan(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Lmd;
					}
					break;
				case cExp:
					if(x>Value_t(0))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(380,
							"cExp[x>Value_t(0)] x A[IsComparisonOpcode(A)]",
							"[fp_log(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Lme;
					}
					break;
				case cExp2:
					if(x>Value_t(0))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(381,
							"cExp2[x>Value_t(0)] x A[IsComparisonOpcode(A)]",
							"[fp_log2(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Lmf;
					}
					break;
				case cLog:
					B = ByteCodePtr[-2];
					if(IsNeverNegativeValueOpcode(B))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(383,
							"B[IsNeverNegativeValueOpcode(B)] cLog x A[IsComparisonOpcode(A)]",
							"B [fp_exp(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lmg;
					}
					break;
				case cLog10:
					B = ByteCodePtr[-2];
					if(IsNeverNegativeValueOpcode(B))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(385,
							"B[IsNeverNegativeValueOpcode(B)] cLog10 x A[IsComparisonOpcode(A)]",
							"B [fp_pow(Value_t(10),x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lmh;
					}
					break;
				case cLog2:
					B = ByteCodePtr[-2];
					if(IsNeverNegativeValueOpcode(B))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(384,
							"B[IsNeverNegativeValueOpcode(B)] cLog2 x A[IsComparisonOpcode(A)]",
							"B [fp_exp2(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lmi;
					}
					break;
				case cMul:
					if(ByteCodePtr[-2] == cImmed)
					{
						y = ImmedPtr[-1];
						if(y>Value_t(0))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(376,
								"y[y>Value_t(0)] cMul x A[IsComparisonOpcode(A)]",
								"[x/y] A",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", x = " << x
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							goto Lmj;
						}
						if(y<Value_t(0))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(377,
								"y[y<Value_t(0)] cMul x A[IsComparisonOpcode(A)]",
								"[x/y] {OppositeComparisonOpcode(A)}",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", x = " << x
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							goto Lmk;
						}
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(375,
						"cNeg x A[IsComparisonOpcode(A)]",
						"[-x] {OppositeComparisonOpcode(A)}",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", x = " << x
						    << "\n");
					goto Lml;
				case cPow:
					if(x>Value_t(0))
					{
						if(ByteCodePtr[-2] == cImmed)
						{
							y = ImmedPtr[-1];
							if(y>Value_t(0))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(378,
									"y[y>Value_t(0)] cPow[x>Value_t(0)] x A[IsComparisonOpcode(A)]",
									"[fp_pow(x,Value_t(1)/y)] A",
									"    with A = " << FP_TRACE_OPCODENAME(A)
									    << ", x = " << x
									    << ", y = " << y
									    << "\n");
								/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
								goto Lmm;
							}
						}
					}
					break;
				case cSinh:
					FP_TRACE_BYTECODE_OPTIMIZATION(391,
						"cSinh x A[IsComparisonOpcode(A)]",
						"[fp_asinh(x)] A",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", x = " << x
						    << "\n");
					goto Lmn;
				case cSqr:
					if(x>Value_t(0))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(379,
							"cSqr[x>Value_t(0)] x A[IsComparisonOpcode(A)]",
							"cAbs [fp_sqrt(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Lmo;
					}
					break;
				case cTanh:
					if(fp_abs(x)<Value_t(1))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(392,
							"cTanh[fp_abs(x)<Value_t(1)] x A[IsComparisonOpcode(A)]",
							"[fp_atanh(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Lmp;
					}
					break;
				}
			}
		}
		if(IsVarOpcode(A)&&mData->mByteCode.size()>0)
		{
			B = ByteCodePtr[0];
			if(B==A)
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(491,
					"B[B==A] A[IsVarOpcode(A)&&mData->mByteCode.size()>0]",
					"B cDup",
					"    with A = " << FP_TRACE_OPCODENAME(A)
					    << ", B = " << FP_TRACE_OPCODENAME(B)
					    << "\n");
				/* ByteCodePtr[0] = B; */ // redundant, matches B @ 1
				goto Lmq;
			}
		}
		if(IsUnaryOpcode(A))
		{
			B = ByteCodePtr[0];
			if(IsVarOpcode(B)&&mData->mByteCode.size()>1)
			{
				C = ByteCodePtr[-1];
				if(C==A)
				{
					D = ByteCodePtr[-2];
					if(D==B)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(492,
							"D[D==B] C[C==A] B[IsVarOpcode(B)&&mData->mByteCode.size()>1] A[IsUnaryOpcode(A)]",
							"D C cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", C = " << FP_TRACE_OPCODENAME(C)
							    << ", D = " << FP_TRACE_OPCODENAME(D)
							    << "\n");
						/* ByteCodePtr[-2] = D; */ // redundant, matches D @ 3
						/* ByteCodePtr[-1] = C; */ // redundant, matches C @ 2
						goto Lmr;
					}
				}
			}
		}
		C = opcode;
		if(IsCommutativeOrParamSwappableBinaryOpcode(C))
		{
			switch(ByteCodePtr[0])
			{
			case cSin:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A)&&mData->mByteCode.size()>3)
				{
					if(ByteCodePtr[-2] == cCos)
					{
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(521,
								"B[B==A] cCos A[IsVarOpcode(A)&&mData->mByteCode.size()>3] cSin C[IsCommutativeOrParamSwappableBinaryOpcode(C)]",
								"B cSinCos {GetParamSwappedBinaryOpcode(C)}",
								"    with C = " << FP_TRACE_OPCODENAME(C)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lna;
						}
					}
				}
				break;
			case cSinh:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A)&&mData->mByteCode.size()>3)
				{
					if(ByteCodePtr[-2] == cCosh)
					{
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(522,
								"B[B==A] cCosh A[IsVarOpcode(A)&&mData->mByteCode.size()>3] cSinh C[IsCommutativeOrParamSwappableBinaryOpcode(C)]",
								"B cSinhCosh {GetParamSwappedBinaryOpcode(C)}",
								"    with C = " << FP_TRACE_OPCODENAME(C)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lnb;
						}
					}
				}
				break;
			}
		}
	}
	goto Laa;
Laa: mData->mByteCode.push_back(opcode); return;
Lab: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lnc: FP_TRACE_BYTECODE_ADD(cAbs);
     goto TailCall_cAbs;
Lac: ImmedPtr[0] = fp_abs(x); return;
Lad: ImmedPtr[0] = fp_acos(x); return;
Lae: ImmedPtr[0] = fp_acosh(x); return;
Laf: mData->mImmed.push_back(Value_t(4));
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
Lnd: opcode = cMul;
Lne: FP_ReDefinePointers();
Lnf: FP_TRACE_BYTECODE_ADD(cMul);
     goto TailCall_cMul;
Lag: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(Value_t(4));
Lng: mData->mByteCode.push_back(cImmed); goto Lnd;
Lah: ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
Lfd: opcode = cMul; goto Lnf;
Lai: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSub;
Lnh: FP_TRACE_BYTECODE_ADD(cSub);
     goto TailCall_cSub;
Laj: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lni: FP_ReDefinePointers();
Lnj: FP_TRACE_BYTECODE_ADD(cAdd);
     goto TailCall_cAdd;
Lak: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Lnk: AddFunctionOpcode(cAdd);
Lnl: opcode = cRSub;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cRSub);
     goto TailCall_cRSub;
Lal: ImmedPtr[0] = -x;
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lnk;
Lam: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lnl;
Lan: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lnm: AddFunctionOpcode(cAdd);
Lnn: AddFunctionOpcode(B);
Lno: opcode = cSub;
     FP_ReDefinePointers(); goto Lnh;
Lao: ImmedPtr[0] = -x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lnm;
Lap: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lnn;
Laq: ImmedPtr[-1] = y+x;
Lar: mData->mImmed.pop_back();
Ldo: mData->mByteCode.pop_back(); return;
Lba: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lnk;
Lbb: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lnk;
Lbc: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cNotNot;
Lnp: FP_TRACE_BYTECODE_ADD(cNotNot);
     goto TailCall_cNotNot;
Lbd: ImmedPtr[-1] = fp_and(x,y); goto Lar;
Lbe: ImmedPtr[0] = fp_asin(x); return;
Lbf: ImmedPtr[0] = fp_asinh(x); return;
Lbg: ImmedPtr[0] = fp_atan(x); return;
Lbh: ImmedPtr[-1] = fp_atan2(y,x); goto Lar;
Lbi: ImmedPtr[0] = fp_atanh(x); return;
Lbj: ImmedPtr[0] = fp_cbrt(x); return;
Lbk: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cCeil);
Lnq: AddFunctionOpcode(A);
     AddFunctionOpcode(B);
Lnr: opcode = cAdd; goto Lni;
Lbl: mData->mByteCode.pop_back();
     AddFunctionOpcode(cFloor);
Loa: opcode = cNeg;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cNeg);
     goto TailCall_cNeg;
Lbm: ImmedPtr[0] = fp_ceil(x); return;
Lbn: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lob: FP_TRACE_BYTECODE_ADD(cCos);
     goto TailCall_cCos;
Lbo: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSqr);
     mData->mImmed.push_back(Value_t(1));
Loc: mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cAdd);
Lod: opcode = cRSqrt;
     FP_ReDefinePointers();
Loe: FP_TRACE_BYTECODE_ADD(cRSqrt);
     goto TailCall_cRSqrt;
Lbp: ImmedPtr[0] = fp_cos(x); return;
Lbq: ByteCodePtr[0] = cDup;
Lof: opcode = cInv;
Log: FP_TRACE_BYTECODE_ADD(cInv);
     goto TailCall_cInv;
Lbr: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinCos); return;
Lca: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     FP_TRACE_BYTECODE_ADD(cCosh);
     goto TailCall_cCosh;
Lcb: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSqr);
Loh: mData->mImmed.push_back(Value_t(1));
Loi: mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cAdd);
Loj: opcode = cSqrt;
     FP_ReDefinePointers();
Lok: FP_TRACE_BYTECODE_ADD(cSqrt);
     goto TailCall_cSqrt;
Lcc: ImmedPtr[0] = fp_cosh(x); return;
Lcd: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinhCosh); return;
Lce: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSqr);
     AddFunctionOpcode(cInv); goto Loh;
Lcf: ImmedPtr[0] = RadiansToDegrees(x); return;
Lcg: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSec); goto Lnd;
Lch: mData->mByteCode.pop_back();
     AddFunctionOpcode(cTan); goto Lnd;
Lci: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSin); goto Lnd;
Lcj: mData->mImmed.push_back(Value_t());
     ByteCodePtr[0] = cImmed;
Lol: AddFunctionOpcode(cMul);
     mData->mImmed.push_back(Value_t(1));
Lom: mData->mByteCode.push_back(cImmed); goto Lnr;
Lck: mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     AddFunctionOpcode(cExp); goto Lnd;
Lcl: mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     AddFunctionOpcode(cExp2); goto Lnd;
Lcm: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lfd;
Lcn: mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     AddFunctionOpcode(cPow); goto Lnd;
Lco: mData->mByteCode.pop_back();
     AddFunctionOpcode(cCos); goto Lnd;
Lcp: mData->mByteCode.pop_back();
     AddFunctionOpcode(cCsc); goto Lnd;
Lcq: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cTan;
Lon: FP_TRACE_BYTECODE_ADD(cTan);
     goto TailCall_cTan;
Lcr: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cTanh;
Loo: FP_TRACE_BYTECODE_ADD(cTanh);
     goto TailCall_cTanh;
Lda: mData->mByteCode.pop_back();
     AddFunctionOpcode(cCot); goto Lnd;
Ldb: ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lop: FP_TRACE_BYTECODE_ADD(cDiv);
     goto TailCall_cDiv;
Ldc: ImmedPtr[-1] = y/x; goto Lar;
Ldd: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Loq: opcode = cDeg;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cDeg);
     goto TailCall_cDeg;
Lde: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Lor: opcode = cRad;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cRad);
     goto TailCall_cRad;
Ldf: ImmedPtr[-1] = y/x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lnd;
Ldg: ImmedPtr[0] = Value_t(1)/x; goto Lfd;
Ldh: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cMul);
Lpa: FP_ReDefinePointers(); goto Lop;
Ldi: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed);
Lpb: opcode = cRDiv;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cRDiv);
     goto TailCall_cRDiv;
Ldj: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(B); goto Lpb;
Ldk: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lpc: FP_TRACE_BYTECODE_ADD(cEqual);
     goto TailCall_cEqual;
Ldl: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
Lpd: opcode = cNot;
     FP_ReDefinePointers();
Lpe: FP_TRACE_BYTECODE_ADD(cNot);
     goto TailCall_cNot;
Ldm: ImmedPtr[-1] = fp_equal(y,x); goto Lar;
Ldn: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cExp);
     mData->mImmed.push_back(fp_exp(x)); goto Lng;
Ldp: ImmedPtr[0] = fp_exp(x); return;
Ldq: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cExp2);
     mData->mImmed.push_back(fp_exp2(x)); goto Lng;
Ldr: ImmedPtr[0] = fp_exp2(x); return;
Lea: mData->mImmed.push_back(fp_log(Value_t(2)));
     mData->mByteCode.push_back(cImmed);
Lpf: AddFunctionOpcode(cMul);
     opcode = cExp;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cExp);
     goto TailCall_cExp;
Leb: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cFloor); goto Lnq;
Lec: mData->mByteCode.pop_back();
     AddFunctionOpcode(cCeil); goto Loa;
Led: ImmedPtr[0] = fp_floor(x); return;
Lee: ImmedPtr[-1] = fp_less(x,y); goto Lar;
Lef: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
Ljl: AddFunctionOpcode(cAbsNot); return;
Leg: ImmedPtr[0] = Value_t(0.5)/x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cMul);
     opcode = cNotNot;
     FP_ReDefinePointers(); goto Lnp;
Leh: ImmedPtr[-1] = fp_lessOrEq(x,y); goto Lar;
Lei: mData->mImmed.pop_back();
Ljc: mData->mByteCode.pop_back();
Lpg: AddFunctionOpcode(cAbsNotNot); return;
Lej: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cSqr);
     mData->mImmed.push_back(x*x); goto Loi;
Lek: ImmedPtr[0] = fp_int(x); return;
Lel: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSec;
     FP_TRACE_BYTECODE_ADD(cSec);
     goto TailCall_cSec;
Lem: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSin;
Lph: FP_TRACE_BYTECODE_ADD(cSin);
     goto TailCall_cSin;
Len: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr);
     mData->mImmed.push_back(x*x); goto Loc;
Leo: mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     opcode = cPow;
Lpi: FP_ReDefinePointers();
Lpj: FP_TRACE_BYTECODE_ADD(cPow);
     goto TailCall_cPow;
Lep: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSqrt; goto Lok;
Leq: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cCos; goto Lob;
Ler: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cCsc;
     FP_TRACE_BYTECODE_ADD(cCsc);
     goto TailCall_cCsc;
Lfa: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cRSqrt; goto Loe;
Lfb: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lpk: opcode = cCot;
     FP_TRACE_BYTECODE_ADD(cCot);
     goto TailCall_cCot;
Lfc: ImmedPtr[0] = Value_t(1)/x; return;
Lfe: ImmedPtr[0] = Value_t(0.5)/x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cMul); goto Lpd;
Lff: ImmedPtr[-1] = fp_less(y,x); goto Lar;
Lfg: mData->mImmed.pop_back();
Ljd: mData->mByteCode.pop_back(); goto Ljl;
Lfh: ImmedPtr[-1] = fp_lessOrEq(y,x); goto Lar;
Lfi: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg); goto Lpg;
Lfj: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cLog);
     mData->mImmed.push_back(fp_log(x)); goto Lom;
Lfk: mData->mByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     AddFunctionOpcode(cLog);
Lpl: mData->mByteCode.push_back(cDup); goto Lnr;
Lfl: ImmedPtr[0] = fp_log(x); return;
Lfm: mData->mImmed.push_back(fp_log10(fp_const_e<Value_t>()));
Lpm: ByteCodePtr[0] = cImmed; goto Lnd;
Lfn: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cLog10);
     mData->mImmed.push_back(fp_log10(x)); goto Lom;
Lfo: mData->mByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     AddFunctionOpcode(cLog10); goto Lpl;
Lfp: ImmedPtr[0] = fp_log10(x); return;
Lfq: mData->mImmed.push_back(fp_log2(fp_const_e<Value_t>())); goto Lpm;
Lfr: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cLog2);
     mData->mImmed.push_back(fp_log2(x)); goto Lom;
Lga: mData->mByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     AddFunctionOpcode(cLog2); goto Lpl;
Lgb: ImmedPtr[0] = fp_log2(x); return;
Lgc: ImmedPtr[-1] = fp_max(x,y); goto Lar;
Lgd: ImmedPtr[-1] = fp_min(x,y); goto Lar;
Lge: ImmedPtr[-1] = fp_mod(y,x); goto Lar;
Lgf: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 3; goto Lpk;
Lgg: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSqr;
Lpn: FP_TRACE_BYTECODE_ADD(cSqr);
     goto TailCall_cSqr;
Lgh: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cDiv; goto Lop;
Lgi: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr); goto Loa;
Lgj: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr);
     AddFunctionOpcode(cMul); goto Loa;
Lgk: ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
     opcode = cPow; goto Lpj;
Lgl: ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2; goto Lnf;
Lgm: ImmedPtr[-1] = x;
Lpo: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lne;
Lgn: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
Lpp: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lpq: AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
Lpr: mData->mByteCode.push_back(cImmed); goto Lne;
Lgo: mData->mImmed.pop_back(); goto Lpp;
Lgp: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(B); goto Lpq;
Lgq: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lpq;
Lgr: ByteCodePtr[-1] = cImmed; goto Ldo;
Lha: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lnf;
Lhb: mData->mImmed.pop_back();
Lqa: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} return;
Lhc: ImmedPtr[0] = x+x; goto Lgl;
Lhd: ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     mData->mImmed.push_back(y*x);
     mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cMul); goto Lnr;
Lhe: ImmedPtr[-1] = x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(y*x); goto Lom;
Lhf: ImmedPtr[0] = RadiansToDegrees(x); goto Lha;
Lhg: ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lqb: AddFunctionOpcode(cMul);
Lqc: AddFunctionOpcode(B);
     opcode = cDiv; goto Lpa;
Lhh: ImmedPtr[0] = -x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lqb;
Lhi: ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lqc;
Lhj: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lne;
Lhk: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(x+x); goto Lpr;
Lhl: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();} goto Lqa;
Lhm: ImmedPtr[-1] = y*x; goto Lpo;
Lhn: ImmedPtr[0] = -x; goto Lha;
Lho: ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Lqd: AddFunctionOpcode(cMul); goto Lpb;
Lhp: ImmedPtr[0] = -x;
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lqd;
Lhq: ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lpb;
Lhr: ImmedPtr[0] = DegreesToRadians(x); goto Lha;
Lia: ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     mData->mImmed.push_back(y*x);
     mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cMul); goto Lno;
Lib: ImmedPtr[-1] = y*x; goto Lar;
Lic: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Loa;
Lid: ByteCodePtr[0] = cDup;
     ImmedPtr -= 1;
     mData->mImmed.pop_back();
Lqe: opcode = cAdd; goto Lnj;
Lie: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Loq;
Lif: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lor;
Lig: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lqb;
Lih: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lqf: AddFunctionOpcode(cSqr); goto Lne;
Lii: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lqd;
Lij: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lqd;
Lik: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lqf;
Lil: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lqg: FP_TRACE_BYTECODE_ADD(cNEqual);
     goto TailCall_cNEqual;
Lim: ImmedPtr[-1] = fp_nequal(y,x); goto Lar;
Lin: ImmedPtr[0] = -x; goto Lcm;
Lio: ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     opcode = cSin;
     FP_ReDefinePointers(); goto Lph;
Lip: ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     opcode = cSinh;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cSinh);
     goto TailCall_cSinh;
Liq: ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     opcode = cTan;
     FP_ReDefinePointers(); goto Lon;
Lir: ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     opcode = cTanh;
     FP_ReDefinePointers(); goto Loo;
Lja: ImmedPtr[0] = -x; return;
Ljb: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lpe;
Lje: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cNEqual; goto Lqg;
Ljf: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cLessOrEq;
     FP_TRACE_BYTECODE_ADD(cLessOrEq);
     goto TailCall_cLessOrEq;
Ljg: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cLess;
     FP_TRACE_BYTECODE_ADD(cLess);
     goto TailCall_cLess;
Ljh: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cGreaterOrEq;
     FP_TRACE_BYTECODE_ADD(cGreaterOrEq);
     goto TailCall_cGreaterOrEq;
Lji: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cGreater;
     FP_TRACE_BYTECODE_ADD(cGreater);
     goto TailCall_cGreater;
Ljj: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cEqual; goto Lpc;
Ljk: ImmedPtr[0] = fp_not(x); return;
Ljm: ImmedPtr[-1] = fp_or(x,y); goto Lar;
Ljn: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cAbs);
     mData->mImmed.push_back(x+x);
Lqh: mData->mByteCode.push_back(cImmed); goto Lpi;
Ljo: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back(); goto Lpf;
Ljp: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cMul);
     opcode = cExp2;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cExp2);
     goto TailCall_cExp2;
Ljq: ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lpi;
Ljr: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cMul); goto Lpi;
Lka: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lpj;
Lkb: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(x); goto Lqh;
Lkc: ImmedPtr[0] = Value_t(); goto Lol;
Lkd: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Loj;
Lke: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     opcode = cCbrt;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cCbrt);
     goto TailCall_cCbrt;
Lkf: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cCbrt);
Lqi: opcode = cInv;
     FP_ReDefinePointers(); goto Log;
Lkg: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lod;
Lkh: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lqi;
Lki: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cAbs);
     mData->mImmed.push_back(y*x); goto Lqh;
Lkj: ImmedPtr[0] = x+x; goto Lka;
Lkk: ImmedPtr[-1] = fp_pow(y,x); goto Lar;
Lkl: mData->mByteCode.pop_back();
     AddFunctionOpcode(cTanh); goto Lqi;
Lkm: mData->mByteCode.pop_back();
     AddFunctionOpcode(cInv);
     opcode = cAbs;
     FP_ReDefinePointers(); goto Lnc;
Lkn: mData->mImmed.push_back(Value_t()); goto Lpm;
Lko: ImmedPtr[0] = DegreesToRadians(x); goto Lcm;
Lkp: ImmedPtr[0] = DegreesToRadians(x); return;
Lkq: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinCos); goto Lqi;
Lkr: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSin); goto Loa;
Lla: ImmedPtr[0] = fp_sin(x); return;
Llb: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSqr);
     mData->mImmed.push_back(Value_t(-1)); goto Loi;
Llc: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSinh); goto Loa;
Lld: ImmedPtr[0] = fp_sinh(x); return;
Lle: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lpn;
Llf: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lof;
Llg: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
Lqj: opcode = cHypot;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cHypot);
     goto TailCall_cHypot;
Llh: for(unsigned tmp=5; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(B); goto Lqj;
Lli: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cAbs; goto Lnc;
Llj: ImmedPtr[0] = fp_sqrt(x); return;
Llk: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lqe;
Lll: ImmedPtr[-1] = y-x; goto Lar;
Llm: ImmedPtr[0] = -x; goto Lqe;
Lln: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cAdd);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lnl;
Llo: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cSub); goto Lnl;
Llp: mData->mByteCode.pop_back();
     AddFunctionOpcode(cTan); goto Loa;
Llq: ImmedPtr[0] = fp_tan(x); return;
Llr: mData->mByteCode.pop_back();
     AddFunctionOpcode(cTanh); goto Loa;
Lma: ImmedPtr[0] = fp_tanh(x); return;
Lmb: ImmedPtr[0] = fp_trunc(x); return;
Lmc: ImmedPtr[-1] = x-y;
Lqk: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lql: AddFunctionOpcode(A); return;
Lmd: ImmedPtr[0] = fp_tan(x);
Lqm: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back(); goto Lql;
Lme: ImmedPtr[0] = fp_log(x); goto Lqm;
Lmf: ImmedPtr[0] = fp_log2(x); goto Lqm;
Lmg: ImmedPtr[0] = fp_exp(x); goto Lqm;
Lmh: ImmedPtr[0] = fp_pow(Value_t(10),x); goto Lqm;
Lmi: ImmedPtr[0] = fp_exp2(x); goto Lqm;
Lmj: ImmedPtr[-1] = x/y; goto Lqk;
Lmk: ImmedPtr[-1] = x/y;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lqn: AddFunctionOpcode(OppositeComparisonOpcode(A)); return;
Lml: ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back(); goto Lqn;
Lmm: ImmedPtr[-1] = fp_pow(x,Value_t(1)/y); goto Lqk;
Lmn: ImmedPtr[0] = fp_asinh(x); goto Lqm;
Lmo: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cAbs);
     mData->mImmed.push_back(fp_sqrt(x));
     mData->mByteCode.push_back(cImmed); goto Lql;
Lmp: ImmedPtr[0] = fp_atanh(x); goto Lqm;
Lmq: mData->mByteCode.push_back(cDup); return;
Lmr: ByteCodePtr[0] = cDup; return;
Lna: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinCos);
Lqo: AddFunctionOpcode(GetParamSwappedBinaryOpcode(C)); return;
Lnb: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinhCosh); goto Lqo;
return;
// This list of dummy gotos is here to inhibit
// compiler warnings on unused labels
goto TailCall_cAcos;goto TailCall_cAcosh;goto TailCall_cAnd;
goto TailCall_cAsin;goto TailCall_cAsinh;goto TailCall_cAtan;
goto TailCall_cAtan2;goto TailCall_cAtanh;goto TailCall_cCeil;
goto TailCall_cFloor;goto TailCall_cInt;goto TailCall_cLog;
goto TailCall_cLog10;goto TailCall_cLog2;goto TailCall_cMax;
goto TailCall_cMin;goto TailCall_cMod;goto TailCall_cOr;
goto TailCall_cRDiv;goto TailCall_cRad;goto TailCall_cSec;
goto TailCall_cSin;goto TailCall_cSinh;goto TailCall_cSqrt;
goto TailCall_cSub;goto TailCall_cTan;goto TailCall_cTanh;
goto TailCall_cTrunc;
#endif

#if((FP_COMPLEX_VERSION) && (FP_FLOAT_VERSION))
	Value_t x;
	Value_t y;
	unsigned B;
	unsigned A;
	unsigned C;
	unsigned D;
	switch(opcode)
	{
	TailCall_cAbs:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAbs:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(199,"cNeg cAbs", "cAbs", "");
			/* opcode = cAbs; */ // redundant, matches cAbs @ 0
			goto Lab;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(130,
				"x cAbs",
				"[fp_abs(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lac;
		}
		goto Default0;
	TailCall_cAcos:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAcos:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(170,
				"x cAcos",
				"[fp_acos(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lad;
		}
		goto Default0;
	TailCall_cAcosh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAcosh:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(167,
				"x cAcosh",
				"[fp_acosh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lae;
		}
		goto Default0;
	TailCall_cAdd:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAdd:
		switch(ByteCodePtr[0])
		{
		case cDup:
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(317,"cDup cAdd cDup cAdd", "[Value_t(4)] cMul", "");
					goto Laf;
				}
				break;
			case cMul:
				if(ByteCodePtr[-2] == cAdd)
				{
					if(ByteCodePtr[-3] == cDup)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(318,"cDup cAdd cMul cDup cAdd", "cMul [Value_t(4)] cMul", "");
						goto Lag;
					}
				}
				break;
			}
			goto Default1;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(320,
						"cDup x cMul cAdd",
						"[x+Value_t(1)] cMul",
						"    with x = " << x << "\n");
					goto Lah;
				}
			}
			goto Default1;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(197,"cNeg cAdd", "cSub", "");
			goto Lai;
		case cImmed:
			x = ImmedPtr[0];
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(125,
						"y cAdd x cAdd",
						"[y+x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cAdd; */ // redundant, matches cAdd @ 0
					goto Laj;
				}
				break;
			case cRSub:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(305,
							"y cAdd cRSub x cAdd",
							"[ y+x] cAdd cRSub",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lak;
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(306,
						"cNeg cRSub x cAdd",
						"[-x] cAdd cRSub",
						"    with x = " << x << "\n");
					goto Lal;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(304,
						"y cRSub x cAdd",
						"[ y+x] cRSub",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lam;
				}
				break;
			case cSub:
				B = ByteCodePtr[-2];
				if(IsVarOpcode(B))
				{
					switch(ByteCodePtr[-3])
					{
					case cAdd:
						if(ByteCodePtr[-4] == cImmed)
						{
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(299,
								"y cAdd B[IsVarOpcode(B)] cSub x cAdd",
								"[ y+x] cAdd B cSub",
								"    with x = " << x
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-4] = cImmed; */ // redundant, matches y @ 5
							goto Lan;
						}
						break;
					case cNeg:
						FP_TRACE_BYTECODE_OPTIMIZATION(300,
							"cNeg B[IsVarOpcode(B)] cSub x cAdd",
							"[-x] cAdd B cSub",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						goto Lao;
					case cImmed:
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(298,
							"y B[IsVarOpcode(B)] cSub x cAdd",
							"[ y+x] B cSub",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lap;
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(103,
					"y x cAdd",
					"[y+x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Laq;
			}
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(55,
					"x[x==Value_t()] cAdd",
					"",
					"    with x = " << x << "\n");
				goto Lar;
			}
			break;
		default: Default1:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				if(ByteCodePtr[-1] == cRSub)
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(297,
							"x cRSub A[IsVarOpcode(A)] cAdd",
							"[DO_STACKPLUS1] A [x] cAdd cRSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						incStackPtr();
						--mStackPtr;
						goto Lba;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(302,
						"cRSub A[IsVarOpcode(A)] cAdd",
						"[DO_STACKPLUS1] A cAdd cRSub",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Lbb;
				}
			}
		}
		goto Default0;
	TailCall_cAnd:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAnd:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(231,"cDup cAnd", "cNotNot", "");
			goto Lbc;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(115,
					"y x cAnd",
					"[fp_and(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbd;
			}
			break;
		}
		goto Default0;
	TailCall_cArg:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cArg:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(188,
				"x cArg",
				"[fp_arg(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbe;
		}
		goto Default0;
	TailCall_cAsin:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAsin:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(171,
				"x cAsin",
				"[fp_asin(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbf;
		}
		goto Default0;
	TailCall_cAsinh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAsinh:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(168,
				"x cAsinh",
				"[fp_asinh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbg;
		}
		goto Default0;
	TailCall_cAtan:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAtan:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(Value_t(x.real(),fp_abs(x.imag()))!=Value_t(0,1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(172,
					"x[Value_t(x.real(),fp_abs(x.imag()))!=Value_t(0,1)] cAtan",
					"[fp_atan(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lbh;
			}
		}
		goto Default0;
	TailCall_cAtan2:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAtan2:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(137,
					"y x cAtan2",
					"[fp_atan2(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbi;
			}
		}
		goto Default0;
	TailCall_cAtanh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAtanh:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(Value_t(fp_abs(x.real()),x.imag())!=Value_t(1,0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(169,
					"x[Value_t(fp_abs(x.real()),x.imag())!=Value_t(1,0)] cAtanh",
					"[fp_atanh(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lbj;
			}
		}
		goto Default0;
	TailCall_cCbrt:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCbrt:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(173,
				"x cCbrt",
				"[fp_cbrt(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbk;
		}
		goto Default0;
	TailCall_cCeil:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCeil:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			B = ByteCodePtr[-1];
			if(IsUnaryOpcode(B)&&IsAlwaysIntegerOpcode(B))
			{
				A = ByteCodePtr[-2];
				if(IsVarOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(409,
						"A[IsVarOpcode(A)] B[IsUnaryOpcode(B)&&IsAlwaysIntegerOpcode(B)] cAdd cCeil",
						"cCeil A B cAdd",
						"    with B = " << FP_TRACE_OPCODENAME(B)
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					goto Lbl;
				}
			}
			goto Default2;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(416,"cNeg cCeil", "cFloor cNeg", "");
			goto Lbm;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(133,
				"x cCeil",
				"[fp_ceil(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbn;
		default: Default2:;
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(405,
					"A[IsAlwaysIntegerOpcode(A)] cCeil",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cConj:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cConj:
		switch(ByteCodePtr[0])
		{
		case cConj:
			FP_TRACE_BYTECODE_OPTIMIZATION(61,"cConj cConj", "", "");
			goto Lbo;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(191,
				"x cConj",
				"[fp_conj(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbp;
		}
		goto Default0;
	TailCall_cCos:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCos:
		switch(ByteCodePtr[0])
		{
		case cAcos:
			FP_TRACE_BYTECODE_OPTIMIZATION(353,"cAcos cCos", "", "");
			goto Lbo;
		case cAtan:
			FP_TRACE_BYTECODE_OPTIMIZATION(532,"cAtan cCos", "cSqr [DO_STACKPLUS1] [Value_t(1)] cAdd cRSqrt", "");
			incStackPtr();
			--mStackPtr;
			goto Lbq;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(245,"cNeg cCos", "cCos", "");
			/* opcode = cCos; */ // redundant, matches cCos @ 0
			goto Lbr;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(174,
				"x cCos",
				"[fp_cos(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lca;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				switch(ByteCodePtr[-1])
				{
				case cSec:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(516,
							"B[B==A] cSec A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCos",
							"B cSec cDup cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cSec; */ // redundant, matches cSec @ 2
						goto Lcb;
					}
					break;
				case cSin:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(510,
							"B[B==A] cSin A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCos",
							"B cSinCos",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lcc;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cCosh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCosh:
		switch(ByteCodePtr[0])
		{
		case cAsinh:
			FP_TRACE_BYTECODE_OPTIMIZATION(466,"cAsinh cCosh", "[DO_STACKPLUS1] cSqr [Value_t(1)] cAdd cSqrt", "");
			incStackPtr();
			--mStackPtr;
			goto Lcd;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(246,"cNeg cCosh", "cCosh", "");
			/* opcode = cCosh; */ // redundant, matches cCosh @ 0
			goto Lce;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(175,
				"x cCosh",
				"[fp_cosh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lcf;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				if(ByteCodePtr[-1] == cSinh)
				{
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(523,
							"B[B==A] cSinh A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCosh",
							"B cSinhCosh",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lcg;
					}
				}
			}
		}
		goto Default0;
	TailCall_cCot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCot:
		A = ByteCodePtr[0];
		if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
		{
			if(ByteCodePtr[-1] == cTan)
			{
				B = ByteCodePtr[-2];
				if(B==A)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(514,
						"B[B==A] cTan A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCot",
						"B cTan cDup cInv",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", B = " << FP_TRACE_OPCODENAME(B)
						    << "\n");
					/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
					/* ByteCodePtr[-1] = cTan; */ // redundant, matches cTan @ 2
					goto Lcb;
				}
			}
		}
		goto Default0;
	TailCall_cCsc:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCsc:
		switch(ByteCodePtr[0])
		{
		case cAtan:
			A = ByteCodePtr[-1];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(537,
					"A[IsNeverNegativeValueOpcode(A)] cAtan cCsc",
					"A cSqr cInv [DO_STACKPLUS1] [Value_t(1)] cAdd cSqrt",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				incStackPtr();
				--mStackPtr;
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Lch;
			}
			goto Default3;
		default: Default3:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				if(ByteCodePtr[-1] == cSin)
				{
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(512,
							"B[B==A] cSin A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCsc",
							"B cSin cDup cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cSin; */ // redundant, matches cSin @ 2
						goto Lcb;
					}
				}
			}
		}
		goto Default0;
	TailCall_cDeg:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cDeg:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(131,
				"x cDeg",
				"[RadiansToDegrees(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lci;
		}
		goto Default0;
	TailCall_cDiv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cDiv:
		switch(ByteCodePtr[0])
		{
		case cCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(257,"cCos cDiv", "cSec cMul", "");
			goto Lcj;
		case cCot:
			FP_TRACE_BYTECODE_OPTIMIZATION(261,"cCot cDiv", "cTan cMul", "");
			goto Lck;
		case cCsc:
			FP_TRACE_BYTECODE_OPTIMIZATION(259,"cCsc cDiv", "cSin cMul", "");
			goto Lcl;
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(76,"cDup cDiv", "[Value_t()] cMul [Value_t(1)] cAdd", "");
			goto Lcm;
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(422,"cExp cDiv", "cNeg cExp cMul", "");
			goto Lcn;
		case cExp2:
			FP_TRACE_BYTECODE_OPTIMIZATION(423,"cExp2 cDiv", "cNeg cExp2 cMul", "");
			goto Lco;
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(220,"cInv cDiv", "cMul", "");
			goto Lcp;
		case cPow:
			FP_TRACE_BYTECODE_OPTIMIZATION(421,"cPow cDiv", "cNeg cPow cMul", "");
			goto Lcq;
		case cSec:
			FP_TRACE_BYTECODE_OPTIMIZATION(260,"cSec cDiv", "cCos cMul", "");
			goto Lcr;
		case cSin:
			FP_TRACE_BYTECODE_OPTIMIZATION(256,"cSin cDiv", "cCsc cMul", "");
			goto Lda;
		case cSinCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(518,"cSinCos cDiv", "cTan", "");
			goto Ldb;
		case cSinhCosh:
			FP_TRACE_BYTECODE_OPTIMIZATION(525,"cSinhCosh cDiv", "cTanh", "");
			goto Ldc;
		case cTan:
			FP_TRACE_BYTECODE_OPTIMIZATION(258,"cTan cDiv", "cCot cMul", "");
			goto Ldd;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(123,
						"cNeg x[x!=Value_t()] cDiv",
						"[-x] cDiv",
						"    with x = " << x << "\n");
					/* opcode = cDiv; */ // redundant, matches cDiv @ 0
					goto Lde;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(101,
						"y x[x!=Value_t()] cDiv",
						"[y/x]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Ldf;
				}
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(54,
					"x[x==Value_t(1)] cDiv",
					"",
					"    with x = " << x << "\n");
				goto Lar;
			}
			if(x!=Value_t(0))
			{
				if(ByteCodePtr[-1] == cMul)
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						y = ImmedPtr[-1];
						if((y/x)==fp_const_rad_to_deg<Value_t>())
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(328,
								"y[(y/x)==fp_const_rad_to_deg<Value_t>()] cMul x[x!=Value_t(0)] cDiv",
								"cDeg",
								"    with x = " << x
								    << ", y = " << y
								    << "\n");
							goto Ldg;
						}
						if((y/x)==fp_const_deg_to_rad<Value_t>())
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(329,
								"y[(y/x)==fp_const_deg_to_rad<Value_t>()] cMul x[x!=Value_t(0)] cDiv",
								"cRad",
								"    with x = " << x
								    << ", y = " << y
								    << "\n");
							goto Ldh;
						}
						FP_TRACE_BYTECODE_OPTIMIZATION(330,
							"y cMul x[x!=Value_t(0)] cDiv",
							"[y/x] cMul",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
						goto Ldi;
					}
				}
				FP_TRACE_BYTECODE_OPTIMIZATION(332,
					"x[x!=Value_t(0)] cDiv",
					"[Value_t(1)/x] cMul",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Ldj;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDiv:
					B = ByteCodePtr[-2];
					if(IsVarOpcode(B))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(278,
							"B[IsVarOpcode(B)] cDiv A[IsVarOpcode(A)] cDiv",
							"[DO_STACKPLUS1] B A cMul cDiv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						incStackPtr();
						--mStackPtr;
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* opcode = cDiv; */ // redundant, matches cDiv @ 0
						goto Ldk;
					}
					break;
				case cRDiv:
					switch(ByteCodePtr[-2])
					{
					case cImmed:
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(273,
							"x cRDiv A[IsVarOpcode(A)] cDiv",
							"A cMul [x] cRDiv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Ldl;
					default:
						B = ByteCodePtr[-2];
						if(IsVarOpcode(B))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(272,
								"B[IsVarOpcode(B)] cRDiv A[IsVarOpcode(A)] cDiv",
								"A cMul B cRDiv",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							goto Ldm;
						}
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cEqual:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(369,
						"cAbs x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Ldn;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(371,
						"cSqr x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Ldn;
				default:
					A = ByteCodePtr[-1];
					if(IsLogicalOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(437,
							"A[IsLogicalOpcode(A)] x[x==Value_t(0)] cEqual",
							"A cNot",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Ldo;
					}
				}
			}
			if(x==Value_t(1))
			{
				A = ByteCodePtr[-1];
				if(IsLogicalOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(435,
						"A[IsLogicalOpcode(A)] x[x==Value_t(1)] cEqual",
						"A",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					goto Lar;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(113,
					"y x cEqual",
					"[fp_equal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldp;
			}
		}
		goto Default0;
	TailCall_cExp:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cExp:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(418,
					"x cAdd cExp",
					"cExp [fp_exp(x)] cMul",
					"    with x = " << x << "\n");
				goto Ldq;
			}
			break;
		case cLog:
			A = ByteCodePtr[-1];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(347,
					"A[IsNeverNegativeValueOpcode(A)] cLog cExp",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Lbo;
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(176,
				"x cExp",
				"[fp_exp(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Ldr;
		}
		goto Default0;
	TailCall_cExp2:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cExp2:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(419,
					"x cAdd cExp2",
					"cExp2 [fp_exp2(x)] cMul",
					"    with x = " << x << "\n");
				goto Lea;
			}
			break;
		case cLog2:
			A = ByteCodePtr[-1];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(348,
					"A[IsNeverNegativeValueOpcode(A)] cLog2 cExp2",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Lbo;
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(177,
				"x cExp2",
				"[fp_exp2(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Leb;
		}
		FP_TRACE_BYTECODE_OPTIMIZATION(495,"cExp2", "[DO_STACKPLUS1] [fp_log(Value_t(2))] cMul cExp", "");
		incStackPtr();
		--mStackPtr;
		goto Lec;
	TailCall_cFloor:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFloor:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			B = ByteCodePtr[-1];
			if(IsUnaryOpcode(B)&&IsAlwaysIntegerOpcode(B))
			{
				A = ByteCodePtr[-2];
				if(IsVarOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(408,
						"A[IsVarOpcode(A)] B[IsUnaryOpcode(B)&&IsAlwaysIntegerOpcode(B)] cAdd cFloor",
						"cFloor A B cAdd",
						"    with B = " << FP_TRACE_OPCODENAME(B)
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					goto Led;
				}
			}
			goto Default4;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(415,"cNeg cFloor", "cCeil cNeg", "");
			goto Lee;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(134,
				"x cFloor",
				"[fp_floor(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lef;
		default: Default4:;
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(404,
					"A[IsAlwaysIntegerOpcode(A)] cFloor",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cGreater:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cGreater:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(111,
					"y x cGreater",
					"[fp_less(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Leg;
			}
		}
		goto Default0;
	TailCall_cGreaterOrEq:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cGreaterOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(112,
					"y x cGreaterOrEq",
					"[fp_lessOrEq(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Leh;
			}
		}
		goto Default0;
	TailCall_cHypot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cHypot:
		switch(ByteCodePtr[0])
		{
		case cSinCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(82,"cSinCos cHypot", "[DO_STACKPLUS1] [Value_t()] cMul [Value_t(1)] cAdd", "");
			incStackPtr();
			--mStackPtr;
			goto Lcm;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(533,
				"x cHypot",
				"cSqr [x*x] cAdd cSqrt",
				"    with x = " << x << "\n");
			goto Lei;
		}
		goto Default0;
	TailCall_cImag:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cImag:
		switch(ByteCodePtr[0])
		{
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(190,
				"x cImag",
				"[fp_imag(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lej;
		default:
			A = ByteCodePtr[0];
			if(IsAlwaysRealOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(78,
					"A[IsAlwaysRealOpcode(A)] cImag",
					"A [DO_STACKPLUS1] [Value_t()] cMul",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				incStackPtr();
				--mStackPtr;
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				goto Lek;
			}
		}
		goto Default0;
	TailCall_cInt:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cInt:
		switch(ByteCodePtr[0])
		{
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(135,
				"x cInt",
				"[fp_int(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lel;
		default:
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(406,
					"A[IsAlwaysIntegerOpcode(A)] cInt",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cInv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cInv:
		switch(ByteCodePtr[0])
		{
		case cCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(263,"cCos cInv", "cSec", "");
			goto Lem;
		case cCot:
			FP_TRACE_BYTECODE_OPTIMIZATION(267,"cCot cInv", "cTan", "");
			goto Ldb;
		case cCsc:
			FP_TRACE_BYTECODE_OPTIMIZATION(265,"cCsc cInv", "cSin", "");
			goto Len;
		case cHypot:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(534,
					"x cHypot cInv",
					"cSqr [x*x] cAdd cRSqrt",
					"    with x = " << x << "\n");
				goto Leo;
			}
			break;
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(60,"cInv cInv", "", "");
			goto Lbo;
		case cPow:
			FP_TRACE_BYTECODE_OPTIMIZATION(365,"cPow cInv", "cNeg cPow", "");
			goto Lep;
		case cRSqrt:
			FP_TRACE_BYTECODE_OPTIMIZATION(207,"cRSqrt cInv", "cSqrt", "");
			goto Leq;
		case cSec:
			FP_TRACE_BYTECODE_OPTIMIZATION(266,"cSec cInv", "cCos", "");
			goto Ler;
		case cSin:
			FP_TRACE_BYTECODE_OPTIMIZATION(262,"cSin cInv", "cCsc", "");
			goto Lfa;
		case cSqrt:
			FP_TRACE_BYTECODE_OPTIMIZATION(205,"cSqrt cInv", "cRSqrt", "");
			goto Lfb;
		case cTan:
			FP_TRACE_BYTECODE_OPTIMIZATION(264,"cTan cInv", "cCot", "");
			goto Lfc;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(99,
					"x[x!=Value_t()] cInv",
					"[Value_t(1)/x]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lfd;
			}
			break;
		}
		goto Default0;
	TailCall_cLess:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLess:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				A = ByteCodePtr[-1];
				if(IsNeverNegativeValueOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(308,
						"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(0)] cLess",
						"A [x] cMul",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
					goto Lfe;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(109,
					"y x cLess",
					"[fp_less(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lff;
			}
		}
		goto Default0;
	TailCall_cLessOrEq:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLessOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(110,
					"y x cLessOrEq",
					"[fp_lessOrEq(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lfg;
			}
		}
		goto Default0;
	TailCall_cLog:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLog:
		switch(ByteCodePtr[0])
		{
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(350,"cExp cLog", "", "");
			goto Lbo;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(x>Value_t(0))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(507,
						"x[x>Value_t(0)] cMul cLog",
						"cLog [fp_log(x)] cAdd",
						"    with x = " << x << "\n");
					goto Lfh;
				}
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(178,
					"x[x!=Value_t(0)] cLog",
					"[fp_log(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lfi;
			}
			break;
		}
		goto Default0;
	TailCall_cLog10:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLog10:
		switch(ByteCodePtr[0])
		{
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(497,"cExp cLog10", "[DO_STACKPLUS1] [fp_log10(fp_const_e<Value_t>())] cMul", "");
			incStackPtr();
			--mStackPtr;
			goto Lfj;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(x>Value_t(0))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(508,
						"x[x>Value_t(0)] cMul cLog10",
						"cLog10 [fp_log10(x)] cAdd",
						"    with x = " << x << "\n");
					goto Lfk;
				}
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(179,
					"x[x!=Value_t(0)] cLog10",
					"[fp_log10(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lfl;
			}
			break;
		}
		goto Default0;
	TailCall_cLog2:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLog2:
		switch(ByteCodePtr[0])
		{
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(496,"cExp cLog2", "[DO_STACKPLUS1] [fp_log2(fp_const_e<Value_t>())] cMul", "");
			incStackPtr();
			--mStackPtr;
			goto Lfm;
		case cExp2:
			FP_TRACE_BYTECODE_OPTIMIZATION(351,"cExp2 cLog2", "", "");
			goto Lbo;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(x>Value_t(0))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(506,
						"x[x>Value_t(0)] cMul cLog2",
						"cLog2 [fp_log2(x)] cAdd",
						"    with x = " << x << "\n");
					goto Lfn;
				}
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(180,
					"x[x!=Value_t(0)] cLog2",
					"[fp_log2(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lfo;
			}
			break;
		}
		goto Default0;
	TailCall_cMax:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMax:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(58,"cDup cMax", "", "");
			goto Lbo;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(139,
					"y x cMax",
					"[fp_max(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lfp;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(64,
							"B[B==A] cDup A[IsVarOpcode(A)] cMax",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Lbo;
					}
					break;
				case cMax:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(66,
							"B[B==A] cMax A[IsVarOpcode(A)] cMax",
							"B cMax",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMax; */ // redundant, matches cMax @ 2
						goto Lbo;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cMin:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMin:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(57,"cDup cMin", "", "");
			goto Lbo;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(138,
					"y x cMin",
					"[fp_min(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lfq;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(63,
							"B[B==A] cDup A[IsVarOpcode(A)] cMin",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Lbo;
					}
					break;
				case cMin:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(65,
							"B[B==A] cMin A[IsVarOpcode(A)] cMin",
							"B cMin",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMin; */ // redundant, matches cMin @ 2
						goto Lbo;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cMod:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMod:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				if(ByteCodePtr[-1] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(102,
						"y x[x!=Value_t()] cMod",
						"[fp_mod(y,x)]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Lfr;
				}
			}
		}
		goto Default0;
	TailCall_cMul:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMul:
		switch(ByteCodePtr[0])
		{
		case cCsc:
			A = ByteCodePtr[-1];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>3)
			{
				if(ByteCodePtr[-2] == cCos)
				{
					B = ByteCodePtr[-3];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(524,
							"B[B==A] cCos A[IsVarOpcode(A)&&mData->mByteCode.size()>3] cCsc cMul",
							"B cCot",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
						goto Lga;
					}
				}
			}
			goto Default5;
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(200,"cDup cMul", "cSqr", "");
			goto Lgb;
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(221,"cInv cMul", "cDiv", "");
			goto Lgc;
		case cNeg:
			switch(ByteCodePtr[-1])
			{
			case cDup:
				FP_TRACE_BYTECODE_OPTIMIZATION(483,"cDup cNeg cMul", "cSqr cNeg", "");
				goto Lgd;
			default:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cMul)
					{
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(489,
								"B[B==A] cMul A[IsVarOpcode(A)] cNeg cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lge;
						}
					}
				}
			}
			goto Default5;
		case cPow:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(321,
						"cDup x cPow cMul",
						"[x+Value_t(1)] cPow",
						"    with x = " << x << "\n");
					goto Lgf;
				}
			}
			goto Default5;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(91,
							"A[IsVarOpcode(A)] cMul x[x==Value_t()] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lgg;
					}
					goto Default6;
				default: Default6:;
					A = ByteCodePtr[-1];
					if(IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						switch(ByteCodePtr[-2])
						{
						case cImmed:
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(90,
								"y A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
								"[x] cMul",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lgh;
						default:
							B = ByteCodePtr[-2];
							if(IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								switch(ByteCodePtr[-3])
								{
								case cImmed:
									y = ImmedPtr[-1];
									FP_TRACE_BYTECODE_OPTIMIZATION(94,
										"y B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
										"A [x] cMul",
										"    with x = " << x
										    << ", A = " << FP_TRACE_OPCODENAME(A)
										    << ", B = " << FP_TRACE_OPCODENAME(B)
										    << ", y = " << y
										    << "\n");
									/* opcode = cMul; */ // redundant, matches cMul @ 0
									goto Lgi;
								default:
									C = ByteCodePtr[-3];
									if(IsVarOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(92,
											"C[IsVarOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
											"A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lgj;
									}
									if(IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(93,
											"C[IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
											"B A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lgk;
									}
								}
							}
							if(IsVarOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(88,
									"B[IsVarOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
									"[x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lgg;
							}
							if(IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(89,
									"B[IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
									"A [x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lgl;
							}
						}
					}
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(86,
							"A[IsVarOpcode(A)] x[x==Value_t()] cMul",
							"[x]",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						goto Lgm;
					}
					if(IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(87,
							"A[IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lgn;
					}
				}
			}
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				switch(ByteCodePtr[-2])
				{
				case cDup:
					if(x+x==Value_t(1))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(323,
							"cDup[x+x==Value_t(1)] cAdd x cMul",
							"",
							"    with x = " << x << "\n");
						goto Lgo;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(324,
						"cDup cAdd x cMul",
						"[x+x] cMul",
						"    with x = " << x << "\n");
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Lgp;
				case cMul:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(IsVarOpcode(A))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(396,
								"A[IsVarOpcode(A)] y cMul cAdd x cMul",
								"[x] cMul A [y*x] cMul cAdd",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lgq;
						}
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(395,
						"y cAdd x cMul",
						"[x] cMul [y*x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lgr;
				}
				break;
			case cDeg:
				FP_TRACE_BYTECODE_OPTIMIZATION(216,
					"cDeg x cMul",
					"[DO_STACKPLUS1] [RadiansToDegrees(x)] cMul",
					"    with x = " << x << "\n");
				incStackPtr();
				--mStackPtr;
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Lha;
			case cDiv:
				B = ByteCodePtr[-2];
				if(IsVarOpcode(B))
				{
					switch(ByteCodePtr[-3])
					{
					case cMul:
						if(ByteCodePtr[-4] == cImmed)
						{
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(285,
								"y cMul B[IsVarOpcode(B)] cDiv x cMul",
								"[y*x] cMul B cDiv",
								"    with x = " << x
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-4] = cImmed; */ // redundant, matches y @ 5
							goto Lhb;
						}
						break;
					case cNeg:
						FP_TRACE_BYTECODE_OPTIMIZATION(286,
							"cNeg B[IsVarOpcode(B)] cDiv x cMul",
							"[-x] cMul B cDiv",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						goto Lhc;
					case cImmed:
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(284,
							"y B[IsVarOpcode(B)] cDiv x cMul",
							"[y*x] B cDiv",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lhd;
					}
				}
				break;
			case cMul:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cDup)
					{
						if(x+x==Value_t(1))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(325,
								"cDup[x+x==Value_t(1)] cAdd cMul x cMul",
								"cMul",
								"    with x = " << x << "\n");
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lhe;
						}
						FP_TRACE_BYTECODE_OPTIMIZATION(326,
							"cDup cAdd cMul x cMul",
							"cMul [x+x] cMul",
							"    with x = " << x << "\n");
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lhf;
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					if(y*x==Value_t(1))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(68,
							"y[y*x==Value_t(1)] cMul x cMul",
							"",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Lhg;
					}
					if((y*x)==fp_const_rad_to_deg<Value_t>())
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(314,
							"y[(y*x)==fp_const_rad_to_deg<Value_t>()] cMul x cMul",
							"cDeg",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Ldg;
					}
					if((y*x)==fp_const_deg_to_rad<Value_t>())
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(315,
							"y[(y*x)==fp_const_deg_to_rad<Value_t>()] cMul x cMul",
							"cRad",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Ldh;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(126,
						"y cMul x cMul",
						"[y*x] cMul",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Lhh;
				}
				break;
			case cNeg:
				FP_TRACE_BYTECODE_OPTIMIZATION(120,
					"cNeg x cMul",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Lhi;
			case cRDiv:
				switch(ByteCodePtr[-2])
				{
				case cMul:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(292,
							"y cMul cRDiv x cMul",
							"[y*x] cMul cRDiv",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lhj;
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(293,
						"cNeg cRDiv x cMul",
						"[-x] cMul cRDiv",
						"    with x = " << x << "\n");
					goto Lhk;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(291,
						"y cRDiv x cMul",
						"[y*x] cRDiv",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lhl;
				}
				break;
			case cRad:
				FP_TRACE_BYTECODE_OPTIMIZATION(217,
					"cRad x cMul",
					"[DO_STACKPLUS1] [DegreesToRadians(x)] cMul",
					"    with x = " << x << "\n");
				incStackPtr();
				--mStackPtr;
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Lhm;
			case cSub:
				if(ByteCodePtr[-2] == cMul)
				{
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(IsVarOpcode(A))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(397,
								"A[IsVarOpcode(A)] y cMul cSub x cMul",
								"[x] cMul A [y*x] cMul cSub",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lhn;
						}
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(100,
					"y x cMul",
					"[y*x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lho;
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(53,
					"x[x==Value_t(1)] cMul",
					"",
					"    with x = " << x << "\n");
				goto Lar;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(122,
					"x[x==Value_t(-1)] cMul",
					"cNeg",
					"    with x = " << x << "\n");
				goto Lhp;
			}
			if(x==Value_t(2))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(196,
					"x[x==Value_t(2)] cMul",
					"cDup cAdd",
					"    with x = " << x << "\n");
				goto Lhq;
			}
			if(x==fp_const_rad_to_deg<Value_t>())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(214,
					"x[x==fp_const_rad_to_deg<Value_t>()] cMul",
					"cDeg",
					"    with x = " << x << "\n");
				goto Lhr;
			}
			if(x==fp_const_deg_to_rad<Value_t>())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(215,
					"x[x==fp_const_deg_to_rad<Value_t>()] cMul",
					"cRad",
					"    with x = " << x << "\n");
				goto Lia;
			}
			break;
		default: Default5:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDiv:
					B = ByteCodePtr[-2];
					if(IsVarOpcode(B))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(281,
							"B[IsVarOpcode(B)] cDiv A[IsVarOpcode(A)] cMul",
							"[DO_STACKPLUS1] A cMul B cDiv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						incStackPtr();
						--mStackPtr;
						goto Lib;
					}
					goto Default7;
				case cMul:
					switch(ByteCodePtr[-2])
					{
					case cNeg:
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(486,
								"B[B==A] cNeg cMul A[IsVarOpcode(A)] cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lge;
						}
						goto Default8;
					default: Default8:;
						B = ByteCodePtr[-2];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(477,
								"B[B==A] cMul A[IsVarOpcode(A)] cMul",
								"B cSqr cMul",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lic;
						}
					}
					goto Default7;
				case cNeg:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(480,
							"B[B==A] cNeg A[IsVarOpcode(A)] cMul",
							"B cSqr cNeg",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lgd;
					}
					goto Default7;
				case cRDiv:
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(274,
							"x cRDiv A[IsVarOpcode(A)] cMul",
							"[DO_STACKPLUS1] A [x] cMul cRDiv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						incStackPtr();
						--mStackPtr;
						goto Lid;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(288,
						"cRDiv A[IsVarOpcode(A)] cMul",
						"[DO_STACKPLUS1] A cMul cRDiv",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Lie;
				default: Default7:;
					B = ByteCodePtr[-1];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(474,
							"B[B==A] A[IsVarOpcode(A)] cMul",
							"B cSqr",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-1] = B; */ // redundant, matches B @ 2
						goto Lgb;
					}
				}
			}
			if(IsUnaryOpcode(A))
			{
				B = ByteCodePtr[-1];
				if(IsVarOpcode(B)&&mData->mByteCode.size()>1)
				{
					if(ByteCodePtr[-2] == cMul)
					{
						C = ByteCodePtr[-3];
						if(C==A)
						{
							D = ByteCodePtr[-4];
							if(D==B)
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(493,
									"D[D==B] C[C==A] cMul B[IsVarOpcode(B)&&mData->mByteCode.size()>1] A[IsUnaryOpcode(A)] cMul",
									"D C cSqr cMul",
									"    with A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << ", C = " << FP_TRACE_OPCODENAME(C)
									    << ", D = " << FP_TRACE_OPCODENAME(D)
									    << "\n");
								/* ByteCodePtr[-4] = D; */ // redundant, matches D @ 5
								/* ByteCodePtr[-3] = C; */ // redundant, matches C @ 4
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lif;
							}
						}
					}
				}
			}
		}
		goto Default0;
	TailCall_cNEqual:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(370,
						"cAbs x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Lig;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(372,
						"cSqr x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Lig;
				default:
					A = ByteCodePtr[-1];
					if(IsLogicalOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(438,
							"A[IsLogicalOpcode(A)] x[x==Value_t(0)] cNEqual",
							"A",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lar;
					}
				}
			}
			if(x==Value_t(1))
			{
				A = ByteCodePtr[-1];
				if(IsLogicalOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(436,
						"A[IsLogicalOpcode(A)] x[x==Value_t(1)] cNEqual",
						"A cNot",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					goto Ldo;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(114,
					"y x cNEqual",
					"[fp_nequal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lih;
			}
		}
		goto Default0;
	TailCall_cNeg:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNeg:
		switch(ByteCodePtr[0])
		{
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(121,
					"x cMul cNeg",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Lii;
			}
			break;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(59,"cNeg cNeg", "", "");
			goto Lbo;
		case cSin:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(251,
						"x cMul cSin cNeg",
						"[-x] cMul cSin",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Lij;
				}
			}
			break;
		case cSinh:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(252,
						"x cMul cSinh cNeg",
						"[-x] cMul cSinh",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Lik;
				}
			}
			break;
		case cTan:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(253,
						"x cMul cTan cNeg",
						"[-x] cMul cTan",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Lil;
				}
			}
			break;
		case cTanh:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(254,
						"x cMul cTanh cNeg",
						"[-x] cMul cTanh",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Lim;
				}
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(98,
				"x cNeg",
				"[-x]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lin;
		}
		goto Default0;
	TailCall_cNot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNot:
		switch(ByteCodePtr[0])
		{
		case cAbsNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(238,"cAbsNotNot cNot", "cAbsNot", "");
			goto Lio;
		case cEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(227,"cEqual cNot", "cNEqual", "");
			goto Lip;
		case cGreater:
			FP_TRACE_BYTECODE_OPTIMIZATION(225,"cGreater cNot", "cLessOrEq", "");
			goto Liq;
		case cGreaterOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(226,"cGreaterOrEq cNot", "cLess", "");
			goto Lir;
		case cLess:
			FP_TRACE_BYTECODE_OPTIMIZATION(223,"cLess cNot", "cGreaterOrEq", "");
			goto Lja;
		case cLessOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(224,"cLessOrEq cNot", "cGreater", "");
			goto Ljb;
		case cNEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(228,"cNEqual cNot", "cEqual", "");
			goto Ljc;
		case cNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(236,"cNot cNot", "cNotNot", "");
			goto Lbc;
		case cNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(237,"cNotNot cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Ljd;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(105,
				"x cNot",
				"[fp_not(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lje;
		}
		goto Default0;
	TailCall_cNotNot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNotNot:
		if(ByteCodePtr[0] == cNot)
		{
			FP_TRACE_BYTECODE_OPTIMIZATION(239,"cNot cNotNot", "cNot", "");
			/* ByteCodePtr[0] = cNot; */ // redundant, matches cNot @ 1
			return;
		}
		goto Default0;
	TailCall_cOr:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cOr:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(230,"cDup cOr", "cNotNot", "");
			goto Lbc;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(116,
					"y x cOr",
					"[fp_or(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ljf;
			}
			break;
		}
		goto Default0;
	TailCall_cPolar:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cPolar:
		if(ByteCodePtr[0] == cImmed)
		{
			y = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(192,
					"x y cPolar",
					"[fp_polar(x,y)]",
					"    with y = " << y
					    << ", x = " << x
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Ljg;
			}
		}
		goto Default0;
	TailCall_cPow:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cPow:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(isInteger(x))
			{
				switch(ByteCodePtr[-1])
				{
				case cExp:
					FP_TRACE_BYTECODE_OPTIMIZATION(41,
						"cExp x[isInteger(x)] cPow",
						"[x] cMul cExp",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					goto Ljh;
				case cExp2:
					FP_TRACE_BYTECODE_OPTIMIZATION(42,
						"cExp2 x[isInteger(x)] cPow",
						"[x] cMul cExp2",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					goto Lji;
				case cPow:
					if(ByteCodePtr[-2] == cImmed)
					{
						y = ImmedPtr[-1];
						if(!isInteger(y))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(40,
								"y[!isInteger(y)] cPow x[isInteger(x)] cPow",
								"[y*x] cPow",
								"    with x = " << x
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cPow; */ // redundant, matches cPow @ 0
							goto Ljj;
						}
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(43,
						"cPow x[isInteger(x)] cPow",
						"[x] cMul cPow",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cPow; */ // redundant, matches cPow @ 0
					goto Ljk;
				}
			}
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(81,
					"x[x==Value_t()] cPow",
					"[DO_STACKPLUS1] [Value_t()] cMul [Value_t(1)] cAdd",
					"    with x = " << x << "\n");
				incStackPtr();
				--mStackPtr;
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Ljl;
			}
			if(x==Value_t(0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(339,
					"x[x==Value_t(0.5)] cPow",
					"cSqrt",
					"    with x = " << x << "\n");
				goto Ljm;
			}
			if(x==Value_t(1)/Value_t(3))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(340,
					"x[x==Value_t(1)/Value_t(3)] cPow",
					"cCbrt",
					"    with x = " << x << "\n");
				goto Ljn;
			}
			if(x==Value_t(1)/Value_t(-3))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(341,
					"x[x==Value_t(1)/Value_t(-3)] cPow",
					"cCbrt cInv",
					"    with x = " << x << "\n");
				goto Ljo;
			}
			if(x==Value_t(-0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(342,
					"x[x==Value_t(-0.5)] cPow",
					"cRSqrt",
					"    with x = " << x << "\n");
				goto Ljp;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(343,
					"x[x==Value_t(-1)] cPow",
					"cInv",
					"    with x = " << x << "\n");
				goto Ljq;
			}
			switch(ByteCodePtr[-1])
			{
			case cPow:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(337,
						"y cPow x cPow",
						"[y*x] cPow",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cPow; */ // redundant, matches cPow @ 0
					goto Ljj;
				}
				break;
			case cSqr:
				FP_TRACE_BYTECODE_OPTIMIZATION(44,
					"cSqr x cPow",
					"[x+x] cPow",
					"    with x = " << x << "\n");
				/* opcode = cPow; */ // redundant, matches cPow @ 0
				goto Ljr;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(187,
					"y x cPow",
					"[fp_pow(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lka;
			}
			FP_TRACE_BYTECODE_OPTIMIZATION(471,
				"x cPow",
				"[DO_POWI]",
				"    with x = " << x << "\n");
			if(TryCompilePowi(x))
			  return;
		}
		goto Default0;
	TailCall_cRDiv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRDiv:
		switch(ByteCodePtr[0])
		{
		case cSinCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(519,"cSinCos cRDiv", "cCot", "");
			goto Lfc;
		case cSinhCosh:
			FP_TRACE_BYTECODE_OPTIMIZATION(526,"cSinhCosh cRDiv", "cTanh cInv", "");
			goto Lkb;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(275,
					"x[x==Value_t(1)] cRDiv",
					"cInv",
					"    with x = " << x << "\n");
				goto Ljq;
			}
			break;
		}
		goto Default0;
	TailCall_cRSqrt:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRSqrt:
		switch(ByteCodePtr[0])
		{
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(208,"cInv cRSqrt", "cSqrt", "");
			goto Leq;
		case cSqr:
			FP_TRACE_BYTECODE_OPTIMIZATION(210,"cSqr cRSqrt", "cInv cAbs", "");
			goto Lkc;
		}
		goto Default0;
	TailCall_cRSub:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRSub:
		if(ByteCodePtr[0] == cDup)
		{
			FP_TRACE_BYTECODE_OPTIMIZATION(75,"cDup cRSub", "[Value_t()] cMul", "");
			goto Lkd;
		}
		goto Default0;
	TailCall_cRad:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRad:
		switch(ByteCodePtr[0])
		{
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(218,
					"x cMul cRad",
					"[DO_STACKPLUS1] [DegreesToRadians(x)] cMul",
					"    with x = " << x << "\n");
				incStackPtr();
				--mStackPtr;
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Lke;
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(132,
				"x cRad",
				"[DegreesToRadians(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lkf;
		}
		goto Default0;
	TailCall_cReal:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cReal:
		switch(ByteCodePtr[0])
		{
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(189,
				"x cReal",
				"[fp_real(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lkg;
		default:
			A = ByteCodePtr[0];
			if(IsAlwaysRealOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(79,
					"A[IsAlwaysRealOpcode(A)] cReal",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cSec:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSec:
		switch(ByteCodePtr[0])
		{
		case cAtan:
			FP_TRACE_BYTECODE_OPTIMIZATION(531,"cAtan cSec", "cSqr [DO_STACKPLUS1] [Value_t(1)] cAdd cSqrt", "");
			incStackPtr();
			--mStackPtr;
			goto Lcd;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				switch(ByteCodePtr[-1])
				{
				case cCos:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(513,
							"B[B==A] cCos A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cSec",
							"B cCos cDup cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cCos; */ // redundant, matches cCos @ 2
						goto Lcb;
					}
					break;
				case cSin:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(511,
							"B[B==A] cSin A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cSec",
							"B cSinCos cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lkh;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cSin:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSin:
		switch(ByteCodePtr[0])
		{
		case cAsin:
			FP_TRACE_BYTECODE_OPTIMIZATION(352,"cAsin cSin", "", "");
			goto Lbo;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(247,"cNeg cSin", "cSin cNeg", "");
			goto Lki;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(181,
				"x cSin",
				"[fp_sin(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lkj;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				if(ByteCodePtr[-1] == cCsc)
				{
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(515,
							"B[B==A] cCsc A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cSin",
							"B cCsc cDup cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cCsc; */ // redundant, matches cCsc @ 2
						goto Lcb;
					}
				}
			}
		}
		goto Default0;
	TailCall_cSinh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSinh:
		switch(ByteCodePtr[0])
		{
		case cAcosh:
			FP_TRACE_BYTECODE_OPTIMIZATION(453,"cAcosh cSinh", "[DO_STACKPLUS1] cSqr [Value_t(-1)] cAdd cSqrt", "");
			incStackPtr();
			--mStackPtr;
			goto Lkk;
		case cAsinh:
			FP_TRACE_BYTECODE_OPTIMIZATION(356,"cAsinh cSinh", "", "");
			goto Lbo;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(248,"cNeg cSinh", "cSinh cNeg", "");
			goto Lkl;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(182,
				"x cSinh",
				"[fp_sinh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lkm;
		}
		goto Default0;
	TailCall_cSqr:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSqr:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(202,"cAbs cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Lkn;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(201,"cNeg cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Lkn;
		case cRSqrt:
			FP_TRACE_BYTECODE_OPTIMIZATION(209,"cRSqrt cSqr", "cInv", "");
			goto Lko;
		case cSqrt:
			A = ByteCodePtr[-1];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(345,
					"A[IsNeverNegativeValueOpcode(A)] cSqrt cSqr",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Lbo;
			}
			goto Default9;
		default: Default9:;
			A = ByteCodePtr[0];
			if(IsComparisonOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(540,
					"A[IsComparisonOpcode(A)] cSqr",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cSqrt:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSqrt:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cSqr)
			{
				A = ByteCodePtr[-2];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-3] == cSqr)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(528,
							"cSqr A[IsVarOpcode(A)] cSqr cAdd cSqrt",
							"A cHypot",
							"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
						goto Lkp;
					}
				}
				B = ByteCodePtr[-2];
				if(IsUnaryOpcode(B))
				{
					A = ByteCodePtr[-3];
					if(IsVarOpcode(A))
					{
						if(ByteCodePtr[-4] == cSqr)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(529,
								"cSqr A[IsVarOpcode(A)] B[IsUnaryOpcode(B)] cSqr cAdd cSqrt",
								"A B cHypot",
								"    with B = " << FP_TRACE_OPCODENAME(B)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lkq;
						}
					}
				}
			}
			break;
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(206,"cInv cSqrt", "cRSqrt", "");
			goto Lfb;
		case cSqr:
			FP_TRACE_BYTECODE_OPTIMIZATION(204,"cSqr cSqrt", "cAbs", "");
			goto Lkr;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(183,
				"x cSqrt",
				"[fp_sqrt(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lla;
		}
		goto Default0;
	TailCall_cSub:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSub:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(74,"cDup cSub", "[Value_t()] cMul", "");
			goto Lkd;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(198,"cNeg cSub", "cAdd", "");
			goto Llb;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(56,
					"x[x==Value_t()] cSub",
					"",
					"    with x = " << x << "\n");
				goto Lar;
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(104,
					"y x cSub",
					"[y-x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Llc;
			}
			FP_TRACE_BYTECODE_OPTIMIZATION(49,
				"x cSub",
				"[-x] cAdd",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lld;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				if(ByteCodePtr[-1] == cRSub)
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(296,
							"x cRSub A[IsVarOpcode(A)] cSub",
							"A cAdd [x] cRSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Lle;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(303,
						"cRSub A[IsVarOpcode(A)] cSub",
						"[DO_STACKPLUS1] A cSub cRSub",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Llf;
				}
			}
		}
		goto Default0;
	TailCall_cTan:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cTan:
		switch(ByteCodePtr[0])
		{
		case cAtan2:
			FP_TRACE_BYTECODE_OPTIMIZATION(362,"cAtan2 cTan", "cDiv", "");
			goto Lgc;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(249,"cNeg cTan", "cTan cNeg", "");
			goto Llg;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(185,
				"x cTan",
				"[fp_tan(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Llh;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				if(ByteCodePtr[-1] == cCot)
				{
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(517,
							"B[B==A] cCot A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cTan",
							"B cCot cDup cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cCot; */ // redundant, matches cCot @ 2
						goto Lcb;
					}
				}
			}
		}
		goto Default0;
	TailCall_cTanh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cTanh:
		switch(ByteCodePtr[0])
		{
		case cAtanh:
			FP_TRACE_BYTECODE_OPTIMIZATION(359,"cAtanh cTanh", "", "");
			goto Lbo;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(250,"cNeg cTanh", "cTanh cNeg", "");
			goto Lli;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(186,
				"x cTanh",
				"[fp_tanh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Llj;
		}
		goto Default0;
	TailCall_cTrunc:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cTrunc:
		switch(ByteCodePtr[0])
		{
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(136,
				"x cTrunc",
				"[fp_trunc(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Llk;
		default:
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(403,
					"A[IsAlwaysIntegerOpcode(A)] cTrunc",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	default: Default0:;
		A = opcode;
		if(IsVarOpcode(A)&&mData->mByteCode.size()>0)
		{
			B = ByteCodePtr[0];
			if(B==A)
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(491,
					"B[B==A] A[IsVarOpcode(A)&&mData->mByteCode.size()>0]",
					"B cDup",
					"    with A = " << FP_TRACE_OPCODENAME(A)
					    << ", B = " << FP_TRACE_OPCODENAME(B)
					    << "\n");
				/* ByteCodePtr[0] = B; */ // redundant, matches B @ 1
				goto Lll;
			}
		}
		if(IsUnaryOpcode(A))
		{
			B = ByteCodePtr[0];
			if(IsVarOpcode(B)&&mData->mByteCode.size()>1)
			{
				C = ByteCodePtr[-1];
				if(C==A)
				{
					D = ByteCodePtr[-2];
					if(D==B)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(492,
							"D[D==B] C[C==A] B[IsVarOpcode(B)&&mData->mByteCode.size()>1] A[IsUnaryOpcode(A)]",
							"D C cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", C = " << FP_TRACE_OPCODENAME(C)
							    << ", D = " << FP_TRACE_OPCODENAME(D)
							    << "\n");
						/* ByteCodePtr[-2] = D; */ // redundant, matches D @ 3
						/* ByteCodePtr[-1] = C; */ // redundant, matches C @ 2
						goto Llm;
					}
				}
			}
		}
		C = opcode;
		if(IsCommutativeOrParamSwappableBinaryOpcode(C))
		{
			switch(ByteCodePtr[0])
			{
			case cSin:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A)&&mData->mByteCode.size()>3)
				{
					if(ByteCodePtr[-2] == cCos)
					{
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(521,
								"B[B==A] cCos A[IsVarOpcode(A)&&mData->mByteCode.size()>3] cSin C[IsCommutativeOrParamSwappableBinaryOpcode(C)]",
								"B cSinCos {GetParamSwappedBinaryOpcode(C)}",
								"    with C = " << FP_TRACE_OPCODENAME(C)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lln;
						}
					}
				}
				break;
			case cSinh:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A)&&mData->mByteCode.size()>3)
				{
					if(ByteCodePtr[-2] == cCosh)
					{
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(522,
								"B[B==A] cCosh A[IsVarOpcode(A)&&mData->mByteCode.size()>3] cSinh C[IsCommutativeOrParamSwappableBinaryOpcode(C)]",
								"B cSinhCosh {GetParamSwappedBinaryOpcode(C)}",
								"    with C = " << FP_TRACE_OPCODENAME(C)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Llo;
						}
					}
				}
				break;
			}
		}
	}
	goto Laa;
Laa: mData->mByteCode.push_back(opcode); return;
Lab: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Llp: FP_TRACE_BYTECODE_ADD(cAbs);
     goto TailCall_cAbs;
Lac: ImmedPtr[0] = fp_abs(x); return;
Lad: ImmedPtr[0] = fp_acos(x); return;
Lae: ImmedPtr[0] = fp_acosh(x); return;
Laf: mData->mImmed.push_back(Value_t(4));
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
Llq: opcode = cMul;
Llr: FP_ReDefinePointers();
Lma: FP_TRACE_BYTECODE_ADD(cMul);
     goto TailCall_cMul;
Lag: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(Value_t(4));
Lmb: mData->mByteCode.push_back(cImmed); goto Llq;
Lah: ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
Lfe: opcode = cMul; goto Lma;
Lai: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSub;
Lmc: FP_TRACE_BYTECODE_ADD(cSub);
     goto TailCall_cSub;
Laj: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lmd: FP_ReDefinePointers();
Lme: FP_TRACE_BYTECODE_ADD(cAdd);
     goto TailCall_cAdd;
Lak: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Lmf: AddFunctionOpcode(cAdd);
Lmg: opcode = cRSub;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cRSub);
     goto TailCall_cRSub;
Lal: ImmedPtr[0] = -x;
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lmf;
Lam: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lmg;
Lan: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lmh: AddFunctionOpcode(cAdd);
Lmi: AddFunctionOpcode(B);
Lmj: opcode = cSub;
     FP_ReDefinePointers(); goto Lmc;
Lao: ImmedPtr[0] = -x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lmh;
Lap: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lmi;
Laq: ImmedPtr[-1] = y+x;
Lar: mData->mImmed.pop_back();
Lbo: mData->mByteCode.pop_back(); return;
Lba: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lmf;
Lbb: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lmf;
Lbc: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cNotNot;
     FP_TRACE_BYTECODE_ADD(cNotNot);
     goto TailCall_cNotNot;
Lbd: ImmedPtr[-1] = fp_and(x,y); goto Lar;
Lbe: ImmedPtr[0] = fp_arg(x); return;
Lbf: ImmedPtr[0] = fp_asin(x); return;
Lbg: ImmedPtr[0] = fp_asinh(x); return;
Lbh: ImmedPtr[0] = fp_atan(x); return;
Lbi: ImmedPtr[-1] = fp_atan2(y,x); goto Lar;
Lbj: ImmedPtr[0] = fp_atanh(x); return;
Lbk: ImmedPtr[0] = fp_cbrt(x); return;
Lbl: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cCeil);
Lmk: AddFunctionOpcode(A);
     AddFunctionOpcode(B);
Lml: opcode = cAdd; goto Lmd;
Lbm: mData->mByteCode.pop_back();
     AddFunctionOpcode(cFloor);
Lmm: opcode = cNeg;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cNeg);
     goto TailCall_cNeg;
Lbn: ImmedPtr[0] = fp_ceil(x); return;
Lbp: ImmedPtr[0] = fp_conj(x); return;
Lbq: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSqr);
     mData->mImmed.push_back(Value_t(1));
Lmn: mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cAdd);
Lmo: opcode = cRSqrt;
     FP_ReDefinePointers();
Lmp: FP_TRACE_BYTECODE_ADD(cRSqrt);
     goto TailCall_cRSqrt;
Lbr: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lmq: FP_TRACE_BYTECODE_ADD(cCos);
     goto TailCall_cCos;
Lca: ImmedPtr[0] = fp_cos(x); return;
Lcb: ByteCodePtr[0] = cDup;
Lmr: opcode = cInv;
Lna: FP_TRACE_BYTECODE_ADD(cInv);
     goto TailCall_cInv;
Lcc: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinCos); return;
Lcd: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSqr);
Lnb: mData->mImmed.push_back(Value_t(1));
Lnc: mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cAdd);
Lnd: opcode = cSqrt;
     FP_ReDefinePointers();
Lne: FP_TRACE_BYTECODE_ADD(cSqrt);
     goto TailCall_cSqrt;
Lce: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     FP_TRACE_BYTECODE_ADD(cCosh);
     goto TailCall_cCosh;
Lcf: ImmedPtr[0] = fp_cosh(x); return;
Lcg: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinhCosh); return;
Lch: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSqr);
     AddFunctionOpcode(cInv); goto Lnb;
Lci: ImmedPtr[0] = RadiansToDegrees(x); return;
Lcj: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSec); goto Llq;
Lck: mData->mByteCode.pop_back();
     AddFunctionOpcode(cTan); goto Llq;
Lcl: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSin); goto Llq;
Lcm: mData->mImmed.push_back(Value_t());
     ByteCodePtr[0] = cImmed;
Lnf: AddFunctionOpcode(cMul);
     mData->mImmed.push_back(Value_t(1));
Lng: mData->mByteCode.push_back(cImmed); goto Lml;
Lcn: mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     AddFunctionOpcode(cExp); goto Llq;
Lco: mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     AddFunctionOpcode(cExp2); goto Llq;
Lcp: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lfe;
Lcq: mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     AddFunctionOpcode(cPow); goto Llq;
Lcr: mData->mByteCode.pop_back();
     AddFunctionOpcode(cCos); goto Llq;
Lda: mData->mByteCode.pop_back();
     AddFunctionOpcode(cCsc); goto Llq;
Ldb: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cTan;
Lnh: FP_TRACE_BYTECODE_ADD(cTan);
     goto TailCall_cTan;
Ldc: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cTanh;
Lni: FP_TRACE_BYTECODE_ADD(cTanh);
     goto TailCall_cTanh;
Ldd: mData->mByteCode.pop_back();
     AddFunctionOpcode(cCot); goto Llq;
Lde: ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lnj: FP_TRACE_BYTECODE_ADD(cDiv);
     goto TailCall_cDiv;
Ldf: ImmedPtr[-1] = y/x; goto Lar;
Ldg: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Lnk: opcode = cDeg;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cDeg);
     goto TailCall_cDeg;
Ldh: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Lnl: opcode = cRad;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cRad);
     goto TailCall_cRad;
Ldi: ImmedPtr[-1] = y/x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Llq;
Ldj: ImmedPtr[0] = Value_t(1)/x; goto Lfe;
Ldk: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cMul);
Lnm: FP_ReDefinePointers(); goto Lnj;
Ldl: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed);
Lnn: opcode = cRDiv;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cRDiv);
     goto TailCall_cRDiv;
Ldm: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(B); goto Lnn;
Ldn: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lno: FP_TRACE_BYTECODE_ADD(cEqual);
     goto TailCall_cEqual;
Ldo: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     opcode = cNot;
     FP_ReDefinePointers();
Lnp: FP_TRACE_BYTECODE_ADD(cNot);
     goto TailCall_cNot;
Ldp: ImmedPtr[-1] = fp_equal(y,x); goto Lar;
Ldq: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cExp);
     mData->mImmed.push_back(fp_exp(x)); goto Lmb;
Ldr: ImmedPtr[0] = fp_exp(x); return;
Lea: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cExp2);
     mData->mImmed.push_back(fp_exp2(x)); goto Lmb;
Leb: ImmedPtr[0] = fp_exp2(x); return;
Lec: mData->mImmed.push_back(fp_log(Value_t(2)));
     mData->mByteCode.push_back(cImmed);
Lnq: AddFunctionOpcode(cMul);
     opcode = cExp;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cExp);
     goto TailCall_cExp;
Led: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cFloor); goto Lmk;
Lee: mData->mByteCode.pop_back();
     AddFunctionOpcode(cCeil); goto Lmm;
Lef: ImmedPtr[0] = fp_floor(x); return;
Leg: ImmedPtr[-1] = fp_less(x,y); goto Lar;
Leh: ImmedPtr[-1] = fp_lessOrEq(x,y); goto Lar;
Lei: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cSqr);
     mData->mImmed.push_back(x*x); goto Lnc;
Lej: ImmedPtr[0] = fp_imag(x); return;
Lek: mData->mImmed.push_back(Value_t()); goto Lmb;
Lel: ImmedPtr[0] = fp_int(x); return;
Lem: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSec;
     FP_TRACE_BYTECODE_ADD(cSec);
     goto TailCall_cSec;
Len: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSin;
Lnr: FP_TRACE_BYTECODE_ADD(cSin);
     goto TailCall_cSin;
Leo: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr);
     mData->mImmed.push_back(x*x); goto Lmn;
Lep: mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     opcode = cPow;
Loa: FP_ReDefinePointers();
Lob: FP_TRACE_BYTECODE_ADD(cPow);
     goto TailCall_cPow;
Leq: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSqrt; goto Lne;
Ler: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cCos; goto Lmq;
Lfa: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cCsc;
     FP_TRACE_BYTECODE_ADD(cCsc);
     goto TailCall_cCsc;
Lfb: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cRSqrt; goto Lmp;
Lfc: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Loc: opcode = cCot;
     FP_TRACE_BYTECODE_ADD(cCot);
     goto TailCall_cCot;
Lfd: ImmedPtr[0] = Value_t(1)/x; return;
Lff: ImmedPtr[-1] = fp_less(y,x); goto Lar;
Lfg: ImmedPtr[-1] = fp_lessOrEq(y,x); goto Lar;
Lfh: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cLog);
     mData->mImmed.push_back(fp_log(x)); goto Lng;
Lfi: ImmedPtr[0] = fp_log(x); return;
Lfj: mData->mImmed.push_back(fp_log10(fp_const_e<Value_t>()));
Lod: ByteCodePtr[0] = cImmed; goto Llq;
Lfk: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cLog10);
     mData->mImmed.push_back(fp_log10(x)); goto Lng;
Lfl: ImmedPtr[0] = fp_log10(x); return;
Lfm: mData->mImmed.push_back(fp_log2(fp_const_e<Value_t>())); goto Lod;
Lfn: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cLog2);
     mData->mImmed.push_back(fp_log2(x)); goto Lng;
Lfo: ImmedPtr[0] = fp_log2(x); return;
Lfp: ImmedPtr[-1] = fp_max(x,y); goto Lar;
Lfq: ImmedPtr[-1] = fp_min(x,y); goto Lar;
Lfr: ImmedPtr[-1] = fp_mod(y,x); goto Lar;
Lga: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 3; goto Loc;
Lgb: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSqr;
Loe: FP_TRACE_BYTECODE_ADD(cSqr);
     goto TailCall_cSqr;
Lgc: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cDiv; goto Lnj;
Lgd: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr); goto Lmm;
Lge: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr);
     AddFunctionOpcode(cMul); goto Lmm;
Lgf: ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
     opcode = cPow; goto Lob;
Lgg: ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2; goto Lma;
Lgh: ImmedPtr[-1] = x;
Lof: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Llr;
Lgi: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
Log: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Loh: AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
Loi: mData->mByteCode.push_back(cImmed); goto Llr;
Lgj: mData->mImmed.pop_back(); goto Log;
Lgk: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(B); goto Loh;
Lgl: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Loh;
Lgm: ByteCodePtr[-1] = cImmed; goto Lbo;
Lgn: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lma;
Lgo: mData->mImmed.pop_back();
Loj: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} return;
Lgp: ImmedPtr[0] = x+x; goto Lgg;
Lgq: ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     mData->mImmed.push_back(y*x);
     mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cMul); goto Lml;
Lgr: ImmedPtr[-1] = x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(y*x); goto Lng;
Lha: ImmedPtr[0] = RadiansToDegrees(x); goto Lgn;
Lhb: ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lok: AddFunctionOpcode(cMul);
Lol: AddFunctionOpcode(B);
     opcode = cDiv; goto Lnm;
Lhc: ImmedPtr[0] = -x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lok;
Lhd: ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lol;
Lhe: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();} goto Llr;
Lhf: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(x+x); goto Loi;
Lhg: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();} goto Loj;
Lhh: ImmedPtr[-1] = y*x; goto Lof;
Lhi: ImmedPtr[0] = -x; goto Lgn;
Lhj: ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Lom: AddFunctionOpcode(cMul); goto Lnn;
Lhk: ImmedPtr[0] = -x;
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lom;
Lhl: ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lnn;
Lhm: ImmedPtr[0] = DegreesToRadians(x); goto Lgn;
Lhn: ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     mData->mImmed.push_back(y*x);
     mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cMul); goto Lmj;
Lho: ImmedPtr[-1] = y*x; goto Lar;
Lhp: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lmm;
Lhq: ByteCodePtr[0] = cDup;
     ImmedPtr -= 1;
     mData->mImmed.pop_back();
Lon: opcode = cAdd; goto Lme;
Lhr: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lnk;
Lia: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lnl;
Lib: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lok;
Lic: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Loo: AddFunctionOpcode(cSqr); goto Llr;
Lid: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lom;
Lie: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lom;
Lif: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Loo;
Lig: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lop: FP_TRACE_BYTECODE_ADD(cNEqual);
     goto TailCall_cNEqual;
Lih: ImmedPtr[-1] = fp_nequal(y,x); goto Lar;
Lii: ImmedPtr[0] = -x; goto Lcp;
Lij: ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     opcode = cSin;
     FP_ReDefinePointers(); goto Lnr;
Lik: ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     opcode = cSinh;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cSinh);
     goto TailCall_cSinh;
Lil: ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     opcode = cTan;
     FP_ReDefinePointers(); goto Lnh;
Lim: ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     opcode = cTanh;
     FP_ReDefinePointers(); goto Lni;
Lin: ImmedPtr[0] = -x; return;
Lio: mData->mByteCode.pop_back();
     AddFunctionOpcode(cAbsNot); return;
Lip: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cNEqual; goto Lop;
Liq: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cLessOrEq;
     FP_TRACE_BYTECODE_ADD(cLessOrEq);
     goto TailCall_cLessOrEq;
Lir: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cLess;
     FP_TRACE_BYTECODE_ADD(cLess);
     goto TailCall_cLess;
Lja: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cGreaterOrEq;
     FP_TRACE_BYTECODE_ADD(cGreaterOrEq);
     goto TailCall_cGreaterOrEq;
Ljb: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cGreater;
     FP_TRACE_BYTECODE_ADD(cGreater);
     goto TailCall_cGreater;
Ljc: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cEqual; goto Lno;
Ljd: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lnp;
Lje: ImmedPtr[0] = fp_not(x); return;
Ljf: ImmedPtr[-1] = fp_or(x,y); goto Lar;
Ljg: ImmedPtr[-1] = fp_polar(x,y); goto Lar;
Ljh: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back(); goto Lnq;
Lji: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cMul);
     opcode = cExp2;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cExp2);
     goto TailCall_cExp2;
Ljj: ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Loa;
Ljk: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cMul); goto Loa;
Ljl: ImmedPtr[0] = Value_t(); goto Lnf;
Ljm: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lnd;
Ljn: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     opcode = cCbrt;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cCbrt);
     goto TailCall_cCbrt;
Ljo: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cCbrt);
Loq: opcode = cInv;
     FP_ReDefinePointers(); goto Lna;
Ljp: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lmo;
Ljq: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Loq;
Ljr: ImmedPtr[0] = x+x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lob;
Lka: ImmedPtr[-1] = fp_pow(y,x); goto Lar;
Lkb: mData->mByteCode.pop_back();
     AddFunctionOpcode(cTanh); goto Loq;
Lkc: mData->mByteCode.pop_back();
     AddFunctionOpcode(cInv);
     opcode = cAbs;
     FP_ReDefinePointers(); goto Llp;
Lkd: mData->mImmed.push_back(Value_t()); goto Lod;
Lke: ImmedPtr[0] = DegreesToRadians(x); goto Lcp;
Lkf: ImmedPtr[0] = DegreesToRadians(x); return;
Lkg: ImmedPtr[0] = fp_real(x); return;
Lkh: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinCos); goto Loq;
Lki: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSin); goto Lmm;
Lkj: ImmedPtr[0] = fp_sin(x); return;
Lkk: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSqr);
     mData->mImmed.push_back(Value_t(-1)); goto Lnc;
Lkl: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSinh); goto Lmm;
Lkm: ImmedPtr[0] = fp_sinh(x); return;
Lkn: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Loe;
Lko: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lmr;
Lkp: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
Lor: opcode = cHypot;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cHypot);
     goto TailCall_cHypot;
Lkq: for(unsigned tmp=5; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(B); goto Lor;
Lkr: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cAbs; goto Llp;
Lla: ImmedPtr[0] = fp_sqrt(x); return;
Llb: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lon;
Llc: ImmedPtr[-1] = y-x; goto Lar;
Lld: ImmedPtr[0] = -x; goto Lon;
Lle: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cAdd);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lmg;
Llf: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cSub); goto Lmg;
Llg: mData->mByteCode.pop_back();
     AddFunctionOpcode(cTan); goto Lmm;
Llh: ImmedPtr[0] = fp_tan(x); return;
Lli: mData->mByteCode.pop_back();
     AddFunctionOpcode(cTanh); goto Lmm;
Llj: ImmedPtr[0] = fp_tanh(x); return;
Llk: ImmedPtr[0] = fp_trunc(x); return;
Lll: mData->mByteCode.push_back(cDup); return;
Llm: ByteCodePtr[0] = cDup; return;
Lln: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinCos);
Lpa: AddFunctionOpcode(GetParamSwappedBinaryOpcode(C)); return;
Llo: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinhCosh); goto Lpa;
return;
// This list of dummy gotos is here to inhibit
// compiler warnings on unused labels
goto TailCall_cAcos;goto TailCall_cAcosh;goto TailCall_cAnd;
goto TailCall_cArg;goto TailCall_cAsin;goto TailCall_cAsinh;
goto TailCall_cAtan;goto TailCall_cAtan2;goto TailCall_cAtanh;
goto TailCall_cCeil;goto TailCall_cConj;goto TailCall_cFloor;
goto TailCall_cImag;goto TailCall_cInt;goto TailCall_cLog;
goto TailCall_cLog10;goto TailCall_cLog2;goto TailCall_cMax;
goto TailCall_cMin;goto TailCall_cMod;goto TailCall_cOr;
goto TailCall_cPolar;goto TailCall_cRDiv;goto TailCall_cRad;
goto TailCall_cReal;goto TailCall_cSec;goto TailCall_cSin;
goto TailCall_cSinh;goto TailCall_cSqrt;goto TailCall_cSub;
goto TailCall_cTan;goto TailCall_cTanh;goto TailCall_cTrunc;
#endif

#undef FP_ReDefinePointers
#undef FP_TRACE_BYTECODE_OPTIMIZATION
#undef FP_TRACE_OPCODENAME
