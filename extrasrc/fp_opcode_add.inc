/* Function Parser for C++ v5.0.0   

  NOTE:
  Do not include this file in your project. The fparser.cc file #includes
this file internally and thus you don't need to do anything (other than keep
this file in the same directory as fparser.cc).

  This file contains generated code and is thus not intended to be to
be modified by hand. It was generated by util/bytecoderules_parser, which
is available in the development package.
*/
//#define FP_BYTECODE_TRACE

#define HasInvalidRangesOpcode HasInvalidRangesOpcode<IsComplexType<Value_t>::value>

#define FP_BYTECODEADD_BYTECODEPTR \
	(!mData->mByteCode.empty() ? &mData->mByteCode[0] + mData->mByteCode.size() - 1 : nullptr)
#define FP_BYTECODEADD_IMMEDPTR \
	(!mData->mImmed.empty()    ? &mData->mImmed[0]    + mData->mImmed.size()    - 1 : nullptr)

#ifdef FP_BYTECODE_TRACE
# define FP_TRACE_OPCODENAME(op) \
    (op < VarBegin \
        ? FP_GetOpcodeName(OPCODE(op)) \
        : findName(mData->mNamePtrs,op,NameData<Value_t>::VARIABLE))

# define FP_TRACE_BYTECODE_OPTIMIZATION(srcline,from,to,with) \
    std::cout.precision(100); \
    std::cout << "Changing \"" from "\"\t(line " #srcline ")\n" \
                   "    into \"" to "\"\n" with << std::flush
# define FP_TRACE_BYTECODE_DETAIL() \
                   ", bytecode length " << mData->mByteCode.size() \
                << ", stack ptr " << mStackPtr \
                << ", stack size " << mData->mStackSize \
                << ", pointer is " << (void*)FP_BYTECODEADD_BYTECODEPTR \
                << ", code is " << (mData->mByteCode.empty() \
                                       ? (void*)0 \
                                       : (void*)&mData->mByteCode[0]) \
                << std::endl
# define FP_TRACE_BYTECODE_ADD(opcode) \
    std::cout << "Adding opcode: " << FP_TRACE_OPCODENAME(opcode) \
              << FP_TRACE_BYTECODE_DETAIL()
# define FP_TRACE_BYTECODE_ADD_IMMED(value) \
    std::cout << "Adding opcode: cImmed: " << value \
              << FP_TRACE_BYTECODE_DETAIL()
# define FP_TRACE_BYTECODE_MOD_IMMED(value) \
    std::cout << "Immed (" #value << ") changed to: " << value << std::endl
# define FP_TRACE_BYTECODE_ADD_VAR(index) \
    std::cout << "Adding opcode: cVar" << index \
              << FP_TRACE_BYTECODE_DETAIL()
# define FP_TRACE_BYTECODE_RETRACT() \
    std::cout << "Retracting last opcode" \
              << FP_TRACE_BYTECODE_DETAIL()
#else
# define FP_TRACE_BYTECODE_OPTIMIZATION(srcline,from,to,with)
# define FP_TRACE_BYTECODE_ADD(opcode)
# define FP_TRACE_BYTECODE_ADD_IMMED(value)
# define FP_TRACE_BYTECODE_MOD_IMMED(value)
# define FP_TRACE_BYTECODE_ADD_VAR(index)
# define FP_TRACE_BYTECODE_RETRACT()
#endif
  unsigned* ByteCodePtr;
  Value_t*   ImmedPtr;

  #define FP_ReDefinePointers() \
    ByteCodePtr = FP_BYTECODEADD_BYTECODEPTR; \
    ImmedPtr    = FP_BYTECODEADD_IMMEDPTR;
  FP_ReDefinePointers();
  FP_TRACE_BYTECODE_ADD(opcode);

#if(!(FP_COMPLEX_VERSION) && !(FP_FLOAT_VERSION))
	Value_t x;
	unsigned A;
	unsigned B;
	Value_t y;
	Value_t a;
	unsigned C;
	Value_t b;
	unsigned D;
	switch(opcode)
	{
	TailCall_cAbs:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAbs:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(237,"cNeg cAbs", "cAbs", "");
			/* opcode = cAbs; */ // redundant, matches cAbs @ 0
			goto Lab;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(168,
				"x cAbs",
				"[fp_abs(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lac;
		default:
			A = ByteCodePtr[0];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(250,
					"A[IsNeverNegativeValueOpcode(A)] cAbs",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cAdd:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAdd:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cDup)
			{
				A = ByteCodePtr[-2];
				if(IsVarOpcode(A))
				{
					switch(ByteCodePtr[-3])
					{
					case cAdd:
						if(ByteCodePtr[-4] == cDup)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(277,
								"cDup cAdd A[IsVarOpcode(A)] cDup cAdd cAdd",
								"[DO_STACKPLUS2] [2] A [2] cFmma",
								"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
							incStackPtr(2);
							mStackPtr -= 2;
							goto Lad;
						}
						break;
					case cMul:
						FP_TRACE_BYTECODE_OPTIMIZATION(275,
							"cMul A[IsVarOpcode(A)] cDup cAdd cAdd",
							"[DO_STACKPLUS2] A [2] cFmma",
							"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
						incStackPtr(2);
						mStackPtr -= 2;
						goto Lae;
					}
				}
			}
			goto Default1;
		case cDup:
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(375,"cDup cAdd cDup cAdd", "[Value_t(4)] cMul", "");
					goto Laf;
				}
				break;
			case cMul:
				if(ByteCodePtr[-2] == cAdd)
				{
					if(ByteCodePtr[-3] == cDup)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(376,"cDup cAdd cMul cDup cAdd", "cMul [Value_t(4)] cMul", "");
						goto Lag;
					}
				}
				break;
			}
			goto Default1;
		case cMul:
			switch(ByteCodePtr[-1])
			{
			case cImmed:
				x = ImmedPtr[0];
				switch(ByteCodePtr[-2])
				{
				case cDup:
					FP_TRACE_BYTECODE_OPTIMIZATION(378,
						"cDup x cMul cAdd",
						"[x+Value_t(1)] cMul",
						"    with x = " << x << "\n");
					goto Lah;
				default:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						switch(ByteCodePtr[-3])
						{
						case cAdd:
							if(ByteCodePtr[-4] == cDup)
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(279,
									"cDup cAdd A[IsVarOpcode(A)] x cMul cAdd",
									"[DO_STACKPLUS2] [2] A [x] cFmma",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << "\n");
								incStackPtr(2);
								mStackPtr -= 2;
								goto Lai;
							}
							break;
						case cMul:
							FP_TRACE_BYTECODE_OPTIMIZATION(274,
								"cMul A[IsVarOpcode(A)] x cMul cAdd",
								"[DO_STACKPLUS2] [x] A cFmma",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							incStackPtr(2);
							mStackPtr -= 2;
							goto Laj;
						}
					}
				}
				break;
			default:
				B = ByteCodePtr[-1];
				if(IsVarOpcode(B))
				{
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						if(ByteCodePtr[-3] == cMul)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(271,
								"cMul A[IsVarOpcode(A)] B[IsVarOpcode(B)] cMul cAdd",
								"A [DO_STACKPLUS2] B cFmma",
								"    with B = " << FP_TRACE_OPCODENAME(B)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							incStackPtr(2);
							mStackPtr -= 2;
							goto Lak;
						}
					}
				}
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						switch(ByteCodePtr[-3])
						{
						case cAdd:
							if(ByteCodePtr[-4] == cDup)
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(280,
									"cDup cAdd x A[IsVarOpcode(A)] cMul cAdd",
									"[DO_STACKPLUS2] [2] A [x] cFmma",
									"    with A = " << FP_TRACE_OPCODENAME(A)
									    << ", x = " << x
									    << "\n");
								incStackPtr(2);
								mStackPtr -= 2;
								goto Lai;
							}
							break;
						case cMul:
							FP_TRACE_BYTECODE_OPTIMIZATION(273,
								"cMul x A[IsVarOpcode(A)] cMul cAdd",
								"[DO_STACKPLUS2] [x] A cFmma",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", x = " << x
								    << "\n");
							incStackPtr(2);
							mStackPtr -= 2;
							goto Laj;
						}
					}
				}
			}
			goto Default1;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(235,"cNeg cAdd", "cSub", "");
			goto Lal;
		case cImmed:
			x = ImmedPtr[0];
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(155,
						"y cAdd x cAdd",
						"[y+x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cAdd; */ // redundant, matches cAdd @ 0
					goto Lam;
				}
				break;
			case cFma:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(158,
						"y cFma x cAdd",
						"[y+x] cFma",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lan;
				}
				break;
			case cMul:
				FP_TRACE_BYTECODE_OPTIMIZATION(270,
					"cMul x cAdd",
					"[DO_STACKPLUS1] [x] cFma",
					"    with x = " << x << "\n");
				incStackPtr(1);
				mStackPtr -= 1;
				/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
				goto Lao;
			case cRSub:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(363,
							"y cAdd cRSub x cAdd",
							"[ y+x] cAdd cRSub",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lap;
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(364,
						"cNeg cRSub x cAdd",
						"[-x] cAdd cRSub",
						"    with x = " << x << "\n");
					goto Laq;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(362,
						"y cRSub x cAdd",
						"[ y+x] cRSub",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lar;
				}
				break;
			case cSub:
				B = ByteCodePtr[-2];
				if(IsVarOpcode(B))
				{
					switch(ByteCodePtr[-3])
					{
					case cAdd:
						if(ByteCodePtr[-4] == cImmed)
						{
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(357,
								"y cAdd B[IsVarOpcode(B)] cSub x cAdd",
								"[ y+x] cAdd B cSub",
								"    with x = " << x
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-4] = cImmed; */ // redundant, matches y @ 5
							goto Las;
						}
						break;
					case cNeg:
						FP_TRACE_BYTECODE_OPTIMIZATION(358,
							"cNeg B[IsVarOpcode(B)] cSub x cAdd",
							"[-x] cAdd B cSub",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						goto Lat;
					case cImmed:
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(356,
							"y B[IsVarOpcode(B)] cSub x cAdd",
							"[ y+x] B cSub",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lba;
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(128,
					"y x cAdd",
					"[y+x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbb;
			}
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(60,
					"x[x==Value_t()] cAdd",
					"",
					"    with x = " << x << "\n");
				goto Lbc;
			}
			break;
		default: Default1:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					FP_TRACE_BYTECODE_OPTIMIZATION(268,
						"cMul A[IsVarOpcode(A)] cAdd",
						"[DO_STACKPLUS1] A cFma",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr(1);
					mStackPtr -= 1;
					goto Lbd;
				case cRSub:
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(355,
							"x cRSub A[IsVarOpcode(A)] cAdd",
							"[DO_STACKPLUS1] A [x] cAdd cRSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						incStackPtr(1);
						mStackPtr -= 1;
						goto Lbe;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(360,
						"cRSub A[IsVarOpcode(A)] cAdd",
						"[DO_STACKPLUS1] A cAdd cRSub",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr(1);
					mStackPtr -= 1;
					goto Lbf;
				}
			}
			B = ByteCodePtr[0];
			if(IsUnaryOpcode(B))
			{
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cMul)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(285,
							"cMul A[IsVarOpcode(A)] B[IsUnaryOpcode(B)] cAdd",
							"[DO_STACKPLUS1] A B cFma",
							"    with B = " << FP_TRACE_OPCODENAME(B)
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						incStackPtr(1);
						mStackPtr -= 1;
						goto Lbg;
					}
				}
			}
		}
		goto Default0;
	TailCall_cAnd:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAnd:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(289,"cDup cAnd", "cNotNot", "");
			goto Lbh;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(145,
					"y x cAnd",
					"[fp_and(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbi;
			}
			break;
		}
		goto Default0;
	TailCall_cDiv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cDiv:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(81,"cDup cDiv", "[Value_t()] cMul [Value_t(1)] cAdd", "");
			goto Lbj;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(153,
						"cNeg x[x!=Value_t()] cDiv",
						"[-x] cDiv",
						"    with x = " << x << "\n");
					/* opcode = cDiv; */ // redundant, matches cDiv @ 0
					goto Lbk;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(126,
						"y x[x!=Value_t()] cDiv",
						"[y/x]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Lbl;
				}
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(59,
					"x[x==Value_t(1)] cDiv",
					"",
					"    with x = " << x << "\n");
				goto Lbc;
			}
			break;
		}
		goto Default0;
	TailCall_cEqual:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				A = ByteCodePtr[-1];
				if(IsLogicalOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(493,
						"A[IsLogicalOpcode(A)] x[x==Value_t(1)] cEqual",
						"A",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					goto Lbc;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(143,
					"y x cEqual",
					"[fp_equal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbm;
			}
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(427,
						"cAbs x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Lbn;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(429,
						"cSqr x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Lbn;
				default:
					A = ByteCodePtr[-1];
					if(IsLogicalOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(495,
							"A[IsLogicalOpcode(A)] x[x==Value_t(0)] cEqual",
							"A cNot",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lbo;
					}
				}
				FP_TRACE_BYTECODE_OPTIMIZATION(483,
					"x[x==Value_t(0)] cEqual",
					"cNot",
					"    with x = " << x << "\n");
				goto Lbo;
			}
		}
		goto Default0;
	TailCall_cFma:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFma:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(281,"cNeg cFma", "cFms", "");
			goto Lbp;
		case cImmed:
			a = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[-1];
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-2];
					FP_TRACE_BYTECODE_OPTIMIZATION(134,
						"y x a cFma",
						"[y*x+a]",
						"    with a = " << a
						    << ", x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lbq;
				}
			}
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(160,
					"x[x==Value_t()] cFma",
					"cMul",
					"    with x = " << x << "\n");
				goto Lbr;
			}
			break;
		}
		goto Default0;
	TailCall_cFmma:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFmma:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(283,"cNeg cFmma", "cFmms", "");
			goto Lbs;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(112,
							"A[IsVarOpcode(A)] cMul x[x==Value_t()] cFmma",
							"[x] cMul cFmma",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cFmma; */ // redundant, matches cFmma @ 0
						goto Lbt;
					}
					goto Default2;
				default: Default2:;
					A = ByteCodePtr[-1];
					if(IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						switch(ByteCodePtr[-2])
						{
						case cImmed:
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(110,
								"y A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
								"[x] cMul cFmma",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cFmma; */ // redundant, matches cFmma @ 0
							goto Lca;
						default:
							B = ByteCodePtr[-2];
							if(IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								switch(ByteCodePtr[-3])
								{
								case cImmed:
									y = ImmedPtr[-1];
									FP_TRACE_BYTECODE_OPTIMIZATION(116,
										"y B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
										"A [x] cMul cFmma",
										"    with x = " << x
										    << ", A = " << FP_TRACE_OPCODENAME(A)
										    << ", B = " << FP_TRACE_OPCODENAME(B)
										    << ", y = " << y
										    << "\n");
									/* opcode = cFmma; */ // redundant, matches cFmma @ 0
									goto Lcb;
								default:
									C = ByteCodePtr[-3];
									if(IsVarOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(114,
											"C[IsVarOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
											"A [x] cMul cFmma",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cFmma; */ // redundant, matches cFmma @ 0
										goto Lcc;
									}
									if(IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(115,
											"C[IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
											"B A [x] cMul cFmma",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cFmma; */ // redundant, matches cFmma @ 0
										goto Lcd;
									}
								}
							}
							if(IsVarOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(106,
									"B[IsVarOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
									"[x] cMul cFmma",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
								/* opcode = cFmma; */ // redundant, matches cFmma @ 0
								goto Lbt;
							}
							if(IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(108,
									"B[IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
									"A [x] cMul cFmma",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* opcode = cFmma; */ // redundant, matches cFmma @ 0
								goto Lce;
							}
						}
					}
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(102,
							"A[IsVarOpcode(A)] x[x==Value_t()] cFmma",
							"cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						goto Lcf;
					}
					if(IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(104,
							"A[IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
							"[x] cMul cFmma",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cFmma; */ // redundant, matches cFmma @ 0
						goto Lcg;
					}
				}
			}
			b = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				a = ImmedPtr[-1];
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[-2];
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-3];
						FP_TRACE_BYTECODE_OPTIMIZATION(136,
							"y x a b cFmma",
							"[y*x+a*b]",
							"    with b = " << b
							    << ", a = " << a
							    << ", x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lch;
					}
				}
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(161,
					"x[x==Value_t(1)] cFmma",
					"cFma",
					"    with x = " << x << "\n");
				goto Lci;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(162,
					"x[x==Value_t(-1)] cFmma",
					"cFms",
					"    with x = " << x << "\n");
				goto Lcj;
			}
			break;
		}
		goto Default0;
	TailCall_cFmms:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFmms:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(284,"cNeg cFmms", "cFmma", "");
			goto Lck;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(113,
							"A[IsVarOpcode(A)] cMul x[x==Value_t()] cFmms",
							"[x] cMul cFmms",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cFmms; */ // redundant, matches cFmms @ 0
						goto Lcl;
					}
					goto Default3;
				default: Default3:;
					A = ByteCodePtr[-1];
					if(IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						switch(ByteCodePtr[-2])
						{
						case cImmed:
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(111,
								"y A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
								"[x] cMul cFmms",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cFmms; */ // redundant, matches cFmms @ 0
							goto Lcm;
						default:
							B = ByteCodePtr[-2];
							if(IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								switch(ByteCodePtr[-3])
								{
								case cImmed:
									y = ImmedPtr[-1];
									FP_TRACE_BYTECODE_OPTIMIZATION(119,
										"y B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
										"A [x] cMul cFmms",
										"    with x = " << x
										    << ", A = " << FP_TRACE_OPCODENAME(A)
										    << ", B = " << FP_TRACE_OPCODENAME(B)
										    << ", y = " << y
										    << "\n");
									/* opcode = cFmms; */ // redundant, matches cFmms @ 0
									goto Lcn;
								default:
									C = ByteCodePtr[-3];
									if(IsVarOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(117,
											"C[IsVarOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
											"A [x] cMul cFmms",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cFmms; */ // redundant, matches cFmms @ 0
										goto Lco;
									}
									if(IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(118,
											"C[IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
											"B A [x] cMul cFmms",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cFmms; */ // redundant, matches cFmms @ 0
										goto Lcp;
									}
								}
							}
							if(IsVarOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(107,
									"B[IsVarOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
									"[x] cMul cFmms",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
								/* opcode = cFmms; */ // redundant, matches cFmms @ 0
								goto Lcl;
							}
							if(IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(109,
									"B[IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
									"A [x] cMul cFmms",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* opcode = cFmms; */ // redundant, matches cFmms @ 0
								goto Lcq;
							}
						}
					}
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(103,
							"A[IsVarOpcode(A)] x[x==Value_t()] cFmms",
							"cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						goto Lcf;
					}
					if(IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(105,
							"A[IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
							"[x] cMul cFmms",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cFmms; */ // redundant, matches cFmms @ 0
						goto Lcr;
					}
				}
			}
			b = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				a = ImmedPtr[-1];
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[-2];
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-3];
						FP_TRACE_BYTECODE_OPTIMIZATION(137,
							"y x a b cFmms",
							"[y*x-a*b]",
							"    with b = " << b
							    << ", a = " << a
							    << ", x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lcs;
					}
				}
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(163,
					"x[x==Value_t(1)] cFmms",
					"cFms",
					"    with x = " << x << "\n");
				goto Lcj;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(164,
					"x[x==Value_t(-1)] cFmms",
					"cFma",
					"    with x = " << x << "\n");
				goto Lci;
			}
			FP_TRACE_BYTECODE_OPTIMIZATION(52,
				"x cFmms",
				"[-x] cFmma",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lct;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				if(ByteCodePtr[-1] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(54,
						"x A[IsVarOpcode(A)] cFmms",
						"[-x] A cFmms",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", x = " << x
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
					/* opcode = cFmms; */ // redundant, matches cFmms @ 0
					goto Lda;
				}
			}
		}
		goto Default0;
	TailCall_cFms:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFms:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(282,"cNeg cFms", "cFma", "");
			goto Ldb;
		case cImmed:
			a = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[-1];
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-2];
					FP_TRACE_BYTECODE_OPTIMIZATION(135,
						"y x a cFms",
						"[y*x-a]",
						"    with a = " << a
						    << ", x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Ldc;
				}
			}
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(51,
				"x cFms",
				"[-x] cFma",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Ldd;
		}
		goto Default0;
	TailCall_cGreater:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cGreater:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(485,
						"cAbs x[x==Value_t(0)] cGreater",
						"cNotNot",
						"    with x = " << x << "\n");
					goto Lde;
				default:
					A = ByteCodePtr[-1];
					if(IsNeverNegativeValueOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(489,
							"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(0)] cGreater",
							"A cNotNot",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Ldf;
					}
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(141,
					"y x cGreater",
					"[fp_less(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldg;
			}
		}
		goto Default0;
	TailCall_cGreaterOrEq:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cGreaterOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(486,
						"cAbs x[x==Value_t(1)] cGreaterOrEq",
						"cNotNot",
						"    with x = " << x << "\n");
					goto Lde;
				default:
					A = ByteCodePtr[-1];
					if(IsNeverNegativeValueOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(490,
							"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(1)] cGreaterOrEq",
							"A cNotNot",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Ldf;
					}
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(142,
					"y x cGreaterOrEq",
					"[fp_lessOrEq(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldh;
			}
		}
		goto Default0;
	TailCall_cInv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cInv:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(124,
					"x[x!=Value_t()] cInv",
					"[fp_inv(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Ldi;
			}
		}
		goto Default0;
	TailCall_cLess:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLess:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				A = ByteCodePtr[-1];
				if(IsNeverNegativeValueOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(366,
						"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(0)] cLess",
						"A [x] cMul",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
					goto Ldj;
				}
			}
			if(x==Value_t(1))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(487,
						"cAbs x[x==Value_t(1)] cLess",
						"cNot",
						"    with x = " << x << "\n");
					goto Ldk;
				default:
					A = ByteCodePtr[-1];
					if(IsNeverNegativeValueOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(491,
							"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(1)] cLess",
							"A cNot",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lbo;
					}
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(139,
					"y x cLess",
					"[fp_less(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldl;
			}
		}
		goto Default0;
	TailCall_cLessOrEq:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLessOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(488,
						"cAbs x[x==Value_t(0)] cLessOrEq",
						"cNot",
						"    with x = " << x << "\n");
					goto Ldk;
				default:
					A = ByteCodePtr[-1];
					if(IsNeverNegativeValueOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(492,
							"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(0)] cLessOrEq",
							"A cNot",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lbo;
					}
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(140,
					"y x cLessOrEq",
					"[fp_lessOrEq(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldm;
			}
		}
		goto Default0;
	TailCall_cMax:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMax:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(63,"cDup cMax", "", "");
			goto Ldn;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(177,
					"y x cMax",
					"[fp_max(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldo;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(69,
							"B[B==A] cDup A[IsVarOpcode(A)] cMax",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Ldn;
					}
					break;
				case cMax:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(71,
							"B[B==A] cMax A[IsVarOpcode(A)] cMax",
							"B cMax",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMax; */ // redundant, matches cMax @ 2
						goto Ldn;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cMin:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMin:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(62,"cDup cMin", "", "");
			goto Ldn;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(176,
					"y x cMin",
					"[fp_min(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldp;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(68,
							"B[B==A] cDup A[IsVarOpcode(A)] cMin",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Ldn;
					}
					break;
				case cMin:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(70,
							"B[B==A] cMin A[IsVarOpcode(A)] cMin",
							"B cMin",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMin; */ // redundant, matches cMin @ 2
						goto Ldn;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cMod:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMod:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				if(ByteCodePtr[-1] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(127,
						"y x[x!=Value_t()] cMod",
						"[fp_mod(y,x)]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Ldq;
				}
			}
		}
		goto Default0;
	TailCall_cMul:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMul:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(238,"cDup cMul", "cSqr", "");
			goto Ldr;
		case cNeg:
			switch(ByteCodePtr[-1])
			{
			case cDup:
				FP_TRACE_BYTECODE_OPTIMIZATION(541,"cDup cNeg cMul", "cSqr cNeg", "");
				goto Lds;
			default:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cMul)
					{
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(547,
								"B[B==A] cMul A[IsVarOpcode(A)] cNeg cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Ldt;
						}
					}
				}
			}
			goto Default4;
		case cPow:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(379,
						"cDup x cPow cMul",
						"[x+Value_t(1)] cPow",
						"    with x = " << x << "\n");
					goto Lea;
				}
			}
			goto Default4;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(96,
							"A[IsVarOpcode(A)] cMul x[x==Value_t()] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Leb;
					}
					goto Default5;
				default: Default5:;
					A = ByteCodePtr[-1];
					if(IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						switch(ByteCodePtr[-2])
						{
						case cImmed:
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(95,
								"y A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
								"[x] cMul",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lec;
						default:
							B = ByteCodePtr[-2];
							if(IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								switch(ByteCodePtr[-3])
								{
								case cImmed:
									y = ImmedPtr[-1];
									FP_TRACE_BYTECODE_OPTIMIZATION(99,
										"y B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
										"A [x] cMul",
										"    with x = " << x
										    << ", A = " << FP_TRACE_OPCODENAME(A)
										    << ", B = " << FP_TRACE_OPCODENAME(B)
										    << ", y = " << y
										    << "\n");
									/* opcode = cMul; */ // redundant, matches cMul @ 0
									goto Led;
								default:
									C = ByteCodePtr[-3];
									if(IsVarOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(97,
											"C[IsVarOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
											"A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lee;
									}
									if(IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(98,
											"C[IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
											"B A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lef;
									}
								}
							}
							if(IsVarOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(93,
									"B[IsVarOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
									"[x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Leb;
							}
							if(IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(94,
									"B[IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
									"A [x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Leg;
							}
						}
					}
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(91,
							"A[IsVarOpcode(A)] x[x==Value_t()] cMul",
							"[x]",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						goto Leh;
					}
					if(IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(92,
							"A[IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lei;
					}
				}
			}
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				switch(ByteCodePtr[-2])
				{
				case cDup:
					FP_TRACE_BYTECODE_OPTIMIZATION(382,
						"cDup cAdd x cMul",
						"[x+x] cMul",
						"    with x = " << x << "\n");
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Lej;
				case cMul:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(IsVarOpcode(A))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(454,
								"A[IsVarOpcode(A)] y cMul cAdd x cMul",
								"[x] cMul A [y*x] cMul cAdd",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lek;
						}
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(453,
						"y cAdd x cMul",
						"[x] cMul [y*x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lel;
				}
				break;
			case cMul:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cDup)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(384,
							"cDup cAdd cMul x cMul",
							"cMul [x+x] cMul",
							"    with x = " << x << "\n");
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lem;
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					if(y*x==Value_t(1))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(73,
							"y[y*x==Value_t(1)] cMul x cMul",
							"",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Len;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(156,
						"y cMul x cMul",
						"[y*x] cMul",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Leo;
				}
				break;
			case cNeg:
				FP_TRACE_BYTECODE_OPTIMIZATION(150,
					"cNeg x cMul",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Lep;
			case cSub:
				if(ByteCodePtr[-2] == cMul)
				{
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(IsVarOpcode(A))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(455,
								"A[IsVarOpcode(A)] y cMul cSub x cMul",
								"[x] cMul A [y*x] cMul cSub",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Leq;
						}
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(125,
					"y x cMul",
					"[y*x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ler;
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(58,
					"x[x==Value_t(1)] cMul",
					"",
					"    with x = " << x << "\n");
				goto Lbc;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(152,
					"x[x==Value_t(-1)] cMul",
					"cNeg",
					"    with x = " << x << "\n");
				goto Les;
			}
			if(x==Value_t(2))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(234,
					"x[x==Value_t(2)] cMul",
					"cDup cAdd",
					"    with x = " << x << "\n");
				goto Let;
			}
			break;
		default: Default4:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					switch(ByteCodePtr[-2])
					{
					case cNeg:
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(544,
								"B[B==A] cNeg cMul A[IsVarOpcode(A)] cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Ldt;
						}
						goto Default6;
					default: Default6:;
						B = ByteCodePtr[-2];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(535,
								"B[B==A] cMul A[IsVarOpcode(A)] cMul",
								"B cSqr cMul",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lfa;
						}
					}
					goto Default7;
				case cNeg:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(538,
							"B[B==A] cNeg A[IsVarOpcode(A)] cMul",
							"B cSqr cNeg",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lds;
					}
					goto Default7;
				default: Default7:;
					B = ByteCodePtr[-1];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(532,
							"B[B==A] A[IsVarOpcode(A)] cMul",
							"B cSqr",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-1] = B; */ // redundant, matches B @ 2
						goto Ldr;
					}
				}
			}
			if(IsUnaryOpcode(A))
			{
				B = ByteCodePtr[-1];
				if(IsVarOpcode(B)&&mData->mByteCode.size()>1)
				{
					if(ByteCodePtr[-2] == cMul)
					{
						C = ByteCodePtr[-3];
						if(C==A)
						{
							D = ByteCodePtr[-4];
							if(D==B)
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(551,
									"D[D==B] C[C==A] cMul B[IsVarOpcode(B)&&mData->mByteCode.size()>1] A[IsUnaryOpcode(A)] cMul",
									"D C cSqr cMul",
									"    with A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << ", C = " << FP_TRACE_OPCODENAME(C)
									    << ", D = " << FP_TRACE_OPCODENAME(D)
									    << "\n");
								/* ByteCodePtr[-4] = D; */ // redundant, matches D @ 5
								/* ByteCodePtr[-3] = C; */ // redundant, matches C @ 4
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lfb;
							}
						}
					}
				}
			}
		}
		goto Default0;
	TailCall_cNEqual:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				A = ByteCodePtr[-1];
				if(IsLogicalOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(494,
						"A[IsLogicalOpcode(A)] x[x==Value_t(1)] cNEqual",
						"A cNot",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					goto Lbo;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(144,
					"y x cNEqual",
					"[fp_nequal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lfc;
			}
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(428,
						"cAbs x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Lfd;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(430,
						"cSqr x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Lfd;
				default:
					A = ByteCodePtr[-1];
					if(IsLogicalOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(496,
							"A[IsLogicalOpcode(A)] x[x==Value_t(0)] cNEqual",
							"A",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lbc;
					}
				}
				FP_TRACE_BYTECODE_OPTIMIZATION(484,
					"x[x==Value_t(0)] cNEqual",
					"cNotNot",
					"    with x = " << x << "\n");
				goto Ldf;
			}
		}
		goto Default0;
	TailCall_cNeg:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNeg:
		switch(ByteCodePtr[0])
		{
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(151,
					"x cMul cNeg",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Lfe;
			}
			break;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(64,"cNeg cNeg", "", "");
			goto Ldn;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(123,
				"x cNeg",
				"[-x]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lff;
		}
		goto Default0;
	TailCall_cNot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNot:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(292,"cAbs cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Lfg;
		case cAbsNot:
			A = ByteCodePtr[-1];
			if(IsLogicalOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(457,
					"A[IsLogicalOpcode(A)] cAbsNot cNot",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Ldn;
			}
			if(A!=cImmed)
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(458,
					"A[A!=cImmed] cAbsNot cNot",
					"A cAbsNotNot",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Lfh;
			}
			goto Default8;
		case cAbsNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(296,"cAbsNotNot cNot", "cAbsNot", "");
			goto Lfi;
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(498,
					"x cAdd cNot",
					"[-x] cEqual",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Lfj;
			}
			goto Default8;
		case cEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(265,"cEqual cNot", "cNEqual", "");
			goto Lfk;
		case cGreater:
			FP_TRACE_BYTECODE_OPTIMIZATION(263,"cGreater cNot", "cLessOrEq", "");
			goto Lfl;
		case cGreaterOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(264,"cGreaterOrEq cNot", "cLess", "");
			goto Lfm;
		case cLess:
			FP_TRACE_BYTECODE_OPTIMIZATION(261,"cLess cNot", "cGreaterOrEq", "");
			goto Lfn;
		case cLessOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(262,"cLessOrEq cNot", "cGreater", "");
			goto Lfo;
		case cNEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(266,"cNEqual cNot", "cEqual", "");
			goto Lfp;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(291,"cNeg cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Lfg;
		case cNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(294,"cNot cNot", "cNotNot", "");
			goto Lbh;
		case cNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(295,"cNotNot cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Lfg;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(130,
				"x cNot",
				"[fp_not(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lfq;
		default: Default8:;
			A = ByteCodePtr[0];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(459,
					"A[IsNeverNegativeValueOpcode(A)] cNot",
					"A cAbsNot",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				goto Lfr;
			}
		}
		goto Default0;
	TailCall_cNotNot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNotNot:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(497,
					"x cAdd cNotNot",
					"[-x] cNEqual",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Lfs;
			}
			break;
		case cNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(297,"cNot cNotNot", "cNot", "");
			/* ByteCodePtr[0] = cNot; */ // redundant, matches cNot @ 1
			return;
		}
		goto Default0;
	TailCall_cOr:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cOr:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(288,"cDup cOr", "cNotNot", "");
			goto Lbh;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(146,
					"y x cOr",
					"[fp_or(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lft;
			}
			break;
		}
		goto Default0;
	TailCall_cRDiv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRDiv:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(333,
					"x[x==Value_t(1)] cRDiv",
					"cInv",
					"    with x = " << x << "\n");
				goto Lga;
			}
		}
		goto Default0;
	TailCall_cRSub:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRSub:
		if(ByteCodePtr[0] == cDup)
		{
			FP_TRACE_BYTECODE_OPTIMIZATION(80,"cDup cRSub", "[Value_t()] cMul", "");
			goto Lgb;
		}
		goto Default0;
	TailCall_cSqr:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSqr:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(240,"cAbs cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Lgc;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(239,"cNeg cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Lgc;
		default:
			A = ByteCodePtr[0];
			if(IsComparisonOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(599,
					"A[IsComparisonOpcode(A)] cSqr",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cSub:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSub:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cDup)
			{
				A = ByteCodePtr[-2];
				if(IsVarOpcode(A))
				{
					switch(ByteCodePtr[-3])
					{
					case cAdd:
						if(ByteCodePtr[-4] == cDup)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(278,
								"cDup cAdd A[IsVarOpcode(A)] cDup cAdd cSub",
								"[DO_STACKPLUS2] [2] A [-2] cFmma",
								"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
							incStackPtr(2);
							mStackPtr -= 2;
							goto Lgd;
						}
						break;
					case cMul:
						FP_TRACE_BYTECODE_OPTIMIZATION(276,
							"cMul A[IsVarOpcode(A)] cDup cAdd cSub",
							"[DO_STACKPLUS2] A [-2] cFmma",
							"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
						incStackPtr(2);
						mStackPtr -= 2;
						goto Lge;
					}
				}
			}
			goto Default9;
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(79,"cDup cSub", "[Value_t()] cMul", "");
			goto Lgb;
		case cMul:
			switch(ByteCodePtr[-1])
			{
			case cImmed:
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(50,
					"x cMul cSub",
					"[-x] cMul cAdd",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Lgf;
			default:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(53,
							"x A[IsVarOpcode(A)] cMul cSub",
							"[-x] A cMul cSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
						/* opcode = cSub; */ // redundant, matches cSub @ 0
						goto Lgg;
					}
				}
				B = ByteCodePtr[-1];
				if(IsVarOpcode(B))
				{
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						if(ByteCodePtr[-3] == cMul)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(272,
								"cMul A[IsVarOpcode(A)] B[IsVarOpcode(B)] cMul cSub",
								"A [DO_STACKPLUS2] B cFmms",
								"    with B = " << FP_TRACE_OPCODENAME(B)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							incStackPtr(2);
							mStackPtr -= 2;
							goto Lgh;
						}
					}
				}
			}
			goto Default9;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(236,"cNeg cSub", "cAdd", "");
			goto Lgi;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(61,
					"x[x==Value_t()] cSub",
					"",
					"    with x = " << x << "\n");
				goto Lbc;
			}
			switch(ByteCodePtr[-1])
			{
			case cFma:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(159,
						"y cFma x cSub",
						"[y-x] cFma",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lgj;
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(129,
					"y x cSub",
					"[y-x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lgk;
			}
			FP_TRACE_BYTECODE_OPTIMIZATION(49,
				"x cSub",
				"[-x] cAdd",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lgl;
		default: Default9:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					FP_TRACE_BYTECODE_OPTIMIZATION(269,
						"cMul A[IsVarOpcode(A)] cSub",
						"[DO_STACKPLUS1] A cFms",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr(1);
					mStackPtr -= 1;
					goto Lgm;
				case cRSub:
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(354,
							"x cRSub A[IsVarOpcode(A)] cSub",
							"A cAdd [x] cRSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Lgn;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(361,
						"cRSub A[IsVarOpcode(A)] cSub",
						"[DO_STACKPLUS1] A cSub cRSub",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr(1);
					mStackPtr -= 1;
					goto Lgo;
				}
			}
			B = ByteCodePtr[0];
			if(IsUnaryOpcode(B))
			{
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cMul)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(286,
							"cMul A[IsVarOpcode(A)] B[IsUnaryOpcode(B)] cSub",
							"[DO_STACKPLUS1] A B cFms",
							"    with B = " << FP_TRACE_OPCODENAME(B)
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						incStackPtr(1);
						mStackPtr -= 1;
						goto Lgp;
					}
				}
			}
		}
		goto Default0;
	default: Default0:;
		A = opcode;
		if(IsComparisonOpcode(A))
		{
			if(ByteCodePtr[0] == cImmed)
			{
				x = ImmedPtr[0];
				switch(ByteCodePtr[-1])
				{
				case cAdd:
					if(ByteCodePtr[-2] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(432,
							"y cAdd x A[IsComparisonOpcode(A)]",
							"[x-y] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
						goto Lgq;
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(433,
						"cNeg x A[IsComparisonOpcode(A)]",
						"[-x] {OppositeComparisonOpcode(A)}",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", x = " << x
						    << "\n");
					goto Lgr;
				}
			}
		}
		if(IsVarOpcode(A)&&mData->mByteCode.size()>0)
		{
			B = ByteCodePtr[0];
			if(B==A)
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(549,
					"B[B==A] A[IsVarOpcode(A)&&mData->mByteCode.size()>0]",
					"B cDup",
					"    with A = " << FP_TRACE_OPCODENAME(A)
					    << ", B = " << FP_TRACE_OPCODENAME(B)
					    << "\n");
				/* ByteCodePtr[0] = B; */ // redundant, matches B @ 1
				goto Lgs;
			}
		}
		if(IsUnaryOpcode(A))
		{
			B = ByteCodePtr[0];
			if(IsVarOpcode(B)&&mData->mByteCode.size()>1)
			{
				C = ByteCodePtr[-1];
				if(C==A)
				{
					D = ByteCodePtr[-2];
					if(D==B)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(550,
							"D[D==B] C[C==A] B[IsVarOpcode(B)&&mData->mByteCode.size()>1] A[IsUnaryOpcode(A)]",
							"D C cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", C = " << FP_TRACE_OPCODENAME(C)
							    << ", D = " << FP_TRACE_OPCODENAME(D)
							    << "\n");
						/* ByteCodePtr[-2] = D; */ // redundant, matches D @ 3
						/* ByteCodePtr[-1] = C; */ // redundant, matches C @ 2
						goto Lgt;
					}
				}
			}
		}
	}
	goto Laa;
Laa: mData->mByteCode.push_back(opcode); return;
Lab: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     FP_TRACE_BYTECODE_ADD(cAbs);
     goto TailCall_cAbs;
Lac: FP_TRACE_BYTECODE_MOD_IMMED(fp_abs(x));
     ImmedPtr[0] = fp_abs(x); return;
Lad: mData->mImmed.push_back(2);
     ByteCodePtr[-4] = cImmed;
Lae: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(2);
Lha: mData->mByteCode.push_back(cImmed);
Lhb: opcode = cFmma;
Lhc: FP_ReDefinePointers();
Lhd: FP_TRACE_BYTECODE_ADD(cFmma);
     goto TailCall_cFmma;
Laf: mData->mImmed.push_back(Value_t(4));
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
Lhe: opcode = cMul;
Lhf: FP_ReDefinePointers();
Lhg: FP_TRACE_BYTECODE_ADD(cMul);
     goto TailCall_cMul;
Lag: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(Value_t(4));
     mData->mByteCode.push_back(cImmed); goto Lhe;
Lah: FP_TRACE_BYTECODE_MOD_IMMED(x+Value_t(1));
     ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
Ldj: opcode = cMul; goto Lhg;
Lai: FP_TRACE_BYTECODE_MOD_IMMED(2);
     ImmedPtr[0] = 2;
     ByteCodePtr[-4] = cImmed;
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x); goto Lha;
Laj: FP_TRACE_BYTECODE_MOD_IMMED(x);
     ImmedPtr[0] = x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lhb;
Lak: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(B); goto Lhb;
Lal: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSub;
Lhh: FP_TRACE_BYTECODE_ADD(cSub);
     goto TailCall_cSub;
Lam: FP_TRACE_BYTECODE_MOD_IMMED(y+x);
     ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lhi: FP_ReDefinePointers();
Lhj: FP_TRACE_BYTECODE_ADD(cAdd);
     goto TailCall_cAdd;
Lan: FP_TRACE_BYTECODE_MOD_IMMED(y+x);
     ImmedPtr[-1] = y+x;
Lhk: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lhl: opcode = cFma;
     FP_ReDefinePointers();
Lhm: FP_TRACE_BYTECODE_ADD(cFma);
     goto TailCall_cFma;
Lao: ByteCodePtr[-1] = cImmed;
Ldb: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lhn: opcode = cFma; goto Lhm;
Lap: FP_TRACE_BYTECODE_MOD_IMMED(y+x);
     ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Lho: AddFunctionOpcode(cAdd);
Lhp: opcode = cRSub;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cRSub);
     goto TailCall_cRSub;
Laq: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lho;
Lar: FP_TRACE_BYTECODE_MOD_IMMED(y+x);
     ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lhp;
Las: FP_TRACE_BYTECODE_MOD_IMMED(y+x);
     ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lhq: AddFunctionOpcode(cAdd);
Lhr: AddFunctionOpcode(B);
Lhs: opcode = cSub;
Lht: FP_ReDefinePointers(); goto Lhh;
Lat: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lhq;
Lba: FP_TRACE_BYTECODE_MOD_IMMED(y+x);
     ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lhr;
Lbb: FP_TRACE_BYTECODE_MOD_IMMED(y+x);
     ImmedPtr[-1] = y+x;
Lbc: mData->mImmed.pop_back();
Ldn: mData->mByteCode.pop_back(); return;
Lbd: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lhl;
Lbe: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lho;
Lbf: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lho;
Lbg: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(B); goto Lhl;
Lbh: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cNotNot;
Lia: FP_TRACE_BYTECODE_ADD(cNotNot);
     goto TailCall_cNotNot;
Lbi: FP_TRACE_BYTECODE_MOD_IMMED(fp_and(x,y));
     ImmedPtr[-1] = fp_and(x,y); goto Lbc;
Lbj: mData->mImmed.push_back(Value_t());
     ByteCodePtr[0] = cImmed;
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(Value_t(1));
Lib: mData->mByteCode.push_back(cImmed);
Lic: opcode = cAdd; goto Lhi;
Lbk: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     FP_TRACE_BYTECODE_ADD(cDiv);
     goto TailCall_cDiv;
Lbl: FP_TRACE_BYTECODE_MOD_IMMED(y/x);
     ImmedPtr[-1] = y/x; goto Lbc;
Lbm: FP_TRACE_BYTECODE_MOD_IMMED(fp_equal(y,x));
     ImmedPtr[-1] = fp_equal(y,x); goto Lbc;
Lbn: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lid: FP_TRACE_BYTECODE_ADD(cEqual);
     goto TailCall_cEqual;
Lbo: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
Lie: opcode = cNot;
     FP_ReDefinePointers();
Lif: FP_TRACE_BYTECODE_ADD(cNot);
     goto TailCall_cNot;
Lbp: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cFms;
Lig: FP_TRACE_BYTECODE_ADD(cFms);
     goto TailCall_cFms;
Lbq: FP_TRACE_BYTECODE_MOD_IMMED(y*x+a);
     ImmedPtr[-2] = y*x+a;
Lih: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} return;
Lbr: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lhe;
Lbs: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cFmms;
Lii: FP_TRACE_BYTECODE_ADD(cFmms);
     goto TailCall_cFmms;
Lbt: ByteCodePtr[-2] = cImmed;
Lij: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lik: AddFunctionOpcode(cMul); goto Lhc;
Lca: FP_TRACE_BYTECODE_MOD_IMMED(x);
     ImmedPtr[-1] = x;
     mData->mImmed.pop_back(); goto Lij;
Lcb: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
Lil: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lim: AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lik;
Lcc: mData->mImmed.pop_back(); goto Lil;
Lcd: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(B); goto Lim;
Lce: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lim;
Lcf: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lhe;
Lcg: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back(); goto Lik;
Lch: FP_TRACE_BYTECODE_MOD_IMMED(y*x+a*b);
     ImmedPtr[-3] = y*x+a*b;
Lin: for(unsigned tmp=3; tmp-->0; ) {mData->mImmed.pop_back();}
Lio: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} return;
Lci: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lhl;
Lcj: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
Lip: opcode = cFms;
     FP_ReDefinePointers(); goto Lig;
Lck: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Liq: opcode = cFmma; goto Lhd;
Lcl: ByteCodePtr[-2] = cImmed;
Lir: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lis: AddFunctionOpcode(cMul);
Lit: FP_ReDefinePointers(); goto Lii;
Lcm: FP_TRACE_BYTECODE_MOD_IMMED(x);
     ImmedPtr[-1] = x;
     mData->mImmed.pop_back(); goto Lir;
Lcn: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
Lja: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Ljb: AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lis;
Lco: mData->mImmed.pop_back(); goto Lja;
Lcp: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(B); goto Ljb;
Lcq: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Ljb;
Lcr: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back(); goto Lis;
Lcs: FP_TRACE_BYTECODE_MOD_IMMED(y*x-a*b);
     ImmedPtr[-3] = y*x-a*b; goto Lin;
Lct: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x; goto Liq;
Lda: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
     mData->mByteCode.pop_back();
     AddFunctionOpcode(A); goto Lit;
Ldc: FP_TRACE_BYTECODE_MOD_IMMED(y*x-a);
     ImmedPtr[-2] = y*x-a; goto Lih;
Ldd: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x; goto Lhn;
Lde: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Ljc: opcode = cNotNot;
     FP_ReDefinePointers(); goto Lia;
Ldf: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Ljc;
Ldg: FP_TRACE_BYTECODE_MOD_IMMED(fp_less(x,y));
     ImmedPtr[-1] = fp_less(x,y); goto Lbc;
Ldh: FP_TRACE_BYTECODE_MOD_IMMED(fp_lessOrEq(x,y));
     ImmedPtr[-1] = fp_lessOrEq(x,y); goto Lbc;
Ldi: FP_TRACE_BYTECODE_MOD_IMMED(fp_inv(x));
     ImmedPtr[0] = fp_inv(x); return;
Ldk: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lie;
Ldl: FP_TRACE_BYTECODE_MOD_IMMED(fp_less(y,x));
     ImmedPtr[-1] = fp_less(y,x); goto Lbc;
Ldm: FP_TRACE_BYTECODE_MOD_IMMED(fp_lessOrEq(y,x));
     ImmedPtr[-1] = fp_lessOrEq(y,x); goto Lbc;
Ldo: FP_TRACE_BYTECODE_MOD_IMMED(fp_max(x,y));
     ImmedPtr[-1] = fp_max(x,y); goto Lbc;
Ldp: FP_TRACE_BYTECODE_MOD_IMMED(fp_min(x,y));
     ImmedPtr[-1] = fp_min(x,y); goto Lbc;
Ldq: FP_TRACE_BYTECODE_MOD_IMMED(fp_mod(y,x));
     ImmedPtr[-1] = fp_mod(y,x); goto Lbc;
Ldr: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSqr;
Ljd: FP_TRACE_BYTECODE_ADD(cSqr);
     goto TailCall_cSqr;
Lds: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr);
Lje: opcode = cNeg;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cNeg);
     goto TailCall_cNeg;
Ldt: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr);
     AddFunctionOpcode(cMul); goto Lje;
Lea: FP_TRACE_BYTECODE_MOD_IMMED(x+Value_t(1));
     ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cPow); return;
Leb: ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2; goto Lhg;
Lec: FP_TRACE_BYTECODE_MOD_IMMED(x);
     ImmedPtr[-1] = x;
Ljf: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lhf;
Led: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
Ljg: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Ljh: AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
Lji: mData->mByteCode.push_back(cImmed); goto Lhf;
Lee: mData->mImmed.pop_back(); goto Ljg;
Lef: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(B); goto Ljh;
Leg: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Ljh;
Leh: ByteCodePtr[-1] = cImmed; goto Ldn;
Lei: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lhg;
Lej: FP_TRACE_BYTECODE_MOD_IMMED(x+x);
     ImmedPtr[0] = x+x; goto Leb;
Lek: FP_TRACE_BYTECODE_MOD_IMMED(x);
     ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     mData->mImmed.push_back(y*x);
     mData->mByteCode.push_back(cImmed);
Ljj: AddFunctionOpcode(cMul); goto Lic;
Lel: FP_TRACE_BYTECODE_MOD_IMMED(x);
     ImmedPtr[-1] = x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(y*x); goto Lib;
Lem: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(x+x); goto Lji;
Len: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();} goto Lio;
Leo: FP_TRACE_BYTECODE_MOD_IMMED(y*x);
     ImmedPtr[-1] = y*x; goto Ljf;
Lep: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x; goto Lei;
Leq: FP_TRACE_BYTECODE_MOD_IMMED(x);
     ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     mData->mImmed.push_back(y*x);
     mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cMul); goto Lhs;
Ler: FP_TRACE_BYTECODE_MOD_IMMED(y*x);
     ImmedPtr[-1] = y*x; goto Lbc;
Les: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lje;
Let: ByteCodePtr[0] = cDup;
     ImmedPtr -= 1;
     mData->mImmed.pop_back();
Ljk: opcode = cAdd; goto Lhj;
Lfa: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Ljl: AddFunctionOpcode(cSqr); goto Lhf;
Lfb: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Ljl;
Lfc: FP_TRACE_BYTECODE_MOD_IMMED(fp_nequal(y,x));
     ImmedPtr[-1] = fp_nequal(y,x); goto Lbc;
Lfd: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Ljm: FP_TRACE_BYTECODE_ADD(cNEqual);
     goto TailCall_cNEqual;
Lfe: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Ldj;
Lff: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x; return;
Lfg: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lif;
Lfh: mData->mByteCode.pop_back();
     AddFunctionOpcode(cAbsNotNot); return;
Lfi: mData->mByteCode.pop_back();
Lfr: AddFunctionOpcode(cAbsNot); return;
Lfj: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
Lfp: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cEqual; goto Lid;
Lfk: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cNEqual; goto Ljm;
Lfl: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cLessOrEq;
     FP_TRACE_BYTECODE_ADD(cLessOrEq);
     goto TailCall_cLessOrEq;
Lfm: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cLess;
     FP_TRACE_BYTECODE_ADD(cLess);
     goto TailCall_cLess;
Lfn: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cGreaterOrEq;
     FP_TRACE_BYTECODE_ADD(cGreaterOrEq);
     goto TailCall_cGreaterOrEq;
Lfo: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cGreater;
     FP_TRACE_BYTECODE_ADD(cGreater);
     goto TailCall_cGreater;
Lfq: FP_TRACE_BYTECODE_MOD_IMMED(fp_not(x));
     ImmedPtr[0] = fp_not(x); return;
Lfs: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x; goto Lfk;
Lft: FP_TRACE_BYTECODE_MOD_IMMED(fp_or(x,y));
     ImmedPtr[-1] = fp_or(x,y); goto Lbc;
Lga: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     opcode = cInv;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cInv);
     goto TailCall_cInv;
Lgb: mData->mImmed.push_back(Value_t());
     ByteCodePtr[0] = cImmed; goto Lhe;
Lgc: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Ljd;
Lgd: mData->mImmed.push_back(2);
     ByteCodePtr[-4] = cImmed;
Lge: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(-2); goto Lha;
Lgf: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
     mData->mByteCode.pop_back(); goto Ljj;
Lgg: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cMul); goto Lht;
Lgh: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(B);
     opcode = cFmms; goto Lit;
Lgi: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Ljk;
Lgj: FP_TRACE_BYTECODE_MOD_IMMED(y-x);
     ImmedPtr[-1] = y-x; goto Lhk;
Lgk: FP_TRACE_BYTECODE_MOD_IMMED(y-x);
     ImmedPtr[-1] = y-x; goto Lbc;
Lgl: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x; goto Ljk;
Lgm: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lip;
Lgn: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cAdd);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lhp;
Lgo: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cSub); goto Lhp;
Lgp: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(B); goto Lip;
Lgq: FP_TRACE_BYTECODE_MOD_IMMED(x-y);
     ImmedPtr[-1] = x-y;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); return;
Lgr: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     AddFunctionOpcode(OppositeComparisonOpcode(A)); return;
Lgs: mData->mByteCode.push_back(cDup); return;
Lgt: ByteCodePtr[0] = cDup; return;
return;
// This list of dummy gotos is here to inhibit
// compiler warnings on unused labels
goto TailCall_cAnd;goto TailCall_cMax;goto TailCall_cMin;
goto TailCall_cMod;goto TailCall_cNeg;goto TailCall_cOr;
goto TailCall_cRDiv;
#endif

#if((FP_COMPLEX_VERSION) && !(FP_FLOAT_VERSION))
	Value_t x;
	unsigned A;
	unsigned B;
	Value_t y;
	Value_t a;
	unsigned C;
	Value_t b;
	unsigned D;
	switch(opcode)
	{
	TailCall_cAbs:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAbs:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(237,"cNeg cAbs", "cAbs", "");
			/* opcode = cAbs; */ // redundant, matches cAbs @ 0
			goto Lab;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(168,
				"x cAbs",
				"[fp_abs(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lac;
		}
		goto Default0;
	TailCall_cAdd:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAdd:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cDup)
			{
				A = ByteCodePtr[-2];
				if(IsVarOpcode(A))
				{
					switch(ByteCodePtr[-3])
					{
					case cAdd:
						if(ByteCodePtr[-4] == cDup)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(277,
								"cDup cAdd A[IsVarOpcode(A)] cDup cAdd cAdd",
								"[DO_STACKPLUS2] [2] A [2] cFmma",
								"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
							incStackPtr(2);
							mStackPtr -= 2;
							goto Lad;
						}
						break;
					case cMul:
						FP_TRACE_BYTECODE_OPTIMIZATION(275,
							"cMul A[IsVarOpcode(A)] cDup cAdd cAdd",
							"[DO_STACKPLUS2] A [2] cFmma",
							"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
						incStackPtr(2);
						mStackPtr -= 2;
						goto Lae;
					}
				}
			}
			goto Default1;
		case cDup:
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(375,"cDup cAdd cDup cAdd", "[Value_t(4)] cMul", "");
					goto Laf;
				}
				break;
			case cMul:
				if(ByteCodePtr[-2] == cAdd)
				{
					if(ByteCodePtr[-3] == cDup)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(376,"cDup cAdd cMul cDup cAdd", "cMul [Value_t(4)] cMul", "");
						goto Lag;
					}
				}
				break;
			}
			goto Default1;
		case cMul:
			switch(ByteCodePtr[-1])
			{
			case cImmed:
				x = ImmedPtr[0];
				switch(ByteCodePtr[-2])
				{
				case cDup:
					FP_TRACE_BYTECODE_OPTIMIZATION(378,
						"cDup x cMul cAdd",
						"[x+Value_t(1)] cMul",
						"    with x = " << x << "\n");
					goto Lah;
				default:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						switch(ByteCodePtr[-3])
						{
						case cAdd:
							if(ByteCodePtr[-4] == cDup)
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(279,
									"cDup cAdd A[IsVarOpcode(A)] x cMul cAdd",
									"[DO_STACKPLUS2] [2] A [x] cFmma",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << "\n");
								incStackPtr(2);
								mStackPtr -= 2;
								goto Lai;
							}
							break;
						case cMul:
							FP_TRACE_BYTECODE_OPTIMIZATION(274,
								"cMul A[IsVarOpcode(A)] x cMul cAdd",
								"[DO_STACKPLUS2] [x] A cFmma",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							incStackPtr(2);
							mStackPtr -= 2;
							goto Laj;
						}
					}
				}
				break;
			default:
				B = ByteCodePtr[-1];
				if(IsVarOpcode(B))
				{
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						if(ByteCodePtr[-3] == cMul)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(271,
								"cMul A[IsVarOpcode(A)] B[IsVarOpcode(B)] cMul cAdd",
								"A [DO_STACKPLUS2] B cFmma",
								"    with B = " << FP_TRACE_OPCODENAME(B)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							incStackPtr(2);
							mStackPtr -= 2;
							goto Lak;
						}
					}
				}
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						switch(ByteCodePtr[-3])
						{
						case cAdd:
							if(ByteCodePtr[-4] == cDup)
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(280,
									"cDup cAdd x A[IsVarOpcode(A)] cMul cAdd",
									"[DO_STACKPLUS2] [2] A [x] cFmma",
									"    with A = " << FP_TRACE_OPCODENAME(A)
									    << ", x = " << x
									    << "\n");
								incStackPtr(2);
								mStackPtr -= 2;
								goto Lai;
							}
							break;
						case cMul:
							FP_TRACE_BYTECODE_OPTIMIZATION(273,
								"cMul x A[IsVarOpcode(A)] cMul cAdd",
								"[DO_STACKPLUS2] [x] A cFmma",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", x = " << x
								    << "\n");
							incStackPtr(2);
							mStackPtr -= 2;
							goto Laj;
						}
					}
				}
			}
			goto Default1;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(235,"cNeg cAdd", "cSub", "");
			goto Lal;
		case cImmed:
			x = ImmedPtr[0];
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(155,
						"y cAdd x cAdd",
						"[y+x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cAdd; */ // redundant, matches cAdd @ 0
					goto Lam;
				}
				break;
			case cFma:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(158,
						"y cFma x cAdd",
						"[y+x] cFma",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lan;
				}
				break;
			case cMul:
				FP_TRACE_BYTECODE_OPTIMIZATION(270,
					"cMul x cAdd",
					"[DO_STACKPLUS1] [x] cFma",
					"    with x = " << x << "\n");
				incStackPtr(1);
				mStackPtr -= 1;
				/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
				goto Lao;
			case cRSub:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(363,
							"y cAdd cRSub x cAdd",
							"[ y+x] cAdd cRSub",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lap;
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(364,
						"cNeg cRSub x cAdd",
						"[-x] cAdd cRSub",
						"    with x = " << x << "\n");
					goto Laq;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(362,
						"y cRSub x cAdd",
						"[ y+x] cRSub",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lar;
				}
				break;
			case cSub:
				B = ByteCodePtr[-2];
				if(IsVarOpcode(B))
				{
					switch(ByteCodePtr[-3])
					{
					case cAdd:
						if(ByteCodePtr[-4] == cImmed)
						{
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(357,
								"y cAdd B[IsVarOpcode(B)] cSub x cAdd",
								"[ y+x] cAdd B cSub",
								"    with x = " << x
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-4] = cImmed; */ // redundant, matches y @ 5
							goto Las;
						}
						break;
					case cNeg:
						FP_TRACE_BYTECODE_OPTIMIZATION(358,
							"cNeg B[IsVarOpcode(B)] cSub x cAdd",
							"[-x] cAdd B cSub",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						goto Lat;
					case cImmed:
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(356,
							"y B[IsVarOpcode(B)] cSub x cAdd",
							"[ y+x] B cSub",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lba;
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(128,
					"y x cAdd",
					"[y+x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbb;
			}
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(60,
					"x[x==Value_t()] cAdd",
					"",
					"    with x = " << x << "\n");
				goto Lbc;
			}
			break;
		default: Default1:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					FP_TRACE_BYTECODE_OPTIMIZATION(268,
						"cMul A[IsVarOpcode(A)] cAdd",
						"[DO_STACKPLUS1] A cFma",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr(1);
					mStackPtr -= 1;
					goto Lbd;
				case cRSub:
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(355,
							"x cRSub A[IsVarOpcode(A)] cAdd",
							"[DO_STACKPLUS1] A [x] cAdd cRSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						incStackPtr(1);
						mStackPtr -= 1;
						goto Lbe;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(360,
						"cRSub A[IsVarOpcode(A)] cAdd",
						"[DO_STACKPLUS1] A cAdd cRSub",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr(1);
					mStackPtr -= 1;
					goto Lbf;
				}
			}
			B = ByteCodePtr[0];
			if(IsUnaryOpcode(B))
			{
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cMul)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(285,
							"cMul A[IsVarOpcode(A)] B[IsUnaryOpcode(B)] cAdd",
							"[DO_STACKPLUS1] A B cFma",
							"    with B = " << FP_TRACE_OPCODENAME(B)
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						incStackPtr(1);
						mStackPtr -= 1;
						goto Lbg;
					}
				}
			}
		}
		goto Default0;
	TailCall_cAnd:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAnd:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(289,"cDup cAnd", "cNotNot", "");
			goto Lbh;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(145,
					"y x cAnd",
					"[fp_and(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbi;
			}
			break;
		}
		goto Default0;
	TailCall_cConj:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cConj:
		switch(ByteCodePtr[0])
		{
		case cConj:
			FP_TRACE_BYTECODE_OPTIMIZATION(66,"cConj cConj", "", "");
			goto Lbj;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(229,
				"x cConj",
				"[fp_conj(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbk;
		}
		goto Default0;
	TailCall_cDiv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cDiv:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(81,"cDup cDiv", "[Value_t()] cMul [Value_t(1)] cAdd", "");
			goto Lbl;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(153,
						"cNeg x[x!=Value_t()] cDiv",
						"[-x] cDiv",
						"    with x = " << x << "\n");
					/* opcode = cDiv; */ // redundant, matches cDiv @ 0
					goto Lbm;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(126,
						"y x[x!=Value_t()] cDiv",
						"[y/x]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Lbn;
				}
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(59,
					"x[x==Value_t(1)] cDiv",
					"",
					"    with x = " << x << "\n");
				goto Lbc;
			}
			break;
		}
		goto Default0;
	TailCall_cEqual:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				A = ByteCodePtr[-1];
				if(IsLogicalOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(493,
						"A[IsLogicalOpcode(A)] x[x==Value_t(1)] cEqual",
						"A",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					goto Lbc;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(143,
					"y x cEqual",
					"[fp_equal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbo;
			}
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(427,
						"cAbs x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Lbp;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(429,
						"cSqr x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Lbp;
				default:
					A = ByteCodePtr[-1];
					if(IsLogicalOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(495,
							"A[IsLogicalOpcode(A)] x[x==Value_t(0)] cEqual",
							"A cNot",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lbq;
					}
				}
				FP_TRACE_BYTECODE_OPTIMIZATION(483,
					"x[x==Value_t(0)] cEqual",
					"cNot",
					"    with x = " << x << "\n");
				goto Lbq;
			}
		}
		goto Default0;
	TailCall_cFma:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFma:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(281,"cNeg cFma", "cFms", "");
			goto Lbr;
		case cImmed:
			a = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[-1];
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-2];
					FP_TRACE_BYTECODE_OPTIMIZATION(134,
						"y x a cFma",
						"[y*x+a]",
						"    with a = " << a
						    << ", x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lbs;
				}
			}
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(160,
					"x[x==Value_t()] cFma",
					"cMul",
					"    with x = " << x << "\n");
				goto Lbt;
			}
			break;
		}
		goto Default0;
	TailCall_cFmma:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFmma:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(283,"cNeg cFmma", "cFmms", "");
			goto Lca;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(112,
							"A[IsVarOpcode(A)] cMul x[x==Value_t()] cFmma",
							"[x] cMul cFmma",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cFmma; */ // redundant, matches cFmma @ 0
						goto Lcb;
					}
					goto Default2;
				default: Default2:;
					A = ByteCodePtr[-1];
					if(IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						switch(ByteCodePtr[-2])
						{
						case cImmed:
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(110,
								"y A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
								"[x] cMul cFmma",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cFmma; */ // redundant, matches cFmma @ 0
							goto Lcc;
						default:
							B = ByteCodePtr[-2];
							if(IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								switch(ByteCodePtr[-3])
								{
								case cImmed:
									y = ImmedPtr[-1];
									FP_TRACE_BYTECODE_OPTIMIZATION(116,
										"y B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
										"A [x] cMul cFmma",
										"    with x = " << x
										    << ", A = " << FP_TRACE_OPCODENAME(A)
										    << ", B = " << FP_TRACE_OPCODENAME(B)
										    << ", y = " << y
										    << "\n");
									/* opcode = cFmma; */ // redundant, matches cFmma @ 0
									goto Lcd;
								default:
									C = ByteCodePtr[-3];
									if(IsVarOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(114,
											"C[IsVarOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
											"A [x] cMul cFmma",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cFmma; */ // redundant, matches cFmma @ 0
										goto Lce;
									}
									if(IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(115,
											"C[IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
											"B A [x] cMul cFmma",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cFmma; */ // redundant, matches cFmma @ 0
										goto Lcf;
									}
								}
							}
							if(IsVarOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(106,
									"B[IsVarOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
									"[x] cMul cFmma",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
								/* opcode = cFmma; */ // redundant, matches cFmma @ 0
								goto Lcb;
							}
							if(IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(108,
									"B[IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
									"A [x] cMul cFmma",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* opcode = cFmma; */ // redundant, matches cFmma @ 0
								goto Lcg;
							}
						}
					}
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(102,
							"A[IsVarOpcode(A)] x[x==Value_t()] cFmma",
							"cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						goto Lch;
					}
					if(IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(104,
							"A[IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
							"[x] cMul cFmma",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cFmma; */ // redundant, matches cFmma @ 0
						goto Lci;
					}
				}
			}
			b = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				a = ImmedPtr[-1];
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[-2];
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-3];
						FP_TRACE_BYTECODE_OPTIMIZATION(136,
							"y x a b cFmma",
							"[y*x+a*b]",
							"    with b = " << b
							    << ", a = " << a
							    << ", x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lcj;
					}
				}
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(161,
					"x[x==Value_t(1)] cFmma",
					"cFma",
					"    with x = " << x << "\n");
				goto Lck;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(162,
					"x[x==Value_t(-1)] cFmma",
					"cFms",
					"    with x = " << x << "\n");
				goto Lcl;
			}
			break;
		}
		goto Default0;
	TailCall_cFmms:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFmms:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(284,"cNeg cFmms", "cFmma", "");
			goto Lcm;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(113,
							"A[IsVarOpcode(A)] cMul x[x==Value_t()] cFmms",
							"[x] cMul cFmms",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cFmms; */ // redundant, matches cFmms @ 0
						goto Lcn;
					}
					goto Default3;
				default: Default3:;
					A = ByteCodePtr[-1];
					if(IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						switch(ByteCodePtr[-2])
						{
						case cImmed:
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(111,
								"y A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
								"[x] cMul cFmms",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cFmms; */ // redundant, matches cFmms @ 0
							goto Lco;
						default:
							B = ByteCodePtr[-2];
							if(IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								switch(ByteCodePtr[-3])
								{
								case cImmed:
									y = ImmedPtr[-1];
									FP_TRACE_BYTECODE_OPTIMIZATION(119,
										"y B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
										"A [x] cMul cFmms",
										"    with x = " << x
										    << ", A = " << FP_TRACE_OPCODENAME(A)
										    << ", B = " << FP_TRACE_OPCODENAME(B)
										    << ", y = " << y
										    << "\n");
									/* opcode = cFmms; */ // redundant, matches cFmms @ 0
									goto Lcp;
								default:
									C = ByteCodePtr[-3];
									if(IsVarOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(117,
											"C[IsVarOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
											"A [x] cMul cFmms",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cFmms; */ // redundant, matches cFmms @ 0
										goto Lcq;
									}
									if(IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(118,
											"C[IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
											"B A [x] cMul cFmms",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cFmms; */ // redundant, matches cFmms @ 0
										goto Lcr;
									}
								}
							}
							if(IsVarOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(107,
									"B[IsVarOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
									"[x] cMul cFmms",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
								/* opcode = cFmms; */ // redundant, matches cFmms @ 0
								goto Lcn;
							}
							if(IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(109,
									"B[IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
									"A [x] cMul cFmms",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* opcode = cFmms; */ // redundant, matches cFmms @ 0
								goto Lcs;
							}
						}
					}
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(103,
							"A[IsVarOpcode(A)] x[x==Value_t()] cFmms",
							"cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						goto Lch;
					}
					if(IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(105,
							"A[IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
							"[x] cMul cFmms",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cFmms; */ // redundant, matches cFmms @ 0
						goto Lct;
					}
				}
			}
			b = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				a = ImmedPtr[-1];
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[-2];
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-3];
						FP_TRACE_BYTECODE_OPTIMIZATION(137,
							"y x a b cFmms",
							"[y*x-a*b]",
							"    with b = " << b
							    << ", a = " << a
							    << ", x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lda;
					}
				}
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(163,
					"x[x==Value_t(1)] cFmms",
					"cFms",
					"    with x = " << x << "\n");
				goto Lcl;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(164,
					"x[x==Value_t(-1)] cFmms",
					"cFma",
					"    with x = " << x << "\n");
				goto Lck;
			}
			FP_TRACE_BYTECODE_OPTIMIZATION(52,
				"x cFmms",
				"[-x] cFmma",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Ldb;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				if(ByteCodePtr[-1] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(54,
						"x A[IsVarOpcode(A)] cFmms",
						"[-x] A cFmms",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", x = " << x
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
					/* opcode = cFmms; */ // redundant, matches cFmms @ 0
					goto Ldc;
				}
			}
		}
		goto Default0;
	TailCall_cFms:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFms:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(282,"cNeg cFms", "cFma", "");
			goto Ldd;
		case cImmed:
			a = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[-1];
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-2];
					FP_TRACE_BYTECODE_OPTIMIZATION(135,
						"y x a cFms",
						"[y*x-a]",
						"    with a = " << a
						    << ", x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lde;
				}
			}
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(51,
				"x cFms",
				"[-x] cFma",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Ldf;
		}
		goto Default0;
	TailCall_cGreater:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cGreater:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(141,
					"y x cGreater",
					"[fp_less(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldg;
			}
		}
		goto Default0;
	TailCall_cGreaterOrEq:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cGreaterOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(142,
					"y x cGreaterOrEq",
					"[fp_lessOrEq(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldh;
			}
		}
		goto Default0;
	TailCall_cImag:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cImag:
		switch(ByteCodePtr[0])
		{
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(228,
				"x cImag",
				"[fp_imag(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Ldi;
		default:
			A = ByteCodePtr[0];
			if(IsAlwaysRealOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(83,
					"A[IsAlwaysRealOpcode(A)] cImag",
					"A [DO_STACKPLUS1] [Value_t()] cMul",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				incStackPtr(1);
				mStackPtr -= 1;
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				goto Ldj;
			}
		}
		goto Default0;
	TailCall_cInv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cInv:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(124,
					"x[x!=Value_t()] cInv",
					"[fp_inv(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Ldk;
			}
		}
		goto Default0;
	TailCall_cLess:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLess:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				A = ByteCodePtr[-1];
				if(IsNeverNegativeValueOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(366,
						"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(0)] cLess",
						"A [x] cMul",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
					goto Ldl;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(139,
					"y x cLess",
					"[fp_less(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldm;
			}
		}
		goto Default0;
	TailCall_cLessOrEq:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLessOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(140,
					"y x cLessOrEq",
					"[fp_lessOrEq(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldn;
			}
		}
		goto Default0;
	TailCall_cMax:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMax:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(63,"cDup cMax", "", "");
			goto Lbj;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(177,
					"y x cMax",
					"[fp_max(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldo;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(69,
							"B[B==A] cDup A[IsVarOpcode(A)] cMax",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Lbj;
					}
					break;
				case cMax:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(71,
							"B[B==A] cMax A[IsVarOpcode(A)] cMax",
							"B cMax",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMax; */ // redundant, matches cMax @ 2
						goto Lbj;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cMin:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMin:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(62,"cDup cMin", "", "");
			goto Lbj;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(176,
					"y x cMin",
					"[fp_min(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldp;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(68,
							"B[B==A] cDup A[IsVarOpcode(A)] cMin",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Lbj;
					}
					break;
				case cMin:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(70,
							"B[B==A] cMin A[IsVarOpcode(A)] cMin",
							"B cMin",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMin; */ // redundant, matches cMin @ 2
						goto Lbj;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cMod:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMod:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				if(ByteCodePtr[-1] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(127,
						"y x[x!=Value_t()] cMod",
						"[fp_mod(y,x)]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Ldq;
				}
			}
		}
		goto Default0;
	TailCall_cMul:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMul:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(238,"cDup cMul", "cSqr", "");
			goto Ldr;
		case cNeg:
			switch(ByteCodePtr[-1])
			{
			case cDup:
				FP_TRACE_BYTECODE_OPTIMIZATION(541,"cDup cNeg cMul", "cSqr cNeg", "");
				goto Lds;
			default:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cMul)
					{
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(547,
								"B[B==A] cMul A[IsVarOpcode(A)] cNeg cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Ldt;
						}
					}
				}
			}
			goto Default4;
		case cPow:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(379,
						"cDup x cPow cMul",
						"[x+Value_t(1)] cPow",
						"    with x = " << x << "\n");
					goto Lea;
				}
			}
			goto Default4;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(96,
							"A[IsVarOpcode(A)] cMul x[x==Value_t()] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Leb;
					}
					goto Default5;
				default: Default5:;
					A = ByteCodePtr[-1];
					if(IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						switch(ByteCodePtr[-2])
						{
						case cImmed:
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(95,
								"y A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
								"[x] cMul",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lec;
						default:
							B = ByteCodePtr[-2];
							if(IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								switch(ByteCodePtr[-3])
								{
								case cImmed:
									y = ImmedPtr[-1];
									FP_TRACE_BYTECODE_OPTIMIZATION(99,
										"y B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
										"A [x] cMul",
										"    with x = " << x
										    << ", A = " << FP_TRACE_OPCODENAME(A)
										    << ", B = " << FP_TRACE_OPCODENAME(B)
										    << ", y = " << y
										    << "\n");
									/* opcode = cMul; */ // redundant, matches cMul @ 0
									goto Led;
								default:
									C = ByteCodePtr[-3];
									if(IsVarOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(97,
											"C[IsVarOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
											"A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lee;
									}
									if(IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(98,
											"C[IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
											"B A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lef;
									}
								}
							}
							if(IsVarOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(93,
									"B[IsVarOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
									"[x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Leb;
							}
							if(IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(94,
									"B[IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
									"A [x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Leg;
							}
						}
					}
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(91,
							"A[IsVarOpcode(A)] x[x==Value_t()] cMul",
							"[x]",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						goto Leh;
					}
					if(IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(92,
							"A[IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lei;
					}
				}
			}
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				switch(ByteCodePtr[-2])
				{
				case cDup:
					FP_TRACE_BYTECODE_OPTIMIZATION(382,
						"cDup cAdd x cMul",
						"[x+x] cMul",
						"    with x = " << x << "\n");
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Lej;
				case cMul:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(IsVarOpcode(A))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(454,
								"A[IsVarOpcode(A)] y cMul cAdd x cMul",
								"[x] cMul A [y*x] cMul cAdd",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lek;
						}
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(453,
						"y cAdd x cMul",
						"[x] cMul [y*x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lel;
				}
				break;
			case cMul:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cDup)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(384,
							"cDup cAdd cMul x cMul",
							"cMul [x+x] cMul",
							"    with x = " << x << "\n");
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lem;
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					if(y*x==Value_t(1))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(73,
							"y[y*x==Value_t(1)] cMul x cMul",
							"",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Len;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(156,
						"y cMul x cMul",
						"[y*x] cMul",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Leo;
				}
				break;
			case cNeg:
				FP_TRACE_BYTECODE_OPTIMIZATION(150,
					"cNeg x cMul",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Lep;
			case cSub:
				if(ByteCodePtr[-2] == cMul)
				{
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(IsVarOpcode(A))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(455,
								"A[IsVarOpcode(A)] y cMul cSub x cMul",
								"[x] cMul A [y*x] cMul cSub",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Leq;
						}
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(125,
					"y x cMul",
					"[y*x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ler;
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(58,
					"x[x==Value_t(1)] cMul",
					"",
					"    with x = " << x << "\n");
				goto Lbc;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(152,
					"x[x==Value_t(-1)] cMul",
					"cNeg",
					"    with x = " << x << "\n");
				goto Les;
			}
			if(x==Value_t(2))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(234,
					"x[x==Value_t(2)] cMul",
					"cDup cAdd",
					"    with x = " << x << "\n");
				goto Let;
			}
			break;
		default: Default4:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					switch(ByteCodePtr[-2])
					{
					case cNeg:
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(544,
								"B[B==A] cNeg cMul A[IsVarOpcode(A)] cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Ldt;
						}
						goto Default6;
					default: Default6:;
						B = ByteCodePtr[-2];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(535,
								"B[B==A] cMul A[IsVarOpcode(A)] cMul",
								"B cSqr cMul",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lfa;
						}
					}
					goto Default7;
				case cNeg:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(538,
							"B[B==A] cNeg A[IsVarOpcode(A)] cMul",
							"B cSqr cNeg",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lds;
					}
					goto Default7;
				default: Default7:;
					B = ByteCodePtr[-1];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(532,
							"B[B==A] A[IsVarOpcode(A)] cMul",
							"B cSqr",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-1] = B; */ // redundant, matches B @ 2
						goto Ldr;
					}
				}
			}
			if(IsUnaryOpcode(A))
			{
				B = ByteCodePtr[-1];
				if(IsVarOpcode(B)&&mData->mByteCode.size()>1)
				{
					if(ByteCodePtr[-2] == cMul)
					{
						C = ByteCodePtr[-3];
						if(C==A)
						{
							D = ByteCodePtr[-4];
							if(D==B)
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(551,
									"D[D==B] C[C==A] cMul B[IsVarOpcode(B)&&mData->mByteCode.size()>1] A[IsUnaryOpcode(A)] cMul",
									"D C cSqr cMul",
									"    with A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << ", C = " << FP_TRACE_OPCODENAME(C)
									    << ", D = " << FP_TRACE_OPCODENAME(D)
									    << "\n");
								/* ByteCodePtr[-4] = D; */ // redundant, matches D @ 5
								/* ByteCodePtr[-3] = C; */ // redundant, matches C @ 4
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lfb;
							}
						}
					}
				}
			}
		}
		goto Default0;
	TailCall_cNEqual:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				A = ByteCodePtr[-1];
				if(IsLogicalOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(494,
						"A[IsLogicalOpcode(A)] x[x==Value_t(1)] cNEqual",
						"A cNot",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					goto Lbq;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(144,
					"y x cNEqual",
					"[fp_nequal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lfc;
			}
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(428,
						"cAbs x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Lfd;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(430,
						"cSqr x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Lfd;
				default:
					A = ByteCodePtr[-1];
					if(IsLogicalOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(496,
							"A[IsLogicalOpcode(A)] x[x==Value_t(0)] cNEqual",
							"A",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lbc;
					}
				}
				FP_TRACE_BYTECODE_OPTIMIZATION(484,
					"x[x==Value_t(0)] cNEqual",
					"cNotNot",
					"    with x = " << x << "\n");
				goto Lfe;
			}
		}
		goto Default0;
	TailCall_cNeg:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNeg:
		switch(ByteCodePtr[0])
		{
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(151,
					"x cMul cNeg",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Lff;
			}
			break;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(64,"cNeg cNeg", "", "");
			goto Lbj;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(123,
				"x cNeg",
				"[-x]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lfg;
		}
		goto Default0;
	TailCall_cNot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNot:
		switch(ByteCodePtr[0])
		{
		case cAbsNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(296,"cAbsNotNot cNot", "cAbsNot", "");
			goto Lfh;
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(498,
					"x cAdd cNot",
					"[-x] cEqual",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Lfi;
			}
			break;
		case cEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(265,"cEqual cNot", "cNEqual", "");
			goto Lfj;
		case cGreater:
			FP_TRACE_BYTECODE_OPTIMIZATION(263,"cGreater cNot", "cLessOrEq", "");
			goto Lfk;
		case cGreaterOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(264,"cGreaterOrEq cNot", "cLess", "");
			goto Lfl;
		case cLess:
			FP_TRACE_BYTECODE_OPTIMIZATION(261,"cLess cNot", "cGreaterOrEq", "");
			goto Lfm;
		case cLessOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(262,"cLessOrEq cNot", "cGreater", "");
			goto Lfn;
		case cNEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(266,"cNEqual cNot", "cEqual", "");
			goto Lfo;
		case cNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(294,"cNot cNot", "cNotNot", "");
			goto Lbh;
		case cNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(295,"cNotNot cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Lfp;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(130,
				"x cNot",
				"[fp_not(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lfq;
		}
		goto Default0;
	TailCall_cNotNot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNotNot:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(497,
					"x cAdd cNotNot",
					"[-x] cNEqual",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Lfr;
			}
			break;
		case cNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(297,"cNot cNotNot", "cNot", "");
			/* ByteCodePtr[0] = cNot; */ // redundant, matches cNot @ 1
			return;
		}
		goto Default0;
	TailCall_cOr:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cOr:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(288,"cDup cOr", "cNotNot", "");
			goto Lbh;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(146,
					"y x cOr",
					"[fp_or(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lfs;
			}
			break;
		}
		goto Default0;
	TailCall_cRDiv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRDiv:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(333,
					"x[x==Value_t(1)] cRDiv",
					"cInv",
					"    with x = " << x << "\n");
				goto Lft;
			}
		}
		goto Default0;
	TailCall_cRSub:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRSub:
		if(ByteCodePtr[0] == cDup)
		{
			FP_TRACE_BYTECODE_OPTIMIZATION(80,"cDup cRSub", "[Value_t()] cMul", "");
			goto Lga;
		}
		goto Default0;
	TailCall_cReal:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cReal:
		switch(ByteCodePtr[0])
		{
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(227,
				"x cReal",
				"[fp_real(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lgb;
		default:
			A = ByteCodePtr[0];
			if(IsAlwaysRealOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(84,
					"A[IsAlwaysRealOpcode(A)] cReal",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cSqr:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSqr:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(239,"cNeg cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Lgc;
		default:
			A = ByteCodePtr[0];
			if(IsComparisonOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(599,
					"A[IsComparisonOpcode(A)] cSqr",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cSub:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSub:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cDup)
			{
				A = ByteCodePtr[-2];
				if(IsVarOpcode(A))
				{
					switch(ByteCodePtr[-3])
					{
					case cAdd:
						if(ByteCodePtr[-4] == cDup)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(278,
								"cDup cAdd A[IsVarOpcode(A)] cDup cAdd cSub",
								"[DO_STACKPLUS2] [2] A [-2] cFmma",
								"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
							incStackPtr(2);
							mStackPtr -= 2;
							goto Lgd;
						}
						break;
					case cMul:
						FP_TRACE_BYTECODE_OPTIMIZATION(276,
							"cMul A[IsVarOpcode(A)] cDup cAdd cSub",
							"[DO_STACKPLUS2] A [-2] cFmma",
							"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
						incStackPtr(2);
						mStackPtr -= 2;
						goto Lge;
					}
				}
			}
			goto Default8;
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(79,"cDup cSub", "[Value_t()] cMul", "");
			goto Lga;
		case cMul:
			switch(ByteCodePtr[-1])
			{
			case cImmed:
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(50,
					"x cMul cSub",
					"[-x] cMul cAdd",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Lgf;
			default:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(53,
							"x A[IsVarOpcode(A)] cMul cSub",
							"[-x] A cMul cSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
						/* opcode = cSub; */ // redundant, matches cSub @ 0
						goto Lgg;
					}
				}
				B = ByteCodePtr[-1];
				if(IsVarOpcode(B))
				{
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						if(ByteCodePtr[-3] == cMul)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(272,
								"cMul A[IsVarOpcode(A)] B[IsVarOpcode(B)] cMul cSub",
								"A [DO_STACKPLUS2] B cFmms",
								"    with B = " << FP_TRACE_OPCODENAME(B)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							incStackPtr(2);
							mStackPtr -= 2;
							goto Lgh;
						}
					}
				}
			}
			goto Default8;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(236,"cNeg cSub", "cAdd", "");
			goto Lgi;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(61,
					"x[x==Value_t()] cSub",
					"",
					"    with x = " << x << "\n");
				goto Lbc;
			}
			switch(ByteCodePtr[-1])
			{
			case cFma:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(159,
						"y cFma x cSub",
						"[y-x] cFma",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lgj;
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(129,
					"y x cSub",
					"[y-x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lgk;
			}
			FP_TRACE_BYTECODE_OPTIMIZATION(49,
				"x cSub",
				"[-x] cAdd",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lgl;
		default: Default8:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					FP_TRACE_BYTECODE_OPTIMIZATION(269,
						"cMul A[IsVarOpcode(A)] cSub",
						"[DO_STACKPLUS1] A cFms",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr(1);
					mStackPtr -= 1;
					goto Lgm;
				case cRSub:
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(354,
							"x cRSub A[IsVarOpcode(A)] cSub",
							"A cAdd [x] cRSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Lgn;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(361,
						"cRSub A[IsVarOpcode(A)] cSub",
						"[DO_STACKPLUS1] A cSub cRSub",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr(1);
					mStackPtr -= 1;
					goto Lgo;
				}
			}
			B = ByteCodePtr[0];
			if(IsUnaryOpcode(B))
			{
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cMul)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(286,
							"cMul A[IsVarOpcode(A)] B[IsUnaryOpcode(B)] cSub",
							"[DO_STACKPLUS1] A B cFms",
							"    with B = " << FP_TRACE_OPCODENAME(B)
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						incStackPtr(1);
						mStackPtr -= 1;
						goto Lgp;
					}
				}
			}
		}
		goto Default0;
	default: Default0:;
		A = opcode;
		if(IsVarOpcode(A)&&mData->mByteCode.size()>0)
		{
			B = ByteCodePtr[0];
			if(B==A)
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(549,
					"B[B==A] A[IsVarOpcode(A)&&mData->mByteCode.size()>0]",
					"B cDup",
					"    with A = " << FP_TRACE_OPCODENAME(A)
					    << ", B = " << FP_TRACE_OPCODENAME(B)
					    << "\n");
				/* ByteCodePtr[0] = B; */ // redundant, matches B @ 1
				goto Lgq;
			}
		}
		if(IsUnaryOpcode(A))
		{
			B = ByteCodePtr[0];
			if(IsVarOpcode(B)&&mData->mByteCode.size()>1)
			{
				C = ByteCodePtr[-1];
				if(C==A)
				{
					D = ByteCodePtr[-2];
					if(D==B)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(550,
							"D[D==B] C[C==A] B[IsVarOpcode(B)&&mData->mByteCode.size()>1] A[IsUnaryOpcode(A)]",
							"D C cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", C = " << FP_TRACE_OPCODENAME(C)
							    << ", D = " << FP_TRACE_OPCODENAME(D)
							    << "\n");
						/* ByteCodePtr[-2] = D; */ // redundant, matches D @ 3
						/* ByteCodePtr[-1] = C; */ // redundant, matches C @ 2
						goto Lgr;
					}
				}
			}
		}
	}
	goto Laa;
Laa: mData->mByteCode.push_back(opcode); return;
Lab: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     FP_TRACE_BYTECODE_ADD(cAbs);
     goto TailCall_cAbs;
Lac: FP_TRACE_BYTECODE_MOD_IMMED(fp_abs(x));
     ImmedPtr[0] = fp_abs(x); return;
Lad: mData->mImmed.push_back(2);
     ByteCodePtr[-4] = cImmed;
Lae: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(2);
Lgs: mData->mByteCode.push_back(cImmed);
Lgt: opcode = cFmma;
Lha: FP_ReDefinePointers();
Lhb: FP_TRACE_BYTECODE_ADD(cFmma);
     goto TailCall_cFmma;
Laf: mData->mImmed.push_back(Value_t(4));
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
Lhc: opcode = cMul;
Lhd: FP_ReDefinePointers();
Lhe: FP_TRACE_BYTECODE_ADD(cMul);
     goto TailCall_cMul;
Lag: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(Value_t(4));
Lhf: mData->mByteCode.push_back(cImmed); goto Lhc;
Lah: FP_TRACE_BYTECODE_MOD_IMMED(x+Value_t(1));
     ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
Ldl: opcode = cMul; goto Lhe;
Lai: FP_TRACE_BYTECODE_MOD_IMMED(2);
     ImmedPtr[0] = 2;
     ByteCodePtr[-4] = cImmed;
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x); goto Lgs;
Laj: FP_TRACE_BYTECODE_MOD_IMMED(x);
     ImmedPtr[0] = x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lgt;
Lak: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(B); goto Lgt;
Lal: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSub;
Lhg: FP_TRACE_BYTECODE_ADD(cSub);
     goto TailCall_cSub;
Lam: FP_TRACE_BYTECODE_MOD_IMMED(y+x);
     ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lhh: FP_ReDefinePointers();
Lhi: FP_TRACE_BYTECODE_ADD(cAdd);
     goto TailCall_cAdd;
Lan: FP_TRACE_BYTECODE_MOD_IMMED(y+x);
     ImmedPtr[-1] = y+x;
Lhj: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lhk: opcode = cFma;
     FP_ReDefinePointers();
Lhl: FP_TRACE_BYTECODE_ADD(cFma);
     goto TailCall_cFma;
Lao: ByteCodePtr[-1] = cImmed;
Ldd: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lhm: opcode = cFma; goto Lhl;
Lap: FP_TRACE_BYTECODE_MOD_IMMED(y+x);
     ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Lhn: AddFunctionOpcode(cAdd);
Lho: opcode = cRSub;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cRSub);
     goto TailCall_cRSub;
Laq: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lhn;
Lar: FP_TRACE_BYTECODE_MOD_IMMED(y+x);
     ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lho;
Las: FP_TRACE_BYTECODE_MOD_IMMED(y+x);
     ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lhp: AddFunctionOpcode(cAdd);
Lhq: AddFunctionOpcode(B);
Lhr: opcode = cSub;
Lhs: FP_ReDefinePointers(); goto Lhg;
Lat: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lhp;
Lba: FP_TRACE_BYTECODE_MOD_IMMED(y+x);
     ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lhq;
Lbb: FP_TRACE_BYTECODE_MOD_IMMED(y+x);
     ImmedPtr[-1] = y+x;
Lbc: mData->mImmed.pop_back();
Lbj: mData->mByteCode.pop_back(); return;
Lbd: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lhk;
Lbe: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lhn;
Lbf: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lhn;
Lbg: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(B); goto Lhk;
Lbh: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cNotNot;
Lht: FP_TRACE_BYTECODE_ADD(cNotNot);
     goto TailCall_cNotNot;
Lbi: FP_TRACE_BYTECODE_MOD_IMMED(fp_and(x,y));
     ImmedPtr[-1] = fp_and(x,y); goto Lbc;
Lbk: FP_TRACE_BYTECODE_MOD_IMMED(fp_conj(x));
     ImmedPtr[0] = fp_conj(x); return;
Lbl: mData->mImmed.push_back(Value_t());
     ByteCodePtr[0] = cImmed;
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(Value_t(1));
Lia: mData->mByteCode.push_back(cImmed);
Lib: opcode = cAdd; goto Lhh;
Lbm: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     FP_TRACE_BYTECODE_ADD(cDiv);
     goto TailCall_cDiv;
Lbn: FP_TRACE_BYTECODE_MOD_IMMED(y/x);
     ImmedPtr[-1] = y/x; goto Lbc;
Lbo: FP_TRACE_BYTECODE_MOD_IMMED(fp_equal(y,x));
     ImmedPtr[-1] = fp_equal(y,x); goto Lbc;
Lbp: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lic: FP_TRACE_BYTECODE_ADD(cEqual);
     goto TailCall_cEqual;
Lbq: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     opcode = cNot;
     FP_ReDefinePointers();
Lid: FP_TRACE_BYTECODE_ADD(cNot);
     goto TailCall_cNot;
Lbr: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cFms;
Lie: FP_TRACE_BYTECODE_ADD(cFms);
     goto TailCall_cFms;
Lbs: FP_TRACE_BYTECODE_MOD_IMMED(y*x+a);
     ImmedPtr[-2] = y*x+a;
Lif: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} return;
Lbt: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lhc;
Lca: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cFmms;
Lig: FP_TRACE_BYTECODE_ADD(cFmms);
     goto TailCall_cFmms;
Lcb: ByteCodePtr[-2] = cImmed;
Lih: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lii: AddFunctionOpcode(cMul); goto Lha;
Lcc: FP_TRACE_BYTECODE_MOD_IMMED(x);
     ImmedPtr[-1] = x;
     mData->mImmed.pop_back(); goto Lih;
Lcd: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
Lij: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lik: AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lii;
Lce: mData->mImmed.pop_back(); goto Lij;
Lcf: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(B); goto Lik;
Lcg: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lik;
Lch: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lhc;
Lci: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back(); goto Lii;
Lcj: FP_TRACE_BYTECODE_MOD_IMMED(y*x+a*b);
     ImmedPtr[-3] = y*x+a*b;
Lil: for(unsigned tmp=3; tmp-->0; ) {mData->mImmed.pop_back();}
Lim: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} return;
Lck: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lhk;
Lcl: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
Lin: opcode = cFms;
     FP_ReDefinePointers(); goto Lie;
Lcm: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lio: opcode = cFmma; goto Lhb;
Lcn: ByteCodePtr[-2] = cImmed;
Lip: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Liq: AddFunctionOpcode(cMul);
Lir: FP_ReDefinePointers(); goto Lig;
Lco: FP_TRACE_BYTECODE_MOD_IMMED(x);
     ImmedPtr[-1] = x;
     mData->mImmed.pop_back(); goto Lip;
Lcp: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
Lis: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lit: AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Liq;
Lcq: mData->mImmed.pop_back(); goto Lis;
Lcr: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(B); goto Lit;
Lcs: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lit;
Lct: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back(); goto Liq;
Lda: FP_TRACE_BYTECODE_MOD_IMMED(y*x-a*b);
     ImmedPtr[-3] = y*x-a*b; goto Lil;
Ldb: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x; goto Lio;
Ldc: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
     mData->mByteCode.pop_back();
     AddFunctionOpcode(A); goto Lir;
Lde: FP_TRACE_BYTECODE_MOD_IMMED(y*x-a);
     ImmedPtr[-2] = y*x-a; goto Lif;
Ldf: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x; goto Lhm;
Ldg: FP_TRACE_BYTECODE_MOD_IMMED(fp_less(x,y));
     ImmedPtr[-1] = fp_less(x,y); goto Lbc;
Ldh: FP_TRACE_BYTECODE_MOD_IMMED(fp_lessOrEq(x,y));
     ImmedPtr[-1] = fp_lessOrEq(x,y); goto Lbc;
Ldi: FP_TRACE_BYTECODE_MOD_IMMED(fp_imag(x));
     ImmedPtr[0] = fp_imag(x); return;
Ldj: mData->mImmed.push_back(Value_t()); goto Lhf;
Ldk: FP_TRACE_BYTECODE_MOD_IMMED(fp_inv(x));
     ImmedPtr[0] = fp_inv(x); return;
Ldm: FP_TRACE_BYTECODE_MOD_IMMED(fp_less(y,x));
     ImmedPtr[-1] = fp_less(y,x); goto Lbc;
Ldn: FP_TRACE_BYTECODE_MOD_IMMED(fp_lessOrEq(y,x));
     ImmedPtr[-1] = fp_lessOrEq(y,x); goto Lbc;
Ldo: FP_TRACE_BYTECODE_MOD_IMMED(fp_max(x,y));
     ImmedPtr[-1] = fp_max(x,y); goto Lbc;
Ldp: FP_TRACE_BYTECODE_MOD_IMMED(fp_min(x,y));
     ImmedPtr[-1] = fp_min(x,y); goto Lbc;
Ldq: FP_TRACE_BYTECODE_MOD_IMMED(fp_mod(y,x));
     ImmedPtr[-1] = fp_mod(y,x); goto Lbc;
Ldr: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSqr;
Lja: FP_TRACE_BYTECODE_ADD(cSqr);
     goto TailCall_cSqr;
Lds: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr);
Ljb: opcode = cNeg;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cNeg);
     goto TailCall_cNeg;
Ldt: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr);
     AddFunctionOpcode(cMul); goto Ljb;
Lea: FP_TRACE_BYTECODE_MOD_IMMED(x+Value_t(1));
     ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cPow); return;
Leb: ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2; goto Lhe;
Lec: FP_TRACE_BYTECODE_MOD_IMMED(x);
     ImmedPtr[-1] = x;
Ljc: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lhd;
Led: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
Ljd: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lje: AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
Ljf: mData->mByteCode.push_back(cImmed); goto Lhd;
Lee: mData->mImmed.pop_back(); goto Ljd;
Lef: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(B); goto Lje;
Leg: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lje;
Leh: ByteCodePtr[-1] = cImmed; goto Lbj;
Lei: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lhe;
Lej: FP_TRACE_BYTECODE_MOD_IMMED(x+x);
     ImmedPtr[0] = x+x; goto Leb;
Lek: FP_TRACE_BYTECODE_MOD_IMMED(x);
     ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     mData->mImmed.push_back(y*x);
     mData->mByteCode.push_back(cImmed);
Ljg: AddFunctionOpcode(cMul); goto Lib;
Lel: FP_TRACE_BYTECODE_MOD_IMMED(x);
     ImmedPtr[-1] = x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(y*x); goto Lia;
Lem: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(x+x); goto Ljf;
Len: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();} goto Lim;
Leo: FP_TRACE_BYTECODE_MOD_IMMED(y*x);
     ImmedPtr[-1] = y*x; goto Ljc;
Lep: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x; goto Lei;
Leq: FP_TRACE_BYTECODE_MOD_IMMED(x);
     ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     mData->mImmed.push_back(y*x);
     mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cMul); goto Lhr;
Ler: FP_TRACE_BYTECODE_MOD_IMMED(y*x);
     ImmedPtr[-1] = y*x; goto Lbc;
Les: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Ljb;
Let: ByteCodePtr[0] = cDup;
     ImmedPtr -= 1;
     mData->mImmed.pop_back();
Ljh: opcode = cAdd; goto Lhi;
Lfa: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lji: AddFunctionOpcode(cSqr); goto Lhd;
Lfb: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lji;
Lfc: FP_TRACE_BYTECODE_MOD_IMMED(fp_nequal(y,x));
     ImmedPtr[-1] = fp_nequal(y,x); goto Lbc;
Lfd: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Ljj: FP_TRACE_BYTECODE_ADD(cNEqual);
     goto TailCall_cNEqual;
Lfe: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     opcode = cNotNot;
     FP_ReDefinePointers(); goto Lht;
Lff: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Ldl;
Lfg: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x; return;
Lfh: mData->mByteCode.pop_back();
     AddFunctionOpcode(cAbsNot); return;
Lfi: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
Lfo: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cEqual; goto Lic;
Lfj: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cNEqual; goto Ljj;
Lfk: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cLessOrEq;
     FP_TRACE_BYTECODE_ADD(cLessOrEq);
     goto TailCall_cLessOrEq;
Lfl: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cLess;
     FP_TRACE_BYTECODE_ADD(cLess);
     goto TailCall_cLess;
Lfm: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cGreaterOrEq;
     FP_TRACE_BYTECODE_ADD(cGreaterOrEq);
     goto TailCall_cGreaterOrEq;
Lfn: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cGreater;
     FP_TRACE_BYTECODE_ADD(cGreater);
     goto TailCall_cGreater;
Lfp: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lid;
Lfq: FP_TRACE_BYTECODE_MOD_IMMED(fp_not(x));
     ImmedPtr[0] = fp_not(x); return;
Lfr: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x; goto Lfj;
Lfs: FP_TRACE_BYTECODE_MOD_IMMED(fp_or(x,y));
     ImmedPtr[-1] = fp_or(x,y); goto Lbc;
Lft: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     opcode = cInv;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cInv);
     goto TailCall_cInv;
Lga: mData->mImmed.push_back(Value_t());
     ByteCodePtr[0] = cImmed; goto Lhc;
Lgb: FP_TRACE_BYTECODE_MOD_IMMED(fp_real(x));
     ImmedPtr[0] = fp_real(x); return;
Lgc: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lja;
Lgd: mData->mImmed.push_back(2);
     ByteCodePtr[-4] = cImmed;
Lge: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(-2); goto Lgs;
Lgf: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
     mData->mByteCode.pop_back(); goto Ljg;
Lgg: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cMul); goto Lhs;
Lgh: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(B);
     opcode = cFmms; goto Lir;
Lgi: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Ljh;
Lgj: FP_TRACE_BYTECODE_MOD_IMMED(y-x);
     ImmedPtr[-1] = y-x; goto Lhj;
Lgk: FP_TRACE_BYTECODE_MOD_IMMED(y-x);
     ImmedPtr[-1] = y-x; goto Lbc;
Lgl: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x; goto Ljh;
Lgm: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lin;
Lgn: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cAdd);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lho;
Lgo: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cSub); goto Lho;
Lgp: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(B); goto Lin;
Lgq: mData->mByteCode.push_back(cDup); return;
Lgr: ByteCodePtr[0] = cDup; return;
return;
// This list of dummy gotos is here to inhibit
// compiler warnings on unused labels
goto TailCall_cAnd;goto TailCall_cConj;goto TailCall_cImag;
goto TailCall_cMax;goto TailCall_cMin;goto TailCall_cMod;
goto TailCall_cNeg;goto TailCall_cOr;goto TailCall_cRDiv;
goto TailCall_cReal;
#endif

#if((FP_FLOAT_VERSION) && !(FP_COMPLEX_VERSION))
	Value_t x;
	unsigned A;
	unsigned B;
	Value_t y;
	Value_t a;
	unsigned C;
	Value_t b;
	unsigned D;
	switch(opcode)
	{
	TailCall_cAbs:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAbs:
		switch(ByteCodePtr[0])
		{
		case cInv:
			if(ByteCodePtr[-1] == cSqr)
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(249,"cSqr cInv cAbs", "cSqr cInv", "");
				/* ByteCodePtr[-1] = cSqr; */ // redundant, matches cSqr @ 2
				/* ByteCodePtr[0] = cInv; */ // redundant, matches cInv @ 1
				return;
			}
			goto Default0;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(237,"cNeg cAbs", "cAbs", "");
			/* opcode = cAbs; */ // redundant, matches cAbs @ 0
			goto Lab;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(168,
				"x cAbs",
				"[fp_abs(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lac;
		default: Default0:;
			A = ByteCodePtr[0];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(250,
					"A[IsNeverNegativeValueOpcode(A)] cAbs",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default1;
	TailCall_cAcos:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAcos:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(fp_abs(x)<=Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(184,
					"x[fp_abs(x)<=Value_t(1)] cAcos",
					"[fp_acos(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lad;
			}
		}
		goto Default1;
	TailCall_cAcosh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAcosh:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x>=Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(181,
					"x[x>=Value_t(1)] cAcosh",
					"[fp_acosh(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lae;
			}
		}
		goto Default1;
	TailCall_cAdd:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAdd:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cDup)
			{
				A = ByteCodePtr[-2];
				if(IsVarOpcode(A))
				{
					switch(ByteCodePtr[-3])
					{
					case cAdd:
						if(ByteCodePtr[-4] == cDup)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(277,
								"cDup cAdd A[IsVarOpcode(A)] cDup cAdd cAdd",
								"[DO_STACKPLUS2] [2] A [2] cFmma",
								"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
							incStackPtr(2);
							mStackPtr -= 2;
							goto Laf;
						}
						break;
					case cMul:
						FP_TRACE_BYTECODE_OPTIMIZATION(275,
							"cMul A[IsVarOpcode(A)] cDup cAdd cAdd",
							"[DO_STACKPLUS2] A [2] cFmma",
							"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
						incStackPtr(2);
						mStackPtr -= 2;
						goto Lag;
					}
				}
			}
			goto Default2;
		case cDup:
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(375,"cDup cAdd cDup cAdd", "[Value_t(4)] cMul", "");
					goto Lah;
				}
				break;
			case cMul:
				if(ByteCodePtr[-2] == cAdd)
				{
					if(ByteCodePtr[-3] == cDup)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(376,"cDup cAdd cMul cDup cAdd", "cMul [Value_t(4)] cMul", "");
						goto Lai;
					}
				}
				break;
			}
			goto Default2;
		case cMul:
			switch(ByteCodePtr[-1])
			{
			case cImmed:
				x = ImmedPtr[0];
				switch(ByteCodePtr[-2])
				{
				case cDup:
					FP_TRACE_BYTECODE_OPTIMIZATION(378,
						"cDup x cMul cAdd",
						"[x+Value_t(1)] cMul",
						"    with x = " << x << "\n");
					goto Laj;
				default:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						switch(ByteCodePtr[-3])
						{
						case cAdd:
							if(ByteCodePtr[-4] == cDup)
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(279,
									"cDup cAdd A[IsVarOpcode(A)] x cMul cAdd",
									"[DO_STACKPLUS2] [2] A [x] cFmma",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << "\n");
								incStackPtr(2);
								mStackPtr -= 2;
								goto Lak;
							}
							break;
						case cMul:
							FP_TRACE_BYTECODE_OPTIMIZATION(274,
								"cMul A[IsVarOpcode(A)] x cMul cAdd",
								"[DO_STACKPLUS2] [x] A cFmma",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							incStackPtr(2);
							mStackPtr -= 2;
							goto Lal;
						}
					}
				}
				break;
			default:
				B = ByteCodePtr[-1];
				if(IsVarOpcode(B))
				{
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						if(ByteCodePtr[-3] == cMul)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(271,
								"cMul A[IsVarOpcode(A)] B[IsVarOpcode(B)] cMul cAdd",
								"A [DO_STACKPLUS2] B cFmma",
								"    with B = " << FP_TRACE_OPCODENAME(B)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							incStackPtr(2);
							mStackPtr -= 2;
							goto Lam;
						}
					}
				}
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						switch(ByteCodePtr[-3])
						{
						case cAdd:
							if(ByteCodePtr[-4] == cDup)
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(280,
									"cDup cAdd x A[IsVarOpcode(A)] cMul cAdd",
									"[DO_STACKPLUS2] [2] A [x] cFmma",
									"    with A = " << FP_TRACE_OPCODENAME(A)
									    << ", x = " << x
									    << "\n");
								incStackPtr(2);
								mStackPtr -= 2;
								goto Lak;
							}
							break;
						case cMul:
							FP_TRACE_BYTECODE_OPTIMIZATION(273,
								"cMul x A[IsVarOpcode(A)] cMul cAdd",
								"[DO_STACKPLUS2] [x] A cFmma",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", x = " << x
								    << "\n");
							incStackPtr(2);
							mStackPtr -= 2;
							goto Lal;
						}
					}
				}
			}
			goto Default2;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(235,"cNeg cAdd", "cSub", "");
			goto Lan;
		case cImmed:
			x = ImmedPtr[0];
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(155,
						"y cAdd x cAdd",
						"[y+x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cAdd; */ // redundant, matches cAdd @ 0
					goto Lao;
				}
				break;
			case cFma:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(158,
						"y cFma x cAdd",
						"[y+x] cFma",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lap;
				}
				break;
			case cMul:
				FP_TRACE_BYTECODE_OPTIMIZATION(270,
					"cMul x cAdd",
					"[DO_STACKPLUS1] [x] cFma",
					"    with x = " << x << "\n");
				incStackPtr(1);
				mStackPtr -= 1;
				/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
				goto Laq;
			case cRSub:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(363,
							"y cAdd cRSub x cAdd",
							"[ y+x] cAdd cRSub",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lar;
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(364,
						"cNeg cRSub x cAdd",
						"[-x] cAdd cRSub",
						"    with x = " << x << "\n");
					goto Las;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(362,
						"y cRSub x cAdd",
						"[ y+x] cRSub",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lat;
				}
				break;
			case cSub:
				B = ByteCodePtr[-2];
				if(IsVarOpcode(B))
				{
					switch(ByteCodePtr[-3])
					{
					case cAdd:
						if(ByteCodePtr[-4] == cImmed)
						{
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(357,
								"y cAdd B[IsVarOpcode(B)] cSub x cAdd",
								"[ y+x] cAdd B cSub",
								"    with x = " << x
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-4] = cImmed; */ // redundant, matches y @ 5
							goto Lba;
						}
						break;
					case cNeg:
						FP_TRACE_BYTECODE_OPTIMIZATION(358,
							"cNeg B[IsVarOpcode(B)] cSub x cAdd",
							"[-x] cAdd B cSub",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						goto Lbb;
					case cImmed:
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(356,
							"y B[IsVarOpcode(B)] cSub x cAdd",
							"[ y+x] B cSub",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lbc;
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(128,
					"y x cAdd",
					"[y+x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbd;
			}
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(60,
					"x[x==Value_t()] cAdd",
					"",
					"    with x = " << x << "\n");
				goto Lbe;
			}
			break;
		default: Default2:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					FP_TRACE_BYTECODE_OPTIMIZATION(268,
						"cMul A[IsVarOpcode(A)] cAdd",
						"[DO_STACKPLUS1] A cFma",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr(1);
					mStackPtr -= 1;
					goto Lbf;
				case cRSub:
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(355,
							"x cRSub A[IsVarOpcode(A)] cAdd",
							"[DO_STACKPLUS1] A [x] cAdd cRSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						incStackPtr(1);
						mStackPtr -= 1;
						goto Lbg;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(360,
						"cRSub A[IsVarOpcode(A)] cAdd",
						"[DO_STACKPLUS1] A cAdd cRSub",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr(1);
					mStackPtr -= 1;
					goto Lbh;
				}
			}
			B = ByteCodePtr[0];
			if(IsUnaryOpcode(B))
			{
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cMul)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(285,
							"cMul A[IsVarOpcode(A)] B[IsUnaryOpcode(B)] cAdd",
							"[DO_STACKPLUS1] A B cFma",
							"    with B = " << FP_TRACE_OPCODENAME(B)
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						incStackPtr(1);
						mStackPtr -= 1;
						goto Lbi;
					}
				}
			}
		}
		goto Default1;
	TailCall_cAnd:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAnd:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(289,"cDup cAnd", "cNotNot", "");
			goto Lbj;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(145,
					"y x cAnd",
					"[fp_and(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbk;
			}
			break;
		}
		goto Default1;
	TailCall_cAsin:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAsin:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(fp_abs(x)<=Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(185,
					"x[fp_abs(x)<=Value_t(1)] cAsin",
					"[fp_asin(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lbl;
			}
		}
		goto Default1;
	TailCall_cAsinh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAsinh:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(182,
				"x cAsinh",
				"[fp_asinh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbm;
		}
		goto Default1;
	TailCall_cAtan:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAtan:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(186,
				"x cAtan",
				"[fp_atan(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbn;
		}
		goto Default1;
	TailCall_cAtan2:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAtan2:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(175,
					"y x cAtan2",
					"[fp_atan2(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbo;
			}
		}
		goto Default1;
	TailCall_cAtanh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAtanh:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(fp_abs(x)<Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(183,
					"x[fp_abs(x)<Value_t(1)] cAtanh",
					"[fp_atanh(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lbp;
			}
		}
		goto Default1;
	TailCall_cCbrt:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCbrt:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(187,
				"x cCbrt",
				"[fp_cbrt(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbq;
		}
		goto Default1;
	TailCall_cCeil:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCeil:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			B = ByteCodePtr[-1];
			if(IsUnaryOpcode(B)&&IsAlwaysIntegerOpcode(B))
			{
				A = ByteCodePtr[-2];
				if(IsVarOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(467,
						"A[IsVarOpcode(A)] B[IsUnaryOpcode(B)&&IsAlwaysIntegerOpcode(B)] cAdd cCeil",
						"cCeil A B cAdd",
						"    with B = " << FP_TRACE_OPCODENAME(B)
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					goto Lbr;
				}
			}
			goto Default3;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(474,"cNeg cCeil", "cFloor cNeg", "");
			goto Lbs;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(171,
				"x cCeil",
				"[fp_ceil(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbt;
		default: Default3:;
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(463,
					"A[IsAlwaysIntegerOpcode(A)] cCeil",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default1;
	TailCall_cCos:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCos:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(300,"cAbs cCos", "cCos", "");
			/* opcode = cCos; */ // redundant, matches cCos @ 0
			goto Lca;
		case cAtan:
			FP_TRACE_BYTECODE_OPTIMIZATION(590,"cAtan cCos", "cSqr [DO_STACKPLUS1] [Value_t(1)] cAdd cRSqrt", "");
			incStackPtr(1);
			mStackPtr -= 1;
			goto Lcb;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(303,"cNeg cCos", "cCos", "");
			/* opcode = cCos; */ // redundant, matches cCos @ 0
			goto Lca;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(188,
				"x cCos",
				"[fp_cos(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lcc;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				switch(ByteCodePtr[-1])
				{
				case cSec:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(574,
							"B[B==A] cSec A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCos",
							"B cSec cDup cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cSec; */ // redundant, matches cSec @ 2
						goto Lcd;
					}
					break;
				case cSin:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(568,
							"B[B==A] cSin A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCos",
							"B cSinCos",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lce;
					}
					break;
				}
			}
		}
		goto Default1;
	TailCall_cCosh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCosh:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(301,"cAbs cCosh", "cCosh", "");
			/* opcode = cCosh; */ // redundant, matches cCosh @ 0
			goto Lcf;
		case cAsinh:
			FP_TRACE_BYTECODE_OPTIMIZATION(524,"cAsinh cCosh", "[DO_STACKPLUS1] cSqr [Value_t(1)] cAdd cSqrt", "");
			incStackPtr(1);
			mStackPtr -= 1;
			goto Lcg;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(304,"cNeg cCosh", "cCosh", "");
			/* opcode = cCosh; */ // redundant, matches cCosh @ 0
			goto Lcf;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(189,
				"x cCosh",
				"[fp_cosh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lch;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				if(ByteCodePtr[-1] == cSinh)
				{
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(581,
							"B[B==A] cSinh A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCosh",
							"B cSinhCosh",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lci;
					}
				}
			}
		}
		goto Default1;
	TailCall_cCot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCot:
		A = ByteCodePtr[0];
		if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
		{
			if(ByteCodePtr[-1] == cTan)
			{
				B = ByteCodePtr[-2];
				if(B==A)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(572,
						"B[B==A] cTan A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCot",
						"B cTan cDup cInv",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", B = " << FP_TRACE_OPCODENAME(B)
						    << "\n");
					/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
					/* ByteCodePtr[-1] = cTan; */ // redundant, matches cTan @ 2
					goto Lcd;
				}
			}
		}
		goto Default1;
	TailCall_cCsc:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCsc:
		switch(ByteCodePtr[0])
		{
		case cAtan:
			A = ByteCodePtr[-1];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(595,
					"A[IsNeverNegativeValueOpcode(A)] cAtan cCsc",
					"A cSqr cInv [DO_STACKPLUS1] [Value_t(1)] cAdd cSqrt",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				incStackPtr(1);
				mStackPtr -= 1;
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Lcj;
			}
			goto Default4;
		default: Default4:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				if(ByteCodePtr[-1] == cSin)
				{
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(570,
							"B[B==A] cSin A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCsc",
							"B cSin cDup cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cSin; */ // redundant, matches cSin @ 2
						goto Lcd;
					}
				}
			}
		}
		goto Default1;
	TailCall_cDeg:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cDeg:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(169,
				"x cDeg",
				"[RadiansToDegrees(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lck;
		}
		goto Default1;
	TailCall_cDiv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cDiv:
		switch(ByteCodePtr[0])
		{
		case cCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(315,"cCos cDiv", "cSec cMul", "");
			goto Lcl;
		case cCot:
			FP_TRACE_BYTECODE_OPTIMIZATION(319,"cCot cDiv", "cTan cMul", "");
			goto Lcm;
		case cCsc:
			FP_TRACE_BYTECODE_OPTIMIZATION(317,"cCsc cDiv", "cSin cMul", "");
			goto Lcn;
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(81,"cDup cDiv", "[Value_t()] cMul [Value_t(1)] cAdd", "");
			goto Lco;
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(480,"cExp cDiv", "cNeg cExp cMul", "");
			goto Lcp;
		case cExp2:
			FP_TRACE_BYTECODE_OPTIMIZATION(481,"cExp2 cDiv", "cNeg cExp2 cMul", "");
			goto Lcq;
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(258,"cInv cDiv", "cMul", "");
			goto Lcr;
		case cPow:
			FP_TRACE_BYTECODE_OPTIMIZATION(479,"cPow cDiv", "cNeg cPow cMul", "");
			goto Lcs;
		case cSec:
			FP_TRACE_BYTECODE_OPTIMIZATION(318,"cSec cDiv", "cCos cMul", "");
			goto Lct;
		case cSin:
			FP_TRACE_BYTECODE_OPTIMIZATION(314,"cSin cDiv", "cCsc cMul", "");
			goto Lda;
		case cSinCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(576,"cSinCos cDiv", "cTan", "");
			goto Ldb;
		case cSinhCosh:
			FP_TRACE_BYTECODE_OPTIMIZATION(583,"cSinhCosh cDiv", "cTanh", "");
			goto Ldc;
		case cTan:
			FP_TRACE_BYTECODE_OPTIMIZATION(316,"cTan cDiv", "cCot cMul", "");
			goto Ldd;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(153,
						"cNeg x[x!=Value_t()] cDiv",
						"[-x] cDiv",
						"    with x = " << x << "\n");
					/* opcode = cDiv; */ // redundant, matches cDiv @ 0
					goto Lde;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(126,
						"y x[x!=Value_t()] cDiv",
						"[y/x]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Ldf;
				}
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(59,
					"x[x==Value_t(1)] cDiv",
					"",
					"    with x = " << x << "\n");
				goto Lbe;
			}
			if(x!=Value_t(0))
			{
				if(ByteCodePtr[-1] == cMul)
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						y = ImmedPtr[-1];
						if((y/x)==fp_const_rad_to_deg<Value_t>())
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(386,
								"y[(y/x)==fp_const_rad_to_deg<Value_t>()] cMul x[x!=Value_t(0)] cDiv",
								"cDeg",
								"    with x = " << x
								    << ", y = " << y
								    << "\n");
							goto Ldg;
						}
						if((y/x)==fp_const_deg_to_rad<Value_t>())
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(387,
								"y[(y/x)==fp_const_deg_to_rad<Value_t>()] cMul x[x!=Value_t(0)] cDiv",
								"cRad",
								"    with x = " << x
								    << ", y = " << y
								    << "\n");
							goto Ldh;
						}
						FP_TRACE_BYTECODE_OPTIMIZATION(388,
							"y cMul x[x!=Value_t(0)] cDiv",
							"[y/x] cMul",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
						goto Ldi;
					}
				}
				FP_TRACE_BYTECODE_OPTIMIZATION(390,
					"x[x!=Value_t(0)] cDiv",
					"[fp_inv(x)] cMul",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Ldj;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDiv:
					B = ByteCodePtr[-2];
					if(IsVarOpcode(B))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(336,
							"B[IsVarOpcode(B)] cDiv A[IsVarOpcode(A)] cDiv",
							"[DO_STACKPLUS1] B A cMul cDiv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						incStackPtr(1);
						mStackPtr -= 1;
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* opcode = cDiv; */ // redundant, matches cDiv @ 0
						goto Ldk;
					}
					break;
				case cRDiv:
					switch(ByteCodePtr[-2])
					{
					case cImmed:
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(331,
							"x cRDiv A[IsVarOpcode(A)] cDiv",
							"A cMul [x] cRDiv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Ldl;
					default:
						B = ByteCodePtr[-2];
						if(IsVarOpcode(B))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(330,
								"B[IsVarOpcode(B)] cRDiv A[IsVarOpcode(A)] cDiv",
								"A cMul B cRDiv",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							goto Ldm;
						}
					}
					break;
				}
			}
		}
		goto Default1;
	TailCall_cEqual:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(427,
						"cAbs x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Ldn;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(429,
						"cSqr x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Ldn;
				default:
					A = ByteCodePtr[-1];
					if(IsLogicalOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(495,
							"A[IsLogicalOpcode(A)] x[x==Value_t(0)] cEqual",
							"A cNot",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Ldo;
					}
				}
			}
			if(x==Value_t(1))
			{
				A = ByteCodePtr[-1];
				if(IsLogicalOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(493,
						"A[IsLogicalOpcode(A)] x[x==Value_t(1)] cEqual",
						"A",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					goto Lbe;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(143,
					"y x cEqual",
					"[fp_equal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldp;
			}
		}
		goto Default1;
	TailCall_cExp:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cExp:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(476,
					"x cAdd cExp",
					"cExp [fp_exp(x)] cMul",
					"    with x = " << x << "\n");
				goto Ldq;
			}
			break;
		case cLog:
			A = ByteCodePtr[-1];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(405,
					"A[IsNeverNegativeValueOpcode(A)] cLog cExp",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Ldr;
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(190,
				"x cExp",
				"[fp_exp(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lds;
		}
		goto Default1;
	TailCall_cExp2:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cExp2:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(477,
					"x cAdd cExp2",
					"cExp2 [fp_exp2(x)] cMul",
					"    with x = " << x << "\n");
				goto Ldt;
			}
			break;
		case cLog2:
			A = ByteCodePtr[-1];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(406,
					"A[IsNeverNegativeValueOpcode(A)] cLog2 cExp2",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Ldr;
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(191,
				"x cExp2",
				"[fp_exp2(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lea;
		}
		FP_TRACE_BYTECODE_OPTIMIZATION(553,"cExp2", "[DO_STACKPLUS1] [fp_log(Value_t(2))] cMul cExp", "");
		incStackPtr(1);
		mStackPtr -= 1;
		goto Leb;
	TailCall_cFloor:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFloor:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			B = ByteCodePtr[-1];
			if(IsUnaryOpcode(B)&&IsAlwaysIntegerOpcode(B))
			{
				A = ByteCodePtr[-2];
				if(IsVarOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(466,
						"A[IsVarOpcode(A)] B[IsUnaryOpcode(B)&&IsAlwaysIntegerOpcode(B)] cAdd cFloor",
						"cFloor A B cAdd",
						"    with B = " << FP_TRACE_OPCODENAME(B)
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					goto Lec;
				}
			}
			goto Default5;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(473,"cNeg cFloor", "cCeil cNeg", "");
			goto Led;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(172,
				"x cFloor",
				"[fp_floor(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lee;
		default: Default5:;
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(462,
					"A[IsAlwaysIntegerOpcode(A)] cFloor",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default1;
	TailCall_cFma:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFma:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(281,"cNeg cFma", "cFms", "");
			goto Lef;
		case cImmed:
			a = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[-1];
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-2];
					FP_TRACE_BYTECODE_OPTIMIZATION(134,
						"y x a cFma",
						"[y*x+a]",
						"    with a = " << a
						    << ", x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Leg;
				}
			}
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(160,
					"x[x==Value_t()] cFma",
					"cMul",
					"    with x = " << x << "\n");
				goto Leh;
			}
			break;
		}
		goto Default1;
	TailCall_cFmma:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFmma:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(283,"cNeg cFmma", "cFmms", "");
			goto Lei;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(112,
							"A[IsVarOpcode(A)] cMul x[x==Value_t()] cFmma",
							"[x] cMul cFmma",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cFmma; */ // redundant, matches cFmma @ 0
						goto Lej;
					}
					goto Default6;
				default: Default6:;
					A = ByteCodePtr[-1];
					if(IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						switch(ByteCodePtr[-2])
						{
						case cImmed:
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(110,
								"y A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
								"[x] cMul cFmma",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cFmma; */ // redundant, matches cFmma @ 0
							goto Lek;
						default:
							B = ByteCodePtr[-2];
							if(IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								switch(ByteCodePtr[-3])
								{
								case cImmed:
									y = ImmedPtr[-1];
									FP_TRACE_BYTECODE_OPTIMIZATION(116,
										"y B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
										"A [x] cMul cFmma",
										"    with x = " << x
										    << ", A = " << FP_TRACE_OPCODENAME(A)
										    << ", B = " << FP_TRACE_OPCODENAME(B)
										    << ", y = " << y
										    << "\n");
									/* opcode = cFmma; */ // redundant, matches cFmma @ 0
									goto Lel;
								default:
									C = ByteCodePtr[-3];
									if(IsVarOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(114,
											"C[IsVarOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
											"A [x] cMul cFmma",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cFmma; */ // redundant, matches cFmma @ 0
										goto Lem;
									}
									if(IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(115,
											"C[IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
											"B A [x] cMul cFmma",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cFmma; */ // redundant, matches cFmma @ 0
										goto Len;
									}
								}
							}
							if(IsVarOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(106,
									"B[IsVarOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
									"[x] cMul cFmma",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
								/* opcode = cFmma; */ // redundant, matches cFmma @ 0
								goto Lej;
							}
							if(IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(108,
									"B[IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
									"A [x] cMul cFmma",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* opcode = cFmma; */ // redundant, matches cFmma @ 0
								goto Leo;
							}
						}
					}
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(102,
							"A[IsVarOpcode(A)] x[x==Value_t()] cFmma",
							"cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						goto Lep;
					}
					if(IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(104,
							"A[IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
							"[x] cMul cFmma",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cFmma; */ // redundant, matches cFmma @ 0
						goto Leq;
					}
				}
			}
			b = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				a = ImmedPtr[-1];
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[-2];
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-3];
						FP_TRACE_BYTECODE_OPTIMIZATION(136,
							"y x a b cFmma",
							"[y*x+a*b]",
							"    with b = " << b
							    << ", a = " << a
							    << ", x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Ler;
					}
				}
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(161,
					"x[x==Value_t(1)] cFmma",
					"cFma",
					"    with x = " << x << "\n");
				goto Les;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(162,
					"x[x==Value_t(-1)] cFmma",
					"cFms",
					"    with x = " << x << "\n");
				goto Let;
			}
			break;
		}
		goto Default1;
	TailCall_cFmms:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFmms:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(284,"cNeg cFmms", "cFmma", "");
			goto Lfa;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(113,
							"A[IsVarOpcode(A)] cMul x[x==Value_t()] cFmms",
							"[x] cMul cFmms",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cFmms; */ // redundant, matches cFmms @ 0
						goto Lfb;
					}
					goto Default7;
				default: Default7:;
					A = ByteCodePtr[-1];
					if(IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						switch(ByteCodePtr[-2])
						{
						case cImmed:
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(111,
								"y A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
								"[x] cMul cFmms",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cFmms; */ // redundant, matches cFmms @ 0
							goto Lfc;
						default:
							B = ByteCodePtr[-2];
							if(IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								switch(ByteCodePtr[-3])
								{
								case cImmed:
									y = ImmedPtr[-1];
									FP_TRACE_BYTECODE_OPTIMIZATION(119,
										"y B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
										"A [x] cMul cFmms",
										"    with x = " << x
										    << ", A = " << FP_TRACE_OPCODENAME(A)
										    << ", B = " << FP_TRACE_OPCODENAME(B)
										    << ", y = " << y
										    << "\n");
									/* opcode = cFmms; */ // redundant, matches cFmms @ 0
									goto Lfd;
								default:
									C = ByteCodePtr[-3];
									if(IsVarOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(117,
											"C[IsVarOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
											"A [x] cMul cFmms",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cFmms; */ // redundant, matches cFmms @ 0
										goto Lfe;
									}
									if(IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(118,
											"C[IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
											"B A [x] cMul cFmms",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cFmms; */ // redundant, matches cFmms @ 0
										goto Lff;
									}
								}
							}
							if(IsVarOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(107,
									"B[IsVarOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
									"[x] cMul cFmms",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
								/* opcode = cFmms; */ // redundant, matches cFmms @ 0
								goto Lfb;
							}
							if(IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(109,
									"B[IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
									"A [x] cMul cFmms",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* opcode = cFmms; */ // redundant, matches cFmms @ 0
								goto Lfg;
							}
						}
					}
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(103,
							"A[IsVarOpcode(A)] x[x==Value_t()] cFmms",
							"cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						goto Lep;
					}
					if(IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(105,
							"A[IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
							"[x] cMul cFmms",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cFmms; */ // redundant, matches cFmms @ 0
						goto Lfh;
					}
				}
			}
			b = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				a = ImmedPtr[-1];
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[-2];
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-3];
						FP_TRACE_BYTECODE_OPTIMIZATION(137,
							"y x a b cFmms",
							"[y*x-a*b]",
							"    with b = " << b
							    << ", a = " << a
							    << ", x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lfi;
					}
				}
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(163,
					"x[x==Value_t(1)] cFmms",
					"cFms",
					"    with x = " << x << "\n");
				goto Let;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(164,
					"x[x==Value_t(-1)] cFmms",
					"cFma",
					"    with x = " << x << "\n");
				goto Les;
			}
			FP_TRACE_BYTECODE_OPTIMIZATION(52,
				"x cFmms",
				"[-x] cFmma",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lfj;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				if(ByteCodePtr[-1] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(54,
						"x A[IsVarOpcode(A)] cFmms",
						"[-x] A cFmms",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", x = " << x
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
					/* opcode = cFmms; */ // redundant, matches cFmms @ 0
					goto Lfk;
				}
			}
		}
		goto Default1;
	TailCall_cFms:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFms:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(282,"cNeg cFms", "cFma", "");
			goto Lfl;
		case cImmed:
			a = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[-1];
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-2];
					FP_TRACE_BYTECODE_OPTIMIZATION(135,
						"y x a cFms",
						"[y*x-a]",
						"    with a = " << a
						    << ", x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lfm;
				}
			}
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(51,
				"x cFms",
				"[-x] cFma",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lfn;
		}
		goto Default1;
	TailCall_cGreater:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cGreater:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(141,
					"y x cGreater",
					"[fp_less(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lfo;
			}
			if(x==fp_const_preciseDouble<Value_t>(-0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(505,
					"x[x==fp_const_preciseDouble<Value_t>(-0.5)] cGreater",
					"cNeg cAbsNot",
					"    with x = " << x << "\n");
				goto Lfp;
			}
		}
		goto Default1;
	TailCall_cGreaterOrEq:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cGreaterOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x!=Value_t(0))
			{
				if(ByteCodePtr[-1] == cAbs)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(501,
						"cAbs x[x!=Value_t(0)] cGreaterOrEq",
						"[fp_const_preciseDouble<Value_t>(0.5)/x] cMul cNotNot",
						"    with x = " << x << "\n");
					goto Lfq;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(142,
					"y x cGreaterOrEq",
					"[fp_lessOrEq(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lfr;
			}
			if(x==fp_const_preciseDouble<Value_t>(0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(504,
					"x[x==fp_const_preciseDouble<Value_t>(0.5)] cGreaterOrEq",
					"cAbsNotNot",
					"    with x = " << x << "\n");
				goto Lfs;
			}
		}
		goto Default1;
	TailCall_cHypot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cHypot:
		switch(ByteCodePtr[0])
		{
		case cSinCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(87,"cSinCos cHypot", "[DO_STACKPLUS1] [Value_t()] cMul [Value_t(1)] cAdd", "");
			incStackPtr(1);
			mStackPtr -= 1;
			goto Lco;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(591,
				"x cHypot",
				"cSqr [x*x] cAdd cSqrt",
				"    with x = " << x << "\n");
			goto Lft;
		}
		goto Default1;
	TailCall_cInt:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cInt:
		switch(ByteCodePtr[0])
		{
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(173,
				"x cInt",
				"[fp_int(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lga;
		default:
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(464,
					"A[IsAlwaysIntegerOpcode(A)] cInt",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default1;
	TailCall_cInv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cInv:
		switch(ByteCodePtr[0])
		{
		case cCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(321,"cCos cInv", "cSec", "");
			goto Lgb;
		case cCot:
			FP_TRACE_BYTECODE_OPTIMIZATION(325,"cCot cInv", "cTan", "");
			goto Ldb;
		case cCsc:
			FP_TRACE_BYTECODE_OPTIMIZATION(323,"cCsc cInv", "cSin", "");
			goto Lgc;
		case cHypot:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(592,
					"x cHypot cInv",
					"cSqr [x*x] cAdd cRSqrt",
					"    with x = " << x << "\n");
				goto Lgd;
			}
			break;
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(65,"cInv cInv", "", "");
			goto Ldr;
		case cPow:
			FP_TRACE_BYTECODE_OPTIMIZATION(423,"cPow cInv", "cNeg cPow", "");
			goto Lge;
		case cRSqrt:
			FP_TRACE_BYTECODE_OPTIMIZATION(245,"cRSqrt cInv", "cSqrt", "");
			goto Lgf;
		case cSec:
			FP_TRACE_BYTECODE_OPTIMIZATION(324,"cSec cInv", "cCos", "");
			goto Lgg;
		case cSin:
			FP_TRACE_BYTECODE_OPTIMIZATION(320,"cSin cInv", "cCsc", "");
			goto Lgh;
		case cSqrt:
			FP_TRACE_BYTECODE_OPTIMIZATION(243,"cSqrt cInv", "cRSqrt", "");
			goto Lgi;
		case cTan:
			FP_TRACE_BYTECODE_OPTIMIZATION(322,"cTan cInv", "cCot", "");
			goto Lgj;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(124,
					"x[x!=Value_t()] cInv",
					"[fp_inv(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lgk;
			}
			break;
		}
		goto Default1;
	TailCall_cLess:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLess:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				A = ByteCodePtr[-1];
				if(IsNeverNegativeValueOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(366,
						"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(0)] cLess",
						"A [x] cMul",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
					goto Lgl;
				}
			}
			if(x!=Value_t(0))
			{
				if(ByteCodePtr[-1] == cAbs)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(500,
						"cAbs x[x!=Value_t(0)] cLess",
						"[fp_const_preciseDouble<Value_t>(0.5)/x] cMul cNot",
						"    with x = " << x << "\n");
					goto Lgm;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(139,
					"y x cLess",
					"[fp_less(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lgn;
			}
			if(x==fp_const_preciseDouble<Value_t>(0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(503,
					"x[x==fp_const_preciseDouble<Value_t>(0.5)] cLess",
					"cAbsNot",
					"    with x = " << x << "\n");
				goto Lgo;
			}
		}
		goto Default1;
	TailCall_cLessOrEq:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLessOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(140,
					"y x cLessOrEq",
					"[fp_lessOrEq(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lgp;
			}
			if(x==fp_const_preciseDouble<Value_t>(-0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(506,
					"x[x==fp_const_preciseDouble<Value_t>(-0.5)] cLessOrEq",
					"cNeg cAbsNotNot",
					"    with x = " << x << "\n");
				goto Lgq;
			}
		}
		goto Default1;
	TailCall_cLog:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLog:
		switch(ByteCodePtr[0])
		{
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(408,"cExp cLog", "", "");
			goto Ldr;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(x>Value_t(0))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(565,
						"x[x>Value_t(0)] cMul cLog",
						"cLog [fp_log(x)] cAdd",
						"    with x = " << x << "\n");
					goto Lgr;
				}
			}
			break;
		case cSqr:
			FP_TRACE_BYTECODE_OPTIMIZATION(368,"cSqr cLog", "cAbs cLog cDup cAdd", "");
			goto Lgs;
		case cImmed:
			x = ImmedPtr[0];
			if(x>Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(192,
					"x[x>Value_t(0)] cLog",
					"[fp_log(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lgt;
			}
			break;
		}
		goto Default1;
	TailCall_cLog10:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLog10:
		switch(ByteCodePtr[0])
		{
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(555,"cExp cLog10", "[DO_STACKPLUS1] [fp_log10(fp_const_e<Value_t>())] cMul", "");
			incStackPtr(1);
			mStackPtr -= 1;
			goto Lha;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(x>Value_t(0))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(566,
						"x[x>Value_t(0)] cMul cLog10",
						"cLog10 [fp_log10(x)] cAdd",
						"    with x = " << x << "\n");
					goto Lhb;
				}
			}
			break;
		case cSqr:
			FP_TRACE_BYTECODE_OPTIMIZATION(370,"cSqr cLog10", "cAbs cLog10 cDup cAdd", "");
			goto Lhc;
		case cImmed:
			x = ImmedPtr[0];
			if(x>Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(193,
					"x[x>Value_t(0)] cLog10",
					"[fp_log10(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lhd;
			}
			break;
		}
		goto Default1;
	TailCall_cLog2:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLog2:
		switch(ByteCodePtr[0])
		{
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(554,"cExp cLog2", "[DO_STACKPLUS1] [fp_log2(fp_const_e<Value_t>())] cMul", "");
			incStackPtr(1);
			mStackPtr -= 1;
			goto Lhe;
		case cExp2:
			FP_TRACE_BYTECODE_OPTIMIZATION(409,"cExp2 cLog2", "", "");
			goto Ldr;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(x>Value_t(0))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(564,
						"x[x>Value_t(0)] cMul cLog2",
						"cLog2 [fp_log2(x)] cAdd",
						"    with x = " << x << "\n");
					goto Lhf;
				}
			}
			break;
		case cSqr:
			FP_TRACE_BYTECODE_OPTIMIZATION(369,"cSqr cLog2", "cAbs cLog2 cDup cAdd", "");
			goto Lhg;
		case cImmed:
			x = ImmedPtr[0];
			if(x>Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(194,
					"x[x>Value_t(0)] cLog2",
					"[fp_log2(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lhh;
			}
			break;
		}
		goto Default1;
	TailCall_cMax:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMax:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(63,"cDup cMax", "", "");
			goto Ldr;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(177,
					"y x cMax",
					"[fp_max(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lhi;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(69,
							"B[B==A] cDup A[IsVarOpcode(A)] cMax",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Ldr;
					}
					break;
				case cMax:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(71,
							"B[B==A] cMax A[IsVarOpcode(A)] cMax",
							"B cMax",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMax; */ // redundant, matches cMax @ 2
						goto Ldr;
					}
					break;
				}
			}
		}
		goto Default1;
	TailCall_cMin:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMin:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(62,"cDup cMin", "", "");
			goto Ldr;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(176,
					"y x cMin",
					"[fp_min(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lhj;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(68,
							"B[B==A] cDup A[IsVarOpcode(A)] cMin",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Ldr;
					}
					break;
				case cMin:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(70,
							"B[B==A] cMin A[IsVarOpcode(A)] cMin",
							"B cMin",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMin; */ // redundant, matches cMin @ 2
						goto Ldr;
					}
					break;
				}
			}
		}
		goto Default1;
	TailCall_cMod:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMod:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				if(ByteCodePtr[-1] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(127,
						"y x[x!=Value_t()] cMod",
						"[fp_mod(y,x)]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Lhk;
				}
			}
		}
		goto Default1;
	TailCall_cMul:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMul:
		switch(ByteCodePtr[0])
		{
		case cCsc:
			A = ByteCodePtr[-1];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>3)
			{
				if(ByteCodePtr[-2] == cCos)
				{
					B = ByteCodePtr[-3];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(582,
							"B[B==A] cCos A[IsVarOpcode(A)&&mData->mByteCode.size()>3] cCsc cMul",
							"B cCot",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
						goto Lhl;
					}
				}
			}
			goto Default8;
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(238,"cDup cMul", "cSqr", "");
			goto Lhm;
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(259,"cInv cMul", "cDiv", "");
			goto Lhn;
		case cNeg:
			switch(ByteCodePtr[-1])
			{
			case cDup:
				FP_TRACE_BYTECODE_OPTIMIZATION(541,"cDup cNeg cMul", "cSqr cNeg", "");
				goto Lho;
			default:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cMul)
					{
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(547,
								"B[B==A] cMul A[IsVarOpcode(A)] cNeg cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lhp;
						}
					}
				}
			}
			goto Default8;
		case cPow:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(379,
						"cDup x cPow cMul",
						"[x+Value_t(1)] cPow",
						"    with x = " << x << "\n");
					goto Lhq;
				}
			}
			goto Default8;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(96,
							"A[IsVarOpcode(A)] cMul x[x==Value_t()] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lhr;
					}
					goto Default9;
				default: Default9:;
					A = ByteCodePtr[-1];
					if(IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						switch(ByteCodePtr[-2])
						{
						case cImmed:
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(95,
								"y A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
								"[x] cMul",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lhs;
						default:
							B = ByteCodePtr[-2];
							if(IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								switch(ByteCodePtr[-3])
								{
								case cImmed:
									y = ImmedPtr[-1];
									FP_TRACE_BYTECODE_OPTIMIZATION(99,
										"y B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
										"A [x] cMul",
										"    with x = " << x
										    << ", A = " << FP_TRACE_OPCODENAME(A)
										    << ", B = " << FP_TRACE_OPCODENAME(B)
										    << ", y = " << y
										    << "\n");
									/* opcode = cMul; */ // redundant, matches cMul @ 0
									goto Lht;
								default:
									C = ByteCodePtr[-3];
									if(IsVarOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(97,
											"C[IsVarOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
											"A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lia;
									}
									if(IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(98,
											"C[IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
											"B A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lib;
									}
								}
							}
							if(IsVarOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(93,
									"B[IsVarOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
									"[x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lhr;
							}
							if(IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(94,
									"B[IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
									"A [x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lic;
							}
						}
					}
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(91,
							"A[IsVarOpcode(A)] x[x==Value_t()] cMul",
							"[x]",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						goto Lid;
					}
					if(IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(92,
							"A[IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lie;
					}
				}
			}
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				switch(ByteCodePtr[-2])
				{
				case cDup:
					if(x+x==Value_t(1))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(381,
							"cDup[x+x==Value_t(1)] cAdd x cMul",
							"",
							"    with x = " << x << "\n");
						goto Lif;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(382,
						"cDup cAdd x cMul",
						"[x+x] cMul",
						"    with x = " << x << "\n");
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Lig;
				case cMul:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(IsVarOpcode(A))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(454,
								"A[IsVarOpcode(A)] y cMul cAdd x cMul",
								"[x] cMul A [y*x] cMul cAdd",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lih;
						}
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(453,
						"y cAdd x cMul",
						"[x] cMul [y*x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lii;
				}
				break;
			case cDeg:
				FP_TRACE_BYTECODE_OPTIMIZATION(254,
					"cDeg x cMul",
					"[DO_STACKPLUS1] [RadiansToDegrees(x)] cMul",
					"    with x = " << x << "\n");
				incStackPtr(1);
				mStackPtr -= 1;
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Lij;
			case cDiv:
				B = ByteCodePtr[-2];
				if(IsVarOpcode(B))
				{
					switch(ByteCodePtr[-3])
					{
					case cMul:
						if(ByteCodePtr[-4] == cImmed)
						{
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(343,
								"y cMul B[IsVarOpcode(B)] cDiv x cMul",
								"[y*x] cMul B cDiv",
								"    with x = " << x
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-4] = cImmed; */ // redundant, matches y @ 5
							goto Lik;
						}
						break;
					case cNeg:
						FP_TRACE_BYTECODE_OPTIMIZATION(344,
							"cNeg B[IsVarOpcode(B)] cDiv x cMul",
							"[-x] cMul B cDiv",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						goto Lil;
					case cImmed:
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(342,
							"y B[IsVarOpcode(B)] cDiv x cMul",
							"[y*x] B cDiv",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lim;
					}
				}
				break;
			case cMul:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cDup)
					{
						if(x+x==Value_t(1))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(383,
								"cDup[x+x==Value_t(1)] cAdd cMul x cMul",
								"cMul",
								"    with x = " << x << "\n");
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lin;
						}
						FP_TRACE_BYTECODE_OPTIMIZATION(384,
							"cDup cAdd cMul x cMul",
							"cMul [x+x] cMul",
							"    with x = " << x << "\n");
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lio;
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					if(y*x==Value_t(1))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(73,
							"y[y*x==Value_t(1)] cMul x cMul",
							"",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Lip;
					}
					if((y*x)==fp_const_rad_to_deg<Value_t>())
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(372,
							"y[(y*x)==fp_const_rad_to_deg<Value_t>()] cMul x cMul",
							"cDeg",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Ldg;
					}
					if((y*x)==fp_const_deg_to_rad<Value_t>())
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(373,
							"y[(y*x)==fp_const_deg_to_rad<Value_t>()] cMul x cMul",
							"cRad",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Ldh;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(156,
						"y cMul x cMul",
						"[y*x] cMul",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Liq;
				}
				break;
			case cNeg:
				FP_TRACE_BYTECODE_OPTIMIZATION(150,
					"cNeg x cMul",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Lir;
			case cRDiv:
				switch(ByteCodePtr[-2])
				{
				case cMul:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(350,
							"y cMul cRDiv x cMul",
							"[y*x] cMul cRDiv",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lis;
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(351,
						"cNeg cRDiv x cMul",
						"[-x] cMul cRDiv",
						"    with x = " << x << "\n");
					goto Lit;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(349,
						"y cRDiv x cMul",
						"[y*x] cRDiv",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lja;
				}
				break;
			case cRad:
				FP_TRACE_BYTECODE_OPTIMIZATION(255,
					"cRad x cMul",
					"[DO_STACKPLUS1] [DegreesToRadians(x)] cMul",
					"    with x = " << x << "\n");
				incStackPtr(1);
				mStackPtr -= 1;
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Ljb;
			case cSub:
				if(ByteCodePtr[-2] == cMul)
				{
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(IsVarOpcode(A))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(455,
								"A[IsVarOpcode(A)] y cMul cSub x cMul",
								"[x] cMul A [y*x] cMul cSub",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Ljc;
						}
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(125,
					"y x cMul",
					"[y*x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ljd;
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(58,
					"x[x==Value_t(1)] cMul",
					"",
					"    with x = " << x << "\n");
				goto Lbe;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(152,
					"x[x==Value_t(-1)] cMul",
					"cNeg",
					"    with x = " << x << "\n");
				goto Lje;
			}
			if(x==Value_t(2))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(234,
					"x[x==Value_t(2)] cMul",
					"cDup cAdd",
					"    with x = " << x << "\n");
				goto Ljf;
			}
			if(x==fp_const_rad_to_deg<Value_t>())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(252,
					"x[x==fp_const_rad_to_deg<Value_t>()] cMul",
					"cDeg",
					"    with x = " << x << "\n");
				goto Ljg;
			}
			if(x==fp_const_deg_to_rad<Value_t>())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(253,
					"x[x==fp_const_deg_to_rad<Value_t>()] cMul",
					"cRad",
					"    with x = " << x << "\n");
				goto Ljh;
			}
			break;
		default: Default8:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDiv:
					B = ByteCodePtr[-2];
					if(IsVarOpcode(B))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(339,
							"B[IsVarOpcode(B)] cDiv A[IsVarOpcode(A)] cMul",
							"[DO_STACKPLUS1] A cMul B cDiv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						incStackPtr(1);
						mStackPtr -= 1;
						goto Lji;
					}
					goto Default10;
				case cMul:
					switch(ByteCodePtr[-2])
					{
					case cNeg:
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(544,
								"B[B==A] cNeg cMul A[IsVarOpcode(A)] cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lhp;
						}
						goto Default11;
					default: Default11:;
						B = ByteCodePtr[-2];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(535,
								"B[B==A] cMul A[IsVarOpcode(A)] cMul",
								"B cSqr cMul",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Ljj;
						}
					}
					goto Default10;
				case cNeg:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(538,
							"B[B==A] cNeg A[IsVarOpcode(A)] cMul",
							"B cSqr cNeg",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lho;
					}
					goto Default10;
				case cRDiv:
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(332,
							"x cRDiv A[IsVarOpcode(A)] cMul",
							"[DO_STACKPLUS1] A [x] cMul cRDiv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						incStackPtr(1);
						mStackPtr -= 1;
						goto Ljk;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(346,
						"cRDiv A[IsVarOpcode(A)] cMul",
						"[DO_STACKPLUS1] A cMul cRDiv",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr(1);
					mStackPtr -= 1;
					goto Ljl;
				default: Default10:;
					B = ByteCodePtr[-1];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(532,
							"B[B==A] A[IsVarOpcode(A)] cMul",
							"B cSqr",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-1] = B; */ // redundant, matches B @ 2
						goto Lhm;
					}
				}
			}
			if(IsUnaryOpcode(A))
			{
				B = ByteCodePtr[-1];
				if(IsVarOpcode(B)&&mData->mByteCode.size()>1)
				{
					if(ByteCodePtr[-2] == cMul)
					{
						C = ByteCodePtr[-3];
						if(C==A)
						{
							D = ByteCodePtr[-4];
							if(D==B)
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(551,
									"D[D==B] C[C==A] cMul B[IsVarOpcode(B)&&mData->mByteCode.size()>1] A[IsUnaryOpcode(A)] cMul",
									"D C cSqr cMul",
									"    with A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << ", C = " << FP_TRACE_OPCODENAME(C)
									    << ", D = " << FP_TRACE_OPCODENAME(D)
									    << "\n");
								/* ByteCodePtr[-4] = D; */ // redundant, matches D @ 5
								/* ByteCodePtr[-3] = C; */ // redundant, matches C @ 4
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Ljm;
							}
						}
					}
				}
			}
		}
		goto Default1;
	TailCall_cNEqual:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(428,
						"cAbs x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Ljn;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(430,
						"cSqr x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Ljn;
				default:
					A = ByteCodePtr[-1];
					if(IsLogicalOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(496,
							"A[IsLogicalOpcode(A)] x[x==Value_t(0)] cNEqual",
							"A",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lbe;
					}
				}
			}
			if(x==Value_t(1))
			{
				A = ByteCodePtr[-1];
				if(IsLogicalOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(494,
						"A[IsLogicalOpcode(A)] x[x==Value_t(1)] cNEqual",
						"A cNot",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					goto Ldo;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(144,
					"y x cNEqual",
					"[fp_nequal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ljo;
			}
		}
		goto Default1;
	TailCall_cNeg:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNeg:
		switch(ByteCodePtr[0])
		{
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(151,
					"x cMul cNeg",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Ljp;
			}
			break;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(64,"cNeg cNeg", "", "");
			goto Ldr;
		case cSin:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(309,
						"x cMul cSin cNeg",
						"[-x] cMul cSin",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Ljq;
				}
			}
			break;
		case cSinh:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(310,
						"x cMul cSinh cNeg",
						"[-x] cMul cSinh",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Ljr;
				}
			}
			break;
		case cTan:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(311,
						"x cMul cTan cNeg",
						"[-x] cMul cTan",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Ljs;
				}
			}
			break;
		case cTanh:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(312,
						"x cMul cTanh cNeg",
						"[-x] cMul cTanh",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Ljt;
				}
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(123,
				"x cNeg",
				"[-x]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lka;
		}
		goto Default1;
	TailCall_cNot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNot:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(292,"cAbs cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Lkb;
		case cAbsNot:
			A = ByteCodePtr[-1];
			if(IsLogicalOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(457,
					"A[IsLogicalOpcode(A)] cAbsNot cNot",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Ldr;
			}
			if(A!=cImmed)
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(458,
					"A[A!=cImmed] cAbsNot cNot",
					"A cAbsNotNot",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Lkc;
			}
			goto Default12;
		case cAbsNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(296,"cAbsNotNot cNot", "cAbsNot", "");
			goto Lkd;
		case cEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(265,"cEqual cNot", "cNEqual", "");
			goto Lke;
		case cGreater:
			FP_TRACE_BYTECODE_OPTIMIZATION(263,"cGreater cNot", "cLessOrEq", "");
			goto Lkf;
		case cGreaterOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(264,"cGreaterOrEq cNot", "cLess", "");
			goto Lkg;
		case cLess:
			FP_TRACE_BYTECODE_OPTIMIZATION(261,"cLess cNot", "cGreaterOrEq", "");
			goto Lkh;
		case cLessOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(262,"cLessOrEq cNot", "cGreater", "");
			goto Lki;
		case cNEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(266,"cNEqual cNot", "cEqual", "");
			goto Lkj;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(291,"cNeg cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Lkb;
		case cNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(294,"cNot cNot", "cNotNot", "");
			goto Lbj;
		case cNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(295,"cNotNot cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Lkb;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(130,
				"x cNot",
				"[fp_not(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lkk;
		default: Default12:;
			A = ByteCodePtr[0];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(459,
					"A[IsNeverNegativeValueOpcode(A)] cNot",
					"A cAbsNot",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				goto Lkl;
			}
		}
		goto Default1;
	TailCall_cNotNot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNotNot:
		if(ByteCodePtr[0] == cNot)
		{
			FP_TRACE_BYTECODE_OPTIMIZATION(297,"cNot cNotNot", "cNot", "");
			/* ByteCodePtr[0] = cNot; */ // redundant, matches cNot @ 1
			return;
		}
		goto Default1;
	TailCall_cOr:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cOr:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(288,"cDup cOr", "cNotNot", "");
			goto Lbj;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(146,
					"y x cOr",
					"[fp_or(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lkm;
			}
			break;
		}
		goto Default1;
	TailCall_cPow:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cPow:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(!isEvenInteger(x+x))
			{
				if(ByteCodePtr[-1] == cSqr)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(22,
						"cSqr x[!isEvenInteger(x+x)] cPow",
						"cAbs [x+x] cPow",
						"    with x = " << x << "\n");
					/* opcode = cPow; */ // redundant, matches cPow @ 0
					goto Lkn;
				}
			}
			if(isInteger(x))
			{
				switch(ByteCodePtr[-1])
				{
				case cExp:
					FP_TRACE_BYTECODE_OPTIMIZATION(41,
						"cExp x[isInteger(x)] cPow",
						"[x] cMul cExp",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					goto Lko;
				case cExp2:
					FP_TRACE_BYTECODE_OPTIMIZATION(42,
						"cExp2 x[isInteger(x)] cPow",
						"[x] cMul cExp2",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					goto Lkp;
				case cPow:
					if(ByteCodePtr[-2] == cImmed)
					{
						y = ImmedPtr[-1];
						if(!isInteger(y))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(40,
								"y[!isInteger(y)] cPow x[isInteger(x)] cPow",
								"[y*x] cPow",
								"    with x = " << x
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cPow; */ // redundant, matches cPow @ 0
							goto Lkq;
						}
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(43,
						"cPow x[isInteger(x)] cPow",
						"[x] cMul cPow",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cPow; */ // redundant, matches cPow @ 0
					goto Lkr;
				}
			}
			if(isEvenInteger(x))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(508,
						"cAbs x[isEvenInteger(x)] cPow",
						"[x] cPow",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cPow; */ // redundant, matches cPow @ 0
					goto Lks;
				case cMul:
					if(ByteCodePtr[-2] == cAbs)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(509,
							"cAbs cMul x[isEvenInteger(x)] cPow",
							"cMul [x] cPow",
							"    with x = " << x << "\n");
						/* opcode = cPow; */ // redundant, matches cPow @ 0
						goto Lkt;
					}
					break;
				}
			}
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(86,
					"x[x==Value_t()] cPow",
					"[DO_STACKPLUS1] [Value_t()] cMul [Value_t(1)] cAdd",
					"    with x = " << x << "\n");
				incStackPtr(1);
				mStackPtr -= 1;
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lla;
			}
			if(x==fp_const_preciseDouble<Value_t>(0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(397,
					"x[x==fp_const_preciseDouble<Value_t>(0.5)] cPow",
					"cSqrt",
					"    with x = " << x << "\n");
				goto Llb;
			}
			if(x==fp_inv(Value_t(3)))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(398,
					"x[x==fp_inv(Value_t(3))] cPow",
					"cCbrt",
					"    with x = " << x << "\n");
				goto Llc;
			}
			if(x==fp_inv(Value_t(-3)))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(399,
					"x[x==fp_inv(Value_t(-3))] cPow",
					"cCbrt cInv",
					"    with x = " << x << "\n");
				goto Lld;
			}
			if(x==fp_const_preciseDouble<Value_t>(-0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(400,
					"x[x==fp_const_preciseDouble<Value_t>(-0.5)] cPow",
					"cRSqrt",
					"    with x = " << x << "\n");
				goto Lle;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(401,
					"x[x==Value_t(-1)] cPow",
					"cInv",
					"    with x = " << x << "\n");
				goto Llf;
			}
			switch(ByteCodePtr[-1])
			{
			case cPow:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					if(isEvenInteger(y)&&!isEvenInteger(x*y))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(21,
							"y[isEvenInteger(y)&&!isEvenInteger(x*y)] cPow x cPow",
							"cAbs [y*x] cPow",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* opcode = cPow; */ // redundant, matches cPow @ 0
						goto Llg;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(395,
						"y cPow x cPow",
						"[y*x] cPow",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cPow; */ // redundant, matches cPow @ 0
					goto Lkq;
				}
				break;
			case cSqr:
				FP_TRACE_BYTECODE_OPTIMIZATION(44,
					"cSqr x cPow",
					"[x+x] cPow",
					"    with x = " << x << "\n");
				/* opcode = cPow; */ // redundant, matches cPow @ 0
				goto Llh;
			case cImmed:
				y = ImmedPtr[-1];
				if(y!=Value_t(0)||x>=Value_t(0))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(201,
						"y[y!=Value_t(0)||x>=Value_t(0)] x cPow",
						"[fp_pow(y,x)]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Lli;
				}
				break;
			}
			FP_TRACE_BYTECODE_OPTIMIZATION(529,
				"x cPow",
				"[DO_POWI]",
				"    with x = " << x << "\n");
			if(TryCompilePowi(x))
			  return;
		}
		goto Default1;
	TailCall_cRDiv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRDiv:
		switch(ByteCodePtr[0])
		{
		case cSinCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(577,"cSinCos cRDiv", "cCot", "");
			goto Lgj;
		case cSinhCosh:
			FP_TRACE_BYTECODE_OPTIMIZATION(584,"cSinhCosh cRDiv", "cTanh cInv", "");
			goto Llj;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(333,
					"x[x==Value_t(1)] cRDiv",
					"cInv",
					"    with x = " << x << "\n");
				goto Llf;
			}
			break;
		}
		goto Default1;
	TailCall_cRSqrt:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRSqrt:
		switch(ByteCodePtr[0])
		{
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(246,"cInv cRSqrt", "cSqrt", "");
			goto Lgf;
		case cSqr:
			FP_TRACE_BYTECODE_OPTIMIZATION(248,"cSqr cRSqrt", "cInv cAbs", "");
			goto Llk;
		}
		goto Default1;
	TailCall_cRSub:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRSub:
		if(ByteCodePtr[0] == cDup)
		{
			FP_TRACE_BYTECODE_OPTIMIZATION(80,"cDup cRSub", "[Value_t()] cMul", "");
			goto Lll;
		}
		goto Default1;
	TailCall_cRad:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRad:
		switch(ByteCodePtr[0])
		{
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(256,
					"x cMul cRad",
					"[DO_STACKPLUS1] [DegreesToRadians(x)] cMul",
					"    with x = " << x << "\n");
				incStackPtr(1);
				mStackPtr -= 1;
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Llm;
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(170,
				"x cRad",
				"[DegreesToRadians(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lln;
		}
		goto Default1;
	TailCall_cSec:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSec:
		switch(ByteCodePtr[0])
		{
		case cAtan:
			FP_TRACE_BYTECODE_OPTIMIZATION(589,"cAtan cSec", "cSqr [DO_STACKPLUS1] [Value_t(1)] cAdd cSqrt", "");
			incStackPtr(1);
			mStackPtr -= 1;
			goto Lcg;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				switch(ByteCodePtr[-1])
				{
				case cCos:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(571,
							"B[B==A] cCos A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cSec",
							"B cCos cDup cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cCos; */ // redundant, matches cCos @ 2
						goto Lcd;
					}
					break;
				case cSin:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(569,
							"B[B==A] cSin A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cSec",
							"B cSinCos cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Llo;
					}
					break;
				}
			}
		}
		goto Default1;
	TailCall_cSin:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSin:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(305,"cNeg cSin", "cSin cNeg", "");
			goto Llp;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(195,
				"x cSin",
				"[fp_sin(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Llq;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				if(ByteCodePtr[-1] == cCsc)
				{
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(573,
							"B[B==A] cCsc A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cSin",
							"B cCsc cDup cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cCsc; */ // redundant, matches cCsc @ 2
						goto Lcd;
					}
				}
			}
		}
		goto Default1;
	TailCall_cSinh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSinh:
		switch(ByteCodePtr[0])
		{
		case cAcosh:
			FP_TRACE_BYTECODE_OPTIMIZATION(511,"cAcosh cSinh", "[DO_STACKPLUS1] cSqr [Value_t(-1)] cAdd cSqrt", "");
			incStackPtr(1);
			mStackPtr -= 1;
			goto Llr;
		case cAsinh:
			FP_TRACE_BYTECODE_OPTIMIZATION(414,"cAsinh cSinh", "", "");
			goto Ldr;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(306,"cNeg cSinh", "cSinh cNeg", "");
			goto Lls;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(196,
				"x cSinh",
				"[fp_sinh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Llt;
		}
		goto Default1;
	TailCall_cSqr:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSqr:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(240,"cAbs cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Lma;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(239,"cNeg cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Lma;
		case cRSqrt:
			FP_TRACE_BYTECODE_OPTIMIZATION(247,"cRSqrt cSqr", "cInv", "");
			goto Lmb;
		case cSqrt:
			A = ByteCodePtr[-1];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(403,
					"A[IsNeverNegativeValueOpcode(A)] cSqrt cSqr",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Ldr;
			}
			goto Default13;
		default: Default13:;
			A = ByteCodePtr[0];
			if(IsComparisonOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(599,
					"A[IsComparisonOpcode(A)] cSqr",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default1;
	TailCall_cSqrt:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSqrt:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cSqr)
			{
				A = ByteCodePtr[-2];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-3] == cSqr)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(586,
							"cSqr A[IsVarOpcode(A)] cSqr cAdd cSqrt",
							"A cHypot",
							"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
						goto Lmc;
					}
				}
				B = ByteCodePtr[-2];
				if(IsUnaryOpcode(B))
				{
					A = ByteCodePtr[-3];
					if(IsVarOpcode(A))
					{
						if(ByteCodePtr[-4] == cSqr)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(587,
								"cSqr A[IsVarOpcode(A)] B[IsUnaryOpcode(B)] cSqr cAdd cSqrt",
								"A B cHypot",
								"    with B = " << FP_TRACE_OPCODENAME(B)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lmd;
						}
					}
				}
			}
			break;
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(244,"cInv cSqrt", "cRSqrt", "");
			goto Lgi;
		case cSqr:
			FP_TRACE_BYTECODE_OPTIMIZATION(242,"cSqr cSqrt", "cAbs", "");
			goto Lme;
		case cImmed:
			x = ImmedPtr[0];
			if(x>=Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(197,
					"x[x>=Value_t(0)] cSqrt",
					"[fp_sqrt(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lmf;
			}
			break;
		}
		goto Default1;
	TailCall_cSub:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSub:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cDup)
			{
				A = ByteCodePtr[-2];
				if(IsVarOpcode(A))
				{
					switch(ByteCodePtr[-3])
					{
					case cAdd:
						if(ByteCodePtr[-4] == cDup)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(278,
								"cDup cAdd A[IsVarOpcode(A)] cDup cAdd cSub",
								"[DO_STACKPLUS2] [2] A [-2] cFmma",
								"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
							incStackPtr(2);
							mStackPtr -= 2;
							goto Lmg;
						}
						break;
					case cMul:
						FP_TRACE_BYTECODE_OPTIMIZATION(276,
							"cMul A[IsVarOpcode(A)] cDup cAdd cSub",
							"[DO_STACKPLUS2] A [-2] cFmma",
							"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
						incStackPtr(2);
						mStackPtr -= 2;
						goto Lmh;
					}
				}
			}
			goto Default14;
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(79,"cDup cSub", "[Value_t()] cMul", "");
			goto Lll;
		case cMul:
			switch(ByteCodePtr[-1])
			{
			case cImmed:
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(50,
					"x cMul cSub",
					"[-x] cMul cAdd",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Lmi;
			default:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(53,
							"x A[IsVarOpcode(A)] cMul cSub",
							"[-x] A cMul cSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
						/* opcode = cSub; */ // redundant, matches cSub @ 0
						goto Lmj;
					}
				}
				B = ByteCodePtr[-1];
				if(IsVarOpcode(B))
				{
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						if(ByteCodePtr[-3] == cMul)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(272,
								"cMul A[IsVarOpcode(A)] B[IsVarOpcode(B)] cMul cSub",
								"A [DO_STACKPLUS2] B cFmms",
								"    with B = " << FP_TRACE_OPCODENAME(B)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							incStackPtr(2);
							mStackPtr -= 2;
							goto Lmk;
						}
					}
				}
			}
			goto Default14;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(236,"cNeg cSub", "cAdd", "");
			goto Lml;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(61,
					"x[x==Value_t()] cSub",
					"",
					"    with x = " << x << "\n");
				goto Lbe;
			}
			switch(ByteCodePtr[-1])
			{
			case cFma:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(159,
						"y cFma x cSub",
						"[y-x] cFma",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lmm;
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(129,
					"y x cSub",
					"[y-x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lmn;
			}
			FP_TRACE_BYTECODE_OPTIMIZATION(49,
				"x cSub",
				"[-x] cAdd",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lmo;
		default: Default14:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					FP_TRACE_BYTECODE_OPTIMIZATION(269,
						"cMul A[IsVarOpcode(A)] cSub",
						"[DO_STACKPLUS1] A cFms",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr(1);
					mStackPtr -= 1;
					goto Lmp;
				case cRSub:
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(354,
							"x cRSub A[IsVarOpcode(A)] cSub",
							"A cAdd [x] cRSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Lmq;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(361,
						"cRSub A[IsVarOpcode(A)] cSub",
						"[DO_STACKPLUS1] A cSub cRSub",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr(1);
					mStackPtr -= 1;
					goto Lmr;
				}
			}
			B = ByteCodePtr[0];
			if(IsUnaryOpcode(B))
			{
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cMul)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(286,
							"cMul A[IsVarOpcode(A)] B[IsUnaryOpcode(B)] cSub",
							"[DO_STACKPLUS1] A B cFms",
							"    with B = " << FP_TRACE_OPCODENAME(B)
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						incStackPtr(1);
						mStackPtr -= 1;
						goto Lms;
					}
				}
			}
		}
		goto Default1;
	TailCall_cTan:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cTan:
		switch(ByteCodePtr[0])
		{
		case cAtan2:
			FP_TRACE_BYTECODE_OPTIMIZATION(420,"cAtan2 cTan", "cDiv", "");
			goto Lhn;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(307,"cNeg cTan", "cTan cNeg", "");
			goto Lmt;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(199,
				"x cTan",
				"[fp_tan(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lna;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				if(ByteCodePtr[-1] == cCot)
				{
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(575,
							"B[B==A] cCot A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cTan",
							"B cCot cDup cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cCot; */ // redundant, matches cCot @ 2
						goto Lcd;
					}
				}
			}
		}
		goto Default1;
	TailCall_cTanh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cTanh:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(308,"cNeg cTanh", "cTanh cNeg", "");
			goto Lnb;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(200,
				"x cTanh",
				"[fp_tanh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lnc;
		}
		goto Default1;
	TailCall_cTrunc:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cTrunc:
		switch(ByteCodePtr[0])
		{
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(174,
				"x cTrunc",
				"[fp_trunc(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lnd;
		default:
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(461,
					"A[IsAlwaysIntegerOpcode(A)] cTrunc",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default1;
	default: Default1:;
		A = opcode;
		if(IsComparisonOpcode(A))
		{
			if(ByteCodePtr[0] == cImmed)
			{
				x = ImmedPtr[0];
				switch(ByteCodePtr[-1])
				{
				case cAdd:
					if(ByteCodePtr[-2] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(432,
							"y cAdd x A[IsComparisonOpcode(A)]",
							"[x-y] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
						goto Lne;
					}
					break;
				case cAtan:
					if(fp_abs(x)<fp_const_pi<Value_t>()*fp_const_preciseDouble<Value_t>(0.5))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(448,
							"cAtan[fp_abs(x)<fp_const_pi<Value_t>()*fp_const_preciseDouble<Value_t>(0.5)] x A[IsComparisonOpcode(A)]",
							"[fp_tan(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Lnf;
					}
					break;
				case cExp:
					if(x>Value_t(0))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(438,
							"cExp[x>Value_t(0)] x A[IsComparisonOpcode(A)]",
							"[fp_log(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Lng;
					}
					break;
				case cExp2:
					if(x>Value_t(0))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(439,
							"cExp2[x>Value_t(0)] x A[IsComparisonOpcode(A)]",
							"[fp_log2(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Lnh;
					}
					break;
				case cLog:
					B = ByteCodePtr[-2];
					if(IsNeverNegativeValueOpcode(B))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(441,
							"B[IsNeverNegativeValueOpcode(B)] cLog x A[IsComparisonOpcode(A)]",
							"B [fp_exp(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lni;
					}
					break;
				case cLog10:
					B = ByteCodePtr[-2];
					if(IsNeverNegativeValueOpcode(B))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(443,
							"B[IsNeverNegativeValueOpcode(B)] cLog10 x A[IsComparisonOpcode(A)]",
							"B [fp_pow(Value_t(10),x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lnj;
					}
					break;
				case cLog2:
					B = ByteCodePtr[-2];
					if(IsNeverNegativeValueOpcode(B))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(442,
							"B[IsNeverNegativeValueOpcode(B)] cLog2 x A[IsComparisonOpcode(A)]",
							"B [fp_exp2(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lnk;
					}
					break;
				case cMul:
					if(ByteCodePtr[-2] == cImmed)
					{
						y = ImmedPtr[-1];
						if(y>Value_t(0))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(434,
								"y[y>Value_t(0)] cMul x A[IsComparisonOpcode(A)]",
								"[x/y] A",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", x = " << x
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							goto Lnl;
						}
						if(y<Value_t(0))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(435,
								"y[y<Value_t(0)] cMul x A[IsComparisonOpcode(A)]",
								"[x/y] {OppositeComparisonOpcode(A)}",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", x = " << x
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							goto Lnm;
						}
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(433,
						"cNeg x A[IsComparisonOpcode(A)]",
						"[-x] {OppositeComparisonOpcode(A)}",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", x = " << x
						    << "\n");
					goto Lnn;
				case cPow:
					if(x>Value_t(0))
					{
						if(ByteCodePtr[-2] == cImmed)
						{
							y = ImmedPtr[-1];
							if(y>Value_t(0))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(436,
									"y[y>Value_t(0)] cPow[x>Value_t(0)] x A[IsComparisonOpcode(A)]",
									"[fp_pow(x,fp_inv(y))] A",
									"    with A = " << FP_TRACE_OPCODENAME(A)
									    << ", x = " << x
									    << ", y = " << y
									    << "\n");
								/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
								goto Lno;
							}
						}
					}
					break;
				case cSinh:
					FP_TRACE_BYTECODE_OPTIMIZATION(449,
						"cSinh x A[IsComparisonOpcode(A)]",
						"[fp_asinh(x)] A",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", x = " << x
						    << "\n");
					goto Lnp;
				case cSqr:
					if(x>Value_t(0))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(437,
							"cSqr[x>Value_t(0)] x A[IsComparisonOpcode(A)]",
							"cAbs [fp_sqrt(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Lnq;
					}
					break;
				case cTanh:
					if(fp_abs(x)<Value_t(1))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(450,
							"cTanh[fp_abs(x)<Value_t(1)] x A[IsComparisonOpcode(A)]",
							"[fp_atanh(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Lnr;
					}
					break;
				}
			}
		}
		if(IsVarOpcode(A)&&mData->mByteCode.size()>0)
		{
			B = ByteCodePtr[0];
			if(B==A)
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(549,
					"B[B==A] A[IsVarOpcode(A)&&mData->mByteCode.size()>0]",
					"B cDup",
					"    with A = " << FP_TRACE_OPCODENAME(A)
					    << ", B = " << FP_TRACE_OPCODENAME(B)
					    << "\n");
				/* ByteCodePtr[0] = B; */ // redundant, matches B @ 1
				goto Lns;
			}
		}
		if(IsUnaryOpcode(A))
		{
			B = ByteCodePtr[0];
			if(IsVarOpcode(B)&&mData->mByteCode.size()>1)
			{
				C = ByteCodePtr[-1];
				if(C==A)
				{
					D = ByteCodePtr[-2];
					if(D==B)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(550,
							"D[D==B] C[C==A] B[IsVarOpcode(B)&&mData->mByteCode.size()>1] A[IsUnaryOpcode(A)]",
							"D C cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", C = " << FP_TRACE_OPCODENAME(C)
							    << ", D = " << FP_TRACE_OPCODENAME(D)
							    << "\n");
						/* ByteCodePtr[-2] = D; */ // redundant, matches D @ 3
						/* ByteCodePtr[-1] = C; */ // redundant, matches C @ 2
						goto Lnt;
					}
				}
			}
		}
		C = opcode;
		if(IsCommutativeOrParamSwappableBinaryOpcode(C))
		{
			switch(ByteCodePtr[0])
			{
			case cSin:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A)&&mData->mByteCode.size()>3)
				{
					if(ByteCodePtr[-2] == cCos)
					{
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(579,
								"B[B==A] cCos A[IsVarOpcode(A)&&mData->mByteCode.size()>3] cSin C[IsCommutativeOrParamSwappableBinaryOpcode(C)]",
								"B cSinCos {GetParamSwappedBinaryOpcode(C)}",
								"    with C = " << FP_TRACE_OPCODENAME(C)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Loa;
						}
					}
				}
				break;
			case cSinh:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A)&&mData->mByteCode.size()>3)
				{
					if(ByteCodePtr[-2] == cCosh)
					{
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(580,
								"B[B==A] cCosh A[IsVarOpcode(A)&&mData->mByteCode.size()>3] cSinh C[IsCommutativeOrParamSwappableBinaryOpcode(C)]",
								"B cSinhCosh {GetParamSwappedBinaryOpcode(C)}",
								"    with C = " << FP_TRACE_OPCODENAME(C)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lob;
						}
					}
				}
				break;
			}
		}
	}
	goto Laa;
Laa: mData->mByteCode.push_back(opcode); return;
Lab: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Loc: FP_TRACE_BYTECODE_ADD(cAbs);
     goto TailCall_cAbs;
Lac: FP_TRACE_BYTECODE_MOD_IMMED(fp_abs(x));
     ImmedPtr[0] = fp_abs(x); return;
Lad: FP_TRACE_BYTECODE_MOD_IMMED(fp_acos(x));
     ImmedPtr[0] = fp_acos(x); return;
Lae: FP_TRACE_BYTECODE_MOD_IMMED(fp_acosh(x));
     ImmedPtr[0] = fp_acosh(x); return;
Laf: mData->mImmed.push_back(2);
     ByteCodePtr[-4] = cImmed;
Lag: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(2);
Lod: mData->mByteCode.push_back(cImmed);
Loe: opcode = cFmma;
Lof: FP_ReDefinePointers();
Log: FP_TRACE_BYTECODE_ADD(cFmma);
     goto TailCall_cFmma;
Lah: mData->mImmed.push_back(Value_t(4));
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
Loh: opcode = cMul;
Loi: FP_ReDefinePointers();
Loj: FP_TRACE_BYTECODE_ADD(cMul);
     goto TailCall_cMul;
Lai: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(Value_t(4));
Lok: mData->mByteCode.push_back(cImmed); goto Loh;
Laj: FP_TRACE_BYTECODE_MOD_IMMED(x+Value_t(1));
     ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
Lgl: opcode = cMul; goto Loj;
Lak: FP_TRACE_BYTECODE_MOD_IMMED(2);
     ImmedPtr[0] = 2;
     ByteCodePtr[-4] = cImmed;
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x); goto Lod;
Lal: FP_TRACE_BYTECODE_MOD_IMMED(x);
     ImmedPtr[0] = x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Loe;
Lam: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(B); goto Loe;
Lan: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSub;
Lol: FP_TRACE_BYTECODE_ADD(cSub);
     goto TailCall_cSub;
Lao: FP_TRACE_BYTECODE_MOD_IMMED(y+x);
     ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lom: FP_ReDefinePointers();
Lon: FP_TRACE_BYTECODE_ADD(cAdd);
     goto TailCall_cAdd;
Lap: FP_TRACE_BYTECODE_MOD_IMMED(y+x);
     ImmedPtr[-1] = y+x;
Loo: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lop: opcode = cFma;
     FP_ReDefinePointers();
Loq: FP_TRACE_BYTECODE_ADD(cFma);
     goto TailCall_cFma;
Laq: ByteCodePtr[-1] = cImmed;
Lfl: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lor: opcode = cFma; goto Loq;
Lar: FP_TRACE_BYTECODE_MOD_IMMED(y+x);
     ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Los: AddFunctionOpcode(cAdd);
Lot: opcode = cRSub;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cRSub);
     goto TailCall_cRSub;
Las: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Los;
Lat: FP_TRACE_BYTECODE_MOD_IMMED(y+x);
     ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lot;
Lba: FP_TRACE_BYTECODE_MOD_IMMED(y+x);
     ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lpa: AddFunctionOpcode(cAdd);
Lpb: AddFunctionOpcode(B);
Lpc: opcode = cSub;
Lpd: FP_ReDefinePointers(); goto Lol;
Lbb: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lpa;
Lbc: FP_TRACE_BYTECODE_MOD_IMMED(y+x);
     ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lpb;
Lbd: FP_TRACE_BYTECODE_MOD_IMMED(y+x);
     ImmedPtr[-1] = y+x;
Lbe: mData->mImmed.pop_back();
Ldr: mData->mByteCode.pop_back(); return;
Lbf: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lop;
Lbg: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Los;
Lbh: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Los;
Lbi: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(B); goto Lop;
Lbj: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cNotNot;
Lpe: FP_TRACE_BYTECODE_ADD(cNotNot);
     goto TailCall_cNotNot;
Lbk: FP_TRACE_BYTECODE_MOD_IMMED(fp_and(x,y));
     ImmedPtr[-1] = fp_and(x,y); goto Lbe;
Lbl: FP_TRACE_BYTECODE_MOD_IMMED(fp_asin(x));
     ImmedPtr[0] = fp_asin(x); return;
Lbm: FP_TRACE_BYTECODE_MOD_IMMED(fp_asinh(x));
     ImmedPtr[0] = fp_asinh(x); return;
Lbn: FP_TRACE_BYTECODE_MOD_IMMED(fp_atan(x));
     ImmedPtr[0] = fp_atan(x); return;
Lbo: FP_TRACE_BYTECODE_MOD_IMMED(fp_atan2(y,x));
     ImmedPtr[-1] = fp_atan2(y,x); goto Lbe;
Lbp: FP_TRACE_BYTECODE_MOD_IMMED(fp_atanh(x));
     ImmedPtr[0] = fp_atanh(x); return;
Lbq: FP_TRACE_BYTECODE_MOD_IMMED(fp_cbrt(x));
     ImmedPtr[0] = fp_cbrt(x); return;
Lbr: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cCeil);
Lpf: AddFunctionOpcode(A);
     AddFunctionOpcode(B);
Lpg: opcode = cAdd; goto Lom;
Lbs: mData->mByteCode.pop_back();
     AddFunctionOpcode(cFloor);
Lph: opcode = cNeg;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cNeg);
     goto TailCall_cNeg;
Lbt: FP_TRACE_BYTECODE_MOD_IMMED(fp_ceil(x));
     ImmedPtr[0] = fp_ceil(x); return;
Lca: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lpi: FP_TRACE_BYTECODE_ADD(cCos);
     goto TailCall_cCos;
Lcb: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSqr);
     mData->mImmed.push_back(Value_t(1));
Lpj: mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cAdd);
Lpk: opcode = cRSqrt;
     FP_ReDefinePointers();
Lpl: FP_TRACE_BYTECODE_ADD(cRSqrt);
     goto TailCall_cRSqrt;
Lcc: FP_TRACE_BYTECODE_MOD_IMMED(fp_cos(x));
     ImmedPtr[0] = fp_cos(x); return;
Lcd: ByteCodePtr[0] = cDup;
Lpm: opcode = cInv;
Lpn: FP_TRACE_BYTECODE_ADD(cInv);
     goto TailCall_cInv;
Lce: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinCos); return;
Lcf: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     FP_TRACE_BYTECODE_ADD(cCosh);
     goto TailCall_cCosh;
Lcg: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSqr);
Lpo: mData->mImmed.push_back(Value_t(1));
Lpp: mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cAdd);
Lpq: opcode = cSqrt;
     FP_ReDefinePointers();
Lpr: FP_TRACE_BYTECODE_ADD(cSqrt);
     goto TailCall_cSqrt;
Lch: FP_TRACE_BYTECODE_MOD_IMMED(fp_cosh(x));
     ImmedPtr[0] = fp_cosh(x); return;
Lci: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinhCosh); return;
Lcj: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSqr);
     AddFunctionOpcode(cInv); goto Lpo;
Lck: FP_TRACE_BYTECODE_MOD_IMMED(RadiansToDegrees(x));
     ImmedPtr[0] = RadiansToDegrees(x); return;
Lcl: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSec); goto Loh;
Lcm: mData->mByteCode.pop_back();
     AddFunctionOpcode(cTan); goto Loh;
Lcn: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSin); goto Loh;
Lco: mData->mImmed.push_back(Value_t());
     ByteCodePtr[0] = cImmed;
Lps: AddFunctionOpcode(cMul);
     mData->mImmed.push_back(Value_t(1));
Lpt: mData->mByteCode.push_back(cImmed); goto Lpg;
Lcp: mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     AddFunctionOpcode(cExp); goto Loh;
Lcq: mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     AddFunctionOpcode(cExp2); goto Loh;
Lcr: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lgl;
Lcs: mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     AddFunctionOpcode(cPow); goto Loh;
Lct: mData->mByteCode.pop_back();
     AddFunctionOpcode(cCos); goto Loh;
Lda: mData->mByteCode.pop_back();
     AddFunctionOpcode(cCsc); goto Loh;
Ldb: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cTan;
Lqa: FP_TRACE_BYTECODE_ADD(cTan);
     goto TailCall_cTan;
Ldc: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cTanh;
Lqb: FP_TRACE_BYTECODE_ADD(cTanh);
     goto TailCall_cTanh;
Ldd: mData->mByteCode.pop_back();
     AddFunctionOpcode(cCot); goto Loh;
Lde: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lqc: FP_TRACE_BYTECODE_ADD(cDiv);
     goto TailCall_cDiv;
Ldf: FP_TRACE_BYTECODE_MOD_IMMED(y/x);
     ImmedPtr[-1] = y/x; goto Lbe;
Ldg: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Lqd: opcode = cDeg;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cDeg);
     goto TailCall_cDeg;
Ldh: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Lqe: opcode = cRad;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cRad);
     goto TailCall_cRad;
Ldi: FP_TRACE_BYTECODE_MOD_IMMED(y/x);
     ImmedPtr[-1] = y/x;
Lep: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Loh;
Ldj: FP_TRACE_BYTECODE_MOD_IMMED(fp_inv(x));
     ImmedPtr[0] = fp_inv(x); goto Lgl;
Ldk: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cMul);
Lqf: FP_ReDefinePointers(); goto Lqc;
Ldl: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed);
Lqg: opcode = cRDiv;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cRDiv);
     goto TailCall_cRDiv;
Ldm: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(B); goto Lqg;
Ldn: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lqh: FP_TRACE_BYTECODE_ADD(cEqual);
     goto TailCall_cEqual;
Ldo: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
Lqi: opcode = cNot;
     FP_ReDefinePointers();
Lqj: FP_TRACE_BYTECODE_ADD(cNot);
     goto TailCall_cNot;
Ldp: FP_TRACE_BYTECODE_MOD_IMMED(fp_equal(y,x));
     ImmedPtr[-1] = fp_equal(y,x); goto Lbe;
Ldq: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cExp);
     mData->mImmed.push_back(fp_exp(x)); goto Lok;
Lds: FP_TRACE_BYTECODE_MOD_IMMED(fp_exp(x));
     ImmedPtr[0] = fp_exp(x); return;
Ldt: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cExp2);
     mData->mImmed.push_back(fp_exp2(x)); goto Lok;
Lea: FP_TRACE_BYTECODE_MOD_IMMED(fp_exp2(x));
     ImmedPtr[0] = fp_exp2(x); return;
Leb: mData->mImmed.push_back(fp_log(Value_t(2)));
     mData->mByteCode.push_back(cImmed);
Lqk: AddFunctionOpcode(cMul);
     opcode = cExp;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cExp);
     goto TailCall_cExp;
Lec: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cFloor); goto Lpf;
Led: mData->mByteCode.pop_back();
     AddFunctionOpcode(cCeil); goto Lph;
Lee: FP_TRACE_BYTECODE_MOD_IMMED(fp_floor(x));
     ImmedPtr[0] = fp_floor(x); return;
Lef: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cFms;
Lql: FP_TRACE_BYTECODE_ADD(cFms);
     goto TailCall_cFms;
Leg: FP_TRACE_BYTECODE_MOD_IMMED(y*x+a);
     ImmedPtr[-2] = y*x+a;
Lqm: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} return;
Leh: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Loh;
Lei: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cFmms;
Lqn: FP_TRACE_BYTECODE_ADD(cFmms);
     goto TailCall_cFmms;
Lej: ByteCodePtr[-2] = cImmed;
Lqo: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lqp: AddFunctionOpcode(cMul); goto Lof;
Lek: FP_TRACE_BYTECODE_MOD_IMMED(x);
     ImmedPtr[-1] = x;
     mData->mImmed.pop_back(); goto Lqo;
Lel: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
Lqq: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lqr: AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lqp;
Lem: mData->mImmed.pop_back(); goto Lqq;
Len: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(B); goto Lqr;
Leo: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lqr;
Leq: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back(); goto Lqp;
Ler: FP_TRACE_BYTECODE_MOD_IMMED(y*x+a*b);
     ImmedPtr[-3] = y*x+a*b;
Lqs: for(unsigned tmp=3; tmp-->0; ) {mData->mImmed.pop_back();}
Lqt: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} return;
Les: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lop;
Let: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
Lra: opcode = cFms;
     FP_ReDefinePointers(); goto Lql;
Lfa: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lrb: opcode = cFmma; goto Log;
Lfb: ByteCodePtr[-2] = cImmed;
Lrc: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lrd: AddFunctionOpcode(cMul);
Lre: FP_ReDefinePointers(); goto Lqn;
Lfc: FP_TRACE_BYTECODE_MOD_IMMED(x);
     ImmedPtr[-1] = x;
     mData->mImmed.pop_back(); goto Lrc;
Lfd: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
Lrf: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lrg: AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lrd;
Lfe: mData->mImmed.pop_back(); goto Lrf;
Lff: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(B); goto Lrg;
Lfg: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lrg;
Lfh: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back(); goto Lrd;
Lfi: FP_TRACE_BYTECODE_MOD_IMMED(y*x-a*b);
     ImmedPtr[-3] = y*x-a*b; goto Lqs;
Lfj: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x; goto Lrb;
Lfk: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
     mData->mByteCode.pop_back();
     AddFunctionOpcode(A); goto Lre;
Lfm: FP_TRACE_BYTECODE_MOD_IMMED(y*x-a);
     ImmedPtr[-2] = y*x-a; goto Lqm;
Lfn: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x; goto Lor;
Lfo: FP_TRACE_BYTECODE_MOD_IMMED(fp_less(x,y));
     ImmedPtr[-1] = fp_less(x,y); goto Lbe;
Lfp: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
Lkl: AddFunctionOpcode(cAbsNot); return;
Lfq: FP_TRACE_BYTECODE_MOD_IMMED(fp_const_preciseDouble<Value_t>(0.5)/x);
     ImmedPtr[0] = fp_const_preciseDouble<Value_t>(0.5)/x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cMul);
     opcode = cNotNot;
     FP_ReDefinePointers(); goto Lpe;
Lfr: FP_TRACE_BYTECODE_MOD_IMMED(fp_lessOrEq(x,y));
     ImmedPtr[-1] = fp_lessOrEq(x,y); goto Lbe;
Lfs: mData->mImmed.pop_back();
Lkc: mData->mByteCode.pop_back();
Lrh: AddFunctionOpcode(cAbsNotNot); return;
Lft: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cSqr);
     mData->mImmed.push_back(x*x); goto Lpp;
Lga: FP_TRACE_BYTECODE_MOD_IMMED(fp_int(x));
     ImmedPtr[0] = fp_int(x); return;
Lgb: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSec;
     FP_TRACE_BYTECODE_ADD(cSec);
     goto TailCall_cSec;
Lgc: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSin;
Lri: FP_TRACE_BYTECODE_ADD(cSin);
     goto TailCall_cSin;
Lgd: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr);
     mData->mImmed.push_back(x*x); goto Lpj;
Lge: mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     opcode = cPow;
Lrj: FP_ReDefinePointers();
Lrk: FP_TRACE_BYTECODE_ADD(cPow);
     goto TailCall_cPow;
Lgf: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSqrt; goto Lpr;
Lgg: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cCos; goto Lpi;
Lgh: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cCsc;
     FP_TRACE_BYTECODE_ADD(cCsc);
     goto TailCall_cCsc;
Lgi: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cRSqrt; goto Lpl;
Lgj: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lrl: opcode = cCot;
     FP_TRACE_BYTECODE_ADD(cCot);
     goto TailCall_cCot;
Lgk: FP_TRACE_BYTECODE_MOD_IMMED(fp_inv(x));
     ImmedPtr[0] = fp_inv(x); return;
Lgm: FP_TRACE_BYTECODE_MOD_IMMED(fp_const_preciseDouble<Value_t>(0.5)/x);
     ImmedPtr[0] = fp_const_preciseDouble<Value_t>(0.5)/x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cMul); goto Lqi;
Lgn: FP_TRACE_BYTECODE_MOD_IMMED(fp_less(y,x));
     ImmedPtr[-1] = fp_less(y,x); goto Lbe;
Lgo: mData->mImmed.pop_back();
Lkd: mData->mByteCode.pop_back(); goto Lkl;
Lgp: FP_TRACE_BYTECODE_MOD_IMMED(fp_lessOrEq(y,x));
     ImmedPtr[-1] = fp_lessOrEq(y,x); goto Lbe;
Lgq: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg); goto Lrh;
Lgr: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cLog);
     mData->mImmed.push_back(fp_log(x)); goto Lpt;
Lgs: mData->mByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     AddFunctionOpcode(cLog);
Lrm: mData->mByteCode.push_back(cDup); goto Lpg;
Lgt: FP_TRACE_BYTECODE_MOD_IMMED(fp_log(x));
     ImmedPtr[0] = fp_log(x); return;
Lha: mData->mImmed.push_back(fp_log10(fp_const_e<Value_t>()));
Lrn: ByteCodePtr[0] = cImmed; goto Loh;
Lhb: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cLog10);
     mData->mImmed.push_back(fp_log10(x)); goto Lpt;
Lhc: mData->mByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     AddFunctionOpcode(cLog10); goto Lrm;
Lhd: FP_TRACE_BYTECODE_MOD_IMMED(fp_log10(x));
     ImmedPtr[0] = fp_log10(x); return;
Lhe: mData->mImmed.push_back(fp_log2(fp_const_e<Value_t>())); goto Lrn;
Lhf: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cLog2);
     mData->mImmed.push_back(fp_log2(x)); goto Lpt;
Lhg: mData->mByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     AddFunctionOpcode(cLog2); goto Lrm;
Lhh: FP_TRACE_BYTECODE_MOD_IMMED(fp_log2(x));
     ImmedPtr[0] = fp_log2(x); return;
Lhi: FP_TRACE_BYTECODE_MOD_IMMED(fp_max(x,y));
     ImmedPtr[-1] = fp_max(x,y); goto Lbe;
Lhj: FP_TRACE_BYTECODE_MOD_IMMED(fp_min(x,y));
     ImmedPtr[-1] = fp_min(x,y); goto Lbe;
Lhk: FP_TRACE_BYTECODE_MOD_IMMED(fp_mod(y,x));
     ImmedPtr[-1] = fp_mod(y,x); goto Lbe;
Lhl: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 3; goto Lrl;
Lhm: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSqr;
Lro: FP_TRACE_BYTECODE_ADD(cSqr);
     goto TailCall_cSqr;
Lhn: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cDiv; goto Lqc;
Lho: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr); goto Lph;
Lhp: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr);
     AddFunctionOpcode(cMul); goto Lph;
Lhq: FP_TRACE_BYTECODE_MOD_IMMED(x+Value_t(1));
     ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
     opcode = cPow; goto Lrk;
Lhr: ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2; goto Loj;
Lhs: FP_TRACE_BYTECODE_MOD_IMMED(x);
     ImmedPtr[-1] = x;
Lrp: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Loi;
Lht: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
Lrq: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lrr: AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
Lrs: mData->mByteCode.push_back(cImmed); goto Loi;
Lia: mData->mImmed.pop_back(); goto Lrq;
Lib: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(B); goto Lrr;
Lic: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lrr;
Lid: ByteCodePtr[-1] = cImmed; goto Ldr;
Lie: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Loj;
Lif: mData->mImmed.pop_back(); goto Lqt;
Lig: FP_TRACE_BYTECODE_MOD_IMMED(x+x);
     ImmedPtr[0] = x+x; goto Lhr;
Lih: FP_TRACE_BYTECODE_MOD_IMMED(x);
     ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     mData->mImmed.push_back(y*x);
     mData->mByteCode.push_back(cImmed);
Lrt: AddFunctionOpcode(cMul); goto Lpg;
Lii: FP_TRACE_BYTECODE_MOD_IMMED(x);
     ImmedPtr[-1] = x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(y*x); goto Lpt;
Lij: FP_TRACE_BYTECODE_MOD_IMMED(RadiansToDegrees(x));
     ImmedPtr[0] = RadiansToDegrees(x); goto Lie;
Lik: FP_TRACE_BYTECODE_MOD_IMMED(y*x);
     ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lsa: AddFunctionOpcode(cMul);
Lsb: AddFunctionOpcode(B);
     opcode = cDiv; goto Lqf;
Lil: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lsa;
Lim: FP_TRACE_BYTECODE_MOD_IMMED(y*x);
     ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lsb;
Lin: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();} goto Loi;
Lio: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(x+x); goto Lrs;
Lip: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();} goto Lqt;
Liq: FP_TRACE_BYTECODE_MOD_IMMED(y*x);
     ImmedPtr[-1] = y*x; goto Lrp;
Lir: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x; goto Lie;
Lis: FP_TRACE_BYTECODE_MOD_IMMED(y*x);
     ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Lsc: AddFunctionOpcode(cMul); goto Lqg;
Lit: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lsc;
Lja: FP_TRACE_BYTECODE_MOD_IMMED(y*x);
     ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lqg;
Ljb: FP_TRACE_BYTECODE_MOD_IMMED(DegreesToRadians(x));
     ImmedPtr[0] = DegreesToRadians(x); goto Lie;
Ljc: FP_TRACE_BYTECODE_MOD_IMMED(x);
     ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     mData->mImmed.push_back(y*x);
     mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cMul); goto Lpc;
Ljd: FP_TRACE_BYTECODE_MOD_IMMED(y*x);
     ImmedPtr[-1] = y*x; goto Lbe;
Lje: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lph;
Ljf: ByteCodePtr[0] = cDup;
     ImmedPtr -= 1;
     mData->mImmed.pop_back();
Lsd: opcode = cAdd; goto Lon;
Ljg: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lqd;
Ljh: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lqe;
Lji: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lsa;
Ljj: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lse: AddFunctionOpcode(cSqr); goto Loi;
Ljk: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lsc;
Ljl: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lsc;
Ljm: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lse;
Ljn: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lsf: FP_TRACE_BYTECODE_ADD(cNEqual);
     goto TailCall_cNEqual;
Ljo: FP_TRACE_BYTECODE_MOD_IMMED(fp_nequal(y,x));
     ImmedPtr[-1] = fp_nequal(y,x); goto Lbe;
Ljp: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x; goto Lcr;
Ljq: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     opcode = cSin;
     FP_ReDefinePointers(); goto Lri;
Ljr: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     opcode = cSinh;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cSinh);
     goto TailCall_cSinh;
Ljs: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     opcode = cTan;
     FP_ReDefinePointers(); goto Lqa;
Ljt: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     opcode = cTanh;
     FP_ReDefinePointers(); goto Lqb;
Lka: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x; return;
Lkb: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lqj;
Lke: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cNEqual; goto Lsf;
Lkf: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cLessOrEq;
     FP_TRACE_BYTECODE_ADD(cLessOrEq);
     goto TailCall_cLessOrEq;
Lkg: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cLess;
     FP_TRACE_BYTECODE_ADD(cLess);
     goto TailCall_cLess;
Lkh: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cGreaterOrEq;
     FP_TRACE_BYTECODE_ADD(cGreaterOrEq);
     goto TailCall_cGreaterOrEq;
Lki: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cGreater;
     FP_TRACE_BYTECODE_ADD(cGreater);
     goto TailCall_cGreater;
Lkj: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cEqual; goto Lqh;
Lkk: FP_TRACE_BYTECODE_MOD_IMMED(fp_not(x));
     ImmedPtr[0] = fp_not(x); return;
Lkm: FP_TRACE_BYTECODE_MOD_IMMED(fp_or(x,y));
     ImmedPtr[-1] = fp_or(x,y); goto Lbe;
Lkn: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cAbs);
     mData->mImmed.push_back(x+x);
Lsg: mData->mByteCode.push_back(cImmed); goto Lrj;
Lko: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back(); goto Lqk;
Lkp: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cMul);
     opcode = cExp2;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cExp2);
     goto TailCall_cExp2;
Lkq: FP_TRACE_BYTECODE_MOD_IMMED(y*x);
     ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lrj;
Lkr: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cMul); goto Lrj;
Lks: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lrk;
Lkt: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(x); goto Lsg;
Lla: FP_TRACE_BYTECODE_MOD_IMMED(Value_t());
     ImmedPtr[0] = Value_t(); goto Lps;
Llb: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lpq;
Llc: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     opcode = cCbrt;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cCbrt);
     goto TailCall_cCbrt;
Lld: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cCbrt);
Lsh: opcode = cInv;
     FP_ReDefinePointers(); goto Lpn;
Lle: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lpk;
Llf: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lsh;
Llg: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cAbs);
     mData->mImmed.push_back(y*x); goto Lsg;
Llh: FP_TRACE_BYTECODE_MOD_IMMED(x+x);
     ImmedPtr[0] = x+x; goto Lks;
Lli: FP_TRACE_BYTECODE_MOD_IMMED(fp_pow(y,x));
     ImmedPtr[-1] = fp_pow(y,x); goto Lbe;
Llj: mData->mByteCode.pop_back();
     AddFunctionOpcode(cTanh); goto Lsh;
Llk: mData->mByteCode.pop_back();
     AddFunctionOpcode(cInv);
     opcode = cAbs;
     FP_ReDefinePointers(); goto Loc;
Lll: mData->mImmed.push_back(Value_t()); goto Lrn;
Llm: FP_TRACE_BYTECODE_MOD_IMMED(DegreesToRadians(x));
     ImmedPtr[0] = DegreesToRadians(x); goto Lcr;
Lln: FP_TRACE_BYTECODE_MOD_IMMED(DegreesToRadians(x));
     ImmedPtr[0] = DegreesToRadians(x); return;
Llo: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinCos); goto Lsh;
Llp: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSin); goto Lph;
Llq: FP_TRACE_BYTECODE_MOD_IMMED(fp_sin(x));
     ImmedPtr[0] = fp_sin(x); return;
Llr: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSqr);
     mData->mImmed.push_back(Value_t(-1)); goto Lpp;
Lls: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSinh); goto Lph;
Llt: FP_TRACE_BYTECODE_MOD_IMMED(fp_sinh(x));
     ImmedPtr[0] = fp_sinh(x); return;
Lma: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lro;
Lmb: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lpm;
Lmc: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
Lsi: opcode = cHypot;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cHypot);
     goto TailCall_cHypot;
Lmd: for(unsigned tmp=5; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(B); goto Lsi;
Lme: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cAbs; goto Loc;
Lmf: FP_TRACE_BYTECODE_MOD_IMMED(fp_sqrt(x));
     ImmedPtr[0] = fp_sqrt(x); return;
Lmg: mData->mImmed.push_back(2);
     ByteCodePtr[-4] = cImmed;
Lmh: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(-2); goto Lod;
Lmi: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
     mData->mByteCode.pop_back(); goto Lrt;
Lmj: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cMul); goto Lpd;
Lmk: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(B);
     opcode = cFmms; goto Lre;
Lml: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lsd;
Lmm: FP_TRACE_BYTECODE_MOD_IMMED(y-x);
     ImmedPtr[-1] = y-x; goto Loo;
Lmn: FP_TRACE_BYTECODE_MOD_IMMED(y-x);
     ImmedPtr[-1] = y-x; goto Lbe;
Lmo: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x; goto Lsd;
Lmp: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lra;
Lmq: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cAdd);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lot;
Lmr: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cSub); goto Lot;
Lms: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(B); goto Lra;
Lmt: mData->mByteCode.pop_back();
     AddFunctionOpcode(cTan); goto Lph;
Lna: FP_TRACE_BYTECODE_MOD_IMMED(fp_tan(x));
     ImmedPtr[0] = fp_tan(x); return;
Lnb: mData->mByteCode.pop_back();
     AddFunctionOpcode(cTanh); goto Lph;
Lnc: FP_TRACE_BYTECODE_MOD_IMMED(fp_tanh(x));
     ImmedPtr[0] = fp_tanh(x); return;
Lnd: FP_TRACE_BYTECODE_MOD_IMMED(fp_trunc(x));
     ImmedPtr[0] = fp_trunc(x); return;
Lne: FP_TRACE_BYTECODE_MOD_IMMED(x-y);
     ImmedPtr[-1] = x-y;
Lsj: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lsk: AddFunctionOpcode(A); return;
Lnf: FP_TRACE_BYTECODE_MOD_IMMED(fp_tan(x));
     ImmedPtr[0] = fp_tan(x);
Lsl: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back(); goto Lsk;
Lng: FP_TRACE_BYTECODE_MOD_IMMED(fp_log(x));
     ImmedPtr[0] = fp_log(x); goto Lsl;
Lnh: FP_TRACE_BYTECODE_MOD_IMMED(fp_log2(x));
     ImmedPtr[0] = fp_log2(x); goto Lsl;
Lni: FP_TRACE_BYTECODE_MOD_IMMED(fp_exp(x));
     ImmedPtr[0] = fp_exp(x); goto Lsl;
Lnj: FP_TRACE_BYTECODE_MOD_IMMED(fp_pow(Value_t(10),x));
     ImmedPtr[0] = fp_pow(Value_t(10),x); goto Lsl;
Lnk: FP_TRACE_BYTECODE_MOD_IMMED(fp_exp2(x));
     ImmedPtr[0] = fp_exp2(x); goto Lsl;
Lnl: FP_TRACE_BYTECODE_MOD_IMMED(x/y);
     ImmedPtr[-1] = x/y; goto Lsj;
Lnm: FP_TRACE_BYTECODE_MOD_IMMED(x/y);
     ImmedPtr[-1] = x/y;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lsm: AddFunctionOpcode(OppositeComparisonOpcode(A)); return;
Lnn: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back(); goto Lsm;
Lno: FP_TRACE_BYTECODE_MOD_IMMED(fp_pow(x,fp_inv(y)));
     ImmedPtr[-1] = fp_pow(x,fp_inv(y)); goto Lsj;
Lnp: FP_TRACE_BYTECODE_MOD_IMMED(fp_asinh(x));
     ImmedPtr[0] = fp_asinh(x); goto Lsl;
Lnq: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cAbs);
     mData->mImmed.push_back(fp_sqrt(x));
     mData->mByteCode.push_back(cImmed); goto Lsk;
Lnr: FP_TRACE_BYTECODE_MOD_IMMED(fp_atanh(x));
     ImmedPtr[0] = fp_atanh(x); goto Lsl;
Lns: mData->mByteCode.push_back(cDup); return;
Lnt: ByteCodePtr[0] = cDup; return;
Loa: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinCos);
Lsn: AddFunctionOpcode(GetParamSwappedBinaryOpcode(C)); return;
Lob: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinhCosh); goto Lsn;
return;
// This list of dummy gotos is here to inhibit
// compiler warnings on unused labels
goto TailCall_cAcos;goto TailCall_cAcosh;goto TailCall_cAnd;
goto TailCall_cAsin;goto TailCall_cAsinh;goto TailCall_cAtan;
goto TailCall_cAtan2;goto TailCall_cAtanh;goto TailCall_cCeil;
goto TailCall_cFloor;goto TailCall_cInt;goto TailCall_cLog;
goto TailCall_cLog10;goto TailCall_cLog2;goto TailCall_cMax;
goto TailCall_cMin;goto TailCall_cMod;goto TailCall_cOr;
goto TailCall_cRDiv;goto TailCall_cRad;goto TailCall_cSec;
goto TailCall_cSin;goto TailCall_cSinh;goto TailCall_cSqrt;
goto TailCall_cTan;goto TailCall_cTanh;goto TailCall_cTrunc;
#endif

#if((FP_COMPLEX_VERSION) && (FP_FLOAT_VERSION))
	Value_t x;
	unsigned A;
	unsigned B;
	Value_t y;
	Value_t a;
	unsigned C;
	Value_t b;
	unsigned D;
	switch(opcode)
	{
	TailCall_cAbs:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAbs:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(237,"cNeg cAbs", "cAbs", "");
			/* opcode = cAbs; */ // redundant, matches cAbs @ 0
			goto Lab;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(168,
				"x cAbs",
				"[fp_abs(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lac;
		}
		goto Default0;
	TailCall_cAcos:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAcos:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(208,
				"x cAcos",
				"[fp_acos(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lad;
		}
		goto Default0;
	TailCall_cAcosh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAcosh:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(205,
				"x cAcosh",
				"[fp_acosh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lae;
		}
		goto Default0;
	TailCall_cAdd:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAdd:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cDup)
			{
				A = ByteCodePtr[-2];
				if(IsVarOpcode(A))
				{
					switch(ByteCodePtr[-3])
					{
					case cAdd:
						if(ByteCodePtr[-4] == cDup)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(277,
								"cDup cAdd A[IsVarOpcode(A)] cDup cAdd cAdd",
								"[DO_STACKPLUS2] [2] A [2] cFmma",
								"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
							incStackPtr(2);
							mStackPtr -= 2;
							goto Laf;
						}
						break;
					case cMul:
						FP_TRACE_BYTECODE_OPTIMIZATION(275,
							"cMul A[IsVarOpcode(A)] cDup cAdd cAdd",
							"[DO_STACKPLUS2] A [2] cFmma",
							"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
						incStackPtr(2);
						mStackPtr -= 2;
						goto Lag;
					}
				}
			}
			goto Default1;
		case cDup:
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(375,"cDup cAdd cDup cAdd", "[Value_t(4)] cMul", "");
					goto Lah;
				}
				break;
			case cMul:
				if(ByteCodePtr[-2] == cAdd)
				{
					if(ByteCodePtr[-3] == cDup)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(376,"cDup cAdd cMul cDup cAdd", "cMul [Value_t(4)] cMul", "");
						goto Lai;
					}
				}
				break;
			}
			goto Default1;
		case cMul:
			switch(ByteCodePtr[-1])
			{
			case cImmed:
				x = ImmedPtr[0];
				switch(ByteCodePtr[-2])
				{
				case cDup:
					FP_TRACE_BYTECODE_OPTIMIZATION(378,
						"cDup x cMul cAdd",
						"[x+Value_t(1)] cMul",
						"    with x = " << x << "\n");
					goto Laj;
				default:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						switch(ByteCodePtr[-3])
						{
						case cAdd:
							if(ByteCodePtr[-4] == cDup)
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(279,
									"cDup cAdd A[IsVarOpcode(A)] x cMul cAdd",
									"[DO_STACKPLUS2] [2] A [x] cFmma",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << "\n");
								incStackPtr(2);
								mStackPtr -= 2;
								goto Lak;
							}
							break;
						case cMul:
							FP_TRACE_BYTECODE_OPTIMIZATION(274,
								"cMul A[IsVarOpcode(A)] x cMul cAdd",
								"[DO_STACKPLUS2] [x] A cFmma",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							incStackPtr(2);
							mStackPtr -= 2;
							goto Lal;
						}
					}
				}
				break;
			default:
				B = ByteCodePtr[-1];
				if(IsVarOpcode(B))
				{
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						if(ByteCodePtr[-3] == cMul)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(271,
								"cMul A[IsVarOpcode(A)] B[IsVarOpcode(B)] cMul cAdd",
								"A [DO_STACKPLUS2] B cFmma",
								"    with B = " << FP_TRACE_OPCODENAME(B)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							incStackPtr(2);
							mStackPtr -= 2;
							goto Lam;
						}
					}
				}
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						switch(ByteCodePtr[-3])
						{
						case cAdd:
							if(ByteCodePtr[-4] == cDup)
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(280,
									"cDup cAdd x A[IsVarOpcode(A)] cMul cAdd",
									"[DO_STACKPLUS2] [2] A [x] cFmma",
									"    with A = " << FP_TRACE_OPCODENAME(A)
									    << ", x = " << x
									    << "\n");
								incStackPtr(2);
								mStackPtr -= 2;
								goto Lak;
							}
							break;
						case cMul:
							FP_TRACE_BYTECODE_OPTIMIZATION(273,
								"cMul x A[IsVarOpcode(A)] cMul cAdd",
								"[DO_STACKPLUS2] [x] A cFmma",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", x = " << x
								    << "\n");
							incStackPtr(2);
							mStackPtr -= 2;
							goto Lal;
						}
					}
				}
			}
			goto Default1;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(235,"cNeg cAdd", "cSub", "");
			goto Lan;
		case cImmed:
			x = ImmedPtr[0];
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(155,
						"y cAdd x cAdd",
						"[y+x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cAdd; */ // redundant, matches cAdd @ 0
					goto Lao;
				}
				break;
			case cFma:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(158,
						"y cFma x cAdd",
						"[y+x] cFma",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lap;
				}
				break;
			case cMul:
				FP_TRACE_BYTECODE_OPTIMIZATION(270,
					"cMul x cAdd",
					"[DO_STACKPLUS1] [x] cFma",
					"    with x = " << x << "\n");
				incStackPtr(1);
				mStackPtr -= 1;
				/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
				goto Laq;
			case cRSub:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(363,
							"y cAdd cRSub x cAdd",
							"[ y+x] cAdd cRSub",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lar;
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(364,
						"cNeg cRSub x cAdd",
						"[-x] cAdd cRSub",
						"    with x = " << x << "\n");
					goto Las;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(362,
						"y cRSub x cAdd",
						"[ y+x] cRSub",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lat;
				}
				break;
			case cSub:
				B = ByteCodePtr[-2];
				if(IsVarOpcode(B))
				{
					switch(ByteCodePtr[-3])
					{
					case cAdd:
						if(ByteCodePtr[-4] == cImmed)
						{
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(357,
								"y cAdd B[IsVarOpcode(B)] cSub x cAdd",
								"[ y+x] cAdd B cSub",
								"    with x = " << x
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-4] = cImmed; */ // redundant, matches y @ 5
							goto Lba;
						}
						break;
					case cNeg:
						FP_TRACE_BYTECODE_OPTIMIZATION(358,
							"cNeg B[IsVarOpcode(B)] cSub x cAdd",
							"[-x] cAdd B cSub",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						goto Lbb;
					case cImmed:
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(356,
							"y B[IsVarOpcode(B)] cSub x cAdd",
							"[ y+x] B cSub",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lbc;
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(128,
					"y x cAdd",
					"[y+x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbd;
			}
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(60,
					"x[x==Value_t()] cAdd",
					"",
					"    with x = " << x << "\n");
				goto Lbe;
			}
			break;
		default: Default1:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					FP_TRACE_BYTECODE_OPTIMIZATION(268,
						"cMul A[IsVarOpcode(A)] cAdd",
						"[DO_STACKPLUS1] A cFma",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr(1);
					mStackPtr -= 1;
					goto Lbf;
				case cRSub:
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(355,
							"x cRSub A[IsVarOpcode(A)] cAdd",
							"[DO_STACKPLUS1] A [x] cAdd cRSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						incStackPtr(1);
						mStackPtr -= 1;
						goto Lbg;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(360,
						"cRSub A[IsVarOpcode(A)] cAdd",
						"[DO_STACKPLUS1] A cAdd cRSub",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr(1);
					mStackPtr -= 1;
					goto Lbh;
				}
			}
			B = ByteCodePtr[0];
			if(IsUnaryOpcode(B))
			{
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cMul)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(285,
							"cMul A[IsVarOpcode(A)] B[IsUnaryOpcode(B)] cAdd",
							"[DO_STACKPLUS1] A B cFma",
							"    with B = " << FP_TRACE_OPCODENAME(B)
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						incStackPtr(1);
						mStackPtr -= 1;
						goto Lbi;
					}
				}
			}
		}
		goto Default0;
	TailCall_cAnd:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAnd:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(289,"cDup cAnd", "cNotNot", "");
			goto Lbj;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(145,
					"y x cAnd",
					"[fp_and(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbk;
			}
			break;
		}
		goto Default0;
	TailCall_cArg:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cArg:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(226,
				"x cArg",
				"[fp_arg(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbl;
		}
		goto Default0;
	TailCall_cAsin:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAsin:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(209,
				"x cAsin",
				"[fp_asin(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbm;
		}
		goto Default0;
	TailCall_cAsinh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAsinh:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(206,
				"x cAsinh",
				"[fp_asinh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbn;
		}
		goto Default0;
	TailCall_cAtan:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAtan:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(Value_t(x.real(),fp_abs(x.imag()))!=Value_t(0,1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(210,
					"x[Value_t(x.real(),fp_abs(x.imag()))!=Value_t(0,1)] cAtan",
					"[fp_atan(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lbo;
			}
		}
		goto Default0;
	TailCall_cAtan2:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAtan2:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(175,
					"y x cAtan2",
					"[fp_atan2(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbp;
			}
		}
		goto Default0;
	TailCall_cAtanh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAtanh:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(Value_t(fp_abs(x.real()),x.imag())!=Value_t(1,0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(207,
					"x[Value_t(fp_abs(x.real()),x.imag())!=Value_t(1,0)] cAtanh",
					"[fp_atanh(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lbq;
			}
		}
		goto Default0;
	TailCall_cCbrt:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCbrt:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(211,
				"x cCbrt",
				"[fp_cbrt(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbr;
		}
		goto Default0;
	TailCall_cCeil:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCeil:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			B = ByteCodePtr[-1];
			if(IsUnaryOpcode(B)&&IsAlwaysIntegerOpcode(B))
			{
				A = ByteCodePtr[-2];
				if(IsVarOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(467,
						"A[IsVarOpcode(A)] B[IsUnaryOpcode(B)&&IsAlwaysIntegerOpcode(B)] cAdd cCeil",
						"cCeil A B cAdd",
						"    with B = " << FP_TRACE_OPCODENAME(B)
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					goto Lbs;
				}
			}
			goto Default2;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(474,"cNeg cCeil", "cFloor cNeg", "");
			goto Lbt;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(171,
				"x cCeil",
				"[fp_ceil(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lca;
		default: Default2:;
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(463,
					"A[IsAlwaysIntegerOpcode(A)] cCeil",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cConj:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cConj:
		switch(ByteCodePtr[0])
		{
		case cConj:
			FP_TRACE_BYTECODE_OPTIMIZATION(66,"cConj cConj", "", "");
			goto Lcb;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(229,
				"x cConj",
				"[fp_conj(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lcc;
		}
		goto Default0;
	TailCall_cCos:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCos:
		switch(ByteCodePtr[0])
		{
		case cAcos:
			FP_TRACE_BYTECODE_OPTIMIZATION(411,"cAcos cCos", "", "");
			goto Lcb;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(303,"cNeg cCos", "cCos", "");
			/* opcode = cCos; */ // redundant, matches cCos @ 0
			goto Lcd;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(212,
				"x cCos",
				"[fp_cos(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lce;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				switch(ByteCodePtr[-1])
				{
				case cSec:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(574,
							"B[B==A] cSec A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCos",
							"B cSec cDup cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cSec; */ // redundant, matches cSec @ 2
						goto Lcf;
					}
					break;
				case cSin:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(568,
							"B[B==A] cSin A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCos",
							"B cSinCos",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lcg;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cCosh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCosh:
		switch(ByteCodePtr[0])
		{
		case cAsinh:
			FP_TRACE_BYTECODE_OPTIMIZATION(524,"cAsinh cCosh", "[DO_STACKPLUS1] cSqr [Value_t(1)] cAdd cSqrt", "");
			incStackPtr(1);
			mStackPtr -= 1;
			goto Lch;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(304,"cNeg cCosh", "cCosh", "");
			/* opcode = cCosh; */ // redundant, matches cCosh @ 0
			goto Lci;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(213,
				"x cCosh",
				"[fp_cosh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lcj;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				if(ByteCodePtr[-1] == cSinh)
				{
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(581,
							"B[B==A] cSinh A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCosh",
							"B cSinhCosh",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lck;
					}
				}
			}
		}
		goto Default0;
	TailCall_cCot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCot:
		A = ByteCodePtr[0];
		if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
		{
			if(ByteCodePtr[-1] == cTan)
			{
				B = ByteCodePtr[-2];
				if(B==A)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(572,
						"B[B==A] cTan A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCot",
						"B cTan cDup cInv",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", B = " << FP_TRACE_OPCODENAME(B)
						    << "\n");
					/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
					/* ByteCodePtr[-1] = cTan; */ // redundant, matches cTan @ 2
					goto Lcf;
				}
			}
		}
		goto Default0;
	TailCall_cCsc:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCsc:
		A = ByteCodePtr[0];
		if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
		{
			if(ByteCodePtr[-1] == cSin)
			{
				B = ByteCodePtr[-2];
				if(B==A)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(570,
						"B[B==A] cSin A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCsc",
						"B cSin cDup cInv",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", B = " << FP_TRACE_OPCODENAME(B)
						    << "\n");
					/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
					/* ByteCodePtr[-1] = cSin; */ // redundant, matches cSin @ 2
					goto Lcf;
				}
			}
		}
		goto Default0;
	TailCall_cDeg:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cDeg:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(169,
				"x cDeg",
				"[RadiansToDegrees(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lcl;
		}
		goto Default0;
	TailCall_cDiv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cDiv:
		switch(ByteCodePtr[0])
		{
		case cCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(315,"cCos cDiv", "cSec cMul", "");
			goto Lcm;
		case cCot:
			FP_TRACE_BYTECODE_OPTIMIZATION(319,"cCot cDiv", "cTan cMul", "");
			goto Lcn;
		case cCsc:
			FP_TRACE_BYTECODE_OPTIMIZATION(317,"cCsc cDiv", "cSin cMul", "");
			goto Lco;
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(81,"cDup cDiv", "[Value_t()] cMul [Value_t(1)] cAdd", "");
			goto Lcp;
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(480,"cExp cDiv", "cNeg cExp cMul", "");
			goto Lcq;
		case cExp2:
			FP_TRACE_BYTECODE_OPTIMIZATION(481,"cExp2 cDiv", "cNeg cExp2 cMul", "");
			goto Lcr;
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(258,"cInv cDiv", "cMul", "");
			goto Lcs;
		case cPow:
			FP_TRACE_BYTECODE_OPTIMIZATION(479,"cPow cDiv", "cNeg cPow cMul", "");
			goto Lct;
		case cSec:
			FP_TRACE_BYTECODE_OPTIMIZATION(318,"cSec cDiv", "cCos cMul", "");
			goto Lda;
		case cSin:
			FP_TRACE_BYTECODE_OPTIMIZATION(314,"cSin cDiv", "cCsc cMul", "");
			goto Ldb;
		case cSinCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(576,"cSinCos cDiv", "cTan", "");
			goto Ldc;
		case cSinhCosh:
			FP_TRACE_BYTECODE_OPTIMIZATION(583,"cSinhCosh cDiv", "cTanh", "");
			goto Ldd;
		case cTan:
			FP_TRACE_BYTECODE_OPTIMIZATION(316,"cTan cDiv", "cCot cMul", "");
			goto Lde;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(153,
						"cNeg x[x!=Value_t()] cDiv",
						"[-x] cDiv",
						"    with x = " << x << "\n");
					/* opcode = cDiv; */ // redundant, matches cDiv @ 0
					goto Ldf;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(126,
						"y x[x!=Value_t()] cDiv",
						"[y/x]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Ldg;
				}
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(59,
					"x[x==Value_t(1)] cDiv",
					"",
					"    with x = " << x << "\n");
				goto Lbe;
			}
			if(x!=Value_t(0))
			{
				if(ByteCodePtr[-1] == cMul)
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						y = ImmedPtr[-1];
						if((y/x)==fp_const_rad_to_deg<Value_t>())
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(386,
								"y[(y/x)==fp_const_rad_to_deg<Value_t>()] cMul x[x!=Value_t(0)] cDiv",
								"cDeg",
								"    with x = " << x
								    << ", y = " << y
								    << "\n");
							goto Ldh;
						}
						if((y/x)==fp_const_deg_to_rad<Value_t>())
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(387,
								"y[(y/x)==fp_const_deg_to_rad<Value_t>()] cMul x[x!=Value_t(0)] cDiv",
								"cRad",
								"    with x = " << x
								    << ", y = " << y
								    << "\n");
							goto Ldi;
						}
						FP_TRACE_BYTECODE_OPTIMIZATION(388,
							"y cMul x[x!=Value_t(0)] cDiv",
							"[y/x] cMul",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
						goto Ldj;
					}
				}
				FP_TRACE_BYTECODE_OPTIMIZATION(390,
					"x[x!=Value_t(0)] cDiv",
					"[fp_inv(x)] cMul",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Ldk;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDiv:
					B = ByteCodePtr[-2];
					if(IsVarOpcode(B))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(336,
							"B[IsVarOpcode(B)] cDiv A[IsVarOpcode(A)] cDiv",
							"[DO_STACKPLUS1] B A cMul cDiv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						incStackPtr(1);
						mStackPtr -= 1;
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* opcode = cDiv; */ // redundant, matches cDiv @ 0
						goto Ldl;
					}
					break;
				case cRDiv:
					switch(ByteCodePtr[-2])
					{
					case cImmed:
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(331,
							"x cRDiv A[IsVarOpcode(A)] cDiv",
							"A cMul [x] cRDiv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Ldm;
					default:
						B = ByteCodePtr[-2];
						if(IsVarOpcode(B))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(330,
								"B[IsVarOpcode(B)] cRDiv A[IsVarOpcode(A)] cDiv",
								"A cMul B cRDiv",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							goto Ldn;
						}
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cEqual:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(427,
						"cAbs x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Ldo;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(429,
						"cSqr x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Ldo;
				default:
					A = ByteCodePtr[-1];
					if(IsLogicalOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(495,
							"A[IsLogicalOpcode(A)] x[x==Value_t(0)] cEqual",
							"A cNot",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Ldp;
					}
				}
			}
			if(x==Value_t(1))
			{
				A = ByteCodePtr[-1];
				if(IsLogicalOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(493,
						"A[IsLogicalOpcode(A)] x[x==Value_t(1)] cEqual",
						"A",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					goto Lbe;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(143,
					"y x cEqual",
					"[fp_equal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldq;
			}
		}
		goto Default0;
	TailCall_cExp:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cExp:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(476,
					"x cAdd cExp",
					"cExp [fp_exp(x)] cMul",
					"    with x = " << x << "\n");
				goto Ldr;
			}
			break;
		case cLog:
			A = ByteCodePtr[-1];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(405,
					"A[IsNeverNegativeValueOpcode(A)] cLog cExp",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Lcb;
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(214,
				"x cExp",
				"[fp_exp(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lds;
		}
		goto Default0;
	TailCall_cExp2:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cExp2:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(477,
					"x cAdd cExp2",
					"cExp2 [fp_exp2(x)] cMul",
					"    with x = " << x << "\n");
				goto Ldt;
			}
			break;
		case cLog2:
			A = ByteCodePtr[-1];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(406,
					"A[IsNeverNegativeValueOpcode(A)] cLog2 cExp2",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Lcb;
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(215,
				"x cExp2",
				"[fp_exp2(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lea;
		}
		FP_TRACE_BYTECODE_OPTIMIZATION(553,"cExp2", "[DO_STACKPLUS1] [fp_log(Value_t(2))] cMul cExp", "");
		incStackPtr(1);
		mStackPtr -= 1;
		goto Leb;
	TailCall_cFloor:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFloor:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			B = ByteCodePtr[-1];
			if(IsUnaryOpcode(B)&&IsAlwaysIntegerOpcode(B))
			{
				A = ByteCodePtr[-2];
				if(IsVarOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(466,
						"A[IsVarOpcode(A)] B[IsUnaryOpcode(B)&&IsAlwaysIntegerOpcode(B)] cAdd cFloor",
						"cFloor A B cAdd",
						"    with B = " << FP_TRACE_OPCODENAME(B)
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					goto Lec;
				}
			}
			goto Default3;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(473,"cNeg cFloor", "cCeil cNeg", "");
			goto Led;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(172,
				"x cFloor",
				"[fp_floor(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lee;
		default: Default3:;
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(462,
					"A[IsAlwaysIntegerOpcode(A)] cFloor",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cFma:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFma:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(281,"cNeg cFma", "cFms", "");
			goto Lef;
		case cImmed:
			a = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[-1];
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-2];
					FP_TRACE_BYTECODE_OPTIMIZATION(134,
						"y x a cFma",
						"[y*x+a]",
						"    with a = " << a
						    << ", x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Leg;
				}
			}
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(160,
					"x[x==Value_t()] cFma",
					"cMul",
					"    with x = " << x << "\n");
				goto Leh;
			}
			break;
		}
		goto Default0;
	TailCall_cFmma:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFmma:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(283,"cNeg cFmma", "cFmms", "");
			goto Lei;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(112,
							"A[IsVarOpcode(A)] cMul x[x==Value_t()] cFmma",
							"[x] cMul cFmma",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cFmma; */ // redundant, matches cFmma @ 0
						goto Lej;
					}
					goto Default4;
				default: Default4:;
					A = ByteCodePtr[-1];
					if(IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						switch(ByteCodePtr[-2])
						{
						case cImmed:
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(110,
								"y A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
								"[x] cMul cFmma",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cFmma; */ // redundant, matches cFmma @ 0
							goto Lek;
						default:
							B = ByteCodePtr[-2];
							if(IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								switch(ByteCodePtr[-3])
								{
								case cImmed:
									y = ImmedPtr[-1];
									FP_TRACE_BYTECODE_OPTIMIZATION(116,
										"y B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
										"A [x] cMul cFmma",
										"    with x = " << x
										    << ", A = " << FP_TRACE_OPCODENAME(A)
										    << ", B = " << FP_TRACE_OPCODENAME(B)
										    << ", y = " << y
										    << "\n");
									/* opcode = cFmma; */ // redundant, matches cFmma @ 0
									goto Lel;
								default:
									C = ByteCodePtr[-3];
									if(IsVarOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(114,
											"C[IsVarOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
											"A [x] cMul cFmma",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cFmma; */ // redundant, matches cFmma @ 0
										goto Lem;
									}
									if(IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(115,
											"C[IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
											"B A [x] cMul cFmma",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cFmma; */ // redundant, matches cFmma @ 0
										goto Len;
									}
								}
							}
							if(IsVarOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(106,
									"B[IsVarOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
									"[x] cMul cFmma",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
								/* opcode = cFmma; */ // redundant, matches cFmma @ 0
								goto Lej;
							}
							if(IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(108,
									"B[IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
									"A [x] cMul cFmma",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* opcode = cFmma; */ // redundant, matches cFmma @ 0
								goto Leo;
							}
						}
					}
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(102,
							"A[IsVarOpcode(A)] x[x==Value_t()] cFmma",
							"cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						goto Lep;
					}
					if(IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(104,
							"A[IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
							"[x] cMul cFmma",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cFmma; */ // redundant, matches cFmma @ 0
						goto Leq;
					}
				}
			}
			b = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				a = ImmedPtr[-1];
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[-2];
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-3];
						FP_TRACE_BYTECODE_OPTIMIZATION(136,
							"y x a b cFmma",
							"[y*x+a*b]",
							"    with b = " << b
							    << ", a = " << a
							    << ", x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Ler;
					}
				}
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(161,
					"x[x==Value_t(1)] cFmma",
					"cFma",
					"    with x = " << x << "\n");
				goto Les;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(162,
					"x[x==Value_t(-1)] cFmma",
					"cFms",
					"    with x = " << x << "\n");
				goto Let;
			}
			break;
		}
		goto Default0;
	TailCall_cFmms:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFmms:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(284,"cNeg cFmms", "cFmma", "");
			goto Lfa;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(113,
							"A[IsVarOpcode(A)] cMul x[x==Value_t()] cFmms",
							"[x] cMul cFmms",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cFmms; */ // redundant, matches cFmms @ 0
						goto Lfb;
					}
					goto Default5;
				default: Default5:;
					A = ByteCodePtr[-1];
					if(IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						switch(ByteCodePtr[-2])
						{
						case cImmed:
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(111,
								"y A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
								"[x] cMul cFmms",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cFmms; */ // redundant, matches cFmms @ 0
							goto Lfc;
						default:
							B = ByteCodePtr[-2];
							if(IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								switch(ByteCodePtr[-3])
								{
								case cImmed:
									y = ImmedPtr[-1];
									FP_TRACE_BYTECODE_OPTIMIZATION(119,
										"y B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
										"A [x] cMul cFmms",
										"    with x = " << x
										    << ", A = " << FP_TRACE_OPCODENAME(A)
										    << ", B = " << FP_TRACE_OPCODENAME(B)
										    << ", y = " << y
										    << "\n");
									/* opcode = cFmms; */ // redundant, matches cFmms @ 0
									goto Lfd;
								default:
									C = ByteCodePtr[-3];
									if(IsVarOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(117,
											"C[IsVarOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
											"A [x] cMul cFmms",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cFmms; */ // redundant, matches cFmms @ 0
										goto Lfe;
									}
									if(IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(118,
											"C[IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
											"B A [x] cMul cFmms",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cFmms; */ // redundant, matches cFmms @ 0
										goto Lff;
									}
								}
							}
							if(IsVarOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(107,
									"B[IsVarOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
									"[x] cMul cFmms",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
								/* opcode = cFmms; */ // redundant, matches cFmms @ 0
								goto Lfb;
							}
							if(IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(109,
									"B[IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
									"A [x] cMul cFmms",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* opcode = cFmms; */ // redundant, matches cFmms @ 0
								goto Lfg;
							}
						}
					}
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(103,
							"A[IsVarOpcode(A)] x[x==Value_t()] cFmms",
							"cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						goto Lep;
					}
					if(IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(105,
							"A[IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
							"[x] cMul cFmms",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cFmms; */ // redundant, matches cFmms @ 0
						goto Lfh;
					}
				}
			}
			b = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				a = ImmedPtr[-1];
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[-2];
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-3];
						FP_TRACE_BYTECODE_OPTIMIZATION(137,
							"y x a b cFmms",
							"[y*x-a*b]",
							"    with b = " << b
							    << ", a = " << a
							    << ", x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lfi;
					}
				}
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(163,
					"x[x==Value_t(1)] cFmms",
					"cFms",
					"    with x = " << x << "\n");
				goto Let;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(164,
					"x[x==Value_t(-1)] cFmms",
					"cFma",
					"    with x = " << x << "\n");
				goto Les;
			}
			FP_TRACE_BYTECODE_OPTIMIZATION(52,
				"x cFmms",
				"[-x] cFmma",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lfj;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				if(ByteCodePtr[-1] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(54,
						"x A[IsVarOpcode(A)] cFmms",
						"[-x] A cFmms",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", x = " << x
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
					/* opcode = cFmms; */ // redundant, matches cFmms @ 0
					goto Lfk;
				}
			}
		}
		goto Default0;
	TailCall_cFms:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFms:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(282,"cNeg cFms", "cFma", "");
			goto Lfl;
		case cImmed:
			a = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[-1];
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-2];
					FP_TRACE_BYTECODE_OPTIMIZATION(135,
						"y x a cFms",
						"[y*x-a]",
						"    with a = " << a
						    << ", x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lfm;
				}
			}
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(51,
				"x cFms",
				"[-x] cFma",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lfn;
		}
		goto Default0;
	TailCall_cGreater:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cGreater:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(141,
					"y x cGreater",
					"[fp_less(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lfo;
			}
		}
		goto Default0;
	TailCall_cGreaterOrEq:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cGreaterOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(142,
					"y x cGreaterOrEq",
					"[fp_lessOrEq(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lfp;
			}
		}
		goto Default0;
	TailCall_cHypot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cHypot:
		if(ByteCodePtr[0] == cSinCos)
		{
			FP_TRACE_BYTECODE_OPTIMIZATION(87,"cSinCos cHypot", "[DO_STACKPLUS1] [Value_t()] cMul [Value_t(1)] cAdd", "");
			incStackPtr(1);
			mStackPtr -= 1;
			goto Lcp;
		}
		goto Default0;
	TailCall_cImag:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cImag:
		switch(ByteCodePtr[0])
		{
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(228,
				"x cImag",
				"[fp_imag(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lfq;
		default:
			A = ByteCodePtr[0];
			if(IsAlwaysRealOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(83,
					"A[IsAlwaysRealOpcode(A)] cImag",
					"A [DO_STACKPLUS1] [Value_t()] cMul",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				incStackPtr(1);
				mStackPtr -= 1;
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				goto Lfr;
			}
		}
		goto Default0;
	TailCall_cInt:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cInt:
		switch(ByteCodePtr[0])
		{
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(173,
				"x cInt",
				"[fp_int(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lfs;
		default:
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(464,
					"A[IsAlwaysIntegerOpcode(A)] cInt",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cInv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cInv:
		switch(ByteCodePtr[0])
		{
		case cCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(321,"cCos cInv", "cSec", "");
			goto Lft;
		case cCot:
			FP_TRACE_BYTECODE_OPTIMIZATION(325,"cCot cInv", "cTan", "");
			goto Ldc;
		case cCsc:
			FP_TRACE_BYTECODE_OPTIMIZATION(323,"cCsc cInv", "cSin", "");
			goto Lga;
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(65,"cInv cInv", "", "");
			goto Lcb;
		case cPow:
			FP_TRACE_BYTECODE_OPTIMIZATION(423,"cPow cInv", "cNeg cPow", "");
			goto Lgb;
		case cRSqrt:
			FP_TRACE_BYTECODE_OPTIMIZATION(245,"cRSqrt cInv", "cSqrt", "");
			goto Lgc;
		case cSec:
			FP_TRACE_BYTECODE_OPTIMIZATION(324,"cSec cInv", "cCos", "");
			goto Lgd;
		case cSin:
			FP_TRACE_BYTECODE_OPTIMIZATION(320,"cSin cInv", "cCsc", "");
			goto Lge;
		case cSqrt:
			FP_TRACE_BYTECODE_OPTIMIZATION(243,"cSqrt cInv", "cRSqrt", "");
			goto Lgf;
		case cTan:
			FP_TRACE_BYTECODE_OPTIMIZATION(322,"cTan cInv", "cCot", "");
			goto Lgg;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(124,
					"x[x!=Value_t()] cInv",
					"[fp_inv(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lgh;
			}
			break;
		}
		goto Default0;
	TailCall_cLess:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLess:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				A = ByteCodePtr[-1];
				if(IsNeverNegativeValueOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(366,
						"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(0)] cLess",
						"A [x] cMul",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
					goto Lgi;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(139,
					"y x cLess",
					"[fp_less(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lgj;
			}
		}
		goto Default0;
	TailCall_cLessOrEq:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLessOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(140,
					"y x cLessOrEq",
					"[fp_lessOrEq(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lgk;
			}
		}
		goto Default0;
	TailCall_cLog:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLog:
		switch(ByteCodePtr[0])
		{
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(408,"cExp cLog", "", "");
			goto Lcb;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(x>Value_t(0))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(565,
						"x[x>Value_t(0)] cMul cLog",
						"cLog [fp_log(x)] cAdd",
						"    with x = " << x << "\n");
					goto Lgl;
				}
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(216,
					"x[x!=Value_t(0)] cLog",
					"[fp_log(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lgm;
			}
			break;
		}
		goto Default0;
	TailCall_cLog10:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLog10:
		switch(ByteCodePtr[0])
		{
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(555,"cExp cLog10", "[DO_STACKPLUS1] [fp_log10(fp_const_e<Value_t>())] cMul", "");
			incStackPtr(1);
			mStackPtr -= 1;
			goto Lgn;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(x>Value_t(0))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(566,
						"x[x>Value_t(0)] cMul cLog10",
						"cLog10 [fp_log10(x)] cAdd",
						"    with x = " << x << "\n");
					goto Lgo;
				}
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(217,
					"x[x!=Value_t(0)] cLog10",
					"[fp_log10(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lgp;
			}
			break;
		}
		goto Default0;
	TailCall_cLog2:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLog2:
		switch(ByteCodePtr[0])
		{
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(554,"cExp cLog2", "[DO_STACKPLUS1] [fp_log2(fp_const_e<Value_t>())] cMul", "");
			incStackPtr(1);
			mStackPtr -= 1;
			goto Lgq;
		case cExp2:
			FP_TRACE_BYTECODE_OPTIMIZATION(409,"cExp2 cLog2", "", "");
			goto Lcb;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(x>Value_t(0))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(564,
						"x[x>Value_t(0)] cMul cLog2",
						"cLog2 [fp_log2(x)] cAdd",
						"    with x = " << x << "\n");
					goto Lgr;
				}
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(218,
					"x[x!=Value_t(0)] cLog2",
					"[fp_log2(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lgs;
			}
			break;
		}
		goto Default0;
	TailCall_cMax:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMax:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(63,"cDup cMax", "", "");
			goto Lcb;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(177,
					"y x cMax",
					"[fp_max(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lgt;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(69,
							"B[B==A] cDup A[IsVarOpcode(A)] cMax",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Lcb;
					}
					break;
				case cMax:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(71,
							"B[B==A] cMax A[IsVarOpcode(A)] cMax",
							"B cMax",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMax; */ // redundant, matches cMax @ 2
						goto Lcb;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cMin:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMin:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(62,"cDup cMin", "", "");
			goto Lcb;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(176,
					"y x cMin",
					"[fp_min(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lha;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(68,
							"B[B==A] cDup A[IsVarOpcode(A)] cMin",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Lcb;
					}
					break;
				case cMin:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(70,
							"B[B==A] cMin A[IsVarOpcode(A)] cMin",
							"B cMin",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMin; */ // redundant, matches cMin @ 2
						goto Lcb;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cMod:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMod:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				if(ByteCodePtr[-1] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(127,
						"y x[x!=Value_t()] cMod",
						"[fp_mod(y,x)]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Lhb;
				}
			}
		}
		goto Default0;
	TailCall_cMul:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMul:
		switch(ByteCodePtr[0])
		{
		case cCsc:
			A = ByteCodePtr[-1];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>3)
			{
				if(ByteCodePtr[-2] == cCos)
				{
					B = ByteCodePtr[-3];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(582,
							"B[B==A] cCos A[IsVarOpcode(A)&&mData->mByteCode.size()>3] cCsc cMul",
							"B cCot",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
						goto Lhc;
					}
				}
			}
			goto Default6;
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(238,"cDup cMul", "cSqr", "");
			goto Lhd;
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(259,"cInv cMul", "cDiv", "");
			goto Lhe;
		case cNeg:
			switch(ByteCodePtr[-1])
			{
			case cDup:
				FP_TRACE_BYTECODE_OPTIMIZATION(541,"cDup cNeg cMul", "cSqr cNeg", "");
				goto Lhf;
			default:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cMul)
					{
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(547,
								"B[B==A] cMul A[IsVarOpcode(A)] cNeg cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lhg;
						}
					}
				}
			}
			goto Default6;
		case cPow:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(379,
						"cDup x cPow cMul",
						"[x+Value_t(1)] cPow",
						"    with x = " << x << "\n");
					goto Lhh;
				}
			}
			goto Default6;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(96,
							"A[IsVarOpcode(A)] cMul x[x==Value_t()] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lhi;
					}
					goto Default7;
				default: Default7:;
					A = ByteCodePtr[-1];
					if(IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						switch(ByteCodePtr[-2])
						{
						case cImmed:
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(95,
								"y A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
								"[x] cMul",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lhj;
						default:
							B = ByteCodePtr[-2];
							if(IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								switch(ByteCodePtr[-3])
								{
								case cImmed:
									y = ImmedPtr[-1];
									FP_TRACE_BYTECODE_OPTIMIZATION(99,
										"y B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
										"A [x] cMul",
										"    with x = " << x
										    << ", A = " << FP_TRACE_OPCODENAME(A)
										    << ", B = " << FP_TRACE_OPCODENAME(B)
										    << ", y = " << y
										    << "\n");
									/* opcode = cMul; */ // redundant, matches cMul @ 0
									goto Lhk;
								default:
									C = ByteCodePtr[-3];
									if(IsVarOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(97,
											"C[IsVarOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
											"A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lhl;
									}
									if(IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(98,
											"C[IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
											"B A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lhm;
									}
								}
							}
							if(IsVarOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(93,
									"B[IsVarOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
									"[x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lhi;
							}
							if(IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(94,
									"B[IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
									"A [x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lhn;
							}
						}
					}
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(91,
							"A[IsVarOpcode(A)] x[x==Value_t()] cMul",
							"[x]",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						goto Lho;
					}
					if(IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(92,
							"A[IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lhp;
					}
				}
			}
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				switch(ByteCodePtr[-2])
				{
				case cDup:
					if(x+x==Value_t(1))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(381,
							"cDup[x+x==Value_t(1)] cAdd x cMul",
							"",
							"    with x = " << x << "\n");
						goto Lhq;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(382,
						"cDup cAdd x cMul",
						"[x+x] cMul",
						"    with x = " << x << "\n");
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Lhr;
				case cMul:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(IsVarOpcode(A))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(454,
								"A[IsVarOpcode(A)] y cMul cAdd x cMul",
								"[x] cMul A [y*x] cMul cAdd",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lhs;
						}
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(453,
						"y cAdd x cMul",
						"[x] cMul [y*x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lht;
				}
				break;
			case cDeg:
				FP_TRACE_BYTECODE_OPTIMIZATION(254,
					"cDeg x cMul",
					"[DO_STACKPLUS1] [RadiansToDegrees(x)] cMul",
					"    with x = " << x << "\n");
				incStackPtr(1);
				mStackPtr -= 1;
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Lia;
			case cDiv:
				B = ByteCodePtr[-2];
				if(IsVarOpcode(B))
				{
					switch(ByteCodePtr[-3])
					{
					case cMul:
						if(ByteCodePtr[-4] == cImmed)
						{
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(343,
								"y cMul B[IsVarOpcode(B)] cDiv x cMul",
								"[y*x] cMul B cDiv",
								"    with x = " << x
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-4] = cImmed; */ // redundant, matches y @ 5
							goto Lib;
						}
						break;
					case cNeg:
						FP_TRACE_BYTECODE_OPTIMIZATION(344,
							"cNeg B[IsVarOpcode(B)] cDiv x cMul",
							"[-x] cMul B cDiv",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						goto Lic;
					case cImmed:
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(342,
							"y B[IsVarOpcode(B)] cDiv x cMul",
							"[y*x] B cDiv",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lid;
					}
				}
				break;
			case cMul:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cDup)
					{
						if(x+x==Value_t(1))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(383,
								"cDup[x+x==Value_t(1)] cAdd cMul x cMul",
								"cMul",
								"    with x = " << x << "\n");
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lie;
						}
						FP_TRACE_BYTECODE_OPTIMIZATION(384,
							"cDup cAdd cMul x cMul",
							"cMul [x+x] cMul",
							"    with x = " << x << "\n");
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lif;
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					if(y*x==Value_t(1))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(73,
							"y[y*x==Value_t(1)] cMul x cMul",
							"",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Lig;
					}
					if((y*x)==fp_const_rad_to_deg<Value_t>())
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(372,
							"y[(y*x)==fp_const_rad_to_deg<Value_t>()] cMul x cMul",
							"cDeg",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Ldh;
					}
					if((y*x)==fp_const_deg_to_rad<Value_t>())
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(373,
							"y[(y*x)==fp_const_deg_to_rad<Value_t>()] cMul x cMul",
							"cRad",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Ldi;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(156,
						"y cMul x cMul",
						"[y*x] cMul",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Lih;
				}
				break;
			case cNeg:
				FP_TRACE_BYTECODE_OPTIMIZATION(150,
					"cNeg x cMul",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Lii;
			case cRDiv:
				switch(ByteCodePtr[-2])
				{
				case cMul:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(350,
							"y cMul cRDiv x cMul",
							"[y*x] cMul cRDiv",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lij;
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(351,
						"cNeg cRDiv x cMul",
						"[-x] cMul cRDiv",
						"    with x = " << x << "\n");
					goto Lik;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(349,
						"y cRDiv x cMul",
						"[y*x] cRDiv",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lil;
				}
				break;
			case cRad:
				FP_TRACE_BYTECODE_OPTIMIZATION(255,
					"cRad x cMul",
					"[DO_STACKPLUS1] [DegreesToRadians(x)] cMul",
					"    with x = " << x << "\n");
				incStackPtr(1);
				mStackPtr -= 1;
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Lim;
			case cSub:
				if(ByteCodePtr[-2] == cMul)
				{
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(IsVarOpcode(A))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(455,
								"A[IsVarOpcode(A)] y cMul cSub x cMul",
								"[x] cMul A [y*x] cMul cSub",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lin;
						}
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(125,
					"y x cMul",
					"[y*x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lio;
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(58,
					"x[x==Value_t(1)] cMul",
					"",
					"    with x = " << x << "\n");
				goto Lbe;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(152,
					"x[x==Value_t(-1)] cMul",
					"cNeg",
					"    with x = " << x << "\n");
				goto Lip;
			}
			if(x==Value_t(2))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(234,
					"x[x==Value_t(2)] cMul",
					"cDup cAdd",
					"    with x = " << x << "\n");
				goto Liq;
			}
			if(x==fp_const_rad_to_deg<Value_t>())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(252,
					"x[x==fp_const_rad_to_deg<Value_t>()] cMul",
					"cDeg",
					"    with x = " << x << "\n");
				goto Lir;
			}
			if(x==fp_const_deg_to_rad<Value_t>())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(253,
					"x[x==fp_const_deg_to_rad<Value_t>()] cMul",
					"cRad",
					"    with x = " << x << "\n");
				goto Lis;
			}
			break;
		default: Default6:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDiv:
					B = ByteCodePtr[-2];
					if(IsVarOpcode(B))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(339,
							"B[IsVarOpcode(B)] cDiv A[IsVarOpcode(A)] cMul",
							"[DO_STACKPLUS1] A cMul B cDiv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						incStackPtr(1);
						mStackPtr -= 1;
						goto Lit;
					}
					goto Default8;
				case cMul:
					switch(ByteCodePtr[-2])
					{
					case cNeg:
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(544,
								"B[B==A] cNeg cMul A[IsVarOpcode(A)] cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lhg;
						}
						goto Default9;
					default: Default9:;
						B = ByteCodePtr[-2];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(535,
								"B[B==A] cMul A[IsVarOpcode(A)] cMul",
								"B cSqr cMul",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lja;
						}
					}
					goto Default8;
				case cNeg:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(538,
							"B[B==A] cNeg A[IsVarOpcode(A)] cMul",
							"B cSqr cNeg",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lhf;
					}
					goto Default8;
				case cRDiv:
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(332,
							"x cRDiv A[IsVarOpcode(A)] cMul",
							"[DO_STACKPLUS1] A [x] cMul cRDiv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						incStackPtr(1);
						mStackPtr -= 1;
						goto Ljb;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(346,
						"cRDiv A[IsVarOpcode(A)] cMul",
						"[DO_STACKPLUS1] A cMul cRDiv",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr(1);
					mStackPtr -= 1;
					goto Ljc;
				default: Default8:;
					B = ByteCodePtr[-1];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(532,
							"B[B==A] A[IsVarOpcode(A)] cMul",
							"B cSqr",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-1] = B; */ // redundant, matches B @ 2
						goto Lhd;
					}
				}
			}
			if(IsUnaryOpcode(A))
			{
				B = ByteCodePtr[-1];
				if(IsVarOpcode(B)&&mData->mByteCode.size()>1)
				{
					if(ByteCodePtr[-2] == cMul)
					{
						C = ByteCodePtr[-3];
						if(C==A)
						{
							D = ByteCodePtr[-4];
							if(D==B)
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(551,
									"D[D==B] C[C==A] cMul B[IsVarOpcode(B)&&mData->mByteCode.size()>1] A[IsUnaryOpcode(A)] cMul",
									"D C cSqr cMul",
									"    with A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << ", C = " << FP_TRACE_OPCODENAME(C)
									    << ", D = " << FP_TRACE_OPCODENAME(D)
									    << "\n");
								/* ByteCodePtr[-4] = D; */ // redundant, matches D @ 5
								/* ByteCodePtr[-3] = C; */ // redundant, matches C @ 4
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Ljd;
							}
						}
					}
				}
			}
		}
		goto Default0;
	TailCall_cNEqual:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(428,
						"cAbs x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Lje;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(430,
						"cSqr x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Lje;
				default:
					A = ByteCodePtr[-1];
					if(IsLogicalOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(496,
							"A[IsLogicalOpcode(A)] x[x==Value_t(0)] cNEqual",
							"A",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lbe;
					}
				}
			}
			if(x==Value_t(1))
			{
				A = ByteCodePtr[-1];
				if(IsLogicalOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(494,
						"A[IsLogicalOpcode(A)] x[x==Value_t(1)] cNEqual",
						"A cNot",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					goto Ldp;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(144,
					"y x cNEqual",
					"[fp_nequal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ljf;
			}
		}
		goto Default0;
	TailCall_cNeg:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNeg:
		switch(ByteCodePtr[0])
		{
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(151,
					"x cMul cNeg",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Ljg;
			}
			break;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(64,"cNeg cNeg", "", "");
			goto Lcb;
		case cSin:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(309,
						"x cMul cSin cNeg",
						"[-x] cMul cSin",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Ljh;
				}
			}
			break;
		case cSinh:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(310,
						"x cMul cSinh cNeg",
						"[-x] cMul cSinh",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Lji;
				}
			}
			break;
		case cTan:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(311,
						"x cMul cTan cNeg",
						"[-x] cMul cTan",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Ljj;
				}
			}
			break;
		case cTanh:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(312,
						"x cMul cTanh cNeg",
						"[-x] cMul cTanh",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Ljk;
				}
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(123,
				"x cNeg",
				"[-x]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Ljl;
		}
		goto Default0;
	TailCall_cNot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNot:
		switch(ByteCodePtr[0])
		{
		case cAbsNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(296,"cAbsNotNot cNot", "cAbsNot", "");
			goto Ljm;
		case cEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(265,"cEqual cNot", "cNEqual", "");
			goto Ljn;
		case cGreater:
			FP_TRACE_BYTECODE_OPTIMIZATION(263,"cGreater cNot", "cLessOrEq", "");
			goto Ljo;
		case cGreaterOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(264,"cGreaterOrEq cNot", "cLess", "");
			goto Ljp;
		case cLess:
			FP_TRACE_BYTECODE_OPTIMIZATION(261,"cLess cNot", "cGreaterOrEq", "");
			goto Ljq;
		case cLessOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(262,"cLessOrEq cNot", "cGreater", "");
			goto Ljr;
		case cNEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(266,"cNEqual cNot", "cEqual", "");
			goto Ljs;
		case cNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(294,"cNot cNot", "cNotNot", "");
			goto Lbj;
		case cNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(295,"cNotNot cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Ljt;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(130,
				"x cNot",
				"[fp_not(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lka;
		}
		goto Default0;
	TailCall_cNotNot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNotNot:
		if(ByteCodePtr[0] == cNot)
		{
			FP_TRACE_BYTECODE_OPTIMIZATION(297,"cNot cNotNot", "cNot", "");
			/* ByteCodePtr[0] = cNot; */ // redundant, matches cNot @ 1
			return;
		}
		goto Default0;
	TailCall_cOr:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cOr:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(288,"cDup cOr", "cNotNot", "");
			goto Lbj;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(146,
					"y x cOr",
					"[fp_or(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lkb;
			}
			break;
		}
		goto Default0;
	TailCall_cPolar:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cPolar:
		if(ByteCodePtr[0] == cImmed)
		{
			y = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(230,
					"x y cPolar",
					"[fp_polar(x,y)]",
					"    with y = " << y
					    << ", x = " << x
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Lkc;
			}
		}
		goto Default0;
	TailCall_cPow:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cPow:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(isInteger(x))
			{
				switch(ByteCodePtr[-1])
				{
				case cExp:
					FP_TRACE_BYTECODE_OPTIMIZATION(41,
						"cExp x[isInteger(x)] cPow",
						"[x] cMul cExp",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					goto Lkd;
				case cExp2:
					FP_TRACE_BYTECODE_OPTIMIZATION(42,
						"cExp2 x[isInteger(x)] cPow",
						"[x] cMul cExp2",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					goto Lke;
				case cPow:
					if(ByteCodePtr[-2] == cImmed)
					{
						y = ImmedPtr[-1];
						if(!isInteger(y))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(40,
								"y[!isInteger(y)] cPow x[isInteger(x)] cPow",
								"[y*x] cPow",
								"    with x = " << x
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cPow; */ // redundant, matches cPow @ 0
							goto Lkf;
						}
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(43,
						"cPow x[isInteger(x)] cPow",
						"[x] cMul cPow",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cPow; */ // redundant, matches cPow @ 0
					goto Lkg;
				}
			}
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(86,
					"x[x==Value_t()] cPow",
					"[DO_STACKPLUS1] [Value_t()] cMul [Value_t(1)] cAdd",
					"    with x = " << x << "\n");
				incStackPtr(1);
				mStackPtr -= 1;
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lkh;
			}
			if(x==fp_const_preciseDouble<Value_t>(0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(397,
					"x[x==fp_const_preciseDouble<Value_t>(0.5)] cPow",
					"cSqrt",
					"    with x = " << x << "\n");
				goto Lki;
			}
			if(x==fp_inv(Value_t(3)))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(398,
					"x[x==fp_inv(Value_t(3))] cPow",
					"cCbrt",
					"    with x = " << x << "\n");
				goto Lkj;
			}
			if(x==fp_inv(Value_t(-3)))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(399,
					"x[x==fp_inv(Value_t(-3))] cPow",
					"cCbrt cInv",
					"    with x = " << x << "\n");
				goto Lkk;
			}
			if(x==fp_const_preciseDouble<Value_t>(-0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(400,
					"x[x==fp_const_preciseDouble<Value_t>(-0.5)] cPow",
					"cRSqrt",
					"    with x = " << x << "\n");
				goto Lkl;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(401,
					"x[x==Value_t(-1)] cPow",
					"cInv",
					"    with x = " << x << "\n");
				goto Lkm;
			}
			switch(ByteCodePtr[-1])
			{
			case cPow:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(395,
						"y cPow x cPow",
						"[y*x] cPow",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cPow; */ // redundant, matches cPow @ 0
					goto Lkf;
				}
				break;
			case cSqr:
				FP_TRACE_BYTECODE_OPTIMIZATION(44,
					"cSqr x cPow",
					"[x+x] cPow",
					"    with x = " << x << "\n");
				/* opcode = cPow; */ // redundant, matches cPow @ 0
				goto Lkn;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(225,
					"y x cPow",
					"[fp_pow(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lko;
			}
			FP_TRACE_BYTECODE_OPTIMIZATION(529,
				"x cPow",
				"[DO_POWI]",
				"    with x = " << x << "\n");
			if(TryCompilePowi(x))
			  return;
		}
		goto Default0;
	TailCall_cRDiv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRDiv:
		switch(ByteCodePtr[0])
		{
		case cSinCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(577,"cSinCos cRDiv", "cCot", "");
			goto Lgg;
		case cSinhCosh:
			FP_TRACE_BYTECODE_OPTIMIZATION(584,"cSinhCosh cRDiv", "cTanh cInv", "");
			goto Lkp;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(333,
					"x[x==Value_t(1)] cRDiv",
					"cInv",
					"    with x = " << x << "\n");
				goto Lkm;
			}
			break;
		}
		goto Default0;
	TailCall_cRSqrt:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRSqrt:
		if(ByteCodePtr[0] == cInv)
		{
			FP_TRACE_BYTECODE_OPTIMIZATION(246,"cInv cRSqrt", "cSqrt", "");
			goto Lgc;
		}
		goto Default0;
	TailCall_cRSub:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRSub:
		if(ByteCodePtr[0] == cDup)
		{
			FP_TRACE_BYTECODE_OPTIMIZATION(80,"cDup cRSub", "[Value_t()] cMul", "");
			goto Lkq;
		}
		goto Default0;
	TailCall_cRad:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRad:
		switch(ByteCodePtr[0])
		{
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(256,
					"x cMul cRad",
					"[DO_STACKPLUS1] [DegreesToRadians(x)] cMul",
					"    with x = " << x << "\n");
				incStackPtr(1);
				mStackPtr -= 1;
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Lkr;
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(170,
				"x cRad",
				"[DegreesToRadians(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lks;
		}
		goto Default0;
	TailCall_cReal:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cReal:
		switch(ByteCodePtr[0])
		{
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(227,
				"x cReal",
				"[fp_real(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lkt;
		default:
			A = ByteCodePtr[0];
			if(IsAlwaysRealOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(84,
					"A[IsAlwaysRealOpcode(A)] cReal",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cSec:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSec:
		A = ByteCodePtr[0];
		if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
		{
			switch(ByteCodePtr[-1])
			{
			case cCos:
				B = ByteCodePtr[-2];
				if(B==A)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(571,
						"B[B==A] cCos A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cSec",
						"B cCos cDup cInv",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", B = " << FP_TRACE_OPCODENAME(B)
						    << "\n");
					/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
					/* ByteCodePtr[-1] = cCos; */ // redundant, matches cCos @ 2
					goto Lcf;
				}
				break;
			case cSin:
				B = ByteCodePtr[-2];
				if(B==A)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(569,
						"B[B==A] cSin A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cSec",
						"B cSinCos cInv",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", B = " << FP_TRACE_OPCODENAME(B)
						    << "\n");
					/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
					goto Lla;
				}
				break;
			}
		}
		goto Default0;
	TailCall_cSin:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSin:
		switch(ByteCodePtr[0])
		{
		case cAsin:
			FP_TRACE_BYTECODE_OPTIMIZATION(410,"cAsin cSin", "", "");
			goto Lcb;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(305,"cNeg cSin", "cSin cNeg", "");
			goto Llb;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(219,
				"x cSin",
				"[fp_sin(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Llc;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				if(ByteCodePtr[-1] == cCsc)
				{
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(573,
							"B[B==A] cCsc A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cSin",
							"B cCsc cDup cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cCsc; */ // redundant, matches cCsc @ 2
						goto Lcf;
					}
				}
			}
		}
		goto Default0;
	TailCall_cSinh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSinh:
		switch(ByteCodePtr[0])
		{
		case cAcosh:
			FP_TRACE_BYTECODE_OPTIMIZATION(511,"cAcosh cSinh", "[DO_STACKPLUS1] cSqr [Value_t(-1)] cAdd cSqrt", "");
			incStackPtr(1);
			mStackPtr -= 1;
			goto Lld;
		case cAsinh:
			FP_TRACE_BYTECODE_OPTIMIZATION(414,"cAsinh cSinh", "", "");
			goto Lcb;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(306,"cNeg cSinh", "cSinh cNeg", "");
			goto Lle;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(220,
				"x cSinh",
				"[fp_sinh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Llf;
		}
		goto Default0;
	TailCall_cSqr:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSqr:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(239,"cNeg cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Llg;
		case cRSqrt:
			FP_TRACE_BYTECODE_OPTIMIZATION(247,"cRSqrt cSqr", "cInv", "");
			goto Llh;
		case cSqrt:
			A = ByteCodePtr[-1];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(403,
					"A[IsNeverNegativeValueOpcode(A)] cSqrt cSqr",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Lcb;
			}
			goto Default10;
		default: Default10:;
			A = ByteCodePtr[0];
			if(IsComparisonOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(599,
					"A[IsComparisonOpcode(A)] cSqr",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cSqrt:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSqrt:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cSqr)
			{
				A = ByteCodePtr[-2];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-3] == cSqr)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(586,
							"cSqr A[IsVarOpcode(A)] cSqr cAdd cSqrt",
							"A cHypot",
							"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
						goto Lli;
					}
				}
				B = ByteCodePtr[-2];
				if(IsUnaryOpcode(B))
				{
					A = ByteCodePtr[-3];
					if(IsVarOpcode(A))
					{
						if(ByteCodePtr[-4] == cSqr)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(587,
								"cSqr A[IsVarOpcode(A)] B[IsUnaryOpcode(B)] cSqr cAdd cSqrt",
								"A B cHypot",
								"    with B = " << FP_TRACE_OPCODENAME(B)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Llj;
						}
					}
				}
			}
			break;
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(244,"cInv cSqrt", "cRSqrt", "");
			goto Lgf;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(221,
				"x cSqrt",
				"[fp_sqrt(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Llk;
		}
		goto Default0;
	TailCall_cSub:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSub:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cDup)
			{
				A = ByteCodePtr[-2];
				if(IsVarOpcode(A))
				{
					switch(ByteCodePtr[-3])
					{
					case cAdd:
						if(ByteCodePtr[-4] == cDup)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(278,
								"cDup cAdd A[IsVarOpcode(A)] cDup cAdd cSub",
								"[DO_STACKPLUS2] [2] A [-2] cFmma",
								"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
							incStackPtr(2);
							mStackPtr -= 2;
							goto Lll;
						}
						break;
					case cMul:
						FP_TRACE_BYTECODE_OPTIMIZATION(276,
							"cMul A[IsVarOpcode(A)] cDup cAdd cSub",
							"[DO_STACKPLUS2] A [-2] cFmma",
							"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
						incStackPtr(2);
						mStackPtr -= 2;
						goto Llm;
					}
				}
			}
			goto Default11;
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(79,"cDup cSub", "[Value_t()] cMul", "");
			goto Lkq;
		case cMul:
			switch(ByteCodePtr[-1])
			{
			case cImmed:
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(50,
					"x cMul cSub",
					"[-x] cMul cAdd",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Lln;
			default:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(53,
							"x A[IsVarOpcode(A)] cMul cSub",
							"[-x] A cMul cSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
						/* opcode = cSub; */ // redundant, matches cSub @ 0
						goto Llo;
					}
				}
				B = ByteCodePtr[-1];
				if(IsVarOpcode(B))
				{
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						if(ByteCodePtr[-3] == cMul)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(272,
								"cMul A[IsVarOpcode(A)] B[IsVarOpcode(B)] cMul cSub",
								"A [DO_STACKPLUS2] B cFmms",
								"    with B = " << FP_TRACE_OPCODENAME(B)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							incStackPtr(2);
							mStackPtr -= 2;
							goto Llp;
						}
					}
				}
			}
			goto Default11;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(236,"cNeg cSub", "cAdd", "");
			goto Llq;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(61,
					"x[x==Value_t()] cSub",
					"",
					"    with x = " << x << "\n");
				goto Lbe;
			}
			switch(ByteCodePtr[-1])
			{
			case cFma:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(159,
						"y cFma x cSub",
						"[y-x] cFma",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Llr;
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(129,
					"y x cSub",
					"[y-x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lls;
			}
			FP_TRACE_BYTECODE_OPTIMIZATION(49,
				"x cSub",
				"[-x] cAdd",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Llt;
		default: Default11:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					FP_TRACE_BYTECODE_OPTIMIZATION(269,
						"cMul A[IsVarOpcode(A)] cSub",
						"[DO_STACKPLUS1] A cFms",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr(1);
					mStackPtr -= 1;
					goto Lma;
				case cRSub:
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(354,
							"x cRSub A[IsVarOpcode(A)] cSub",
							"A cAdd [x] cRSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Lmb;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(361,
						"cRSub A[IsVarOpcode(A)] cSub",
						"[DO_STACKPLUS1] A cSub cRSub",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr(1);
					mStackPtr -= 1;
					goto Lmc;
				}
			}
			B = ByteCodePtr[0];
			if(IsUnaryOpcode(B))
			{
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cMul)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(286,
							"cMul A[IsVarOpcode(A)] B[IsUnaryOpcode(B)] cSub",
							"[DO_STACKPLUS1] A B cFms",
							"    with B = " << FP_TRACE_OPCODENAME(B)
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						incStackPtr(1);
						mStackPtr -= 1;
						goto Lmd;
					}
				}
			}
		}
		goto Default0;
	TailCall_cTan:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cTan:
		switch(ByteCodePtr[0])
		{
		case cAtan2:
			FP_TRACE_BYTECODE_OPTIMIZATION(420,"cAtan2 cTan", "cDiv", "");
			goto Lhe;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(307,"cNeg cTan", "cTan cNeg", "");
			goto Lme;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(223,
				"x cTan",
				"[fp_tan(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lmf;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				if(ByteCodePtr[-1] == cCot)
				{
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(575,
							"B[B==A] cCot A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cTan",
							"B cCot cDup cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cCot; */ // redundant, matches cCot @ 2
						goto Lcf;
					}
				}
			}
		}
		goto Default0;
	TailCall_cTanh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cTanh:
		switch(ByteCodePtr[0])
		{
		case cAtanh:
			FP_TRACE_BYTECODE_OPTIMIZATION(417,"cAtanh cTanh", "", "");
			goto Lcb;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(308,"cNeg cTanh", "cTanh cNeg", "");
			goto Lmg;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(224,
				"x cTanh",
				"[fp_tanh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lmh;
		}
		goto Default0;
	TailCall_cTrunc:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cTrunc:
		switch(ByteCodePtr[0])
		{
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(174,
				"x cTrunc",
				"[fp_trunc(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lmi;
		default:
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(461,
					"A[IsAlwaysIntegerOpcode(A)] cTrunc",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	default: Default0:;
		A = opcode;
		if(IsVarOpcode(A)&&mData->mByteCode.size()>0)
		{
			B = ByteCodePtr[0];
			if(B==A)
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(549,
					"B[B==A] A[IsVarOpcode(A)&&mData->mByteCode.size()>0]",
					"B cDup",
					"    with A = " << FP_TRACE_OPCODENAME(A)
					    << ", B = " << FP_TRACE_OPCODENAME(B)
					    << "\n");
				/* ByteCodePtr[0] = B; */ // redundant, matches B @ 1
				goto Lmj;
			}
		}
		if(IsUnaryOpcode(A))
		{
			B = ByteCodePtr[0];
			if(IsVarOpcode(B)&&mData->mByteCode.size()>1)
			{
				C = ByteCodePtr[-1];
				if(C==A)
				{
					D = ByteCodePtr[-2];
					if(D==B)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(550,
							"D[D==B] C[C==A] B[IsVarOpcode(B)&&mData->mByteCode.size()>1] A[IsUnaryOpcode(A)]",
							"D C cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", C = " << FP_TRACE_OPCODENAME(C)
							    << ", D = " << FP_TRACE_OPCODENAME(D)
							    << "\n");
						/* ByteCodePtr[-2] = D; */ // redundant, matches D @ 3
						/* ByteCodePtr[-1] = C; */ // redundant, matches C @ 2
						goto Lmk;
					}
				}
			}
		}
		C = opcode;
		if(IsCommutativeOrParamSwappableBinaryOpcode(C))
		{
			switch(ByteCodePtr[0])
			{
			case cSin:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A)&&mData->mByteCode.size()>3)
				{
					if(ByteCodePtr[-2] == cCos)
					{
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(579,
								"B[B==A] cCos A[IsVarOpcode(A)&&mData->mByteCode.size()>3] cSin C[IsCommutativeOrParamSwappableBinaryOpcode(C)]",
								"B cSinCos {GetParamSwappedBinaryOpcode(C)}",
								"    with C = " << FP_TRACE_OPCODENAME(C)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lml;
						}
					}
				}
				break;
			case cSinh:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A)&&mData->mByteCode.size()>3)
				{
					if(ByteCodePtr[-2] == cCosh)
					{
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(580,
								"B[B==A] cCosh A[IsVarOpcode(A)&&mData->mByteCode.size()>3] cSinh C[IsCommutativeOrParamSwappableBinaryOpcode(C)]",
								"B cSinhCosh {GetParamSwappedBinaryOpcode(C)}",
								"    with C = " << FP_TRACE_OPCODENAME(C)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lmm;
						}
					}
				}
				break;
			}
		}
	}
	goto Laa;
Laa: mData->mByteCode.push_back(opcode); return;
Lab: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     FP_TRACE_BYTECODE_ADD(cAbs);
     goto TailCall_cAbs;
Lac: FP_TRACE_BYTECODE_MOD_IMMED(fp_abs(x));
     ImmedPtr[0] = fp_abs(x); return;
Lad: FP_TRACE_BYTECODE_MOD_IMMED(fp_acos(x));
     ImmedPtr[0] = fp_acos(x); return;
Lae: FP_TRACE_BYTECODE_MOD_IMMED(fp_acosh(x));
     ImmedPtr[0] = fp_acosh(x); return;
Laf: mData->mImmed.push_back(2);
     ByteCodePtr[-4] = cImmed;
Lag: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(2);
Lmn: mData->mByteCode.push_back(cImmed);
Lmo: opcode = cFmma;
Lmp: FP_ReDefinePointers();
Lmq: FP_TRACE_BYTECODE_ADD(cFmma);
     goto TailCall_cFmma;
Lah: mData->mImmed.push_back(Value_t(4));
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
Lmr: opcode = cMul;
Lms: FP_ReDefinePointers();
Lmt: FP_TRACE_BYTECODE_ADD(cMul);
     goto TailCall_cMul;
Lai: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(Value_t(4));
Lna: mData->mByteCode.push_back(cImmed); goto Lmr;
Laj: FP_TRACE_BYTECODE_MOD_IMMED(x+Value_t(1));
     ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
Lgi: opcode = cMul; goto Lmt;
Lak: FP_TRACE_BYTECODE_MOD_IMMED(2);
     ImmedPtr[0] = 2;
     ByteCodePtr[-4] = cImmed;
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x); goto Lmn;
Lal: FP_TRACE_BYTECODE_MOD_IMMED(x);
     ImmedPtr[0] = x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lmo;
Lam: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(B); goto Lmo;
Lan: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSub;
Lnb: FP_TRACE_BYTECODE_ADD(cSub);
     goto TailCall_cSub;
Lao: FP_TRACE_BYTECODE_MOD_IMMED(y+x);
     ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lnc: FP_ReDefinePointers();
Lnd: FP_TRACE_BYTECODE_ADD(cAdd);
     goto TailCall_cAdd;
Lap: FP_TRACE_BYTECODE_MOD_IMMED(y+x);
     ImmedPtr[-1] = y+x;
Lne: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lnf: opcode = cFma;
     FP_ReDefinePointers();
Lng: FP_TRACE_BYTECODE_ADD(cFma);
     goto TailCall_cFma;
Laq: ByteCodePtr[-1] = cImmed;
Lfl: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lnh: opcode = cFma; goto Lng;
Lar: FP_TRACE_BYTECODE_MOD_IMMED(y+x);
     ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Lni: AddFunctionOpcode(cAdd);
Lnj: opcode = cRSub;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cRSub);
     goto TailCall_cRSub;
Las: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lni;
Lat: FP_TRACE_BYTECODE_MOD_IMMED(y+x);
     ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lnj;
Lba: FP_TRACE_BYTECODE_MOD_IMMED(y+x);
     ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lnk: AddFunctionOpcode(cAdd);
Lnl: AddFunctionOpcode(B);
Lnm: opcode = cSub;
Lnn: FP_ReDefinePointers(); goto Lnb;
Lbb: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lnk;
Lbc: FP_TRACE_BYTECODE_MOD_IMMED(y+x);
     ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lnl;
Lbd: FP_TRACE_BYTECODE_MOD_IMMED(y+x);
     ImmedPtr[-1] = y+x;
Lbe: mData->mImmed.pop_back();
Lcb: mData->mByteCode.pop_back(); return;
Lbf: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lnf;
Lbg: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lni;
Lbh: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lni;
Lbi: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(B); goto Lnf;
Lbj: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cNotNot;
     FP_TRACE_BYTECODE_ADD(cNotNot);
     goto TailCall_cNotNot;
Lbk: FP_TRACE_BYTECODE_MOD_IMMED(fp_and(x,y));
     ImmedPtr[-1] = fp_and(x,y); goto Lbe;
Lbl: FP_TRACE_BYTECODE_MOD_IMMED(fp_arg(x));
     ImmedPtr[0] = fp_arg(x); return;
Lbm: FP_TRACE_BYTECODE_MOD_IMMED(fp_asin(x));
     ImmedPtr[0] = fp_asin(x); return;
Lbn: FP_TRACE_BYTECODE_MOD_IMMED(fp_asinh(x));
     ImmedPtr[0] = fp_asinh(x); return;
Lbo: FP_TRACE_BYTECODE_MOD_IMMED(fp_atan(x));
     ImmedPtr[0] = fp_atan(x); return;
Lbp: FP_TRACE_BYTECODE_MOD_IMMED(fp_atan2(y,x));
     ImmedPtr[-1] = fp_atan2(y,x); goto Lbe;
Lbq: FP_TRACE_BYTECODE_MOD_IMMED(fp_atanh(x));
     ImmedPtr[0] = fp_atanh(x); return;
Lbr: FP_TRACE_BYTECODE_MOD_IMMED(fp_cbrt(x));
     ImmedPtr[0] = fp_cbrt(x); return;
Lbs: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cCeil);
Lno: AddFunctionOpcode(A);
     AddFunctionOpcode(B);
Lnp: opcode = cAdd; goto Lnc;
Lbt: mData->mByteCode.pop_back();
     AddFunctionOpcode(cFloor);
Lnq: opcode = cNeg;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cNeg);
     goto TailCall_cNeg;
Lca: FP_TRACE_BYTECODE_MOD_IMMED(fp_ceil(x));
     ImmedPtr[0] = fp_ceil(x); return;
Lcc: FP_TRACE_BYTECODE_MOD_IMMED(fp_conj(x));
     ImmedPtr[0] = fp_conj(x); return;
Lcd: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lnr: FP_TRACE_BYTECODE_ADD(cCos);
     goto TailCall_cCos;
Lce: FP_TRACE_BYTECODE_MOD_IMMED(fp_cos(x));
     ImmedPtr[0] = fp_cos(x); return;
Lcf: ByteCodePtr[0] = cDup;
Lns: opcode = cInv;
Lnt: FP_TRACE_BYTECODE_ADD(cInv);
     goto TailCall_cInv;
Lcg: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinCos); return;
Lch: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSqr);
     mData->mImmed.push_back(Value_t(1));
Loa: mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cAdd);
Lob: opcode = cSqrt;
     FP_ReDefinePointers();
Loc: FP_TRACE_BYTECODE_ADD(cSqrt);
     goto TailCall_cSqrt;
Lci: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     FP_TRACE_BYTECODE_ADD(cCosh);
     goto TailCall_cCosh;
Lcj: FP_TRACE_BYTECODE_MOD_IMMED(fp_cosh(x));
     ImmedPtr[0] = fp_cosh(x); return;
Lck: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinhCosh); return;
Lcl: FP_TRACE_BYTECODE_MOD_IMMED(RadiansToDegrees(x));
     ImmedPtr[0] = RadiansToDegrees(x); return;
Lcm: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSec); goto Lmr;
Lcn: mData->mByteCode.pop_back();
     AddFunctionOpcode(cTan); goto Lmr;
Lco: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSin); goto Lmr;
Lcp: mData->mImmed.push_back(Value_t());
     ByteCodePtr[0] = cImmed;
Lod: AddFunctionOpcode(cMul);
     mData->mImmed.push_back(Value_t(1));
Loe: mData->mByteCode.push_back(cImmed); goto Lnp;
Lcq: mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     AddFunctionOpcode(cExp); goto Lmr;
Lcr: mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     AddFunctionOpcode(cExp2); goto Lmr;
Lcs: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lgi;
Lct: mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     AddFunctionOpcode(cPow); goto Lmr;
Lda: mData->mByteCode.pop_back();
     AddFunctionOpcode(cCos); goto Lmr;
Ldb: mData->mByteCode.pop_back();
     AddFunctionOpcode(cCsc); goto Lmr;
Ldc: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cTan;
Lof: FP_TRACE_BYTECODE_ADD(cTan);
     goto TailCall_cTan;
Ldd: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cTanh;
Log: FP_TRACE_BYTECODE_ADD(cTanh);
     goto TailCall_cTanh;
Lde: mData->mByteCode.pop_back();
     AddFunctionOpcode(cCot); goto Lmr;
Ldf: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Loh: FP_TRACE_BYTECODE_ADD(cDiv);
     goto TailCall_cDiv;
Ldg: FP_TRACE_BYTECODE_MOD_IMMED(y/x);
     ImmedPtr[-1] = y/x; goto Lbe;
Ldh: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Loi: opcode = cDeg;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cDeg);
     goto TailCall_cDeg;
Ldi: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Loj: opcode = cRad;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cRad);
     goto TailCall_cRad;
Ldj: FP_TRACE_BYTECODE_MOD_IMMED(y/x);
     ImmedPtr[-1] = y/x;
Lep: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lmr;
Ldk: FP_TRACE_BYTECODE_MOD_IMMED(fp_inv(x));
     ImmedPtr[0] = fp_inv(x); goto Lgi;
Ldl: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cMul);
Lok: FP_ReDefinePointers(); goto Loh;
Ldm: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed);
Lol: opcode = cRDiv;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cRDiv);
     goto TailCall_cRDiv;
Ldn: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(B); goto Lol;
Ldo: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lom: FP_TRACE_BYTECODE_ADD(cEqual);
     goto TailCall_cEqual;
Ldp: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     opcode = cNot;
     FP_ReDefinePointers();
Lon: FP_TRACE_BYTECODE_ADD(cNot);
     goto TailCall_cNot;
Ldq: FP_TRACE_BYTECODE_MOD_IMMED(fp_equal(y,x));
     ImmedPtr[-1] = fp_equal(y,x); goto Lbe;
Ldr: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cExp);
     mData->mImmed.push_back(fp_exp(x)); goto Lna;
Lds: FP_TRACE_BYTECODE_MOD_IMMED(fp_exp(x));
     ImmedPtr[0] = fp_exp(x); return;
Ldt: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cExp2);
     mData->mImmed.push_back(fp_exp2(x)); goto Lna;
Lea: FP_TRACE_BYTECODE_MOD_IMMED(fp_exp2(x));
     ImmedPtr[0] = fp_exp2(x); return;
Leb: mData->mImmed.push_back(fp_log(Value_t(2)));
     mData->mByteCode.push_back(cImmed);
Loo: AddFunctionOpcode(cMul);
     opcode = cExp;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cExp);
     goto TailCall_cExp;
Lec: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cFloor); goto Lno;
Led: mData->mByteCode.pop_back();
     AddFunctionOpcode(cCeil); goto Lnq;
Lee: FP_TRACE_BYTECODE_MOD_IMMED(fp_floor(x));
     ImmedPtr[0] = fp_floor(x); return;
Lef: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cFms;
Lop: FP_TRACE_BYTECODE_ADD(cFms);
     goto TailCall_cFms;
Leg: FP_TRACE_BYTECODE_MOD_IMMED(y*x+a);
     ImmedPtr[-2] = y*x+a;
Loq: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} return;
Leh: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lmr;
Lei: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cFmms;
Lor: FP_TRACE_BYTECODE_ADD(cFmms);
     goto TailCall_cFmms;
Lej: ByteCodePtr[-2] = cImmed;
Los: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lot: AddFunctionOpcode(cMul); goto Lmp;
Lek: FP_TRACE_BYTECODE_MOD_IMMED(x);
     ImmedPtr[-1] = x;
     mData->mImmed.pop_back(); goto Los;
Lel: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
Lpa: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lpb: AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lot;
Lem: mData->mImmed.pop_back(); goto Lpa;
Len: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(B); goto Lpb;
Leo: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lpb;
Leq: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back(); goto Lot;
Ler: FP_TRACE_BYTECODE_MOD_IMMED(y*x+a*b);
     ImmedPtr[-3] = y*x+a*b;
Lpc: for(unsigned tmp=3; tmp-->0; ) {mData->mImmed.pop_back();}
Lpd: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} return;
Les: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lnf;
Let: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
Lpe: opcode = cFms;
     FP_ReDefinePointers(); goto Lop;
Lfa: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lpf: opcode = cFmma; goto Lmq;
Lfb: ByteCodePtr[-2] = cImmed;
Lpg: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lph: AddFunctionOpcode(cMul);
Lpi: FP_ReDefinePointers(); goto Lor;
Lfc: FP_TRACE_BYTECODE_MOD_IMMED(x);
     ImmedPtr[-1] = x;
     mData->mImmed.pop_back(); goto Lpg;
Lfd: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
Lpj: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lpk: AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lph;
Lfe: mData->mImmed.pop_back(); goto Lpj;
Lff: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(B); goto Lpk;
Lfg: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lpk;
Lfh: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back(); goto Lph;
Lfi: FP_TRACE_BYTECODE_MOD_IMMED(y*x-a*b);
     ImmedPtr[-3] = y*x-a*b; goto Lpc;
Lfj: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x; goto Lpf;
Lfk: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
     mData->mByteCode.pop_back();
     AddFunctionOpcode(A); goto Lpi;
Lfm: FP_TRACE_BYTECODE_MOD_IMMED(y*x-a);
     ImmedPtr[-2] = y*x-a; goto Loq;
Lfn: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x; goto Lnh;
Lfo: FP_TRACE_BYTECODE_MOD_IMMED(fp_less(x,y));
     ImmedPtr[-1] = fp_less(x,y); goto Lbe;
Lfp: FP_TRACE_BYTECODE_MOD_IMMED(fp_lessOrEq(x,y));
     ImmedPtr[-1] = fp_lessOrEq(x,y); goto Lbe;
Lfq: FP_TRACE_BYTECODE_MOD_IMMED(fp_imag(x));
     ImmedPtr[0] = fp_imag(x); return;
Lfr: mData->mImmed.push_back(Value_t()); goto Lna;
Lfs: FP_TRACE_BYTECODE_MOD_IMMED(fp_int(x));
     ImmedPtr[0] = fp_int(x); return;
Lft: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSec;
     FP_TRACE_BYTECODE_ADD(cSec);
     goto TailCall_cSec;
Lga: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSin;
Lpl: FP_TRACE_BYTECODE_ADD(cSin);
     goto TailCall_cSin;
Lgb: mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     opcode = cPow;
Lpm: FP_ReDefinePointers();
Lpn: FP_TRACE_BYTECODE_ADD(cPow);
     goto TailCall_cPow;
Lgc: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSqrt; goto Loc;
Lgd: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cCos; goto Lnr;
Lge: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cCsc;
     FP_TRACE_BYTECODE_ADD(cCsc);
     goto TailCall_cCsc;
Lgf: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cRSqrt;
Lpo: FP_TRACE_BYTECODE_ADD(cRSqrt);
     goto TailCall_cRSqrt;
Lgg: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lpp: opcode = cCot;
     FP_TRACE_BYTECODE_ADD(cCot);
     goto TailCall_cCot;
Lgh: FP_TRACE_BYTECODE_MOD_IMMED(fp_inv(x));
     ImmedPtr[0] = fp_inv(x); return;
Lgj: FP_TRACE_BYTECODE_MOD_IMMED(fp_less(y,x));
     ImmedPtr[-1] = fp_less(y,x); goto Lbe;
Lgk: FP_TRACE_BYTECODE_MOD_IMMED(fp_lessOrEq(y,x));
     ImmedPtr[-1] = fp_lessOrEq(y,x); goto Lbe;
Lgl: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cLog);
     mData->mImmed.push_back(fp_log(x)); goto Loe;
Lgm: FP_TRACE_BYTECODE_MOD_IMMED(fp_log(x));
     ImmedPtr[0] = fp_log(x); return;
Lgn: mData->mImmed.push_back(fp_log10(fp_const_e<Value_t>()));
Lpq: ByteCodePtr[0] = cImmed; goto Lmr;
Lgo: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cLog10);
     mData->mImmed.push_back(fp_log10(x)); goto Loe;
Lgp: FP_TRACE_BYTECODE_MOD_IMMED(fp_log10(x));
     ImmedPtr[0] = fp_log10(x); return;
Lgq: mData->mImmed.push_back(fp_log2(fp_const_e<Value_t>())); goto Lpq;
Lgr: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cLog2);
     mData->mImmed.push_back(fp_log2(x)); goto Loe;
Lgs: FP_TRACE_BYTECODE_MOD_IMMED(fp_log2(x));
     ImmedPtr[0] = fp_log2(x); return;
Lgt: FP_TRACE_BYTECODE_MOD_IMMED(fp_max(x,y));
     ImmedPtr[-1] = fp_max(x,y); goto Lbe;
Lha: FP_TRACE_BYTECODE_MOD_IMMED(fp_min(x,y));
     ImmedPtr[-1] = fp_min(x,y); goto Lbe;
Lhb: FP_TRACE_BYTECODE_MOD_IMMED(fp_mod(y,x));
     ImmedPtr[-1] = fp_mod(y,x); goto Lbe;
Lhc: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 3; goto Lpp;
Lhd: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSqr;
Lpr: FP_TRACE_BYTECODE_ADD(cSqr);
     goto TailCall_cSqr;
Lhe: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cDiv; goto Loh;
Lhf: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr); goto Lnq;
Lhg: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr);
     AddFunctionOpcode(cMul); goto Lnq;
Lhh: FP_TRACE_BYTECODE_MOD_IMMED(x+Value_t(1));
     ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
     opcode = cPow; goto Lpn;
Lhi: ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2; goto Lmt;
Lhj: FP_TRACE_BYTECODE_MOD_IMMED(x);
     ImmedPtr[-1] = x;
Lps: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lms;
Lhk: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
Lpt: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lqa: AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
Lqb: mData->mByteCode.push_back(cImmed); goto Lms;
Lhl: mData->mImmed.pop_back(); goto Lpt;
Lhm: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(B); goto Lqa;
Lhn: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lqa;
Lho: ByteCodePtr[-1] = cImmed; goto Lcb;
Lhp: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lmt;
Lhq: mData->mImmed.pop_back(); goto Lpd;
Lhr: FP_TRACE_BYTECODE_MOD_IMMED(x+x);
     ImmedPtr[0] = x+x; goto Lhi;
Lhs: FP_TRACE_BYTECODE_MOD_IMMED(x);
     ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     mData->mImmed.push_back(y*x);
     mData->mByteCode.push_back(cImmed);
Lqc: AddFunctionOpcode(cMul); goto Lnp;
Lht: FP_TRACE_BYTECODE_MOD_IMMED(x);
     ImmedPtr[-1] = x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(y*x); goto Loe;
Lia: FP_TRACE_BYTECODE_MOD_IMMED(RadiansToDegrees(x));
     ImmedPtr[0] = RadiansToDegrees(x); goto Lhp;
Lib: FP_TRACE_BYTECODE_MOD_IMMED(y*x);
     ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lqd: AddFunctionOpcode(cMul);
Lqe: AddFunctionOpcode(B);
     opcode = cDiv; goto Lok;
Lic: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lqd;
Lid: FP_TRACE_BYTECODE_MOD_IMMED(y*x);
     ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lqe;
Lie: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lms;
Lif: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(x+x); goto Lqb;
Lig: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();} goto Lpd;
Lih: FP_TRACE_BYTECODE_MOD_IMMED(y*x);
     ImmedPtr[-1] = y*x; goto Lps;
Lii: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x; goto Lhp;
Lij: FP_TRACE_BYTECODE_MOD_IMMED(y*x);
     ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Lqf: AddFunctionOpcode(cMul); goto Lol;
Lik: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lqf;
Lil: FP_TRACE_BYTECODE_MOD_IMMED(y*x);
     ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lol;
Lim: FP_TRACE_BYTECODE_MOD_IMMED(DegreesToRadians(x));
     ImmedPtr[0] = DegreesToRadians(x); goto Lhp;
Lin: FP_TRACE_BYTECODE_MOD_IMMED(x);
     ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     mData->mImmed.push_back(y*x);
     mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cMul); goto Lnm;
Lio: FP_TRACE_BYTECODE_MOD_IMMED(y*x);
     ImmedPtr[-1] = y*x; goto Lbe;
Lip: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lnq;
Liq: ByteCodePtr[0] = cDup;
     ImmedPtr -= 1;
     mData->mImmed.pop_back();
Lqg: opcode = cAdd; goto Lnd;
Lir: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Loi;
Lis: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Loj;
Lit: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lqd;
Lja: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lqh: AddFunctionOpcode(cSqr); goto Lms;
Ljb: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lqf;
Ljc: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lqf;
Ljd: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lqh;
Lje: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lqi: FP_TRACE_BYTECODE_ADD(cNEqual);
     goto TailCall_cNEqual;
Ljf: FP_TRACE_BYTECODE_MOD_IMMED(fp_nequal(y,x));
     ImmedPtr[-1] = fp_nequal(y,x); goto Lbe;
Ljg: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x; goto Lcs;
Ljh: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     opcode = cSin;
     FP_ReDefinePointers(); goto Lpl;
Lji: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     opcode = cSinh;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cSinh);
     goto TailCall_cSinh;
Ljj: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     opcode = cTan;
     FP_ReDefinePointers(); goto Lof;
Ljk: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     opcode = cTanh;
     FP_ReDefinePointers(); goto Log;
Ljl: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x; return;
Ljm: mData->mByteCode.pop_back();
     AddFunctionOpcode(cAbsNot); return;
Ljn: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cNEqual; goto Lqi;
Ljo: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cLessOrEq;
     FP_TRACE_BYTECODE_ADD(cLessOrEq);
     goto TailCall_cLessOrEq;
Ljp: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cLess;
     FP_TRACE_BYTECODE_ADD(cLess);
     goto TailCall_cLess;
Ljq: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cGreaterOrEq;
     FP_TRACE_BYTECODE_ADD(cGreaterOrEq);
     goto TailCall_cGreaterOrEq;
Ljr: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cGreater;
     FP_TRACE_BYTECODE_ADD(cGreater);
     goto TailCall_cGreater;
Ljs: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cEqual; goto Lom;
Ljt: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lon;
Lka: FP_TRACE_BYTECODE_MOD_IMMED(fp_not(x));
     ImmedPtr[0] = fp_not(x); return;
Lkb: FP_TRACE_BYTECODE_MOD_IMMED(fp_or(x,y));
     ImmedPtr[-1] = fp_or(x,y); goto Lbe;
Lkc: FP_TRACE_BYTECODE_MOD_IMMED(fp_polar(x,y));
     ImmedPtr[-1] = fp_polar(x,y); goto Lbe;
Lkd: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back(); goto Loo;
Lke: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cMul);
     opcode = cExp2;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cExp2);
     goto TailCall_cExp2;
Lkf: FP_TRACE_BYTECODE_MOD_IMMED(y*x);
     ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lpm;
Lkg: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cMul); goto Lpm;
Lkh: FP_TRACE_BYTECODE_MOD_IMMED(Value_t());
     ImmedPtr[0] = Value_t(); goto Lod;
Lki: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lob;
Lkj: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     opcode = cCbrt;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cCbrt);
     goto TailCall_cCbrt;
Lkk: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cCbrt);
Lqj: opcode = cInv;
     FP_ReDefinePointers(); goto Lnt;
Lkl: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     opcode = cRSqrt;
     FP_ReDefinePointers(); goto Lpo;
Lkm: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lqj;
Lkn: FP_TRACE_BYTECODE_MOD_IMMED(x+x);
     ImmedPtr[0] = x+x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lpn;
Lko: FP_TRACE_BYTECODE_MOD_IMMED(fp_pow(y,x));
     ImmedPtr[-1] = fp_pow(y,x); goto Lbe;
Lkp: mData->mByteCode.pop_back();
     AddFunctionOpcode(cTanh); goto Lqj;
Lkq: mData->mImmed.push_back(Value_t()); goto Lpq;
Lkr: FP_TRACE_BYTECODE_MOD_IMMED(DegreesToRadians(x));
     ImmedPtr[0] = DegreesToRadians(x); goto Lcs;
Lks: FP_TRACE_BYTECODE_MOD_IMMED(DegreesToRadians(x));
     ImmedPtr[0] = DegreesToRadians(x); return;
Lkt: FP_TRACE_BYTECODE_MOD_IMMED(fp_real(x));
     ImmedPtr[0] = fp_real(x); return;
Lla: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinCos); goto Lqj;
Llb: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSin); goto Lnq;
Llc: FP_TRACE_BYTECODE_MOD_IMMED(fp_sin(x));
     ImmedPtr[0] = fp_sin(x); return;
Lld: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSqr);
     mData->mImmed.push_back(Value_t(-1)); goto Loa;
Lle: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSinh); goto Lnq;
Llf: FP_TRACE_BYTECODE_MOD_IMMED(fp_sinh(x));
     ImmedPtr[0] = fp_sinh(x); return;
Llg: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lpr;
Llh: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lns;
Lli: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
Lqk: opcode = cHypot;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cHypot);
     goto TailCall_cHypot;
Llj: for(unsigned tmp=5; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(B); goto Lqk;
Llk: FP_TRACE_BYTECODE_MOD_IMMED(fp_sqrt(x));
     ImmedPtr[0] = fp_sqrt(x); return;
Lll: mData->mImmed.push_back(2);
     ByteCodePtr[-4] = cImmed;
Llm: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(-2); goto Lmn;
Lln: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
     mData->mByteCode.pop_back(); goto Lqc;
Llo: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cMul); goto Lnn;
Llp: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(B);
     opcode = cFmms; goto Lpi;
Llq: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lqg;
Llr: FP_TRACE_BYTECODE_MOD_IMMED(y-x);
     ImmedPtr[-1] = y-x; goto Lne;
Lls: FP_TRACE_BYTECODE_MOD_IMMED(y-x);
     ImmedPtr[-1] = y-x; goto Lbe;
Llt: FP_TRACE_BYTECODE_MOD_IMMED(-x);
     ImmedPtr[0] = -x; goto Lqg;
Lma: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lpe;
Lmb: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cAdd);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lnj;
Lmc: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cSub); goto Lnj;
Lmd: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(B); goto Lpe;
Lme: mData->mByteCode.pop_back();
     AddFunctionOpcode(cTan); goto Lnq;
Lmf: FP_TRACE_BYTECODE_MOD_IMMED(fp_tan(x));
     ImmedPtr[0] = fp_tan(x); return;
Lmg: mData->mByteCode.pop_back();
     AddFunctionOpcode(cTanh); goto Lnq;
Lmh: FP_TRACE_BYTECODE_MOD_IMMED(fp_tanh(x));
     ImmedPtr[0] = fp_tanh(x); return;
Lmi: FP_TRACE_BYTECODE_MOD_IMMED(fp_trunc(x));
     ImmedPtr[0] = fp_trunc(x); return;
Lmj: mData->mByteCode.push_back(cDup); return;
Lmk: ByteCodePtr[0] = cDup; return;
Lml: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinCos);
Lql: AddFunctionOpcode(GetParamSwappedBinaryOpcode(C)); return;
Lmm: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinhCosh); goto Lql;
return;
// This list of dummy gotos is here to inhibit
// compiler warnings on unused labels
goto TailCall_cAcos;goto TailCall_cAcosh;goto TailCall_cAnd;
goto TailCall_cArg;goto TailCall_cAsin;goto TailCall_cAsinh;
goto TailCall_cAtan;goto TailCall_cAtan2;goto TailCall_cAtanh;
goto TailCall_cCeil;goto TailCall_cConj;goto TailCall_cFloor;
goto TailCall_cImag;goto TailCall_cInt;goto TailCall_cLog;
goto TailCall_cLog10;goto TailCall_cLog2;goto TailCall_cMax;
goto TailCall_cMin;goto TailCall_cMod;goto TailCall_cOr;
goto TailCall_cPolar;goto TailCall_cRDiv;goto TailCall_cRad;
goto TailCall_cReal;goto TailCall_cSec;goto TailCall_cSin;
goto TailCall_cSinh;goto TailCall_cSqrt;goto TailCall_cTan;
goto TailCall_cTanh;goto TailCall_cTrunc;
#endif

#undef FP_ReDefinePointers
#undef FP_TRACE_BYTECODE_OPTIMIZATION
