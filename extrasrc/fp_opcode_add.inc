/* Function Parser for C++ v5.0.0   

  NOTE:
  Do not include this file in your project. The fparser.cc file #includes
this file internally and thus you don't need to do anything (other than keep
this file in the same directory as fparser.cc).

  This file contains generated code and is thus not intended to be to
be modified by hand. It was generated by util/bytecoderules_parser, which
is available in the development package.
*/
//#define FP_BYTECODE_TRACE

#define HasInvalidRangesOpcode HasInvalidRangesOpcode<IsComplexType<Value_t>::value>

#define FP_BYTECODEADD_BYTECODEPTR \
	(!mData->mByteCode.empty() ? &mData->mByteCode[0] + mData->mByteCode.size() - 1 : nullptr)
#define FP_BYTECODEADD_IMMEDPTR \
	(!mData->mImmed.empty()    ? &mData->mImmed[0]    + mData->mImmed.size()    - 1 : nullptr)

#ifdef FP_BYTECODE_TRACE
# define FP_TRACE_OPCODENAME(op) \
    (op < VarBegin \
        ? FP_GetOpcodeName(OPCODE(op)) \
        : findName(mData->mNamePtrs,op,NameData<Value_t>::VARIABLE))

# define FP_TRACE_BYTECODE_OPTIMIZATION(srcline,from,to,with) \
    std::cout << "Changing \"" from "\"\t(line " #srcline ")\n" \
                   "    into \"" to "\"\n" with << std::flush
# define FP_TRACE_BYTECODE_DETAIL() \
                   ", bytecode length " << mData->mByteCode.size() \
                << ", stack ptr " << mStackPtr \
                << ", stack size " << mData->mStackSize \
                << ", pointer is " << (void*)FP_BYTECODEADD_BYTECODEPTR \
                << ", code is " << (mData->mByteCode.empty() \
                                       ? (void*)0 \
                                       : (void*)&mData->mByteCode[0]) \
                << std::endl
# define FP_TRACE_BYTECODE_ADD(opcode) \
    std::cout << "Adding opcode: " << FP_TRACE_OPCODENAME(opcode) \
              << FP_TRACE_BYTECODE_DETAIL()
# define FP_TRACE_BYTECODE_ADD_IMMED(value) \
    std::cout << "Adding opcode: cImmed: " << value \
              << FP_TRACE_BYTECODE_DETAIL()
# define FP_TRACE_BYTECODE_ADD_VAR(index) \
    std::cout << "Adding opcode: cVar" << index \
              << FP_TRACE_BYTECODE_DETAIL()
# define FP_TRACE_BYTECODE_RETRACT() \
    std::cout << "Retracting last opcode" \
              << FP_TRACE_BYTECODE_DETAIL()
#else
# define FP_TRACE_BYTECODE_OPTIMIZATION(srcline,from,to,with)
# define FP_TRACE_BYTECODE_ADD(opcode)
# define FP_TRACE_BYTECODE_ADD_IMMED(value)
# define FP_TRACE_BYTECODE_ADD_VAR(index)
# define FP_TRACE_BYTECODE_RETRACT()
#endif
  unsigned* ByteCodePtr;
  Value_t*   ImmedPtr;

  #define FP_ReDefinePointers() \
    ByteCodePtr = FP_BYTECODEADD_BYTECODEPTR; \
    ImmedPtr    = FP_BYTECODEADD_IMMEDPTR;
  FP_ReDefinePointers();
  FP_TRACE_BYTECODE_ADD(opcode);

#if(!(FP_COMPLEX_VERSION) && !(FP_FLOAT_VERSION))
	Value_t x;
	unsigned A;
	unsigned B;
	Value_t y;
	Value_t a;
	unsigned C;
	Value_t b;
	unsigned D;
	switch(opcode)
	{
	TailCall_cAbs:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAbs:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(233,"cNeg cAbs", "cAbs", "");
			/* opcode = cAbs; */ // redundant, matches cAbs @ 0
			goto Lab;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(164,
				"x cAbs",
				"[fp_abs(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lac;
		default:
			A = ByteCodePtr[0];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(246,
					"A[IsNeverNegativeValueOpcode(A)] cAbs",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cAdd:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAdd:
		switch(ByteCodePtr[0])
		{
		case cDup:
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(366,"cDup cAdd cDup cAdd", "[Value_t(4)] cMul", "");
					goto Lad;
				}
				break;
			case cMul:
				if(ByteCodePtr[-2] == cAdd)
				{
					if(ByteCodePtr[-3] == cDup)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(367,"cDup cAdd cMul cDup cAdd", "cMul [Value_t(4)] cMul", "");
						goto Lae;
					}
				}
				break;
			}
			goto Default1;
		case cMul:
			switch(ByteCodePtr[-1])
			{
			case cImmed:
				x = ImmedPtr[0];
				switch(ByteCodePtr[-2])
				{
				case cDup:
					FP_TRACE_BYTECODE_OPTIMIZATION(369,
						"cDup x cMul cAdd",
						"[x+Value_t(1)] cMul",
						"    with x = " << x << "\n");
					goto Laf;
				default:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						if(ByteCodePtr[-3] == cMul)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(272,
								"cMul A[IsVarOpcode(A)] x cMul cAdd",
								"A [DO_STACKPLUS2] [x] cFmma",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							incStackPtr();
							incStackPtr();
							--mStackPtr;
							--mStackPtr;
							goto Lag;
						}
					}
				}
				break;
			default:
				B = ByteCodePtr[-1];
				if(IsVarOpcode(B))
				{
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						if(ByteCodePtr[-3] == cMul)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(268,
								"cMul A[IsVarOpcode(A)] B[IsVarOpcode(B)] cMul cAdd",
								"A [DO_STACKPLUS2] B cFmma",
								"    with B = " << FP_TRACE_OPCODENAME(B)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							incStackPtr();
							incStackPtr();
							--mStackPtr;
							--mStackPtr;
							goto Lah;
						}
					}
				}
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						if(ByteCodePtr[-3] == cMul)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(270,
								"cMul x A[IsVarOpcode(A)] cMul cAdd",
								"[x] [DO_STACKPLUS2] A cFmma",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", x = " << x
								    << "\n");
							incStackPtr();
							incStackPtr();
							--mStackPtr;
							--mStackPtr;
							goto Lai;
						}
					}
				}
			}
			goto Default1;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(231,"cNeg cAdd", "cSub", "");
			goto Laj;
		case cImmed:
			x = ImmedPtr[0];
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(150,
						"y cAdd x cAdd",
						"[y+x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cAdd; */ // redundant, matches cAdd @ 0
					goto Lak;
				}
				break;
			case cFma:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(154,
						"y cFma x cAdd",
						"[y+x] cFma",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lal;
				}
				break;
			case cMul:
				FP_TRACE_BYTECODE_OPTIMIZATION(266,
					"cMul x cAdd",
					"[DO_STACKPLUS1] [x] cFma",
					"    with x = " << x << "\n");
				incStackPtr();
				--mStackPtr;
				/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
				goto Lam;
			case cRSub:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(354,
							"y cAdd cRSub x cAdd",
							"[ y+x] cAdd cRSub",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lan;
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(355,
						"cNeg cRSub x cAdd",
						"[-x] cAdd cRSub",
						"    with x = " << x << "\n");
					goto Lao;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(353,
						"y cRSub x cAdd",
						"[ y+x] cRSub",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lap;
				}
				break;
			case cSub:
				B = ByteCodePtr[-2];
				if(IsVarOpcode(B))
				{
					switch(ByteCodePtr[-3])
					{
					case cAdd:
						if(ByteCodePtr[-4] == cImmed)
						{
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(348,
								"y cAdd B[IsVarOpcode(B)] cSub x cAdd",
								"[ y+x] cAdd B cSub",
								"    with x = " << x
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-4] = cImmed; */ // redundant, matches y @ 5
							goto Laq;
						}
						break;
					case cNeg:
						FP_TRACE_BYTECODE_OPTIMIZATION(349,
							"cNeg B[IsVarOpcode(B)] cSub x cAdd",
							"[-x] cAdd B cSub",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						goto Lar;
					case cImmed:
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(347,
							"y B[IsVarOpcode(B)] cSub x cAdd",
							"[ y+x] B cSub",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Las;
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(123,
					"y x cAdd",
					"[y+x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lat;
			}
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(55,
					"x[x==Value_t()] cAdd",
					"",
					"    with x = " << x << "\n");
				goto Lba;
			}
			break;
		default: Default1:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					FP_TRACE_BYTECODE_OPTIMIZATION(264,
						"cMul A[IsVarOpcode(A)] cAdd",
						"[DO_STACKPLUS1] A cFma",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Lbb;
				case cRSub:
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(346,
							"x cRSub A[IsVarOpcode(A)] cAdd",
							"[DO_STACKPLUS1] A [x] cAdd cRSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						incStackPtr();
						--mStackPtr;
						goto Lbc;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(351,
						"cRSub A[IsVarOpcode(A)] cAdd",
						"[DO_STACKPLUS1] A cAdd cRSub",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Lbd;
				}
			}
		}
		goto Default0;
	TailCall_cAnd:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAnd:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(280,"cDup cAnd", "cNotNot", "");
			goto Lbe;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(140,
					"y x cAnd",
					"[fp_and(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbf;
			}
			break;
		}
		goto Default0;
	TailCall_cDiv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cDiv:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(76,"cDup cDiv", "[Value_t()] cMul [Value_t(1)] cAdd", "");
			goto Lbg;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(148,
						"cNeg x[x!=Value_t()] cDiv",
						"[-x] cDiv",
						"    with x = " << x << "\n");
					/* opcode = cDiv; */ // redundant, matches cDiv @ 0
					goto Lbh;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(121,
						"y x[x!=Value_t()] cDiv",
						"[y/x]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Lbi;
				}
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(54,
					"x[x==Value_t(1)] cDiv",
					"",
					"    with x = " << x << "\n");
				goto Lba;
			}
			break;
		}
		goto Default0;
	TailCall_cEqual:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				A = ByteCodePtr[-1];
				if(IsLogicalOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(484,
						"A[IsLogicalOpcode(A)] x[x==Value_t(1)] cEqual",
						"A",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					goto Lba;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(138,
					"y x cEqual",
					"[fp_equal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbj;
			}
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(418,
						"cAbs x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Lbk;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(420,
						"cSqr x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Lbk;
				default:
					A = ByteCodePtr[-1];
					if(IsLogicalOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(486,
							"A[IsLogicalOpcode(A)] x[x==Value_t(0)] cEqual",
							"A cNot",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lbl;
					}
				}
				FP_TRACE_BYTECODE_OPTIMIZATION(474,
					"x[x==Value_t(0)] cEqual",
					"cNot",
					"    with x = " << x << "\n");
				goto Lbl;
			}
		}
		goto Default0;
	TailCall_cFma:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFma:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(274,"cNeg cFma", "cFms", "");
			goto Lbm;
		case cImmed:
			a = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[-1];
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-2];
					FP_TRACE_BYTECODE_OPTIMIZATION(129,
						"y x a cFma",
						"[y*x+a]",
						"    with a = " << a
						    << ", x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lbn;
				}
			}
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(156,
					"x[x==Value_t()] cFma",
					"cMul",
					"    with x = " << x << "\n");
				goto Lbo;
			}
			break;
		}
		goto Default0;
	TailCall_cFmma:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFmma:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(276,"cNeg cFmma", "cFmms", "");
			goto Lbp;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(107,
							"A[IsVarOpcode(A)] cMul x[x==Value_t()] cFmma",
							"[x] cMul cFmma",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cFmma; */ // redundant, matches cFmma @ 0
						goto Lbq;
					}
					goto Default2;
				default: Default2:;
					A = ByteCodePtr[-1];
					if(IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						switch(ByteCodePtr[-2])
						{
						case cImmed:
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(105,
								"y A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
								"[x] cMul cFmma",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cFmma; */ // redundant, matches cFmma @ 0
							goto Lbr;
						default:
							B = ByteCodePtr[-2];
							if(IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								switch(ByteCodePtr[-3])
								{
								case cImmed:
									y = ImmedPtr[-1];
									FP_TRACE_BYTECODE_OPTIMIZATION(111,
										"y B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
										"A [x] cMul cFmma",
										"    with x = " << x
										    << ", A = " << FP_TRACE_OPCODENAME(A)
										    << ", B = " << FP_TRACE_OPCODENAME(B)
										    << ", y = " << y
										    << "\n");
									/* opcode = cFmma; */ // redundant, matches cFmma @ 0
									goto Lbs;
								default:
									C = ByteCodePtr[-3];
									if(IsVarOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(109,
											"C[IsVarOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
											"A [x] cMul cFmma",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cFmma; */ // redundant, matches cFmma @ 0
										goto Lbt;
									}
									if(IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(110,
											"C[IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
											"B A [x] cMul cFmma",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cFmma; */ // redundant, matches cFmma @ 0
										goto Lca;
									}
								}
							}
							if(IsVarOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(101,
									"B[IsVarOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
									"[x] cMul cFmma",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
								/* opcode = cFmma; */ // redundant, matches cFmma @ 0
								goto Lbq;
							}
							if(IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(103,
									"B[IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
									"A [x] cMul cFmma",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* opcode = cFmma; */ // redundant, matches cFmma @ 0
								goto Lcb;
							}
						}
					}
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(97,
							"A[IsVarOpcode(A)] x[x==Value_t()] cFmma",
							"cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						goto Lcc;
					}
					if(IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(99,
							"A[IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
							"[x] cMul cFmma",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cFmma; */ // redundant, matches cFmma @ 0
						goto Lcd;
					}
				}
			}
			b = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				a = ImmedPtr[-1];
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[-2];
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-3];
						FP_TRACE_BYTECODE_OPTIMIZATION(131,
							"y x a b cFmma",
							"[y*x+a*b]",
							"    with b = " << b
							    << ", a = " << a
							    << ", x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lce;
					}
				}
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(157,
					"x[x==Value_t(1)] cFmma",
					"cFma",
					"    with x = " << x << "\n");
				goto Lcf;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(158,
					"x[x==Value_t(-1)] cFmma",
					"cFms",
					"    with x = " << x << "\n");
				goto Lcg;
			}
			break;
		}
		goto Default0;
	TailCall_cFmms:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFmms:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(277,"cNeg cFmms", "cFmma", "");
			goto Lch;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(108,
							"A[IsVarOpcode(A)] cMul x[x==Value_t()] cFmms",
							"[x] cMul cFmms",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cFmms; */ // redundant, matches cFmms @ 0
						goto Lci;
					}
					goto Default3;
				default: Default3:;
					A = ByteCodePtr[-1];
					if(IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						switch(ByteCodePtr[-2])
						{
						case cImmed:
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(106,
								"y A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
								"[x] cMul cFmms",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cFmms; */ // redundant, matches cFmms @ 0
							goto Lcj;
						default:
							B = ByteCodePtr[-2];
							if(IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								switch(ByteCodePtr[-3])
								{
								case cImmed:
									y = ImmedPtr[-1];
									FP_TRACE_BYTECODE_OPTIMIZATION(114,
										"y B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
										"A [x] cMul cFmms",
										"    with x = " << x
										    << ", A = " << FP_TRACE_OPCODENAME(A)
										    << ", B = " << FP_TRACE_OPCODENAME(B)
										    << ", y = " << y
										    << "\n");
									/* opcode = cFmms; */ // redundant, matches cFmms @ 0
									goto Lck;
								default:
									C = ByteCodePtr[-3];
									if(IsVarOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(112,
											"C[IsVarOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
											"A [x] cMul cFmms",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cFmms; */ // redundant, matches cFmms @ 0
										goto Lcl;
									}
									if(IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(113,
											"C[IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
											"B A [x] cMul cFmms",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cFmms; */ // redundant, matches cFmms @ 0
										goto Lcm;
									}
								}
							}
							if(IsVarOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(102,
									"B[IsVarOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
									"[x] cMul cFmms",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
								/* opcode = cFmms; */ // redundant, matches cFmms @ 0
								goto Lci;
							}
							if(IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(104,
									"B[IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
									"A [x] cMul cFmms",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* opcode = cFmms; */ // redundant, matches cFmms @ 0
								goto Lcn;
							}
						}
					}
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(98,
							"A[IsVarOpcode(A)] x[x==Value_t()] cFmms",
							"cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						goto Lcc;
					}
					if(IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(100,
							"A[IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
							"[x] cMul cFmms",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cFmms; */ // redundant, matches cFmms @ 0
						goto Lco;
					}
				}
			}
			b = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				a = ImmedPtr[-1];
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[-2];
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-3];
						FP_TRACE_BYTECODE_OPTIMIZATION(132,
							"y x a b cFmms",
							"[y*x-a*b]",
							"    with b = " << b
							    << ", a = " << a
							    << ", x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lcp;
					}
				}
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(159,
					"x[x==Value_t(1)] cFmms",
					"cFms",
					"    with x = " << x << "\n");
				goto Lcg;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(160,
					"x[x==Value_t(-1)] cFmms",
					"cFma",
					"    with x = " << x << "\n");
				goto Lcf;
			}
			break;
		}
		goto Default0;
	TailCall_cFms:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFms:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(275,"cNeg cFms", "cFma", "");
			goto Lcq;
		case cImmed:
			a = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[-1];
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-2];
					FP_TRACE_BYTECODE_OPTIMIZATION(130,
						"y x a cFms",
						"[y*x-a]",
						"    with a = " << a
						    << ", x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lcr;
				}
			}
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(153,
				"x cFms",
				"[-x] cFma",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lcs;
		}
		goto Default0;
	TailCall_cGreater:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cGreater:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(476,
						"cAbs x[x==Value_t(0)] cGreater",
						"cNotNot",
						"    with x = " << x << "\n");
					goto Lct;
				default:
					A = ByteCodePtr[-1];
					if(IsNeverNegativeValueOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(480,
							"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(0)] cGreater",
							"A cNotNot",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lda;
					}
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(136,
					"y x cGreater",
					"[fp_less(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldb;
			}
		}
		goto Default0;
	TailCall_cGreaterOrEq:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cGreaterOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(477,
						"cAbs x[x==Value_t(1)] cGreaterOrEq",
						"cNotNot",
						"    with x = " << x << "\n");
					goto Lct;
				default:
					A = ByteCodePtr[-1];
					if(IsNeverNegativeValueOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(481,
							"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(1)] cGreaterOrEq",
							"A cNotNot",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lda;
					}
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(137,
					"y x cGreaterOrEq",
					"[fp_lessOrEq(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldc;
			}
		}
		goto Default0;
	TailCall_cInv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cInv:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(119,
					"x[x!=Value_t()] cInv",
					"[fp_inv(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Ldd;
			}
		}
		goto Default0;
	TailCall_cLess:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLess:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				A = ByteCodePtr[-1];
				if(IsNeverNegativeValueOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(357,
						"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(0)] cLess",
						"A [x] cMul",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
					goto Lde;
				}
			}
			if(x==Value_t(1))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(478,
						"cAbs x[x==Value_t(1)] cLess",
						"cNot",
						"    with x = " << x << "\n");
					goto Ldf;
				default:
					A = ByteCodePtr[-1];
					if(IsNeverNegativeValueOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(482,
							"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(1)] cLess",
							"A cNot",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lbl;
					}
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(134,
					"y x cLess",
					"[fp_less(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldg;
			}
		}
		goto Default0;
	TailCall_cLessOrEq:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLessOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(479,
						"cAbs x[x==Value_t(0)] cLessOrEq",
						"cNot",
						"    with x = " << x << "\n");
					goto Ldf;
				default:
					A = ByteCodePtr[-1];
					if(IsNeverNegativeValueOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(483,
							"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(0)] cLessOrEq",
							"A cNot",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lbl;
					}
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(135,
					"y x cLessOrEq",
					"[fp_lessOrEq(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldh;
			}
		}
		goto Default0;
	TailCall_cMax:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMax:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(58,"cDup cMax", "", "");
			goto Ldi;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(173,
					"y x cMax",
					"[fp_max(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldj;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(64,
							"B[B==A] cDup A[IsVarOpcode(A)] cMax",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Ldi;
					}
					break;
				case cMax:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(66,
							"B[B==A] cMax A[IsVarOpcode(A)] cMax",
							"B cMax",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMax; */ // redundant, matches cMax @ 2
						goto Ldi;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cMin:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMin:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(57,"cDup cMin", "", "");
			goto Ldi;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(172,
					"y x cMin",
					"[fp_min(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldk;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(63,
							"B[B==A] cDup A[IsVarOpcode(A)] cMin",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Ldi;
					}
					break;
				case cMin:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(65,
							"B[B==A] cMin A[IsVarOpcode(A)] cMin",
							"B cMin",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMin; */ // redundant, matches cMin @ 2
						goto Ldi;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cMod:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMod:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				if(ByteCodePtr[-1] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(122,
						"y x[x!=Value_t()] cMod",
						"[fp_mod(y,x)]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Ldl;
				}
			}
		}
		goto Default0;
	TailCall_cMul:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMul:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(234,"cDup cMul", "cSqr", "");
			goto Ldm;
		case cNeg:
			switch(ByteCodePtr[-1])
			{
			case cDup:
				FP_TRACE_BYTECODE_OPTIMIZATION(532,"cDup cNeg cMul", "cSqr cNeg", "");
				goto Ldn;
			default:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cMul)
					{
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(538,
								"B[B==A] cMul A[IsVarOpcode(A)] cNeg cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Ldo;
						}
					}
				}
			}
			goto Default4;
		case cPow:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(370,
						"cDup x cPow cMul",
						"[x+Value_t(1)] cPow",
						"    with x = " << x << "\n");
					goto Ldp;
				}
			}
			goto Default4;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(91,
							"A[IsVarOpcode(A)] cMul x[x==Value_t()] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Ldq;
					}
					goto Default5;
				default: Default5:;
					A = ByteCodePtr[-1];
					if(IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						switch(ByteCodePtr[-2])
						{
						case cImmed:
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(90,
								"y A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
								"[x] cMul",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Ldr;
						default:
							B = ByteCodePtr[-2];
							if(IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								switch(ByteCodePtr[-3])
								{
								case cImmed:
									y = ImmedPtr[-1];
									FP_TRACE_BYTECODE_OPTIMIZATION(94,
										"y B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
										"A [x] cMul",
										"    with x = " << x
										    << ", A = " << FP_TRACE_OPCODENAME(A)
										    << ", B = " << FP_TRACE_OPCODENAME(B)
										    << ", y = " << y
										    << "\n");
									/* opcode = cMul; */ // redundant, matches cMul @ 0
									goto Lds;
								default:
									C = ByteCodePtr[-3];
									if(IsVarOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(92,
											"C[IsVarOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
											"A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Ldt;
									}
									if(IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(93,
											"C[IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
											"B A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lea;
									}
								}
							}
							if(IsVarOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(88,
									"B[IsVarOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
									"[x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Ldq;
							}
							if(IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(89,
									"B[IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
									"A [x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Leb;
							}
						}
					}
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(86,
							"A[IsVarOpcode(A)] x[x==Value_t()] cMul",
							"[x]",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						goto Lec;
					}
					if(IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(87,
							"A[IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Led;
					}
				}
			}
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				switch(ByteCodePtr[-2])
				{
				case cDup:
					FP_TRACE_BYTECODE_OPTIMIZATION(373,
						"cDup cAdd x cMul",
						"[x+x] cMul",
						"    with x = " << x << "\n");
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Lee;
				case cMul:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(IsVarOpcode(A))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(445,
								"A[IsVarOpcode(A)] y cMul cAdd x cMul",
								"[x] cMul A [y*x] cMul cAdd",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lef;
						}
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(444,
						"y cAdd x cMul",
						"[x] cMul [y*x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Leg;
				}
				break;
			case cMul:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cDup)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(375,
							"cDup cAdd cMul x cMul",
							"cMul [x+x] cMul",
							"    with x = " << x << "\n");
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Leh;
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					if(y*x==Value_t(1))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(68,
							"y[y*x==Value_t(1)] cMul x cMul",
							"",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Lei;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(151,
						"y cMul x cMul",
						"[y*x] cMul",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Lej;
				}
				break;
			case cNeg:
				FP_TRACE_BYTECODE_OPTIMIZATION(145,
					"cNeg x cMul",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Lek;
			case cSub:
				if(ByteCodePtr[-2] == cMul)
				{
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(IsVarOpcode(A))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(446,
								"A[IsVarOpcode(A)] y cMul cSub x cMul",
								"[x] cMul A [y*x] cMul cSub",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lel;
						}
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(120,
					"y x cMul",
					"[y*x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lem;
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(53,
					"x[x==Value_t(1)] cMul",
					"",
					"    with x = " << x << "\n");
				goto Lba;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(147,
					"x[x==Value_t(-1)] cMul",
					"cNeg",
					"    with x = " << x << "\n");
				goto Len;
			}
			if(x==Value_t(2))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(230,
					"x[x==Value_t(2)] cMul",
					"cDup cAdd",
					"    with x = " << x << "\n");
				goto Leo;
			}
			break;
		default: Default4:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					switch(ByteCodePtr[-2])
					{
					case cNeg:
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(535,
								"B[B==A] cNeg cMul A[IsVarOpcode(A)] cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Ldo;
						}
						goto Default6;
					default: Default6:;
						B = ByteCodePtr[-2];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(526,
								"B[B==A] cMul A[IsVarOpcode(A)] cMul",
								"B cSqr cMul",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lep;
						}
					}
					goto Default7;
				case cNeg:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(529,
							"B[B==A] cNeg A[IsVarOpcode(A)] cMul",
							"B cSqr cNeg",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Ldn;
					}
					goto Default7;
				default: Default7:;
					B = ByteCodePtr[-1];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(523,
							"B[B==A] A[IsVarOpcode(A)] cMul",
							"B cSqr",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-1] = B; */ // redundant, matches B @ 2
						goto Ldm;
					}
				}
			}
			if(IsUnaryOpcode(A))
			{
				B = ByteCodePtr[-1];
				if(IsVarOpcode(B)&&mData->mByteCode.size()>1)
				{
					if(ByteCodePtr[-2] == cMul)
					{
						C = ByteCodePtr[-3];
						if(C==A)
						{
							D = ByteCodePtr[-4];
							if(D==B)
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(542,
									"D[D==B] C[C==A] cMul B[IsVarOpcode(B)&&mData->mByteCode.size()>1] A[IsUnaryOpcode(A)] cMul",
									"D C cSqr cMul",
									"    with A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << ", C = " << FP_TRACE_OPCODENAME(C)
									    << ", D = " << FP_TRACE_OPCODENAME(D)
									    << "\n");
								/* ByteCodePtr[-4] = D; */ // redundant, matches D @ 5
								/* ByteCodePtr[-3] = C; */ // redundant, matches C @ 4
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Leq;
							}
						}
					}
				}
			}
		}
		goto Default0;
	TailCall_cNEqual:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				A = ByteCodePtr[-1];
				if(IsLogicalOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(485,
						"A[IsLogicalOpcode(A)] x[x==Value_t(1)] cNEqual",
						"A cNot",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					goto Lbl;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(139,
					"y x cNEqual",
					"[fp_nequal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ler;
			}
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(419,
						"cAbs x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Les;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(421,
						"cSqr x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Les;
				default:
					A = ByteCodePtr[-1];
					if(IsLogicalOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(487,
							"A[IsLogicalOpcode(A)] x[x==Value_t(0)] cNEqual",
							"A",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lba;
					}
				}
				FP_TRACE_BYTECODE_OPTIMIZATION(475,
					"x[x==Value_t(0)] cNEqual",
					"cNotNot",
					"    with x = " << x << "\n");
				goto Lda;
			}
		}
		goto Default0;
	TailCall_cNeg:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNeg:
		switch(ByteCodePtr[0])
		{
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(146,
					"x cMul cNeg",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Let;
			}
			break;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(59,"cNeg cNeg", "", "");
			goto Ldi;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(118,
				"x cNeg",
				"[-x]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lfa;
		}
		goto Default0;
	TailCall_cNot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNot:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(283,"cAbs cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Lfb;
		case cAbsNot:
			A = ByteCodePtr[-1];
			if(IsLogicalOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(448,
					"A[IsLogicalOpcode(A)] cAbsNot cNot",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Ldi;
			}
			if(A!=cImmed)
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(449,
					"A[A!=cImmed] cAbsNot cNot",
					"A cAbsNotNot",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Lfc;
			}
			goto Default8;
		case cAbsNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(287,"cAbsNotNot cNot", "cAbsNot", "");
			goto Lfd;
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(489,
					"x cAdd cNot",
					"[-x] cEqual",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Lfe;
			}
			goto Default8;
		case cEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(261,"cEqual cNot", "cNEqual", "");
			goto Lff;
		case cGreater:
			FP_TRACE_BYTECODE_OPTIMIZATION(259,"cGreater cNot", "cLessOrEq", "");
			goto Lfg;
		case cGreaterOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(260,"cGreaterOrEq cNot", "cLess", "");
			goto Lfh;
		case cLess:
			FP_TRACE_BYTECODE_OPTIMIZATION(257,"cLess cNot", "cGreaterOrEq", "");
			goto Lfi;
		case cLessOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(258,"cLessOrEq cNot", "cGreater", "");
			goto Lfj;
		case cNEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(262,"cNEqual cNot", "cEqual", "");
			goto Lfk;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(282,"cNeg cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Lfb;
		case cNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(285,"cNot cNot", "cNotNot", "");
			goto Lbe;
		case cNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(286,"cNotNot cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Lfb;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(125,
				"x cNot",
				"[fp_not(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lfl;
		default: Default8:;
			A = ByteCodePtr[0];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(450,
					"A[IsNeverNegativeValueOpcode(A)] cNot",
					"A cAbsNot",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				goto Lfm;
			}
		}
		goto Default0;
	TailCall_cNotNot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNotNot:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(488,
					"x cAdd cNotNot",
					"[-x] cNEqual",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Lfn;
			}
			break;
		case cNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(288,"cNot cNotNot", "cNot", "");
			/* ByteCodePtr[0] = cNot; */ // redundant, matches cNot @ 1
			return;
		}
		goto Default0;
	TailCall_cOr:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cOr:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(279,"cDup cOr", "cNotNot", "");
			goto Lbe;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(141,
					"y x cOr",
					"[fp_or(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lfo;
			}
			break;
		}
		goto Default0;
	TailCall_cRDiv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRDiv:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(324,
					"x[x==Value_t(1)] cRDiv",
					"cInv",
					"    with x = " << x << "\n");
				goto Lfp;
			}
		}
		goto Default0;
	TailCall_cRSub:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRSub:
		if(ByteCodePtr[0] == cDup)
		{
			FP_TRACE_BYTECODE_OPTIMIZATION(75,"cDup cRSub", "[Value_t()] cMul", "");
			goto Lfq;
		}
		goto Default0;
	TailCall_cSqr:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSqr:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(236,"cAbs cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Lfr;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(235,"cNeg cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Lfr;
		default:
			A = ByteCodePtr[0];
			if(IsComparisonOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(590,
					"A[IsComparisonOpcode(A)] cSqr",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cSub:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSub:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(74,"cDup cSub", "[Value_t()] cMul", "");
			goto Lfq;
		case cMul:
			switch(ByteCodePtr[-1])
			{
			case cImmed:
				x = ImmedPtr[0];
				A = ByteCodePtr[-2];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-3] == cMul)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(273,
							"cMul A[IsVarOpcode(A)] x cMul cSub",
							"A [DO_STACKPLUS2] [x] cFmms",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						incStackPtr();
						incStackPtr();
						--mStackPtr;
						--mStackPtr;
						goto Lfs;
					}
				}
				break;
			default:
				B = ByteCodePtr[-1];
				if(IsVarOpcode(B))
				{
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						if(ByteCodePtr[-3] == cMul)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(269,
								"cMul A[IsVarOpcode(A)] B[IsVarOpcode(B)] cMul cSub",
								"A [DO_STACKPLUS2] B cFmms",
								"    with B = " << FP_TRACE_OPCODENAME(B)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							incStackPtr();
							incStackPtr();
							--mStackPtr;
							--mStackPtr;
							goto Lft;
						}
					}
				}
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						if(ByteCodePtr[-3] == cMul)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(271,
								"cMul x A[IsVarOpcode(A)] cMul cSub",
								"[x] [DO_STACKPLUS2] A cFmms",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", x = " << x
								    << "\n");
							incStackPtr();
							incStackPtr();
							--mStackPtr;
							--mStackPtr;
							goto Lga;
						}
					}
				}
			}
			goto Default9;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(232,"cNeg cSub", "cAdd", "");
			goto Lgb;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(56,
					"x[x==Value_t()] cSub",
					"",
					"    with x = " << x << "\n");
				goto Lba;
			}
			switch(ByteCodePtr[-1])
			{
			case cFma:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(155,
						"y cFma x cSub",
						"[y-x] cFma",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lgc;
				}
				break;
			case cMul:
				FP_TRACE_BYTECODE_OPTIMIZATION(267,
					"cMul x cSub",
					"[DO_STACKPLUS1] [x] cFms",
					"    with x = " << x << "\n");
				incStackPtr();
				--mStackPtr;
				/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
				goto Lgd;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(124,
					"y x cSub",
					"[y-x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lge;
			}
			FP_TRACE_BYTECODE_OPTIMIZATION(49,
				"x cSub",
				"[-x] cAdd",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lgf;
		default: Default9:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					FP_TRACE_BYTECODE_OPTIMIZATION(265,
						"cMul A[IsVarOpcode(A)] cSub",
						"[DO_STACKPLUS1] A cFms",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Lgg;
				case cRSub:
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(345,
							"x cRSub A[IsVarOpcode(A)] cSub",
							"A cAdd [x] cRSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Lgh;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(352,
						"cRSub A[IsVarOpcode(A)] cSub",
						"[DO_STACKPLUS1] A cSub cRSub",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Lgi;
				}
			}
		}
		goto Default0;
	default: Default0:;
		A = opcode;
		if(IsComparisonOpcode(A))
		{
			if(ByteCodePtr[0] == cImmed)
			{
				x = ImmedPtr[0];
				switch(ByteCodePtr[-1])
				{
				case cAdd:
					if(ByteCodePtr[-2] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(423,
							"y cAdd x A[IsComparisonOpcode(A)]",
							"[x-y] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
						goto Lgj;
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(424,
						"cNeg x A[IsComparisonOpcode(A)]",
						"[-x] {OppositeComparisonOpcode(A)}",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", x = " << x
						    << "\n");
					goto Lgk;
				}
			}
		}
		if(IsVarOpcode(A)&&mData->mByteCode.size()>0)
		{
			B = ByteCodePtr[0];
			if(B==A)
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(540,
					"B[B==A] A[IsVarOpcode(A)&&mData->mByteCode.size()>0]",
					"B cDup",
					"    with A = " << FP_TRACE_OPCODENAME(A)
					    << ", B = " << FP_TRACE_OPCODENAME(B)
					    << "\n");
				/* ByteCodePtr[0] = B; */ // redundant, matches B @ 1
				goto Lgl;
			}
		}
		if(IsUnaryOpcode(A))
		{
			B = ByteCodePtr[0];
			if(IsVarOpcode(B)&&mData->mByteCode.size()>1)
			{
				C = ByteCodePtr[-1];
				if(C==A)
				{
					D = ByteCodePtr[-2];
					if(D==B)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(541,
							"D[D==B] C[C==A] B[IsVarOpcode(B)&&mData->mByteCode.size()>1] A[IsUnaryOpcode(A)]",
							"D C cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", C = " << FP_TRACE_OPCODENAME(C)
							    << ", D = " << FP_TRACE_OPCODENAME(D)
							    << "\n");
						/* ByteCodePtr[-2] = D; */ // redundant, matches D @ 3
						/* ByteCodePtr[-1] = C; */ // redundant, matches C @ 2
						goto Lgm;
					}
				}
			}
		}
	}
	goto Laa;
Laa: mData->mByteCode.push_back(opcode); return;
Lab: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     FP_TRACE_BYTECODE_ADD(cAbs);
     goto TailCall_cAbs;
Lac: ImmedPtr[0] = fp_abs(x); return;
Lad: mData->mImmed.push_back(Value_t(4));
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
Lgn: opcode = cMul;
Lgo: FP_ReDefinePointers();
Lgp: FP_TRACE_BYTECODE_ADD(cMul);
     goto TailCall_cMul;
Lae: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(Value_t(4));
     mData->mByteCode.push_back(cImmed); goto Lgn;
Laf: ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
Lde: opcode = cMul; goto Lgp;
Lag: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed);
Lgq: opcode = cFmma;
Lgr: FP_ReDefinePointers();
Lgs: FP_TRACE_BYTECODE_ADD(cFmma);
     goto TailCall_cFmma;
Lah: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(B); goto Lgq;
Lai: ImmedPtr[0] = x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lgq;
Laj: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSub;
Lgt: FP_TRACE_BYTECODE_ADD(cSub);
     goto TailCall_cSub;
Lak: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lha: FP_ReDefinePointers();
Lhb: FP_TRACE_BYTECODE_ADD(cAdd);
     goto TailCall_cAdd;
Lal: ImmedPtr[-1] = y+x;
Lhc: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lhd: opcode = cFma;
     FP_ReDefinePointers();
Lhe: FP_TRACE_BYTECODE_ADD(cFma);
     goto TailCall_cFma;
Lam: ByteCodePtr[-1] = cImmed;
Lcq: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lhf: opcode = cFma; goto Lhe;
Lan: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Lhg: AddFunctionOpcode(cAdd);
Lhh: opcode = cRSub;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cRSub);
     goto TailCall_cRSub;
Lao: ImmedPtr[0] = -x;
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lhg;
Lap: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lhh;
Laq: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lhi: AddFunctionOpcode(cAdd);
Lhj: AddFunctionOpcode(B);
Lhk: opcode = cSub;
     FP_ReDefinePointers(); goto Lgt;
Lar: ImmedPtr[0] = -x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lhi;
Las: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lhj;
Lat: ImmedPtr[-1] = y+x;
Lba: mData->mImmed.pop_back();
Ldi: mData->mByteCode.pop_back(); return;
Lbb: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lhd;
Lbc: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lhg;
Lbd: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lhg;
Lbe: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cNotNot;
Lhl: FP_TRACE_BYTECODE_ADD(cNotNot);
     goto TailCall_cNotNot;
Lbf: ImmedPtr[-1] = fp_and(x,y); goto Lba;
Lbg: mData->mImmed.push_back(Value_t());
     ByteCodePtr[0] = cImmed;
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(Value_t(1));
Lhm: mData->mByteCode.push_back(cImmed);
Lhn: opcode = cAdd; goto Lha;
Lbh: ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     FP_TRACE_BYTECODE_ADD(cDiv);
     goto TailCall_cDiv;
Lbi: ImmedPtr[-1] = y/x; goto Lba;
Lbj: ImmedPtr[-1] = fp_equal(y,x); goto Lba;
Lbk: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lho: FP_TRACE_BYTECODE_ADD(cEqual);
     goto TailCall_cEqual;
Lbl: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
Lhp: opcode = cNot;
     FP_ReDefinePointers();
Lhq: FP_TRACE_BYTECODE_ADD(cNot);
     goto TailCall_cNot;
Lbm: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cFms;
Lhr: FP_TRACE_BYTECODE_ADD(cFms);
     goto TailCall_cFms;
Lbn: ImmedPtr[-2] = y*x+a;
Lhs: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} return;
Lbo: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lgn;
Lbp: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cFmms;
Lht: FP_TRACE_BYTECODE_ADD(cFmms);
     goto TailCall_cFmms;
Lbq: ByteCodePtr[-2] = cImmed;
Lia: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lib: AddFunctionOpcode(cMul); goto Lgr;
Lbr: ImmedPtr[-1] = x;
     mData->mImmed.pop_back(); goto Lia;
Lbs: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
Lic: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lid: AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lib;
Lbt: mData->mImmed.pop_back(); goto Lic;
Lca: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(B); goto Lid;
Lcb: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lid;
Lcc: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lgn;
Lcd: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back(); goto Lib;
Lce: ImmedPtr[-3] = y*x+a*b;
Lie: for(unsigned tmp=3; tmp-->0; ) {mData->mImmed.pop_back();}
Lif: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} return;
Lcf: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lhd;
Lcg: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
Lig: opcode = cFms;
     FP_ReDefinePointers(); goto Lhr;
Lch: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cFmma; goto Lgs;
Lci: ByteCodePtr[-2] = cImmed;
Lih: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lii: AddFunctionOpcode(cMul);
Lij: FP_ReDefinePointers(); goto Lht;
Lcj: ImmedPtr[-1] = x;
     mData->mImmed.pop_back(); goto Lih;
Lck: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
Lik: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lil: AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lii;
Lcl: mData->mImmed.pop_back(); goto Lik;
Lcm: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(B); goto Lil;
Lcn: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lil;
Lco: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back(); goto Lii;
Lcp: ImmedPtr[-3] = y*x-a*b; goto Lie;
Lcr: ImmedPtr[-2] = y*x-a; goto Lhs;
Lcs: ImmedPtr[0] = -x; goto Lhf;
Lct: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lim: opcode = cNotNot;
     FP_ReDefinePointers(); goto Lhl;
Lda: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lim;
Ldb: ImmedPtr[-1] = fp_less(x,y); goto Lba;
Ldc: ImmedPtr[-1] = fp_lessOrEq(x,y); goto Lba;
Ldd: ImmedPtr[0] = fp_inv(x); return;
Ldf: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lhp;
Ldg: ImmedPtr[-1] = fp_less(y,x); goto Lba;
Ldh: ImmedPtr[-1] = fp_lessOrEq(y,x); goto Lba;
Ldj: ImmedPtr[-1] = fp_max(x,y); goto Lba;
Ldk: ImmedPtr[-1] = fp_min(x,y); goto Lba;
Ldl: ImmedPtr[-1] = fp_mod(y,x); goto Lba;
Ldm: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSqr;
Lin: FP_TRACE_BYTECODE_ADD(cSqr);
     goto TailCall_cSqr;
Ldn: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr);
Lio: opcode = cNeg;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cNeg);
     goto TailCall_cNeg;
Ldo: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr);
     AddFunctionOpcode(cMul); goto Lio;
Ldp: ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cPow); return;
Ldq: ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2; goto Lgp;
Ldr: ImmedPtr[-1] = x;
Lip: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lgo;
Lds: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
Liq: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lir: AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
Lis: mData->mByteCode.push_back(cImmed); goto Lgo;
Ldt: mData->mImmed.pop_back(); goto Liq;
Lea: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(B); goto Lir;
Leb: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lir;
Lec: ByteCodePtr[-1] = cImmed; goto Ldi;
Led: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lgp;
Lee: ImmedPtr[0] = x+x; goto Ldq;
Lef: ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     mData->mImmed.push_back(y*x);
     mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cMul); goto Lhn;
Leg: ImmedPtr[-1] = x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(y*x); goto Lhm;
Leh: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(x+x); goto Lis;
Lei: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();} goto Lif;
Lej: ImmedPtr[-1] = y*x; goto Lip;
Lek: ImmedPtr[0] = -x; goto Led;
Lel: ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     mData->mImmed.push_back(y*x);
     mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cMul); goto Lhk;
Lem: ImmedPtr[-1] = y*x; goto Lba;
Len: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lio;
Leo: ByteCodePtr[0] = cDup;
     ImmedPtr -= 1;
     mData->mImmed.pop_back();
Lit: opcode = cAdd; goto Lhb;
Lep: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lja: AddFunctionOpcode(cSqr); goto Lgo;
Leq: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lja;
Ler: ImmedPtr[-1] = fp_nequal(y,x); goto Lba;
Les: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Ljb: FP_TRACE_BYTECODE_ADD(cNEqual);
     goto TailCall_cNEqual;
Let: ImmedPtr[0] = -x;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lde;
Lfa: ImmedPtr[0] = -x; return;
Lfb: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lhq;
Lfc: mData->mByteCode.pop_back();
     AddFunctionOpcode(cAbsNotNot); return;
Lfd: mData->mByteCode.pop_back();
Lfm: AddFunctionOpcode(cAbsNot); return;
Lfe: ImmedPtr[0] = -x;
Lfk: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cEqual; goto Lho;
Lff: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cNEqual; goto Ljb;
Lfg: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cLessOrEq;
     FP_TRACE_BYTECODE_ADD(cLessOrEq);
     goto TailCall_cLessOrEq;
Lfh: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cLess;
     FP_TRACE_BYTECODE_ADD(cLess);
     goto TailCall_cLess;
Lfi: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cGreaterOrEq;
     FP_TRACE_BYTECODE_ADD(cGreaterOrEq);
     goto TailCall_cGreaterOrEq;
Lfj: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cGreater;
     FP_TRACE_BYTECODE_ADD(cGreater);
     goto TailCall_cGreater;
Lfl: ImmedPtr[0] = fp_not(x); return;
Lfn: ImmedPtr[0] = -x; goto Lff;
Lfo: ImmedPtr[-1] = fp_or(x,y); goto Lba;
Lfp: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     opcode = cInv;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cInv);
     goto TailCall_cInv;
Lfq: mData->mImmed.push_back(Value_t());
     ByteCodePtr[0] = cImmed; goto Lgn;
Lfr: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lin;
Lfs: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed);
Ljc: opcode = cFmms; goto Lij;
Lft: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(B); goto Ljc;
Lga: ImmedPtr[0] = x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Ljc;
Lgb: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lit;
Lgc: ImmedPtr[-1] = y-x; goto Lhc;
Lgd: ByteCodePtr[-1] = cImmed; goto Lbm;
Lge: ImmedPtr[-1] = y-x; goto Lba;
Lgf: ImmedPtr[0] = -x; goto Lit;
Lgg: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lig;
Lgh: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cAdd);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lhh;
Lgi: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cSub); goto Lhh;
Lgj: ImmedPtr[-1] = x-y;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); return;
Lgk: ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     AddFunctionOpcode(OppositeComparisonOpcode(A)); return;
Lgl: mData->mByteCode.push_back(cDup); return;
Lgm: ByteCodePtr[0] = cDup; return;
return;
// This list of dummy gotos is here to inhibit
// compiler warnings on unused labels
goto TailCall_cAnd;goto TailCall_cMax;goto TailCall_cMin;
goto TailCall_cMod;goto TailCall_cNeg;goto TailCall_cOr;
goto TailCall_cRDiv;goto TailCall_cSub;
#endif

#if((FP_COMPLEX_VERSION) && !(FP_FLOAT_VERSION))
	Value_t x;
	unsigned A;
	unsigned B;
	Value_t y;
	Value_t a;
	unsigned C;
	Value_t b;
	unsigned D;
	switch(opcode)
	{
	TailCall_cAbs:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAbs:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(233,"cNeg cAbs", "cAbs", "");
			/* opcode = cAbs; */ // redundant, matches cAbs @ 0
			goto Lab;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(164,
				"x cAbs",
				"[fp_abs(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lac;
		}
		goto Default0;
	TailCall_cAdd:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAdd:
		switch(ByteCodePtr[0])
		{
		case cDup:
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(366,"cDup cAdd cDup cAdd", "[Value_t(4)] cMul", "");
					goto Lad;
				}
				break;
			case cMul:
				if(ByteCodePtr[-2] == cAdd)
				{
					if(ByteCodePtr[-3] == cDup)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(367,"cDup cAdd cMul cDup cAdd", "cMul [Value_t(4)] cMul", "");
						goto Lae;
					}
				}
				break;
			}
			goto Default1;
		case cMul:
			switch(ByteCodePtr[-1])
			{
			case cImmed:
				x = ImmedPtr[0];
				switch(ByteCodePtr[-2])
				{
				case cDup:
					FP_TRACE_BYTECODE_OPTIMIZATION(369,
						"cDup x cMul cAdd",
						"[x+Value_t(1)] cMul",
						"    with x = " << x << "\n");
					goto Laf;
				default:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						if(ByteCodePtr[-3] == cMul)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(272,
								"cMul A[IsVarOpcode(A)] x cMul cAdd",
								"A [DO_STACKPLUS2] [x] cFmma",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							incStackPtr();
							incStackPtr();
							--mStackPtr;
							--mStackPtr;
							goto Lag;
						}
					}
				}
				break;
			default:
				B = ByteCodePtr[-1];
				if(IsVarOpcode(B))
				{
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						if(ByteCodePtr[-3] == cMul)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(268,
								"cMul A[IsVarOpcode(A)] B[IsVarOpcode(B)] cMul cAdd",
								"A [DO_STACKPLUS2] B cFmma",
								"    with B = " << FP_TRACE_OPCODENAME(B)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							incStackPtr();
							incStackPtr();
							--mStackPtr;
							--mStackPtr;
							goto Lah;
						}
					}
				}
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						if(ByteCodePtr[-3] == cMul)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(270,
								"cMul x A[IsVarOpcode(A)] cMul cAdd",
								"[x] [DO_STACKPLUS2] A cFmma",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", x = " << x
								    << "\n");
							incStackPtr();
							incStackPtr();
							--mStackPtr;
							--mStackPtr;
							goto Lai;
						}
					}
				}
			}
			goto Default1;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(231,"cNeg cAdd", "cSub", "");
			goto Laj;
		case cImmed:
			x = ImmedPtr[0];
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(150,
						"y cAdd x cAdd",
						"[y+x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cAdd; */ // redundant, matches cAdd @ 0
					goto Lak;
				}
				break;
			case cFma:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(154,
						"y cFma x cAdd",
						"[y+x] cFma",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lal;
				}
				break;
			case cMul:
				FP_TRACE_BYTECODE_OPTIMIZATION(266,
					"cMul x cAdd",
					"[DO_STACKPLUS1] [x] cFma",
					"    with x = " << x << "\n");
				incStackPtr();
				--mStackPtr;
				/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
				goto Lam;
			case cRSub:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(354,
							"y cAdd cRSub x cAdd",
							"[ y+x] cAdd cRSub",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lan;
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(355,
						"cNeg cRSub x cAdd",
						"[-x] cAdd cRSub",
						"    with x = " << x << "\n");
					goto Lao;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(353,
						"y cRSub x cAdd",
						"[ y+x] cRSub",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lap;
				}
				break;
			case cSub:
				B = ByteCodePtr[-2];
				if(IsVarOpcode(B))
				{
					switch(ByteCodePtr[-3])
					{
					case cAdd:
						if(ByteCodePtr[-4] == cImmed)
						{
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(348,
								"y cAdd B[IsVarOpcode(B)] cSub x cAdd",
								"[ y+x] cAdd B cSub",
								"    with x = " << x
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-4] = cImmed; */ // redundant, matches y @ 5
							goto Laq;
						}
						break;
					case cNeg:
						FP_TRACE_BYTECODE_OPTIMIZATION(349,
							"cNeg B[IsVarOpcode(B)] cSub x cAdd",
							"[-x] cAdd B cSub",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						goto Lar;
					case cImmed:
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(347,
							"y B[IsVarOpcode(B)] cSub x cAdd",
							"[ y+x] B cSub",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Las;
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(123,
					"y x cAdd",
					"[y+x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lat;
			}
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(55,
					"x[x==Value_t()] cAdd",
					"",
					"    with x = " << x << "\n");
				goto Lba;
			}
			break;
		default: Default1:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					FP_TRACE_BYTECODE_OPTIMIZATION(264,
						"cMul A[IsVarOpcode(A)] cAdd",
						"[DO_STACKPLUS1] A cFma",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Lbb;
				case cRSub:
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(346,
							"x cRSub A[IsVarOpcode(A)] cAdd",
							"[DO_STACKPLUS1] A [x] cAdd cRSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						incStackPtr();
						--mStackPtr;
						goto Lbc;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(351,
						"cRSub A[IsVarOpcode(A)] cAdd",
						"[DO_STACKPLUS1] A cAdd cRSub",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Lbd;
				}
			}
		}
		goto Default0;
	TailCall_cAnd:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAnd:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(280,"cDup cAnd", "cNotNot", "");
			goto Lbe;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(140,
					"y x cAnd",
					"[fp_and(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbf;
			}
			break;
		}
		goto Default0;
	TailCall_cConj:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cConj:
		switch(ByteCodePtr[0])
		{
		case cConj:
			FP_TRACE_BYTECODE_OPTIMIZATION(61,"cConj cConj", "", "");
			goto Lbg;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(225,
				"x cConj",
				"[fp_conj(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbh;
		}
		goto Default0;
	TailCall_cDiv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cDiv:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(76,"cDup cDiv", "[Value_t()] cMul [Value_t(1)] cAdd", "");
			goto Lbi;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(148,
						"cNeg x[x!=Value_t()] cDiv",
						"[-x] cDiv",
						"    with x = " << x << "\n");
					/* opcode = cDiv; */ // redundant, matches cDiv @ 0
					goto Lbj;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(121,
						"y x[x!=Value_t()] cDiv",
						"[y/x]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Lbk;
				}
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(54,
					"x[x==Value_t(1)] cDiv",
					"",
					"    with x = " << x << "\n");
				goto Lba;
			}
			break;
		}
		goto Default0;
	TailCall_cEqual:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				A = ByteCodePtr[-1];
				if(IsLogicalOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(484,
						"A[IsLogicalOpcode(A)] x[x==Value_t(1)] cEqual",
						"A",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					goto Lba;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(138,
					"y x cEqual",
					"[fp_equal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbl;
			}
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(418,
						"cAbs x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Lbm;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(420,
						"cSqr x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Lbm;
				default:
					A = ByteCodePtr[-1];
					if(IsLogicalOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(486,
							"A[IsLogicalOpcode(A)] x[x==Value_t(0)] cEqual",
							"A cNot",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lbn;
					}
				}
				FP_TRACE_BYTECODE_OPTIMIZATION(474,
					"x[x==Value_t(0)] cEqual",
					"cNot",
					"    with x = " << x << "\n");
				goto Lbn;
			}
		}
		goto Default0;
	TailCall_cFma:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFma:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(274,"cNeg cFma", "cFms", "");
			goto Lbo;
		case cImmed:
			a = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[-1];
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-2];
					FP_TRACE_BYTECODE_OPTIMIZATION(129,
						"y x a cFma",
						"[y*x+a]",
						"    with a = " << a
						    << ", x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lbp;
				}
			}
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(156,
					"x[x==Value_t()] cFma",
					"cMul",
					"    with x = " << x << "\n");
				goto Lbq;
			}
			break;
		}
		goto Default0;
	TailCall_cFmma:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFmma:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(276,"cNeg cFmma", "cFmms", "");
			goto Lbr;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(107,
							"A[IsVarOpcode(A)] cMul x[x==Value_t()] cFmma",
							"[x] cMul cFmma",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cFmma; */ // redundant, matches cFmma @ 0
						goto Lbs;
					}
					goto Default2;
				default: Default2:;
					A = ByteCodePtr[-1];
					if(IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						switch(ByteCodePtr[-2])
						{
						case cImmed:
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(105,
								"y A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
								"[x] cMul cFmma",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cFmma; */ // redundant, matches cFmma @ 0
							goto Lbt;
						default:
							B = ByteCodePtr[-2];
							if(IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								switch(ByteCodePtr[-3])
								{
								case cImmed:
									y = ImmedPtr[-1];
									FP_TRACE_BYTECODE_OPTIMIZATION(111,
										"y B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
										"A [x] cMul cFmma",
										"    with x = " << x
										    << ", A = " << FP_TRACE_OPCODENAME(A)
										    << ", B = " << FP_TRACE_OPCODENAME(B)
										    << ", y = " << y
										    << "\n");
									/* opcode = cFmma; */ // redundant, matches cFmma @ 0
									goto Lca;
								default:
									C = ByteCodePtr[-3];
									if(IsVarOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(109,
											"C[IsVarOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
											"A [x] cMul cFmma",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cFmma; */ // redundant, matches cFmma @ 0
										goto Lcb;
									}
									if(IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(110,
											"C[IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
											"B A [x] cMul cFmma",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cFmma; */ // redundant, matches cFmma @ 0
										goto Lcc;
									}
								}
							}
							if(IsVarOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(101,
									"B[IsVarOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
									"[x] cMul cFmma",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
								/* opcode = cFmma; */ // redundant, matches cFmma @ 0
								goto Lbs;
							}
							if(IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(103,
									"B[IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
									"A [x] cMul cFmma",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* opcode = cFmma; */ // redundant, matches cFmma @ 0
								goto Lcd;
							}
						}
					}
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(97,
							"A[IsVarOpcode(A)] x[x==Value_t()] cFmma",
							"cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						goto Lce;
					}
					if(IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(99,
							"A[IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
							"[x] cMul cFmma",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cFmma; */ // redundant, matches cFmma @ 0
						goto Lcf;
					}
				}
			}
			b = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				a = ImmedPtr[-1];
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[-2];
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-3];
						FP_TRACE_BYTECODE_OPTIMIZATION(131,
							"y x a b cFmma",
							"[y*x+a*b]",
							"    with b = " << b
							    << ", a = " << a
							    << ", x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lcg;
					}
				}
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(157,
					"x[x==Value_t(1)] cFmma",
					"cFma",
					"    with x = " << x << "\n");
				goto Lch;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(158,
					"x[x==Value_t(-1)] cFmma",
					"cFms",
					"    with x = " << x << "\n");
				goto Lci;
			}
			break;
		}
		goto Default0;
	TailCall_cFmms:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFmms:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(277,"cNeg cFmms", "cFmma", "");
			goto Lcj;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(108,
							"A[IsVarOpcode(A)] cMul x[x==Value_t()] cFmms",
							"[x] cMul cFmms",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cFmms; */ // redundant, matches cFmms @ 0
						goto Lck;
					}
					goto Default3;
				default: Default3:;
					A = ByteCodePtr[-1];
					if(IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						switch(ByteCodePtr[-2])
						{
						case cImmed:
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(106,
								"y A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
								"[x] cMul cFmms",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cFmms; */ // redundant, matches cFmms @ 0
							goto Lcl;
						default:
							B = ByteCodePtr[-2];
							if(IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								switch(ByteCodePtr[-3])
								{
								case cImmed:
									y = ImmedPtr[-1];
									FP_TRACE_BYTECODE_OPTIMIZATION(114,
										"y B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
										"A [x] cMul cFmms",
										"    with x = " << x
										    << ", A = " << FP_TRACE_OPCODENAME(A)
										    << ", B = " << FP_TRACE_OPCODENAME(B)
										    << ", y = " << y
										    << "\n");
									/* opcode = cFmms; */ // redundant, matches cFmms @ 0
									goto Lcm;
								default:
									C = ByteCodePtr[-3];
									if(IsVarOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(112,
											"C[IsVarOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
											"A [x] cMul cFmms",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cFmms; */ // redundant, matches cFmms @ 0
										goto Lcn;
									}
									if(IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(113,
											"C[IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
											"B A [x] cMul cFmms",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cFmms; */ // redundant, matches cFmms @ 0
										goto Lco;
									}
								}
							}
							if(IsVarOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(102,
									"B[IsVarOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
									"[x] cMul cFmms",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
								/* opcode = cFmms; */ // redundant, matches cFmms @ 0
								goto Lck;
							}
							if(IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(104,
									"B[IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
									"A [x] cMul cFmms",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* opcode = cFmms; */ // redundant, matches cFmms @ 0
								goto Lcp;
							}
						}
					}
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(98,
							"A[IsVarOpcode(A)] x[x==Value_t()] cFmms",
							"cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						goto Lce;
					}
					if(IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(100,
							"A[IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
							"[x] cMul cFmms",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cFmms; */ // redundant, matches cFmms @ 0
						goto Lcq;
					}
				}
			}
			b = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				a = ImmedPtr[-1];
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[-2];
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-3];
						FP_TRACE_BYTECODE_OPTIMIZATION(132,
							"y x a b cFmms",
							"[y*x-a*b]",
							"    with b = " << b
							    << ", a = " << a
							    << ", x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lcr;
					}
				}
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(159,
					"x[x==Value_t(1)] cFmms",
					"cFms",
					"    with x = " << x << "\n");
				goto Lci;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(160,
					"x[x==Value_t(-1)] cFmms",
					"cFma",
					"    with x = " << x << "\n");
				goto Lch;
			}
			break;
		}
		goto Default0;
	TailCall_cFms:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFms:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(275,"cNeg cFms", "cFma", "");
			goto Lcs;
		case cImmed:
			a = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[-1];
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-2];
					FP_TRACE_BYTECODE_OPTIMIZATION(130,
						"y x a cFms",
						"[y*x-a]",
						"    with a = " << a
						    << ", x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lct;
				}
			}
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(153,
				"x cFms",
				"[-x] cFma",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lda;
		}
		goto Default0;
	TailCall_cGreater:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cGreater:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(136,
					"y x cGreater",
					"[fp_less(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldb;
			}
		}
		goto Default0;
	TailCall_cGreaterOrEq:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cGreaterOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(137,
					"y x cGreaterOrEq",
					"[fp_lessOrEq(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldc;
			}
		}
		goto Default0;
	TailCall_cImag:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cImag:
		switch(ByteCodePtr[0])
		{
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(224,
				"x cImag",
				"[fp_imag(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Ldd;
		default:
			A = ByteCodePtr[0];
			if(IsAlwaysRealOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(78,
					"A[IsAlwaysRealOpcode(A)] cImag",
					"A [DO_STACKPLUS1] [Value_t()] cMul",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				incStackPtr();
				--mStackPtr;
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				goto Lde;
			}
		}
		goto Default0;
	TailCall_cInv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cInv:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(119,
					"x[x!=Value_t()] cInv",
					"[fp_inv(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Ldf;
			}
		}
		goto Default0;
	TailCall_cLess:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLess:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				A = ByteCodePtr[-1];
				if(IsNeverNegativeValueOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(357,
						"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(0)] cLess",
						"A [x] cMul",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
					goto Ldg;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(134,
					"y x cLess",
					"[fp_less(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldh;
			}
		}
		goto Default0;
	TailCall_cLessOrEq:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLessOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(135,
					"y x cLessOrEq",
					"[fp_lessOrEq(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldi;
			}
		}
		goto Default0;
	TailCall_cMax:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMax:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(58,"cDup cMax", "", "");
			goto Lbg;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(173,
					"y x cMax",
					"[fp_max(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldj;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(64,
							"B[B==A] cDup A[IsVarOpcode(A)] cMax",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Lbg;
					}
					break;
				case cMax:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(66,
							"B[B==A] cMax A[IsVarOpcode(A)] cMax",
							"B cMax",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMax; */ // redundant, matches cMax @ 2
						goto Lbg;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cMin:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMin:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(57,"cDup cMin", "", "");
			goto Lbg;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(172,
					"y x cMin",
					"[fp_min(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldk;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(63,
							"B[B==A] cDup A[IsVarOpcode(A)] cMin",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Lbg;
					}
					break;
				case cMin:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(65,
							"B[B==A] cMin A[IsVarOpcode(A)] cMin",
							"B cMin",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMin; */ // redundant, matches cMin @ 2
						goto Lbg;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cMod:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMod:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				if(ByteCodePtr[-1] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(122,
						"y x[x!=Value_t()] cMod",
						"[fp_mod(y,x)]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Ldl;
				}
			}
		}
		goto Default0;
	TailCall_cMul:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMul:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(234,"cDup cMul", "cSqr", "");
			goto Ldm;
		case cNeg:
			switch(ByteCodePtr[-1])
			{
			case cDup:
				FP_TRACE_BYTECODE_OPTIMIZATION(532,"cDup cNeg cMul", "cSqr cNeg", "");
				goto Ldn;
			default:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cMul)
					{
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(538,
								"B[B==A] cMul A[IsVarOpcode(A)] cNeg cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Ldo;
						}
					}
				}
			}
			goto Default4;
		case cPow:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(370,
						"cDup x cPow cMul",
						"[x+Value_t(1)] cPow",
						"    with x = " << x << "\n");
					goto Ldp;
				}
			}
			goto Default4;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(91,
							"A[IsVarOpcode(A)] cMul x[x==Value_t()] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Ldq;
					}
					goto Default5;
				default: Default5:;
					A = ByteCodePtr[-1];
					if(IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						switch(ByteCodePtr[-2])
						{
						case cImmed:
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(90,
								"y A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
								"[x] cMul",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Ldr;
						default:
							B = ByteCodePtr[-2];
							if(IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								switch(ByteCodePtr[-3])
								{
								case cImmed:
									y = ImmedPtr[-1];
									FP_TRACE_BYTECODE_OPTIMIZATION(94,
										"y B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
										"A [x] cMul",
										"    with x = " << x
										    << ", A = " << FP_TRACE_OPCODENAME(A)
										    << ", B = " << FP_TRACE_OPCODENAME(B)
										    << ", y = " << y
										    << "\n");
									/* opcode = cMul; */ // redundant, matches cMul @ 0
									goto Lds;
								default:
									C = ByteCodePtr[-3];
									if(IsVarOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(92,
											"C[IsVarOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
											"A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Ldt;
									}
									if(IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(93,
											"C[IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
											"B A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lea;
									}
								}
							}
							if(IsVarOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(88,
									"B[IsVarOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
									"[x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Ldq;
							}
							if(IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(89,
									"B[IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
									"A [x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Leb;
							}
						}
					}
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(86,
							"A[IsVarOpcode(A)] x[x==Value_t()] cMul",
							"[x]",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						goto Lec;
					}
					if(IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(87,
							"A[IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Led;
					}
				}
			}
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				switch(ByteCodePtr[-2])
				{
				case cDup:
					FP_TRACE_BYTECODE_OPTIMIZATION(373,
						"cDup cAdd x cMul",
						"[x+x] cMul",
						"    with x = " << x << "\n");
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Lee;
				case cMul:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(IsVarOpcode(A))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(445,
								"A[IsVarOpcode(A)] y cMul cAdd x cMul",
								"[x] cMul A [y*x] cMul cAdd",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lef;
						}
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(444,
						"y cAdd x cMul",
						"[x] cMul [y*x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Leg;
				}
				break;
			case cMul:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cDup)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(375,
							"cDup cAdd cMul x cMul",
							"cMul [x+x] cMul",
							"    with x = " << x << "\n");
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Leh;
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					if(y*x==Value_t(1))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(68,
							"y[y*x==Value_t(1)] cMul x cMul",
							"",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Lei;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(151,
						"y cMul x cMul",
						"[y*x] cMul",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Lej;
				}
				break;
			case cNeg:
				FP_TRACE_BYTECODE_OPTIMIZATION(145,
					"cNeg x cMul",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Lek;
			case cSub:
				if(ByteCodePtr[-2] == cMul)
				{
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(IsVarOpcode(A))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(446,
								"A[IsVarOpcode(A)] y cMul cSub x cMul",
								"[x] cMul A [y*x] cMul cSub",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lel;
						}
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(120,
					"y x cMul",
					"[y*x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lem;
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(53,
					"x[x==Value_t(1)] cMul",
					"",
					"    with x = " << x << "\n");
				goto Lba;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(147,
					"x[x==Value_t(-1)] cMul",
					"cNeg",
					"    with x = " << x << "\n");
				goto Len;
			}
			if(x==Value_t(2))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(230,
					"x[x==Value_t(2)] cMul",
					"cDup cAdd",
					"    with x = " << x << "\n");
				goto Leo;
			}
			break;
		default: Default4:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					switch(ByteCodePtr[-2])
					{
					case cNeg:
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(535,
								"B[B==A] cNeg cMul A[IsVarOpcode(A)] cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Ldo;
						}
						goto Default6;
					default: Default6:;
						B = ByteCodePtr[-2];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(526,
								"B[B==A] cMul A[IsVarOpcode(A)] cMul",
								"B cSqr cMul",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lep;
						}
					}
					goto Default7;
				case cNeg:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(529,
							"B[B==A] cNeg A[IsVarOpcode(A)] cMul",
							"B cSqr cNeg",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Ldn;
					}
					goto Default7;
				default: Default7:;
					B = ByteCodePtr[-1];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(523,
							"B[B==A] A[IsVarOpcode(A)] cMul",
							"B cSqr",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-1] = B; */ // redundant, matches B @ 2
						goto Ldm;
					}
				}
			}
			if(IsUnaryOpcode(A))
			{
				B = ByteCodePtr[-1];
				if(IsVarOpcode(B)&&mData->mByteCode.size()>1)
				{
					if(ByteCodePtr[-2] == cMul)
					{
						C = ByteCodePtr[-3];
						if(C==A)
						{
							D = ByteCodePtr[-4];
							if(D==B)
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(542,
									"D[D==B] C[C==A] cMul B[IsVarOpcode(B)&&mData->mByteCode.size()>1] A[IsUnaryOpcode(A)] cMul",
									"D C cSqr cMul",
									"    with A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << ", C = " << FP_TRACE_OPCODENAME(C)
									    << ", D = " << FP_TRACE_OPCODENAME(D)
									    << "\n");
								/* ByteCodePtr[-4] = D; */ // redundant, matches D @ 5
								/* ByteCodePtr[-3] = C; */ // redundant, matches C @ 4
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Leq;
							}
						}
					}
				}
			}
		}
		goto Default0;
	TailCall_cNEqual:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				A = ByteCodePtr[-1];
				if(IsLogicalOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(485,
						"A[IsLogicalOpcode(A)] x[x==Value_t(1)] cNEqual",
						"A cNot",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					goto Lbn;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(139,
					"y x cNEqual",
					"[fp_nequal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ler;
			}
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(419,
						"cAbs x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Les;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(421,
						"cSqr x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Les;
				default:
					A = ByteCodePtr[-1];
					if(IsLogicalOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(487,
							"A[IsLogicalOpcode(A)] x[x==Value_t(0)] cNEqual",
							"A",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lba;
					}
				}
				FP_TRACE_BYTECODE_OPTIMIZATION(475,
					"x[x==Value_t(0)] cNEqual",
					"cNotNot",
					"    with x = " << x << "\n");
				goto Let;
			}
		}
		goto Default0;
	TailCall_cNeg:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNeg:
		switch(ByteCodePtr[0])
		{
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(146,
					"x cMul cNeg",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Lfa;
			}
			break;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(59,"cNeg cNeg", "", "");
			goto Lbg;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(118,
				"x cNeg",
				"[-x]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lfb;
		}
		goto Default0;
	TailCall_cNot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNot:
		switch(ByteCodePtr[0])
		{
		case cAbsNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(287,"cAbsNotNot cNot", "cAbsNot", "");
			goto Lfc;
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(489,
					"x cAdd cNot",
					"[-x] cEqual",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Lfd;
			}
			break;
		case cEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(261,"cEqual cNot", "cNEqual", "");
			goto Lfe;
		case cGreater:
			FP_TRACE_BYTECODE_OPTIMIZATION(259,"cGreater cNot", "cLessOrEq", "");
			goto Lff;
		case cGreaterOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(260,"cGreaterOrEq cNot", "cLess", "");
			goto Lfg;
		case cLess:
			FP_TRACE_BYTECODE_OPTIMIZATION(257,"cLess cNot", "cGreaterOrEq", "");
			goto Lfh;
		case cLessOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(258,"cLessOrEq cNot", "cGreater", "");
			goto Lfi;
		case cNEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(262,"cNEqual cNot", "cEqual", "");
			goto Lfj;
		case cNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(285,"cNot cNot", "cNotNot", "");
			goto Lbe;
		case cNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(286,"cNotNot cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Lfk;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(125,
				"x cNot",
				"[fp_not(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lfl;
		}
		goto Default0;
	TailCall_cNotNot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNotNot:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(488,
					"x cAdd cNotNot",
					"[-x] cNEqual",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Lfm;
			}
			break;
		case cNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(288,"cNot cNotNot", "cNot", "");
			/* ByteCodePtr[0] = cNot; */ // redundant, matches cNot @ 1
			return;
		}
		goto Default0;
	TailCall_cOr:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cOr:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(279,"cDup cOr", "cNotNot", "");
			goto Lbe;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(141,
					"y x cOr",
					"[fp_or(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lfn;
			}
			break;
		}
		goto Default0;
	TailCall_cRDiv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRDiv:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(324,
					"x[x==Value_t(1)] cRDiv",
					"cInv",
					"    with x = " << x << "\n");
				goto Lfo;
			}
		}
		goto Default0;
	TailCall_cRSub:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRSub:
		if(ByteCodePtr[0] == cDup)
		{
			FP_TRACE_BYTECODE_OPTIMIZATION(75,"cDup cRSub", "[Value_t()] cMul", "");
			goto Lfp;
		}
		goto Default0;
	TailCall_cReal:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cReal:
		switch(ByteCodePtr[0])
		{
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(223,
				"x cReal",
				"[fp_real(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lfq;
		default:
			A = ByteCodePtr[0];
			if(IsAlwaysRealOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(79,
					"A[IsAlwaysRealOpcode(A)] cReal",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cSqr:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSqr:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(236,"cAbs cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Lfr;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(235,"cNeg cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Lfr;
		default:
			A = ByteCodePtr[0];
			if(IsComparisonOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(590,
					"A[IsComparisonOpcode(A)] cSqr",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cSub:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSub:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(74,"cDup cSub", "[Value_t()] cMul", "");
			goto Lfp;
		case cMul:
			switch(ByteCodePtr[-1])
			{
			case cImmed:
				x = ImmedPtr[0];
				A = ByteCodePtr[-2];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-3] == cMul)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(273,
							"cMul A[IsVarOpcode(A)] x cMul cSub",
							"A [DO_STACKPLUS2] [x] cFmms",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						incStackPtr();
						incStackPtr();
						--mStackPtr;
						--mStackPtr;
						goto Lfs;
					}
				}
				break;
			default:
				B = ByteCodePtr[-1];
				if(IsVarOpcode(B))
				{
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						if(ByteCodePtr[-3] == cMul)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(269,
								"cMul A[IsVarOpcode(A)] B[IsVarOpcode(B)] cMul cSub",
								"A [DO_STACKPLUS2] B cFmms",
								"    with B = " << FP_TRACE_OPCODENAME(B)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							incStackPtr();
							incStackPtr();
							--mStackPtr;
							--mStackPtr;
							goto Lft;
						}
					}
				}
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						if(ByteCodePtr[-3] == cMul)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(271,
								"cMul x A[IsVarOpcode(A)] cMul cSub",
								"[x] [DO_STACKPLUS2] A cFmms",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", x = " << x
								    << "\n");
							incStackPtr();
							incStackPtr();
							--mStackPtr;
							--mStackPtr;
							goto Lga;
						}
					}
				}
			}
			goto Default8;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(232,"cNeg cSub", "cAdd", "");
			goto Lgb;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(56,
					"x[x==Value_t()] cSub",
					"",
					"    with x = " << x << "\n");
				goto Lba;
			}
			switch(ByteCodePtr[-1])
			{
			case cFma:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(155,
						"y cFma x cSub",
						"[y-x] cFma",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lgc;
				}
				break;
			case cMul:
				FP_TRACE_BYTECODE_OPTIMIZATION(267,
					"cMul x cSub",
					"[DO_STACKPLUS1] [x] cFms",
					"    with x = " << x << "\n");
				incStackPtr();
				--mStackPtr;
				/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
				goto Lgd;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(124,
					"y x cSub",
					"[y-x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lge;
			}
			FP_TRACE_BYTECODE_OPTIMIZATION(49,
				"x cSub",
				"[-x] cAdd",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lgf;
		default: Default8:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					FP_TRACE_BYTECODE_OPTIMIZATION(265,
						"cMul A[IsVarOpcode(A)] cSub",
						"[DO_STACKPLUS1] A cFms",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Lgg;
				case cRSub:
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(345,
							"x cRSub A[IsVarOpcode(A)] cSub",
							"A cAdd [x] cRSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Lgh;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(352,
						"cRSub A[IsVarOpcode(A)] cSub",
						"[DO_STACKPLUS1] A cSub cRSub",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Lgi;
				}
			}
		}
		goto Default0;
	default: Default0:;
		A = opcode;
		if(IsVarOpcode(A)&&mData->mByteCode.size()>0)
		{
			B = ByteCodePtr[0];
			if(B==A)
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(540,
					"B[B==A] A[IsVarOpcode(A)&&mData->mByteCode.size()>0]",
					"B cDup",
					"    with A = " << FP_TRACE_OPCODENAME(A)
					    << ", B = " << FP_TRACE_OPCODENAME(B)
					    << "\n");
				/* ByteCodePtr[0] = B; */ // redundant, matches B @ 1
				goto Lgj;
			}
		}
		if(IsUnaryOpcode(A))
		{
			B = ByteCodePtr[0];
			if(IsVarOpcode(B)&&mData->mByteCode.size()>1)
			{
				C = ByteCodePtr[-1];
				if(C==A)
				{
					D = ByteCodePtr[-2];
					if(D==B)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(541,
							"D[D==B] C[C==A] B[IsVarOpcode(B)&&mData->mByteCode.size()>1] A[IsUnaryOpcode(A)]",
							"D C cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", C = " << FP_TRACE_OPCODENAME(C)
							    << ", D = " << FP_TRACE_OPCODENAME(D)
							    << "\n");
						/* ByteCodePtr[-2] = D; */ // redundant, matches D @ 3
						/* ByteCodePtr[-1] = C; */ // redundant, matches C @ 2
						goto Lgk;
					}
				}
			}
		}
	}
	goto Laa;
Laa: mData->mByteCode.push_back(opcode); return;
Lab: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     FP_TRACE_BYTECODE_ADD(cAbs);
     goto TailCall_cAbs;
Lac: ImmedPtr[0] = fp_abs(x); return;
Lad: mData->mImmed.push_back(Value_t(4));
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
Lgl: opcode = cMul;
Lgm: FP_ReDefinePointers();
Lgn: FP_TRACE_BYTECODE_ADD(cMul);
     goto TailCall_cMul;
Lae: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(Value_t(4));
Lgo: mData->mByteCode.push_back(cImmed); goto Lgl;
Laf: ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
Ldg: opcode = cMul; goto Lgn;
Lag: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed);
Lgp: opcode = cFmma;
Lgq: FP_ReDefinePointers();
Lgr: FP_TRACE_BYTECODE_ADD(cFmma);
     goto TailCall_cFmma;
Lah: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(B); goto Lgp;
Lai: ImmedPtr[0] = x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lgp;
Laj: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSub;
Lgs: FP_TRACE_BYTECODE_ADD(cSub);
     goto TailCall_cSub;
Lak: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lgt: FP_ReDefinePointers();
Lha: FP_TRACE_BYTECODE_ADD(cAdd);
     goto TailCall_cAdd;
Lal: ImmedPtr[-1] = y+x;
Lhb: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lhc: opcode = cFma;
     FP_ReDefinePointers();
Lhd: FP_TRACE_BYTECODE_ADD(cFma);
     goto TailCall_cFma;
Lam: ByteCodePtr[-1] = cImmed;
Lcs: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lhe: opcode = cFma; goto Lhd;
Lan: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Lhf: AddFunctionOpcode(cAdd);
Lhg: opcode = cRSub;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cRSub);
     goto TailCall_cRSub;
Lao: ImmedPtr[0] = -x;
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lhf;
Lap: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lhg;
Laq: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lhh: AddFunctionOpcode(cAdd);
Lhi: AddFunctionOpcode(B);
Lhj: opcode = cSub;
     FP_ReDefinePointers(); goto Lgs;
Lar: ImmedPtr[0] = -x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lhh;
Las: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lhi;
Lat: ImmedPtr[-1] = y+x;
Lba: mData->mImmed.pop_back();
Lbg: mData->mByteCode.pop_back(); return;
Lbb: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lhc;
Lbc: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lhf;
Lbd: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lhf;
Lbe: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cNotNot;
Lhk: FP_TRACE_BYTECODE_ADD(cNotNot);
     goto TailCall_cNotNot;
Lbf: ImmedPtr[-1] = fp_and(x,y); goto Lba;
Lbh: ImmedPtr[0] = fp_conj(x); return;
Lbi: mData->mImmed.push_back(Value_t());
     ByteCodePtr[0] = cImmed;
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(Value_t(1));
Lhl: mData->mByteCode.push_back(cImmed);
Lhm: opcode = cAdd; goto Lgt;
Lbj: ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     FP_TRACE_BYTECODE_ADD(cDiv);
     goto TailCall_cDiv;
Lbk: ImmedPtr[-1] = y/x; goto Lba;
Lbl: ImmedPtr[-1] = fp_equal(y,x); goto Lba;
Lbm: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lhn: FP_TRACE_BYTECODE_ADD(cEqual);
     goto TailCall_cEqual;
Lbn: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     opcode = cNot;
     FP_ReDefinePointers();
Lho: FP_TRACE_BYTECODE_ADD(cNot);
     goto TailCall_cNot;
Lbo: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cFms;
Lhp: FP_TRACE_BYTECODE_ADD(cFms);
     goto TailCall_cFms;
Lbp: ImmedPtr[-2] = y*x+a;
Lhq: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} return;
Lbq: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lgl;
Lbr: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cFmms;
Lhr: FP_TRACE_BYTECODE_ADD(cFmms);
     goto TailCall_cFmms;
Lbs: ByteCodePtr[-2] = cImmed;
Lhs: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lht: AddFunctionOpcode(cMul); goto Lgq;
Lbt: ImmedPtr[-1] = x;
     mData->mImmed.pop_back(); goto Lhs;
Lca: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
Lia: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lib: AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lht;
Lcb: mData->mImmed.pop_back(); goto Lia;
Lcc: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(B); goto Lib;
Lcd: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lib;
Lce: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lgl;
Lcf: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back(); goto Lht;
Lcg: ImmedPtr[-3] = y*x+a*b;
Lic: for(unsigned tmp=3; tmp-->0; ) {mData->mImmed.pop_back();}
Lid: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} return;
Lch: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lhc;
Lci: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
Lie: opcode = cFms;
     FP_ReDefinePointers(); goto Lhp;
Lcj: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cFmma; goto Lgr;
Lck: ByteCodePtr[-2] = cImmed;
Lif: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lig: AddFunctionOpcode(cMul);
Lih: FP_ReDefinePointers(); goto Lhr;
Lcl: ImmedPtr[-1] = x;
     mData->mImmed.pop_back(); goto Lif;
Lcm: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
Lii: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lij: AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lig;
Lcn: mData->mImmed.pop_back(); goto Lii;
Lco: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(B); goto Lij;
Lcp: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lij;
Lcq: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back(); goto Lig;
Lcr: ImmedPtr[-3] = y*x-a*b; goto Lic;
Lct: ImmedPtr[-2] = y*x-a; goto Lhq;
Lda: ImmedPtr[0] = -x; goto Lhe;
Ldb: ImmedPtr[-1] = fp_less(x,y); goto Lba;
Ldc: ImmedPtr[-1] = fp_lessOrEq(x,y); goto Lba;
Ldd: ImmedPtr[0] = fp_imag(x); return;
Lde: mData->mImmed.push_back(Value_t()); goto Lgo;
Ldf: ImmedPtr[0] = fp_inv(x); return;
Ldh: ImmedPtr[-1] = fp_less(y,x); goto Lba;
Ldi: ImmedPtr[-1] = fp_lessOrEq(y,x); goto Lba;
Ldj: ImmedPtr[-1] = fp_max(x,y); goto Lba;
Ldk: ImmedPtr[-1] = fp_min(x,y); goto Lba;
Ldl: ImmedPtr[-1] = fp_mod(y,x); goto Lba;
Ldm: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSqr;
Lik: FP_TRACE_BYTECODE_ADD(cSqr);
     goto TailCall_cSqr;
Ldn: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr);
Lil: opcode = cNeg;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cNeg);
     goto TailCall_cNeg;
Ldo: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr);
     AddFunctionOpcode(cMul); goto Lil;
Ldp: ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cPow); return;
Ldq: ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2; goto Lgn;
Ldr: ImmedPtr[-1] = x;
Lim: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lgm;
Lds: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
Lin: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lio: AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
Lip: mData->mByteCode.push_back(cImmed); goto Lgm;
Ldt: mData->mImmed.pop_back(); goto Lin;
Lea: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(B); goto Lio;
Leb: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lio;
Lec: ByteCodePtr[-1] = cImmed; goto Lbg;
Led: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lgn;
Lee: ImmedPtr[0] = x+x; goto Ldq;
Lef: ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     mData->mImmed.push_back(y*x);
     mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cMul); goto Lhm;
Leg: ImmedPtr[-1] = x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(y*x); goto Lhl;
Leh: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(x+x); goto Lip;
Lei: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();} goto Lid;
Lej: ImmedPtr[-1] = y*x; goto Lim;
Lek: ImmedPtr[0] = -x; goto Led;
Lel: ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     mData->mImmed.push_back(y*x);
     mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cMul); goto Lhj;
Lem: ImmedPtr[-1] = y*x; goto Lba;
Len: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lil;
Leo: ByteCodePtr[0] = cDup;
     ImmedPtr -= 1;
     mData->mImmed.pop_back();
Liq: opcode = cAdd; goto Lha;
Lep: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lir: AddFunctionOpcode(cSqr); goto Lgm;
Leq: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lir;
Ler: ImmedPtr[-1] = fp_nequal(y,x); goto Lba;
Les: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lis: FP_TRACE_BYTECODE_ADD(cNEqual);
     goto TailCall_cNEqual;
Let: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     opcode = cNotNot;
     FP_ReDefinePointers(); goto Lhk;
Lfa: ImmedPtr[0] = -x;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Ldg;
Lfb: ImmedPtr[0] = -x; return;
Lfc: mData->mByteCode.pop_back();
     AddFunctionOpcode(cAbsNot); return;
Lfd: ImmedPtr[0] = -x;
Lfj: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cEqual; goto Lhn;
Lfe: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cNEqual; goto Lis;
Lff: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cLessOrEq;
     FP_TRACE_BYTECODE_ADD(cLessOrEq);
     goto TailCall_cLessOrEq;
Lfg: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cLess;
     FP_TRACE_BYTECODE_ADD(cLess);
     goto TailCall_cLess;
Lfh: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cGreaterOrEq;
     FP_TRACE_BYTECODE_ADD(cGreaterOrEq);
     goto TailCall_cGreaterOrEq;
Lfi: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cGreater;
     FP_TRACE_BYTECODE_ADD(cGreater);
     goto TailCall_cGreater;
Lfk: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lho;
Lfl: ImmedPtr[0] = fp_not(x); return;
Lfm: ImmedPtr[0] = -x; goto Lfe;
Lfn: ImmedPtr[-1] = fp_or(x,y); goto Lba;
Lfo: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     opcode = cInv;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cInv);
     goto TailCall_cInv;
Lfp: mData->mImmed.push_back(Value_t());
     ByteCodePtr[0] = cImmed; goto Lgl;
Lfq: ImmedPtr[0] = fp_real(x); return;
Lfr: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lik;
Lfs: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed);
Lit: opcode = cFmms; goto Lih;
Lft: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(B); goto Lit;
Lga: ImmedPtr[0] = x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lit;
Lgb: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Liq;
Lgc: ImmedPtr[-1] = y-x; goto Lhb;
Lgd: ByteCodePtr[-1] = cImmed; goto Lbo;
Lge: ImmedPtr[-1] = y-x; goto Lba;
Lgf: ImmedPtr[0] = -x; goto Liq;
Lgg: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lie;
Lgh: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cAdd);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lhg;
Lgi: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cSub); goto Lhg;
Lgj: mData->mByteCode.push_back(cDup); return;
Lgk: ByteCodePtr[0] = cDup; return;
return;
// This list of dummy gotos is here to inhibit
// compiler warnings on unused labels
goto TailCall_cAnd;goto TailCall_cConj;goto TailCall_cImag;
goto TailCall_cMax;goto TailCall_cMin;goto TailCall_cMod;
goto TailCall_cNeg;goto TailCall_cOr;goto TailCall_cRDiv;
goto TailCall_cReal;goto TailCall_cSub;
#endif

#if((FP_FLOAT_VERSION) && !(FP_COMPLEX_VERSION))
	Value_t x;
	unsigned A;
	unsigned B;
	Value_t y;
	Value_t a;
	unsigned C;
	Value_t b;
	unsigned D;
	switch(opcode)
	{
	TailCall_cAbs:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAbs:
		switch(ByteCodePtr[0])
		{
		case cInv:
			if(ByteCodePtr[-1] == cSqr)
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(245,"cSqr cInv cAbs", "cSqr cInv", "");
				/* ByteCodePtr[-1] = cSqr; */ // redundant, matches cSqr @ 2
				/* ByteCodePtr[0] = cInv; */ // redundant, matches cInv @ 1
				return;
			}
			goto Default0;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(233,"cNeg cAbs", "cAbs", "");
			/* opcode = cAbs; */ // redundant, matches cAbs @ 0
			goto Lab;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(164,
				"x cAbs",
				"[fp_abs(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lac;
		default: Default0:;
			A = ByteCodePtr[0];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(246,
					"A[IsNeverNegativeValueOpcode(A)] cAbs",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default1;
	TailCall_cAcos:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAcos:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(fp_abs(x)<=Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(180,
					"x[fp_abs(x)<=Value_t(1)] cAcos",
					"[fp_acos(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lad;
			}
		}
		goto Default1;
	TailCall_cAcosh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAcosh:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x>=Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(177,
					"x[x>=Value_t(1)] cAcosh",
					"[fp_acosh(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lae;
			}
		}
		goto Default1;
	TailCall_cAdd:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAdd:
		switch(ByteCodePtr[0])
		{
		case cDup:
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(366,"cDup cAdd cDup cAdd", "[Value_t(4)] cMul", "");
					goto Laf;
				}
				break;
			case cMul:
				if(ByteCodePtr[-2] == cAdd)
				{
					if(ByteCodePtr[-3] == cDup)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(367,"cDup cAdd cMul cDup cAdd", "cMul [Value_t(4)] cMul", "");
						goto Lag;
					}
				}
				break;
			}
			goto Default2;
		case cMul:
			switch(ByteCodePtr[-1])
			{
			case cImmed:
				x = ImmedPtr[0];
				switch(ByteCodePtr[-2])
				{
				case cDup:
					FP_TRACE_BYTECODE_OPTIMIZATION(369,
						"cDup x cMul cAdd",
						"[x+Value_t(1)] cMul",
						"    with x = " << x << "\n");
					goto Lah;
				default:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						if(ByteCodePtr[-3] == cMul)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(272,
								"cMul A[IsVarOpcode(A)] x cMul cAdd",
								"A [DO_STACKPLUS2] [x] cFmma",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							incStackPtr();
							incStackPtr();
							--mStackPtr;
							--mStackPtr;
							goto Lai;
						}
					}
				}
				break;
			default:
				B = ByteCodePtr[-1];
				if(IsVarOpcode(B))
				{
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						if(ByteCodePtr[-3] == cMul)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(268,
								"cMul A[IsVarOpcode(A)] B[IsVarOpcode(B)] cMul cAdd",
								"A [DO_STACKPLUS2] B cFmma",
								"    with B = " << FP_TRACE_OPCODENAME(B)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							incStackPtr();
							incStackPtr();
							--mStackPtr;
							--mStackPtr;
							goto Laj;
						}
					}
				}
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						if(ByteCodePtr[-3] == cMul)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(270,
								"cMul x A[IsVarOpcode(A)] cMul cAdd",
								"[x] [DO_STACKPLUS2] A cFmma",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", x = " << x
								    << "\n");
							incStackPtr();
							incStackPtr();
							--mStackPtr;
							--mStackPtr;
							goto Lak;
						}
					}
				}
			}
			goto Default2;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(231,"cNeg cAdd", "cSub", "");
			goto Lal;
		case cImmed:
			x = ImmedPtr[0];
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(150,
						"y cAdd x cAdd",
						"[y+x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cAdd; */ // redundant, matches cAdd @ 0
					goto Lam;
				}
				break;
			case cFma:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(154,
						"y cFma x cAdd",
						"[y+x] cFma",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lan;
				}
				break;
			case cMul:
				FP_TRACE_BYTECODE_OPTIMIZATION(266,
					"cMul x cAdd",
					"[DO_STACKPLUS1] [x] cFma",
					"    with x = " << x << "\n");
				incStackPtr();
				--mStackPtr;
				/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
				goto Lao;
			case cRSub:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(354,
							"y cAdd cRSub x cAdd",
							"[ y+x] cAdd cRSub",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lap;
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(355,
						"cNeg cRSub x cAdd",
						"[-x] cAdd cRSub",
						"    with x = " << x << "\n");
					goto Laq;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(353,
						"y cRSub x cAdd",
						"[ y+x] cRSub",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lar;
				}
				break;
			case cSub:
				B = ByteCodePtr[-2];
				if(IsVarOpcode(B))
				{
					switch(ByteCodePtr[-3])
					{
					case cAdd:
						if(ByteCodePtr[-4] == cImmed)
						{
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(348,
								"y cAdd B[IsVarOpcode(B)] cSub x cAdd",
								"[ y+x] cAdd B cSub",
								"    with x = " << x
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-4] = cImmed; */ // redundant, matches y @ 5
							goto Las;
						}
						break;
					case cNeg:
						FP_TRACE_BYTECODE_OPTIMIZATION(349,
							"cNeg B[IsVarOpcode(B)] cSub x cAdd",
							"[-x] cAdd B cSub",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						goto Lat;
					case cImmed:
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(347,
							"y B[IsVarOpcode(B)] cSub x cAdd",
							"[ y+x] B cSub",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lba;
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(123,
					"y x cAdd",
					"[y+x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbb;
			}
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(55,
					"x[x==Value_t()] cAdd",
					"",
					"    with x = " << x << "\n");
				goto Lbc;
			}
			break;
		default: Default2:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					FP_TRACE_BYTECODE_OPTIMIZATION(264,
						"cMul A[IsVarOpcode(A)] cAdd",
						"[DO_STACKPLUS1] A cFma",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Lbd;
				case cRSub:
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(346,
							"x cRSub A[IsVarOpcode(A)] cAdd",
							"[DO_STACKPLUS1] A [x] cAdd cRSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						incStackPtr();
						--mStackPtr;
						goto Lbe;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(351,
						"cRSub A[IsVarOpcode(A)] cAdd",
						"[DO_STACKPLUS1] A cAdd cRSub",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Lbf;
				}
			}
		}
		goto Default1;
	TailCall_cAnd:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAnd:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(280,"cDup cAnd", "cNotNot", "");
			goto Lbg;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(140,
					"y x cAnd",
					"[fp_and(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbh;
			}
			break;
		}
		goto Default1;
	TailCall_cAsin:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAsin:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(fp_abs(x)<=Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(181,
					"x[fp_abs(x)<=Value_t(1)] cAsin",
					"[fp_asin(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lbi;
			}
		}
		goto Default1;
	TailCall_cAsinh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAsinh:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(178,
				"x cAsinh",
				"[fp_asinh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbj;
		}
		goto Default1;
	TailCall_cAtan:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAtan:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(182,
				"x cAtan",
				"[fp_atan(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbk;
		}
		goto Default1;
	TailCall_cAtan2:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAtan2:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(171,
					"y x cAtan2",
					"[fp_atan2(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbl;
			}
		}
		goto Default1;
	TailCall_cAtanh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAtanh:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(fp_abs(x)<Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(179,
					"x[fp_abs(x)<Value_t(1)] cAtanh",
					"[fp_atanh(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lbm;
			}
		}
		goto Default1;
	TailCall_cCbrt:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCbrt:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(183,
				"x cCbrt",
				"[fp_cbrt(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbn;
		}
		goto Default1;
	TailCall_cCeil:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCeil:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			B = ByteCodePtr[-1];
			if(IsUnaryOpcode(B)&&IsAlwaysIntegerOpcode(B))
			{
				A = ByteCodePtr[-2];
				if(IsVarOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(458,
						"A[IsVarOpcode(A)] B[IsUnaryOpcode(B)&&IsAlwaysIntegerOpcode(B)] cAdd cCeil",
						"cCeil A B cAdd",
						"    with B = " << FP_TRACE_OPCODENAME(B)
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					goto Lbo;
				}
			}
			goto Default3;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(465,"cNeg cCeil", "cFloor cNeg", "");
			goto Lbp;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(167,
				"x cCeil",
				"[fp_ceil(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbq;
		default: Default3:;
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(454,
					"A[IsAlwaysIntegerOpcode(A)] cCeil",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default1;
	TailCall_cCos:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCos:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(291,"cAbs cCos", "cCos", "");
			/* opcode = cCos; */ // redundant, matches cCos @ 0
			goto Lbr;
		case cAtan:
			FP_TRACE_BYTECODE_OPTIMIZATION(581,"cAtan cCos", "cSqr [DO_STACKPLUS1] [Value_t(1)] cAdd cRSqrt", "");
			incStackPtr();
			--mStackPtr;
			goto Lbs;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(294,"cNeg cCos", "cCos", "");
			/* opcode = cCos; */ // redundant, matches cCos @ 0
			goto Lbr;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(184,
				"x cCos",
				"[fp_cos(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbt;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				switch(ByteCodePtr[-1])
				{
				case cSec:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(565,
							"B[B==A] cSec A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCos",
							"B cSec cDup cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cSec; */ // redundant, matches cSec @ 2
						goto Lca;
					}
					break;
				case cSin:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(559,
							"B[B==A] cSin A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCos",
							"B cSinCos",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lcb;
					}
					break;
				}
			}
		}
		goto Default1;
	TailCall_cCosh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCosh:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(292,"cAbs cCosh", "cCosh", "");
			/* opcode = cCosh; */ // redundant, matches cCosh @ 0
			goto Lcc;
		case cAsinh:
			FP_TRACE_BYTECODE_OPTIMIZATION(515,"cAsinh cCosh", "[DO_STACKPLUS1] cSqr [Value_t(1)] cAdd cSqrt", "");
			incStackPtr();
			--mStackPtr;
			goto Lcd;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(295,"cNeg cCosh", "cCosh", "");
			/* opcode = cCosh; */ // redundant, matches cCosh @ 0
			goto Lcc;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(185,
				"x cCosh",
				"[fp_cosh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lce;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				if(ByteCodePtr[-1] == cSinh)
				{
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(572,
							"B[B==A] cSinh A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCosh",
							"B cSinhCosh",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lcf;
					}
				}
			}
		}
		goto Default1;
	TailCall_cCot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCot:
		A = ByteCodePtr[0];
		if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
		{
			if(ByteCodePtr[-1] == cTan)
			{
				B = ByteCodePtr[-2];
				if(B==A)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(563,
						"B[B==A] cTan A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCot",
						"B cTan cDup cInv",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", B = " << FP_TRACE_OPCODENAME(B)
						    << "\n");
					/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
					/* ByteCodePtr[-1] = cTan; */ // redundant, matches cTan @ 2
					goto Lca;
				}
			}
		}
		goto Default1;
	TailCall_cCsc:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCsc:
		switch(ByteCodePtr[0])
		{
		case cAtan:
			A = ByteCodePtr[-1];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(586,
					"A[IsNeverNegativeValueOpcode(A)] cAtan cCsc",
					"A cSqr cInv [DO_STACKPLUS1] [Value_t(1)] cAdd cSqrt",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				incStackPtr();
				--mStackPtr;
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Lcg;
			}
			goto Default4;
		default: Default4:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				if(ByteCodePtr[-1] == cSin)
				{
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(561,
							"B[B==A] cSin A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCsc",
							"B cSin cDup cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cSin; */ // redundant, matches cSin @ 2
						goto Lca;
					}
				}
			}
		}
		goto Default1;
	TailCall_cDeg:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cDeg:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(165,
				"x cDeg",
				"[RadiansToDegrees(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lch;
		}
		goto Default1;
	TailCall_cDiv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cDiv:
		switch(ByteCodePtr[0])
		{
		case cCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(306,"cCos cDiv", "cSec cMul", "");
			goto Lci;
		case cCot:
			FP_TRACE_BYTECODE_OPTIMIZATION(310,"cCot cDiv", "cTan cMul", "");
			goto Lcj;
		case cCsc:
			FP_TRACE_BYTECODE_OPTIMIZATION(308,"cCsc cDiv", "cSin cMul", "");
			goto Lck;
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(76,"cDup cDiv", "[Value_t()] cMul [Value_t(1)] cAdd", "");
			goto Lcl;
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(471,"cExp cDiv", "cNeg cExp cMul", "");
			goto Lcm;
		case cExp2:
			FP_TRACE_BYTECODE_OPTIMIZATION(472,"cExp2 cDiv", "cNeg cExp2 cMul", "");
			goto Lcn;
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(254,"cInv cDiv", "cMul", "");
			goto Lco;
		case cPow:
			FP_TRACE_BYTECODE_OPTIMIZATION(470,"cPow cDiv", "cNeg cPow cMul", "");
			goto Lcp;
		case cSec:
			FP_TRACE_BYTECODE_OPTIMIZATION(309,"cSec cDiv", "cCos cMul", "");
			goto Lcq;
		case cSin:
			FP_TRACE_BYTECODE_OPTIMIZATION(305,"cSin cDiv", "cCsc cMul", "");
			goto Lcr;
		case cSinCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(567,"cSinCos cDiv", "cTan", "");
			goto Lcs;
		case cSinhCosh:
			FP_TRACE_BYTECODE_OPTIMIZATION(574,"cSinhCosh cDiv", "cTanh", "");
			goto Lct;
		case cTan:
			FP_TRACE_BYTECODE_OPTIMIZATION(307,"cTan cDiv", "cCot cMul", "");
			goto Lda;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(148,
						"cNeg x[x!=Value_t()] cDiv",
						"[-x] cDiv",
						"    with x = " << x << "\n");
					/* opcode = cDiv; */ // redundant, matches cDiv @ 0
					goto Ldb;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(121,
						"y x[x!=Value_t()] cDiv",
						"[y/x]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Ldc;
				}
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(54,
					"x[x==Value_t(1)] cDiv",
					"",
					"    with x = " << x << "\n");
				goto Lbc;
			}
			if(x!=Value_t(0))
			{
				if(ByteCodePtr[-1] == cMul)
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						y = ImmedPtr[-1];
						if((y/x)==fp_const_rad_to_deg<Value_t>())
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(377,
								"y[(y/x)==fp_const_rad_to_deg<Value_t>()] cMul x[x!=Value_t(0)] cDiv",
								"cDeg",
								"    with x = " << x
								    << ", y = " << y
								    << "\n");
							goto Ldd;
						}
						if((y/x)==fp_const_deg_to_rad<Value_t>())
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(378,
								"y[(y/x)==fp_const_deg_to_rad<Value_t>()] cMul x[x!=Value_t(0)] cDiv",
								"cRad",
								"    with x = " << x
								    << ", y = " << y
								    << "\n");
							goto Lde;
						}
						FP_TRACE_BYTECODE_OPTIMIZATION(379,
							"y cMul x[x!=Value_t(0)] cDiv",
							"[y/x] cMul",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
						goto Ldf;
					}
				}
				FP_TRACE_BYTECODE_OPTIMIZATION(381,
					"x[x!=Value_t(0)] cDiv",
					"[fp_inv(x)] cMul",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Ldg;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDiv:
					B = ByteCodePtr[-2];
					if(IsVarOpcode(B))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(327,
							"B[IsVarOpcode(B)] cDiv A[IsVarOpcode(A)] cDiv",
							"[DO_STACKPLUS1] B A cMul cDiv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						incStackPtr();
						--mStackPtr;
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* opcode = cDiv; */ // redundant, matches cDiv @ 0
						goto Ldh;
					}
					break;
				case cRDiv:
					switch(ByteCodePtr[-2])
					{
					case cImmed:
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(322,
							"x cRDiv A[IsVarOpcode(A)] cDiv",
							"A cMul [x] cRDiv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Ldi;
					default:
						B = ByteCodePtr[-2];
						if(IsVarOpcode(B))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(321,
								"B[IsVarOpcode(B)] cRDiv A[IsVarOpcode(A)] cDiv",
								"A cMul B cRDiv",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							goto Ldj;
						}
					}
					break;
				}
			}
		}
		goto Default1;
	TailCall_cEqual:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(418,
						"cAbs x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Ldk;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(420,
						"cSqr x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Ldk;
				default:
					A = ByteCodePtr[-1];
					if(IsLogicalOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(486,
							"A[IsLogicalOpcode(A)] x[x==Value_t(0)] cEqual",
							"A cNot",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Ldl;
					}
				}
			}
			if(x==Value_t(1))
			{
				A = ByteCodePtr[-1];
				if(IsLogicalOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(484,
						"A[IsLogicalOpcode(A)] x[x==Value_t(1)] cEqual",
						"A",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					goto Lbc;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(138,
					"y x cEqual",
					"[fp_equal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldm;
			}
		}
		goto Default1;
	TailCall_cExp:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cExp:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(467,
					"x cAdd cExp",
					"cExp [fp_exp(x)] cMul",
					"    with x = " << x << "\n");
				goto Ldn;
			}
			break;
		case cLog:
			A = ByteCodePtr[-1];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(396,
					"A[IsNeverNegativeValueOpcode(A)] cLog cExp",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Ldo;
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(186,
				"x cExp",
				"[fp_exp(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Ldp;
		}
		goto Default1;
	TailCall_cExp2:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cExp2:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(468,
					"x cAdd cExp2",
					"cExp2 [fp_exp2(x)] cMul",
					"    with x = " << x << "\n");
				goto Ldq;
			}
			break;
		case cLog2:
			A = ByteCodePtr[-1];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(397,
					"A[IsNeverNegativeValueOpcode(A)] cLog2 cExp2",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Ldo;
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(187,
				"x cExp2",
				"[fp_exp2(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Ldr;
		}
		FP_TRACE_BYTECODE_OPTIMIZATION(544,"cExp2", "[DO_STACKPLUS1] [fp_log(Value_t(2))] cMul cExp", "");
		incStackPtr();
		--mStackPtr;
		goto Lds;
	TailCall_cFloor:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFloor:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			B = ByteCodePtr[-1];
			if(IsUnaryOpcode(B)&&IsAlwaysIntegerOpcode(B))
			{
				A = ByteCodePtr[-2];
				if(IsVarOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(457,
						"A[IsVarOpcode(A)] B[IsUnaryOpcode(B)&&IsAlwaysIntegerOpcode(B)] cAdd cFloor",
						"cFloor A B cAdd",
						"    with B = " << FP_TRACE_OPCODENAME(B)
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					goto Ldt;
				}
			}
			goto Default5;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(464,"cNeg cFloor", "cCeil cNeg", "");
			goto Lea;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(168,
				"x cFloor",
				"[fp_floor(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Leb;
		default: Default5:;
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(453,
					"A[IsAlwaysIntegerOpcode(A)] cFloor",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default1;
	TailCall_cFma:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFma:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(274,"cNeg cFma", "cFms", "");
			goto Lec;
		case cImmed:
			a = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[-1];
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-2];
					FP_TRACE_BYTECODE_OPTIMIZATION(129,
						"y x a cFma",
						"[y*x+a]",
						"    with a = " << a
						    << ", x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Led;
				}
			}
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(156,
					"x[x==Value_t()] cFma",
					"cMul",
					"    with x = " << x << "\n");
				goto Lee;
			}
			break;
		}
		goto Default1;
	TailCall_cFmma:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFmma:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(276,"cNeg cFmma", "cFmms", "");
			goto Lef;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(107,
							"A[IsVarOpcode(A)] cMul x[x==Value_t()] cFmma",
							"[x] cMul cFmma",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cFmma; */ // redundant, matches cFmma @ 0
						goto Leg;
					}
					goto Default6;
				default: Default6:;
					A = ByteCodePtr[-1];
					if(IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						switch(ByteCodePtr[-2])
						{
						case cImmed:
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(105,
								"y A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
								"[x] cMul cFmma",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cFmma; */ // redundant, matches cFmma @ 0
							goto Leh;
						default:
							B = ByteCodePtr[-2];
							if(IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								switch(ByteCodePtr[-3])
								{
								case cImmed:
									y = ImmedPtr[-1];
									FP_TRACE_BYTECODE_OPTIMIZATION(111,
										"y B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
										"A [x] cMul cFmma",
										"    with x = " << x
										    << ", A = " << FP_TRACE_OPCODENAME(A)
										    << ", B = " << FP_TRACE_OPCODENAME(B)
										    << ", y = " << y
										    << "\n");
									/* opcode = cFmma; */ // redundant, matches cFmma @ 0
									goto Lei;
								default:
									C = ByteCodePtr[-3];
									if(IsVarOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(109,
											"C[IsVarOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
											"A [x] cMul cFmma",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cFmma; */ // redundant, matches cFmma @ 0
										goto Lej;
									}
									if(IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(110,
											"C[IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
											"B A [x] cMul cFmma",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cFmma; */ // redundant, matches cFmma @ 0
										goto Lek;
									}
								}
							}
							if(IsVarOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(101,
									"B[IsVarOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
									"[x] cMul cFmma",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
								/* opcode = cFmma; */ // redundant, matches cFmma @ 0
								goto Leg;
							}
							if(IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(103,
									"B[IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
									"A [x] cMul cFmma",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* opcode = cFmma; */ // redundant, matches cFmma @ 0
								goto Lel;
							}
						}
					}
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(97,
							"A[IsVarOpcode(A)] x[x==Value_t()] cFmma",
							"cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						goto Lem;
					}
					if(IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(99,
							"A[IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
							"[x] cMul cFmma",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cFmma; */ // redundant, matches cFmma @ 0
						goto Len;
					}
				}
			}
			b = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				a = ImmedPtr[-1];
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[-2];
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-3];
						FP_TRACE_BYTECODE_OPTIMIZATION(131,
							"y x a b cFmma",
							"[y*x+a*b]",
							"    with b = " << b
							    << ", a = " << a
							    << ", x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Leo;
					}
				}
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(157,
					"x[x==Value_t(1)] cFmma",
					"cFma",
					"    with x = " << x << "\n");
				goto Lep;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(158,
					"x[x==Value_t(-1)] cFmma",
					"cFms",
					"    with x = " << x << "\n");
				goto Leq;
			}
			break;
		}
		goto Default1;
	TailCall_cFmms:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFmms:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(277,"cNeg cFmms", "cFmma", "");
			goto Ler;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(108,
							"A[IsVarOpcode(A)] cMul x[x==Value_t()] cFmms",
							"[x] cMul cFmms",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cFmms; */ // redundant, matches cFmms @ 0
						goto Les;
					}
					goto Default7;
				default: Default7:;
					A = ByteCodePtr[-1];
					if(IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						switch(ByteCodePtr[-2])
						{
						case cImmed:
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(106,
								"y A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
								"[x] cMul cFmms",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cFmms; */ // redundant, matches cFmms @ 0
							goto Let;
						default:
							B = ByteCodePtr[-2];
							if(IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								switch(ByteCodePtr[-3])
								{
								case cImmed:
									y = ImmedPtr[-1];
									FP_TRACE_BYTECODE_OPTIMIZATION(114,
										"y B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
										"A [x] cMul cFmms",
										"    with x = " << x
										    << ", A = " << FP_TRACE_OPCODENAME(A)
										    << ", B = " << FP_TRACE_OPCODENAME(B)
										    << ", y = " << y
										    << "\n");
									/* opcode = cFmms; */ // redundant, matches cFmms @ 0
									goto Lfa;
								default:
									C = ByteCodePtr[-3];
									if(IsVarOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(112,
											"C[IsVarOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
											"A [x] cMul cFmms",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cFmms; */ // redundant, matches cFmms @ 0
										goto Lfb;
									}
									if(IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(113,
											"C[IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
											"B A [x] cMul cFmms",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cFmms; */ // redundant, matches cFmms @ 0
										goto Lfc;
									}
								}
							}
							if(IsVarOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(102,
									"B[IsVarOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
									"[x] cMul cFmms",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
								/* opcode = cFmms; */ // redundant, matches cFmms @ 0
								goto Les;
							}
							if(IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(104,
									"B[IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
									"A [x] cMul cFmms",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* opcode = cFmms; */ // redundant, matches cFmms @ 0
								goto Lfd;
							}
						}
					}
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(98,
							"A[IsVarOpcode(A)] x[x==Value_t()] cFmms",
							"cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						goto Lem;
					}
					if(IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(100,
							"A[IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
							"[x] cMul cFmms",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cFmms; */ // redundant, matches cFmms @ 0
						goto Lfe;
					}
				}
			}
			b = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				a = ImmedPtr[-1];
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[-2];
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-3];
						FP_TRACE_BYTECODE_OPTIMIZATION(132,
							"y x a b cFmms",
							"[y*x-a*b]",
							"    with b = " << b
							    << ", a = " << a
							    << ", x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lff;
					}
				}
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(159,
					"x[x==Value_t(1)] cFmms",
					"cFms",
					"    with x = " << x << "\n");
				goto Leq;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(160,
					"x[x==Value_t(-1)] cFmms",
					"cFma",
					"    with x = " << x << "\n");
				goto Lep;
			}
			break;
		}
		goto Default1;
	TailCall_cFms:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFms:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(275,"cNeg cFms", "cFma", "");
			goto Lfg;
		case cImmed:
			a = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[-1];
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-2];
					FP_TRACE_BYTECODE_OPTIMIZATION(130,
						"y x a cFms",
						"[y*x-a]",
						"    with a = " << a
						    << ", x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lfh;
				}
			}
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(153,
				"x cFms",
				"[-x] cFma",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lfi;
		}
		goto Default1;
	TailCall_cGreater:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cGreater:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(136,
					"y x cGreater",
					"[fp_less(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lfj;
			}
			if(x==fp_const_preciseDouble<Value_t>(-0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(496,
					"x[x==fp_const_preciseDouble<Value_t>(-0.5)] cGreater",
					"cNeg cAbsNot",
					"    with x = " << x << "\n");
				goto Lfk;
			}
		}
		goto Default1;
	TailCall_cGreaterOrEq:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cGreaterOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x!=Value_t(0))
			{
				if(ByteCodePtr[-1] == cAbs)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(492,
						"cAbs x[x!=Value_t(0)] cGreaterOrEq",
						"[fp_const_preciseDouble<Value_t>(0.5)/x] cMul cNotNot",
						"    with x = " << x << "\n");
					goto Lfl;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(137,
					"y x cGreaterOrEq",
					"[fp_lessOrEq(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lfm;
			}
			if(x==fp_const_preciseDouble<Value_t>(0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(495,
					"x[x==fp_const_preciseDouble<Value_t>(0.5)] cGreaterOrEq",
					"cAbsNotNot",
					"    with x = " << x << "\n");
				goto Lfn;
			}
		}
		goto Default1;
	TailCall_cHypot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cHypot:
		switch(ByteCodePtr[0])
		{
		case cSinCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(82,"cSinCos cHypot", "[DO_STACKPLUS1] [Value_t()] cMul [Value_t(1)] cAdd", "");
			incStackPtr();
			--mStackPtr;
			goto Lcl;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(582,
				"x cHypot",
				"cSqr [x*x] cAdd cSqrt",
				"    with x = " << x << "\n");
			goto Lfo;
		}
		goto Default1;
	TailCall_cInt:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cInt:
		switch(ByteCodePtr[0])
		{
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(169,
				"x cInt",
				"[fp_int(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lfp;
		default:
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(455,
					"A[IsAlwaysIntegerOpcode(A)] cInt",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default1;
	TailCall_cInv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cInv:
		switch(ByteCodePtr[0])
		{
		case cCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(312,"cCos cInv", "cSec", "");
			goto Lfq;
		case cCot:
			FP_TRACE_BYTECODE_OPTIMIZATION(316,"cCot cInv", "cTan", "");
			goto Lcs;
		case cCsc:
			FP_TRACE_BYTECODE_OPTIMIZATION(314,"cCsc cInv", "cSin", "");
			goto Lfr;
		case cHypot:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(583,
					"x cHypot cInv",
					"cSqr [x*x] cAdd cRSqrt",
					"    with x = " << x << "\n");
				goto Lfs;
			}
			break;
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(60,"cInv cInv", "", "");
			goto Ldo;
		case cPow:
			FP_TRACE_BYTECODE_OPTIMIZATION(414,"cPow cInv", "cNeg cPow", "");
			goto Lft;
		case cRSqrt:
			FP_TRACE_BYTECODE_OPTIMIZATION(241,"cRSqrt cInv", "cSqrt", "");
			goto Lga;
		case cSec:
			FP_TRACE_BYTECODE_OPTIMIZATION(315,"cSec cInv", "cCos", "");
			goto Lgb;
		case cSin:
			FP_TRACE_BYTECODE_OPTIMIZATION(311,"cSin cInv", "cCsc", "");
			goto Lgc;
		case cSqrt:
			FP_TRACE_BYTECODE_OPTIMIZATION(239,"cSqrt cInv", "cRSqrt", "");
			goto Lgd;
		case cTan:
			FP_TRACE_BYTECODE_OPTIMIZATION(313,"cTan cInv", "cCot", "");
			goto Lge;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(119,
					"x[x!=Value_t()] cInv",
					"[fp_inv(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lgf;
			}
			break;
		}
		goto Default1;
	TailCall_cLess:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLess:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				A = ByteCodePtr[-1];
				if(IsNeverNegativeValueOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(357,
						"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(0)] cLess",
						"A [x] cMul",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
					goto Lgg;
				}
			}
			if(x!=Value_t(0))
			{
				if(ByteCodePtr[-1] == cAbs)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(491,
						"cAbs x[x!=Value_t(0)] cLess",
						"[fp_const_preciseDouble<Value_t>(0.5)/x] cMul cNot",
						"    with x = " << x << "\n");
					goto Lgh;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(134,
					"y x cLess",
					"[fp_less(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lgi;
			}
			if(x==fp_const_preciseDouble<Value_t>(0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(494,
					"x[x==fp_const_preciseDouble<Value_t>(0.5)] cLess",
					"cAbsNot",
					"    with x = " << x << "\n");
				goto Lgj;
			}
		}
		goto Default1;
	TailCall_cLessOrEq:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLessOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(135,
					"y x cLessOrEq",
					"[fp_lessOrEq(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lgk;
			}
			if(x==fp_const_preciseDouble<Value_t>(-0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(497,
					"x[x==fp_const_preciseDouble<Value_t>(-0.5)] cLessOrEq",
					"cNeg cAbsNotNot",
					"    with x = " << x << "\n");
				goto Lgl;
			}
		}
		goto Default1;
	TailCall_cLog:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLog:
		switch(ByteCodePtr[0])
		{
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(399,"cExp cLog", "", "");
			goto Ldo;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(x>Value_t(0))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(556,
						"x[x>Value_t(0)] cMul cLog",
						"cLog [fp_log(x)] cAdd",
						"    with x = " << x << "\n");
					goto Lgm;
				}
			}
			break;
		case cSqr:
			FP_TRACE_BYTECODE_OPTIMIZATION(359,"cSqr cLog", "cAbs cLog cDup cAdd", "");
			goto Lgn;
		case cImmed:
			x = ImmedPtr[0];
			if(x>Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(188,
					"x[x>Value_t(0)] cLog",
					"[fp_log(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lgo;
			}
			break;
		}
		goto Default1;
	TailCall_cLog10:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLog10:
		switch(ByteCodePtr[0])
		{
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(546,"cExp cLog10", "[DO_STACKPLUS1] [fp_log10(fp_const_e<Value_t>())] cMul", "");
			incStackPtr();
			--mStackPtr;
			goto Lgp;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(x>Value_t(0))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(557,
						"x[x>Value_t(0)] cMul cLog10",
						"cLog10 [fp_log10(x)] cAdd",
						"    with x = " << x << "\n");
					goto Lgq;
				}
			}
			break;
		case cSqr:
			FP_TRACE_BYTECODE_OPTIMIZATION(361,"cSqr cLog10", "cAbs cLog10 cDup cAdd", "");
			goto Lgr;
		case cImmed:
			x = ImmedPtr[0];
			if(x>Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(189,
					"x[x>Value_t(0)] cLog10",
					"[fp_log10(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lgs;
			}
			break;
		}
		goto Default1;
	TailCall_cLog2:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLog2:
		switch(ByteCodePtr[0])
		{
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(545,"cExp cLog2", "[DO_STACKPLUS1] [fp_log2(fp_const_e<Value_t>())] cMul", "");
			incStackPtr();
			--mStackPtr;
			goto Lgt;
		case cExp2:
			FP_TRACE_BYTECODE_OPTIMIZATION(400,"cExp2 cLog2", "", "");
			goto Ldo;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(x>Value_t(0))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(555,
						"x[x>Value_t(0)] cMul cLog2",
						"cLog2 [fp_log2(x)] cAdd",
						"    with x = " << x << "\n");
					goto Lha;
				}
			}
			break;
		case cSqr:
			FP_TRACE_BYTECODE_OPTIMIZATION(360,"cSqr cLog2", "cAbs cLog2 cDup cAdd", "");
			goto Lhb;
		case cImmed:
			x = ImmedPtr[0];
			if(x>Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(190,
					"x[x>Value_t(0)] cLog2",
					"[fp_log2(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lhc;
			}
			break;
		}
		goto Default1;
	TailCall_cMax:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMax:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(58,"cDup cMax", "", "");
			goto Ldo;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(173,
					"y x cMax",
					"[fp_max(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lhd;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(64,
							"B[B==A] cDup A[IsVarOpcode(A)] cMax",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Ldo;
					}
					break;
				case cMax:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(66,
							"B[B==A] cMax A[IsVarOpcode(A)] cMax",
							"B cMax",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMax; */ // redundant, matches cMax @ 2
						goto Ldo;
					}
					break;
				}
			}
		}
		goto Default1;
	TailCall_cMin:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMin:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(57,"cDup cMin", "", "");
			goto Ldo;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(172,
					"y x cMin",
					"[fp_min(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lhe;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(63,
							"B[B==A] cDup A[IsVarOpcode(A)] cMin",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Ldo;
					}
					break;
				case cMin:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(65,
							"B[B==A] cMin A[IsVarOpcode(A)] cMin",
							"B cMin",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMin; */ // redundant, matches cMin @ 2
						goto Ldo;
					}
					break;
				}
			}
		}
		goto Default1;
	TailCall_cMod:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMod:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				if(ByteCodePtr[-1] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(122,
						"y x[x!=Value_t()] cMod",
						"[fp_mod(y,x)]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Lhf;
				}
			}
		}
		goto Default1;
	TailCall_cMul:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMul:
		switch(ByteCodePtr[0])
		{
		case cCsc:
			A = ByteCodePtr[-1];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>3)
			{
				if(ByteCodePtr[-2] == cCos)
				{
					B = ByteCodePtr[-3];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(573,
							"B[B==A] cCos A[IsVarOpcode(A)&&mData->mByteCode.size()>3] cCsc cMul",
							"B cCot",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
						goto Lhg;
					}
				}
			}
			goto Default8;
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(234,"cDup cMul", "cSqr", "");
			goto Lhh;
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(255,"cInv cMul", "cDiv", "");
			goto Lhi;
		case cNeg:
			switch(ByteCodePtr[-1])
			{
			case cDup:
				FP_TRACE_BYTECODE_OPTIMIZATION(532,"cDup cNeg cMul", "cSqr cNeg", "");
				goto Lhj;
			default:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cMul)
					{
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(538,
								"B[B==A] cMul A[IsVarOpcode(A)] cNeg cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lhk;
						}
					}
				}
			}
			goto Default8;
		case cPow:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(370,
						"cDup x cPow cMul",
						"[x+Value_t(1)] cPow",
						"    with x = " << x << "\n");
					goto Lhl;
				}
			}
			goto Default8;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(91,
							"A[IsVarOpcode(A)] cMul x[x==Value_t()] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lhm;
					}
					goto Default9;
				default: Default9:;
					A = ByteCodePtr[-1];
					if(IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						switch(ByteCodePtr[-2])
						{
						case cImmed:
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(90,
								"y A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
								"[x] cMul",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lhn;
						default:
							B = ByteCodePtr[-2];
							if(IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								switch(ByteCodePtr[-3])
								{
								case cImmed:
									y = ImmedPtr[-1];
									FP_TRACE_BYTECODE_OPTIMIZATION(94,
										"y B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
										"A [x] cMul",
										"    with x = " << x
										    << ", A = " << FP_TRACE_OPCODENAME(A)
										    << ", B = " << FP_TRACE_OPCODENAME(B)
										    << ", y = " << y
										    << "\n");
									/* opcode = cMul; */ // redundant, matches cMul @ 0
									goto Lho;
								default:
									C = ByteCodePtr[-3];
									if(IsVarOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(92,
											"C[IsVarOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
											"A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lhp;
									}
									if(IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(93,
											"C[IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
											"B A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lhq;
									}
								}
							}
							if(IsVarOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(88,
									"B[IsVarOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
									"[x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lhm;
							}
							if(IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(89,
									"B[IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
									"A [x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lhr;
							}
						}
					}
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(86,
							"A[IsVarOpcode(A)] x[x==Value_t()] cMul",
							"[x]",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						goto Lhs;
					}
					if(IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(87,
							"A[IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lht;
					}
				}
			}
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				switch(ByteCodePtr[-2])
				{
				case cDup:
					if(x+x==Value_t(1))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(372,
							"cDup[x+x==Value_t(1)] cAdd x cMul",
							"",
							"    with x = " << x << "\n");
						goto Lia;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(373,
						"cDup cAdd x cMul",
						"[x+x] cMul",
						"    with x = " << x << "\n");
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Lib;
				case cMul:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(IsVarOpcode(A))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(445,
								"A[IsVarOpcode(A)] y cMul cAdd x cMul",
								"[x] cMul A [y*x] cMul cAdd",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lic;
						}
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(444,
						"y cAdd x cMul",
						"[x] cMul [y*x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lid;
				}
				break;
			case cDeg:
				FP_TRACE_BYTECODE_OPTIMIZATION(250,
					"cDeg x cMul",
					"[DO_STACKPLUS1] [RadiansToDegrees(x)] cMul",
					"    with x = " << x << "\n");
				incStackPtr();
				--mStackPtr;
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Lie;
			case cDiv:
				B = ByteCodePtr[-2];
				if(IsVarOpcode(B))
				{
					switch(ByteCodePtr[-3])
					{
					case cMul:
						if(ByteCodePtr[-4] == cImmed)
						{
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(334,
								"y cMul B[IsVarOpcode(B)] cDiv x cMul",
								"[y*x] cMul B cDiv",
								"    with x = " << x
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-4] = cImmed; */ // redundant, matches y @ 5
							goto Lif;
						}
						break;
					case cNeg:
						FP_TRACE_BYTECODE_OPTIMIZATION(335,
							"cNeg B[IsVarOpcode(B)] cDiv x cMul",
							"[-x] cMul B cDiv",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						goto Lig;
					case cImmed:
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(333,
							"y B[IsVarOpcode(B)] cDiv x cMul",
							"[y*x] B cDiv",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lih;
					}
				}
				break;
			case cMul:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cDup)
					{
						if(x+x==Value_t(1))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(374,
								"cDup[x+x==Value_t(1)] cAdd cMul x cMul",
								"cMul",
								"    with x = " << x << "\n");
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lii;
						}
						FP_TRACE_BYTECODE_OPTIMIZATION(375,
							"cDup cAdd cMul x cMul",
							"cMul [x+x] cMul",
							"    with x = " << x << "\n");
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lij;
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					if(y*x==Value_t(1))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(68,
							"y[y*x==Value_t(1)] cMul x cMul",
							"",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Lik;
					}
					if((y*x)==fp_const_rad_to_deg<Value_t>())
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(363,
							"y[(y*x)==fp_const_rad_to_deg<Value_t>()] cMul x cMul",
							"cDeg",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Ldd;
					}
					if((y*x)==fp_const_deg_to_rad<Value_t>())
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(364,
							"y[(y*x)==fp_const_deg_to_rad<Value_t>()] cMul x cMul",
							"cRad",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Lde;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(151,
						"y cMul x cMul",
						"[y*x] cMul",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Lil;
				}
				break;
			case cNeg:
				FP_TRACE_BYTECODE_OPTIMIZATION(145,
					"cNeg x cMul",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Lim;
			case cRDiv:
				switch(ByteCodePtr[-2])
				{
				case cMul:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(341,
							"y cMul cRDiv x cMul",
							"[y*x] cMul cRDiv",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lin;
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(342,
						"cNeg cRDiv x cMul",
						"[-x] cMul cRDiv",
						"    with x = " << x << "\n");
					goto Lio;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(340,
						"y cRDiv x cMul",
						"[y*x] cRDiv",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lip;
				}
				break;
			case cRad:
				FP_TRACE_BYTECODE_OPTIMIZATION(251,
					"cRad x cMul",
					"[DO_STACKPLUS1] [DegreesToRadians(x)] cMul",
					"    with x = " << x << "\n");
				incStackPtr();
				--mStackPtr;
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Liq;
			case cSub:
				if(ByteCodePtr[-2] == cMul)
				{
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(IsVarOpcode(A))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(446,
								"A[IsVarOpcode(A)] y cMul cSub x cMul",
								"[x] cMul A [y*x] cMul cSub",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lir;
						}
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(120,
					"y x cMul",
					"[y*x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lis;
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(53,
					"x[x==Value_t(1)] cMul",
					"",
					"    with x = " << x << "\n");
				goto Lbc;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(147,
					"x[x==Value_t(-1)] cMul",
					"cNeg",
					"    with x = " << x << "\n");
				goto Lit;
			}
			if(x==Value_t(2))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(230,
					"x[x==Value_t(2)] cMul",
					"cDup cAdd",
					"    with x = " << x << "\n");
				goto Lja;
			}
			if(x==fp_const_rad_to_deg<Value_t>())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(248,
					"x[x==fp_const_rad_to_deg<Value_t>()] cMul",
					"cDeg",
					"    with x = " << x << "\n");
				goto Ljb;
			}
			if(x==fp_const_deg_to_rad<Value_t>())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(249,
					"x[x==fp_const_deg_to_rad<Value_t>()] cMul",
					"cRad",
					"    with x = " << x << "\n");
				goto Ljc;
			}
			break;
		default: Default8:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDiv:
					B = ByteCodePtr[-2];
					if(IsVarOpcode(B))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(330,
							"B[IsVarOpcode(B)] cDiv A[IsVarOpcode(A)] cMul",
							"[DO_STACKPLUS1] A cMul B cDiv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						incStackPtr();
						--mStackPtr;
						goto Ljd;
					}
					goto Default10;
				case cMul:
					switch(ByteCodePtr[-2])
					{
					case cNeg:
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(535,
								"B[B==A] cNeg cMul A[IsVarOpcode(A)] cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lhk;
						}
						goto Default11;
					default: Default11:;
						B = ByteCodePtr[-2];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(526,
								"B[B==A] cMul A[IsVarOpcode(A)] cMul",
								"B cSqr cMul",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lje;
						}
					}
					goto Default10;
				case cNeg:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(529,
							"B[B==A] cNeg A[IsVarOpcode(A)] cMul",
							"B cSqr cNeg",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lhj;
					}
					goto Default10;
				case cRDiv:
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(323,
							"x cRDiv A[IsVarOpcode(A)] cMul",
							"[DO_STACKPLUS1] A [x] cMul cRDiv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						incStackPtr();
						--mStackPtr;
						goto Ljf;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(337,
						"cRDiv A[IsVarOpcode(A)] cMul",
						"[DO_STACKPLUS1] A cMul cRDiv",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Ljg;
				default: Default10:;
					B = ByteCodePtr[-1];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(523,
							"B[B==A] A[IsVarOpcode(A)] cMul",
							"B cSqr",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-1] = B; */ // redundant, matches B @ 2
						goto Lhh;
					}
				}
			}
			if(IsUnaryOpcode(A))
			{
				B = ByteCodePtr[-1];
				if(IsVarOpcode(B)&&mData->mByteCode.size()>1)
				{
					if(ByteCodePtr[-2] == cMul)
					{
						C = ByteCodePtr[-3];
						if(C==A)
						{
							D = ByteCodePtr[-4];
							if(D==B)
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(542,
									"D[D==B] C[C==A] cMul B[IsVarOpcode(B)&&mData->mByteCode.size()>1] A[IsUnaryOpcode(A)] cMul",
									"D C cSqr cMul",
									"    with A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << ", C = " << FP_TRACE_OPCODENAME(C)
									    << ", D = " << FP_TRACE_OPCODENAME(D)
									    << "\n");
								/* ByteCodePtr[-4] = D; */ // redundant, matches D @ 5
								/* ByteCodePtr[-3] = C; */ // redundant, matches C @ 4
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Ljh;
							}
						}
					}
				}
			}
		}
		goto Default1;
	TailCall_cNEqual:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(419,
						"cAbs x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Lji;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(421,
						"cSqr x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Lji;
				default:
					A = ByteCodePtr[-1];
					if(IsLogicalOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(487,
							"A[IsLogicalOpcode(A)] x[x==Value_t(0)] cNEqual",
							"A",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lbc;
					}
				}
			}
			if(x==Value_t(1))
			{
				A = ByteCodePtr[-1];
				if(IsLogicalOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(485,
						"A[IsLogicalOpcode(A)] x[x==Value_t(1)] cNEqual",
						"A cNot",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					goto Ldl;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(139,
					"y x cNEqual",
					"[fp_nequal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ljj;
			}
		}
		goto Default1;
	TailCall_cNeg:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNeg:
		switch(ByteCodePtr[0])
		{
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(146,
					"x cMul cNeg",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Ljk;
			}
			break;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(59,"cNeg cNeg", "", "");
			goto Ldo;
		case cSin:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(300,
						"x cMul cSin cNeg",
						"[-x] cMul cSin",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Ljl;
				}
			}
			break;
		case cSinh:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(301,
						"x cMul cSinh cNeg",
						"[-x] cMul cSinh",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Ljm;
				}
			}
			break;
		case cTan:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(302,
						"x cMul cTan cNeg",
						"[-x] cMul cTan",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Ljn;
				}
			}
			break;
		case cTanh:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(303,
						"x cMul cTanh cNeg",
						"[-x] cMul cTanh",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Ljo;
				}
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(118,
				"x cNeg",
				"[-x]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Ljp;
		}
		goto Default1;
	TailCall_cNot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNot:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(283,"cAbs cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Ljq;
		case cAbsNot:
			A = ByteCodePtr[-1];
			if(IsLogicalOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(448,
					"A[IsLogicalOpcode(A)] cAbsNot cNot",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Ldo;
			}
			if(A!=cImmed)
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(449,
					"A[A!=cImmed] cAbsNot cNot",
					"A cAbsNotNot",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Ljr;
			}
			goto Default12;
		case cAbsNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(287,"cAbsNotNot cNot", "cAbsNot", "");
			goto Ljs;
		case cEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(261,"cEqual cNot", "cNEqual", "");
			goto Ljt;
		case cGreater:
			FP_TRACE_BYTECODE_OPTIMIZATION(259,"cGreater cNot", "cLessOrEq", "");
			goto Lka;
		case cGreaterOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(260,"cGreaterOrEq cNot", "cLess", "");
			goto Lkb;
		case cLess:
			FP_TRACE_BYTECODE_OPTIMIZATION(257,"cLess cNot", "cGreaterOrEq", "");
			goto Lkc;
		case cLessOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(258,"cLessOrEq cNot", "cGreater", "");
			goto Lkd;
		case cNEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(262,"cNEqual cNot", "cEqual", "");
			goto Lke;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(282,"cNeg cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Ljq;
		case cNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(285,"cNot cNot", "cNotNot", "");
			goto Lbg;
		case cNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(286,"cNotNot cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Ljq;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(125,
				"x cNot",
				"[fp_not(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lkf;
		default: Default12:;
			A = ByteCodePtr[0];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(450,
					"A[IsNeverNegativeValueOpcode(A)] cNot",
					"A cAbsNot",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				goto Lkg;
			}
		}
		goto Default1;
	TailCall_cNotNot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNotNot:
		if(ByteCodePtr[0] == cNot)
		{
			FP_TRACE_BYTECODE_OPTIMIZATION(288,"cNot cNotNot", "cNot", "");
			/* ByteCodePtr[0] = cNot; */ // redundant, matches cNot @ 1
			return;
		}
		goto Default1;
	TailCall_cOr:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cOr:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(279,"cDup cOr", "cNotNot", "");
			goto Lbg;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(141,
					"y x cOr",
					"[fp_or(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lkh;
			}
			break;
		}
		goto Default1;
	TailCall_cPow:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cPow:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(!isEvenInteger(x+x))
			{
				if(ByteCodePtr[-1] == cSqr)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(22,
						"cSqr x[!isEvenInteger(x+x)] cPow",
						"cAbs [x+x] cPow",
						"    with x = " << x << "\n");
					/* opcode = cPow; */ // redundant, matches cPow @ 0
					goto Lki;
				}
			}
			if(isInteger(x))
			{
				switch(ByteCodePtr[-1])
				{
				case cExp:
					FP_TRACE_BYTECODE_OPTIMIZATION(41,
						"cExp x[isInteger(x)] cPow",
						"[x] cMul cExp",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					goto Lkj;
				case cExp2:
					FP_TRACE_BYTECODE_OPTIMIZATION(42,
						"cExp2 x[isInteger(x)] cPow",
						"[x] cMul cExp2",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					goto Lkk;
				case cPow:
					if(ByteCodePtr[-2] == cImmed)
					{
						y = ImmedPtr[-1];
						if(!isInteger(y))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(40,
								"y[!isInteger(y)] cPow x[isInteger(x)] cPow",
								"[y*x] cPow",
								"    with x = " << x
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cPow; */ // redundant, matches cPow @ 0
							goto Lkl;
						}
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(43,
						"cPow x[isInteger(x)] cPow",
						"[x] cMul cPow",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cPow; */ // redundant, matches cPow @ 0
					goto Lkm;
				}
			}
			if(isEvenInteger(x))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(499,
						"cAbs x[isEvenInteger(x)] cPow",
						"[x] cPow",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cPow; */ // redundant, matches cPow @ 0
					goto Lkn;
				case cMul:
					if(ByteCodePtr[-2] == cAbs)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(500,
							"cAbs cMul x[isEvenInteger(x)] cPow",
							"cMul [x] cPow",
							"    with x = " << x << "\n");
						/* opcode = cPow; */ // redundant, matches cPow @ 0
						goto Lko;
					}
					break;
				}
			}
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(81,
					"x[x==Value_t()] cPow",
					"[DO_STACKPLUS1] [Value_t()] cMul [Value_t(1)] cAdd",
					"    with x = " << x << "\n");
				incStackPtr();
				--mStackPtr;
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lkp;
			}
			if(x==fp_const_preciseDouble<Value_t>(0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(388,
					"x[x==fp_const_preciseDouble<Value_t>(0.5)] cPow",
					"cSqrt",
					"    with x = " << x << "\n");
				goto Lkq;
			}
			if(x==fp_inv(Value_t(3)))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(389,
					"x[x==fp_inv(Value_t(3))] cPow",
					"cCbrt",
					"    with x = " << x << "\n");
				goto Lkr;
			}
			if(x==fp_inv(Value_t(-3)))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(390,
					"x[x==fp_inv(Value_t(-3))] cPow",
					"cCbrt cInv",
					"    with x = " << x << "\n");
				goto Lks;
			}
			if(x==fp_const_preciseDouble<Value_t>(-0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(391,
					"x[x==fp_const_preciseDouble<Value_t>(-0.5)] cPow",
					"cRSqrt",
					"    with x = " << x << "\n");
				goto Lkt;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(392,
					"x[x==Value_t(-1)] cPow",
					"cInv",
					"    with x = " << x << "\n");
				goto Lla;
			}
			switch(ByteCodePtr[-1])
			{
			case cPow:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					if(isEvenInteger(y)&&!isEvenInteger(x*y))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(21,
							"y[isEvenInteger(y)&&!isEvenInteger(x*y)] cPow x cPow",
							"cAbs [y*x] cPow",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* opcode = cPow; */ // redundant, matches cPow @ 0
						goto Llb;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(386,
						"y cPow x cPow",
						"[y*x] cPow",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cPow; */ // redundant, matches cPow @ 0
					goto Lkl;
				}
				break;
			case cSqr:
				FP_TRACE_BYTECODE_OPTIMIZATION(44,
					"cSqr x cPow",
					"[x+x] cPow",
					"    with x = " << x << "\n");
				/* opcode = cPow; */ // redundant, matches cPow @ 0
				goto Llc;
			case cImmed:
				y = ImmedPtr[-1];
				if(y!=Value_t(0)||x>=Value_t(0))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(197,
						"y[y!=Value_t(0)||x>=Value_t(0)] x cPow",
						"[fp_pow(y,x)]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Lld;
				}
				break;
			}
			FP_TRACE_BYTECODE_OPTIMIZATION(520,
				"x cPow",
				"[DO_POWI]",
				"    with x = " << x << "\n");
			if(TryCompilePowi(x))
			  return;
		}
		goto Default1;
	TailCall_cRDiv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRDiv:
		switch(ByteCodePtr[0])
		{
		case cSinCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(568,"cSinCos cRDiv", "cCot", "");
			goto Lge;
		case cSinhCosh:
			FP_TRACE_BYTECODE_OPTIMIZATION(575,"cSinhCosh cRDiv", "cTanh cInv", "");
			goto Lle;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(324,
					"x[x==Value_t(1)] cRDiv",
					"cInv",
					"    with x = " << x << "\n");
				goto Lla;
			}
			break;
		}
		goto Default1;
	TailCall_cRSqrt:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRSqrt:
		switch(ByteCodePtr[0])
		{
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(242,"cInv cRSqrt", "cSqrt", "");
			goto Lga;
		case cSqr:
			FP_TRACE_BYTECODE_OPTIMIZATION(244,"cSqr cRSqrt", "cInv cAbs", "");
			goto Llf;
		}
		goto Default1;
	TailCall_cRSub:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRSub:
		if(ByteCodePtr[0] == cDup)
		{
			FP_TRACE_BYTECODE_OPTIMIZATION(75,"cDup cRSub", "[Value_t()] cMul", "");
			goto Llg;
		}
		goto Default1;
	TailCall_cRad:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRad:
		switch(ByteCodePtr[0])
		{
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(252,
					"x cMul cRad",
					"[DO_STACKPLUS1] [DegreesToRadians(x)] cMul",
					"    with x = " << x << "\n");
				incStackPtr();
				--mStackPtr;
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Llh;
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(166,
				"x cRad",
				"[DegreesToRadians(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lli;
		}
		goto Default1;
	TailCall_cSec:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSec:
		switch(ByteCodePtr[0])
		{
		case cAtan:
			FP_TRACE_BYTECODE_OPTIMIZATION(580,"cAtan cSec", "cSqr [DO_STACKPLUS1] [Value_t(1)] cAdd cSqrt", "");
			incStackPtr();
			--mStackPtr;
			goto Lcd;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				switch(ByteCodePtr[-1])
				{
				case cCos:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(562,
							"B[B==A] cCos A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cSec",
							"B cCos cDup cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cCos; */ // redundant, matches cCos @ 2
						goto Lca;
					}
					break;
				case cSin:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(560,
							"B[B==A] cSin A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cSec",
							"B cSinCos cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Llj;
					}
					break;
				}
			}
		}
		goto Default1;
	TailCall_cSin:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSin:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(296,"cNeg cSin", "cSin cNeg", "");
			goto Llk;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(191,
				"x cSin",
				"[fp_sin(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lll;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				if(ByteCodePtr[-1] == cCsc)
				{
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(564,
							"B[B==A] cCsc A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cSin",
							"B cCsc cDup cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cCsc; */ // redundant, matches cCsc @ 2
						goto Lca;
					}
				}
			}
		}
		goto Default1;
	TailCall_cSinh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSinh:
		switch(ByteCodePtr[0])
		{
		case cAcosh:
			FP_TRACE_BYTECODE_OPTIMIZATION(502,"cAcosh cSinh", "[DO_STACKPLUS1] cSqr [Value_t(-1)] cAdd cSqrt", "");
			incStackPtr();
			--mStackPtr;
			goto Llm;
		case cAsinh:
			FP_TRACE_BYTECODE_OPTIMIZATION(405,"cAsinh cSinh", "", "");
			goto Ldo;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(297,"cNeg cSinh", "cSinh cNeg", "");
			goto Lln;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(192,
				"x cSinh",
				"[fp_sinh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Llo;
		}
		goto Default1;
	TailCall_cSqr:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSqr:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(236,"cAbs cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Llp;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(235,"cNeg cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Llp;
		case cRSqrt:
			FP_TRACE_BYTECODE_OPTIMIZATION(243,"cRSqrt cSqr", "cInv", "");
			goto Llq;
		case cSqrt:
			A = ByteCodePtr[-1];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(394,
					"A[IsNeverNegativeValueOpcode(A)] cSqrt cSqr",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Ldo;
			}
			goto Default13;
		default: Default13:;
			A = ByteCodePtr[0];
			if(IsComparisonOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(590,
					"A[IsComparisonOpcode(A)] cSqr",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default1;
	TailCall_cSqrt:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSqrt:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cSqr)
			{
				A = ByteCodePtr[-2];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-3] == cSqr)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(577,
							"cSqr A[IsVarOpcode(A)] cSqr cAdd cSqrt",
							"A cHypot",
							"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
						goto Llr;
					}
				}
				B = ByteCodePtr[-2];
				if(IsUnaryOpcode(B))
				{
					A = ByteCodePtr[-3];
					if(IsVarOpcode(A))
					{
						if(ByteCodePtr[-4] == cSqr)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(578,
								"cSqr A[IsVarOpcode(A)] B[IsUnaryOpcode(B)] cSqr cAdd cSqrt",
								"A B cHypot",
								"    with B = " << FP_TRACE_OPCODENAME(B)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lls;
						}
					}
				}
			}
			break;
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(240,"cInv cSqrt", "cRSqrt", "");
			goto Lgd;
		case cSqr:
			FP_TRACE_BYTECODE_OPTIMIZATION(238,"cSqr cSqrt", "cAbs", "");
			goto Llt;
		case cImmed:
			x = ImmedPtr[0];
			if(x>=Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(193,
					"x[x>=Value_t(0)] cSqrt",
					"[fp_sqrt(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lma;
			}
			break;
		}
		goto Default1;
	TailCall_cSub:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSub:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(74,"cDup cSub", "[Value_t()] cMul", "");
			goto Llg;
		case cMul:
			switch(ByteCodePtr[-1])
			{
			case cImmed:
				x = ImmedPtr[0];
				A = ByteCodePtr[-2];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-3] == cMul)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(273,
							"cMul A[IsVarOpcode(A)] x cMul cSub",
							"A [DO_STACKPLUS2] [x] cFmms",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						incStackPtr();
						incStackPtr();
						--mStackPtr;
						--mStackPtr;
						goto Lmb;
					}
				}
				break;
			default:
				B = ByteCodePtr[-1];
				if(IsVarOpcode(B))
				{
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						if(ByteCodePtr[-3] == cMul)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(269,
								"cMul A[IsVarOpcode(A)] B[IsVarOpcode(B)] cMul cSub",
								"A [DO_STACKPLUS2] B cFmms",
								"    with B = " << FP_TRACE_OPCODENAME(B)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							incStackPtr();
							incStackPtr();
							--mStackPtr;
							--mStackPtr;
							goto Lmc;
						}
					}
				}
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						if(ByteCodePtr[-3] == cMul)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(271,
								"cMul x A[IsVarOpcode(A)] cMul cSub",
								"[x] [DO_STACKPLUS2] A cFmms",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", x = " << x
								    << "\n");
							incStackPtr();
							incStackPtr();
							--mStackPtr;
							--mStackPtr;
							goto Lmd;
						}
					}
				}
			}
			goto Default14;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(232,"cNeg cSub", "cAdd", "");
			goto Lme;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(56,
					"x[x==Value_t()] cSub",
					"",
					"    with x = " << x << "\n");
				goto Lbc;
			}
			switch(ByteCodePtr[-1])
			{
			case cFma:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(155,
						"y cFma x cSub",
						"[y-x] cFma",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lmf;
				}
				break;
			case cMul:
				FP_TRACE_BYTECODE_OPTIMIZATION(267,
					"cMul x cSub",
					"[DO_STACKPLUS1] [x] cFms",
					"    with x = " << x << "\n");
				incStackPtr();
				--mStackPtr;
				/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
				goto Lmg;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(124,
					"y x cSub",
					"[y-x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lmh;
			}
			FP_TRACE_BYTECODE_OPTIMIZATION(49,
				"x cSub",
				"[-x] cAdd",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lmi;
		default: Default14:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					FP_TRACE_BYTECODE_OPTIMIZATION(265,
						"cMul A[IsVarOpcode(A)] cSub",
						"[DO_STACKPLUS1] A cFms",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Lmj;
				case cRSub:
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(345,
							"x cRSub A[IsVarOpcode(A)] cSub",
							"A cAdd [x] cRSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Lmk;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(352,
						"cRSub A[IsVarOpcode(A)] cSub",
						"[DO_STACKPLUS1] A cSub cRSub",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Lml;
				}
			}
		}
		goto Default1;
	TailCall_cTan:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cTan:
		switch(ByteCodePtr[0])
		{
		case cAtan2:
			FP_TRACE_BYTECODE_OPTIMIZATION(411,"cAtan2 cTan", "cDiv", "");
			goto Lhi;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(298,"cNeg cTan", "cTan cNeg", "");
			goto Lmm;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(195,
				"x cTan",
				"[fp_tan(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lmn;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				if(ByteCodePtr[-1] == cCot)
				{
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(566,
							"B[B==A] cCot A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cTan",
							"B cCot cDup cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cCot; */ // redundant, matches cCot @ 2
						goto Lca;
					}
				}
			}
		}
		goto Default1;
	TailCall_cTanh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cTanh:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(299,"cNeg cTanh", "cTanh cNeg", "");
			goto Lmo;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(196,
				"x cTanh",
				"[fp_tanh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lmp;
		}
		goto Default1;
	TailCall_cTrunc:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cTrunc:
		switch(ByteCodePtr[0])
		{
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(170,
				"x cTrunc",
				"[fp_trunc(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lmq;
		default:
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(452,
					"A[IsAlwaysIntegerOpcode(A)] cTrunc",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default1;
	default: Default1:;
		A = opcode;
		if(IsComparisonOpcode(A))
		{
			if(ByteCodePtr[0] == cImmed)
			{
				x = ImmedPtr[0];
				switch(ByteCodePtr[-1])
				{
				case cAdd:
					if(ByteCodePtr[-2] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(423,
							"y cAdd x A[IsComparisonOpcode(A)]",
							"[x-y] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
						goto Lmr;
					}
					break;
				case cAtan:
					if(fp_abs(x)<fp_const_pi<Value_t>()*fp_const_preciseDouble<Value_t>(0.5))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(439,
							"cAtan[fp_abs(x)<fp_const_pi<Value_t>()*fp_const_preciseDouble<Value_t>(0.5)] x A[IsComparisonOpcode(A)]",
							"[fp_tan(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Lms;
					}
					break;
				case cExp:
					if(x>Value_t(0))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(429,
							"cExp[x>Value_t(0)] x A[IsComparisonOpcode(A)]",
							"[fp_log(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Lmt;
					}
					break;
				case cExp2:
					if(x>Value_t(0))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(430,
							"cExp2[x>Value_t(0)] x A[IsComparisonOpcode(A)]",
							"[fp_log2(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Lna;
					}
					break;
				case cLog:
					B = ByteCodePtr[-2];
					if(IsNeverNegativeValueOpcode(B))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(432,
							"B[IsNeverNegativeValueOpcode(B)] cLog x A[IsComparisonOpcode(A)]",
							"B [fp_exp(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lnb;
					}
					break;
				case cLog10:
					B = ByteCodePtr[-2];
					if(IsNeverNegativeValueOpcode(B))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(434,
							"B[IsNeverNegativeValueOpcode(B)] cLog10 x A[IsComparisonOpcode(A)]",
							"B [fp_pow(Value_t(10),x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lnc;
					}
					break;
				case cLog2:
					B = ByteCodePtr[-2];
					if(IsNeverNegativeValueOpcode(B))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(433,
							"B[IsNeverNegativeValueOpcode(B)] cLog2 x A[IsComparisonOpcode(A)]",
							"B [fp_exp2(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lnd;
					}
					break;
				case cMul:
					if(ByteCodePtr[-2] == cImmed)
					{
						y = ImmedPtr[-1];
						if(y>Value_t(0))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(425,
								"y[y>Value_t(0)] cMul x A[IsComparisonOpcode(A)]",
								"[x/y] A",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", x = " << x
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							goto Lne;
						}
						if(y<Value_t(0))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(426,
								"y[y<Value_t(0)] cMul x A[IsComparisonOpcode(A)]",
								"[x/y] {OppositeComparisonOpcode(A)}",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", x = " << x
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							goto Lnf;
						}
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(424,
						"cNeg x A[IsComparisonOpcode(A)]",
						"[-x] {OppositeComparisonOpcode(A)}",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", x = " << x
						    << "\n");
					goto Lng;
				case cPow:
					if(x>Value_t(0))
					{
						if(ByteCodePtr[-2] == cImmed)
						{
							y = ImmedPtr[-1];
							if(y>Value_t(0))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(427,
									"y[y>Value_t(0)] cPow[x>Value_t(0)] x A[IsComparisonOpcode(A)]",
									"[fp_pow(x,fp_inv(y))] A",
									"    with A = " << FP_TRACE_OPCODENAME(A)
									    << ", x = " << x
									    << ", y = " << y
									    << "\n");
								/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
								goto Lnh;
							}
						}
					}
					break;
				case cSinh:
					FP_TRACE_BYTECODE_OPTIMIZATION(440,
						"cSinh x A[IsComparisonOpcode(A)]",
						"[fp_asinh(x)] A",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", x = " << x
						    << "\n");
					goto Lni;
				case cSqr:
					if(x>Value_t(0))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(428,
							"cSqr[x>Value_t(0)] x A[IsComparisonOpcode(A)]",
							"cAbs [fp_sqrt(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Lnj;
					}
					break;
				case cTanh:
					if(fp_abs(x)<Value_t(1))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(441,
							"cTanh[fp_abs(x)<Value_t(1)] x A[IsComparisonOpcode(A)]",
							"[fp_atanh(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Lnk;
					}
					break;
				}
			}
		}
		if(IsVarOpcode(A)&&mData->mByteCode.size()>0)
		{
			B = ByteCodePtr[0];
			if(B==A)
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(540,
					"B[B==A] A[IsVarOpcode(A)&&mData->mByteCode.size()>0]",
					"B cDup",
					"    with A = " << FP_TRACE_OPCODENAME(A)
					    << ", B = " << FP_TRACE_OPCODENAME(B)
					    << "\n");
				/* ByteCodePtr[0] = B; */ // redundant, matches B @ 1
				goto Lnl;
			}
		}
		if(IsUnaryOpcode(A))
		{
			B = ByteCodePtr[0];
			if(IsVarOpcode(B)&&mData->mByteCode.size()>1)
			{
				C = ByteCodePtr[-1];
				if(C==A)
				{
					D = ByteCodePtr[-2];
					if(D==B)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(541,
							"D[D==B] C[C==A] B[IsVarOpcode(B)&&mData->mByteCode.size()>1] A[IsUnaryOpcode(A)]",
							"D C cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", C = " << FP_TRACE_OPCODENAME(C)
							    << ", D = " << FP_TRACE_OPCODENAME(D)
							    << "\n");
						/* ByteCodePtr[-2] = D; */ // redundant, matches D @ 3
						/* ByteCodePtr[-1] = C; */ // redundant, matches C @ 2
						goto Lnm;
					}
				}
			}
		}
		C = opcode;
		if(IsCommutativeOrParamSwappableBinaryOpcode(C))
		{
			switch(ByteCodePtr[0])
			{
			case cSin:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A)&&mData->mByteCode.size()>3)
				{
					if(ByteCodePtr[-2] == cCos)
					{
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(570,
								"B[B==A] cCos A[IsVarOpcode(A)&&mData->mByteCode.size()>3] cSin C[IsCommutativeOrParamSwappableBinaryOpcode(C)]",
								"B cSinCos {GetParamSwappedBinaryOpcode(C)}",
								"    with C = " << FP_TRACE_OPCODENAME(C)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lnn;
						}
					}
				}
				break;
			case cSinh:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A)&&mData->mByteCode.size()>3)
				{
					if(ByteCodePtr[-2] == cCosh)
					{
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(571,
								"B[B==A] cCosh A[IsVarOpcode(A)&&mData->mByteCode.size()>3] cSinh C[IsCommutativeOrParamSwappableBinaryOpcode(C)]",
								"B cSinhCosh {GetParamSwappedBinaryOpcode(C)}",
								"    with C = " << FP_TRACE_OPCODENAME(C)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lno;
						}
					}
				}
				break;
			}
		}
	}
	goto Laa;
Laa: mData->mByteCode.push_back(opcode); return;
Lab: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lnp: FP_TRACE_BYTECODE_ADD(cAbs);
     goto TailCall_cAbs;
Lac: ImmedPtr[0] = fp_abs(x); return;
Lad: ImmedPtr[0] = fp_acos(x); return;
Lae: ImmedPtr[0] = fp_acosh(x); return;
Laf: mData->mImmed.push_back(Value_t(4));
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
Lnq: opcode = cMul;
Lnr: FP_ReDefinePointers();
Lns: FP_TRACE_BYTECODE_ADD(cMul);
     goto TailCall_cMul;
Lag: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(Value_t(4));
Lnt: mData->mByteCode.push_back(cImmed); goto Lnq;
Lah: ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
Lgg: opcode = cMul; goto Lns;
Lai: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed);
Loa: opcode = cFmma;
Lob: FP_ReDefinePointers();
Loc: FP_TRACE_BYTECODE_ADD(cFmma);
     goto TailCall_cFmma;
Laj: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(B); goto Loa;
Lak: ImmedPtr[0] = x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Loa;
Lal: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSub;
Lod: FP_TRACE_BYTECODE_ADD(cSub);
     goto TailCall_cSub;
Lam: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Loe: FP_ReDefinePointers();
Lof: FP_TRACE_BYTECODE_ADD(cAdd);
     goto TailCall_cAdd;
Lan: ImmedPtr[-1] = y+x;
Log: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Loh: opcode = cFma;
     FP_ReDefinePointers();
Loi: FP_TRACE_BYTECODE_ADD(cFma);
     goto TailCall_cFma;
Lao: ByteCodePtr[-1] = cImmed;
Lfg: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Loj: opcode = cFma; goto Loi;
Lap: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Lok: AddFunctionOpcode(cAdd);
Lol: opcode = cRSub;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cRSub);
     goto TailCall_cRSub;
Laq: ImmedPtr[0] = -x;
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lok;
Lar: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lol;
Las: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lom: AddFunctionOpcode(cAdd);
Lon: AddFunctionOpcode(B);
Loo: opcode = cSub;
     FP_ReDefinePointers(); goto Lod;
Lat: ImmedPtr[0] = -x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lom;
Lba: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lon;
Lbb: ImmedPtr[-1] = y+x;
Lbc: mData->mImmed.pop_back();
Ldo: mData->mByteCode.pop_back(); return;
Lbd: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Loh;
Lbe: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lok;
Lbf: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lok;
Lbg: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cNotNot;
Lop: FP_TRACE_BYTECODE_ADD(cNotNot);
     goto TailCall_cNotNot;
Lbh: ImmedPtr[-1] = fp_and(x,y); goto Lbc;
Lbi: ImmedPtr[0] = fp_asin(x); return;
Lbj: ImmedPtr[0] = fp_asinh(x); return;
Lbk: ImmedPtr[0] = fp_atan(x); return;
Lbl: ImmedPtr[-1] = fp_atan2(y,x); goto Lbc;
Lbm: ImmedPtr[0] = fp_atanh(x); return;
Lbn: ImmedPtr[0] = fp_cbrt(x); return;
Lbo: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cCeil);
Loq: AddFunctionOpcode(A);
     AddFunctionOpcode(B);
Lor: opcode = cAdd; goto Loe;
Lbp: mData->mByteCode.pop_back();
     AddFunctionOpcode(cFloor);
Los: opcode = cNeg;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cNeg);
     goto TailCall_cNeg;
Lbq: ImmedPtr[0] = fp_ceil(x); return;
Lbr: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lot: FP_TRACE_BYTECODE_ADD(cCos);
     goto TailCall_cCos;
Lbs: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSqr);
     mData->mImmed.push_back(Value_t(1));
Lpa: mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cAdd);
Lpb: opcode = cRSqrt;
     FP_ReDefinePointers();
Lpc: FP_TRACE_BYTECODE_ADD(cRSqrt);
     goto TailCall_cRSqrt;
Lbt: ImmedPtr[0] = fp_cos(x); return;
Lca: ByteCodePtr[0] = cDup;
Lpd: opcode = cInv;
Lpe: FP_TRACE_BYTECODE_ADD(cInv);
     goto TailCall_cInv;
Lcb: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinCos); return;
Lcc: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     FP_TRACE_BYTECODE_ADD(cCosh);
     goto TailCall_cCosh;
Lcd: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSqr);
Lpf: mData->mImmed.push_back(Value_t(1));
Lpg: mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cAdd);
Lph: opcode = cSqrt;
     FP_ReDefinePointers();
Lpi: FP_TRACE_BYTECODE_ADD(cSqrt);
     goto TailCall_cSqrt;
Lce: ImmedPtr[0] = fp_cosh(x); return;
Lcf: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinhCosh); return;
Lcg: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSqr);
     AddFunctionOpcode(cInv); goto Lpf;
Lch: ImmedPtr[0] = RadiansToDegrees(x); return;
Lci: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSec); goto Lnq;
Lcj: mData->mByteCode.pop_back();
     AddFunctionOpcode(cTan); goto Lnq;
Lck: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSin); goto Lnq;
Lcl: mData->mImmed.push_back(Value_t());
     ByteCodePtr[0] = cImmed;
Lpj: AddFunctionOpcode(cMul);
     mData->mImmed.push_back(Value_t(1));
Lpk: mData->mByteCode.push_back(cImmed); goto Lor;
Lcm: mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     AddFunctionOpcode(cExp); goto Lnq;
Lcn: mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     AddFunctionOpcode(cExp2); goto Lnq;
Lco: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lgg;
Lcp: mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     AddFunctionOpcode(cPow); goto Lnq;
Lcq: mData->mByteCode.pop_back();
     AddFunctionOpcode(cCos); goto Lnq;
Lcr: mData->mByteCode.pop_back();
     AddFunctionOpcode(cCsc); goto Lnq;
Lcs: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cTan;
Lpl: FP_TRACE_BYTECODE_ADD(cTan);
     goto TailCall_cTan;
Lct: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cTanh;
Lpm: FP_TRACE_BYTECODE_ADD(cTanh);
     goto TailCall_cTanh;
Lda: mData->mByteCode.pop_back();
     AddFunctionOpcode(cCot); goto Lnq;
Ldb: ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lpn: FP_TRACE_BYTECODE_ADD(cDiv);
     goto TailCall_cDiv;
Ldc: ImmedPtr[-1] = y/x; goto Lbc;
Ldd: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Lpo: opcode = cDeg;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cDeg);
     goto TailCall_cDeg;
Lde: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Lpp: opcode = cRad;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cRad);
     goto TailCall_cRad;
Ldf: ImmedPtr[-1] = y/x;
Lem: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lnq;
Ldg: ImmedPtr[0] = fp_inv(x); goto Lgg;
Ldh: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cMul);
Lpq: FP_ReDefinePointers(); goto Lpn;
Ldi: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed);
Lpr: opcode = cRDiv;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cRDiv);
     goto TailCall_cRDiv;
Ldj: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(B); goto Lpr;
Ldk: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lps: FP_TRACE_BYTECODE_ADD(cEqual);
     goto TailCall_cEqual;
Ldl: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
Lpt: opcode = cNot;
     FP_ReDefinePointers();
Lqa: FP_TRACE_BYTECODE_ADD(cNot);
     goto TailCall_cNot;
Ldm: ImmedPtr[-1] = fp_equal(y,x); goto Lbc;
Ldn: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cExp);
     mData->mImmed.push_back(fp_exp(x)); goto Lnt;
Ldp: ImmedPtr[0] = fp_exp(x); return;
Ldq: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cExp2);
     mData->mImmed.push_back(fp_exp2(x)); goto Lnt;
Ldr: ImmedPtr[0] = fp_exp2(x); return;
Lds: mData->mImmed.push_back(fp_log(Value_t(2)));
     mData->mByteCode.push_back(cImmed);
Lqb: AddFunctionOpcode(cMul);
     opcode = cExp;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cExp);
     goto TailCall_cExp;
Ldt: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cFloor); goto Loq;
Lea: mData->mByteCode.pop_back();
     AddFunctionOpcode(cCeil); goto Los;
Leb: ImmedPtr[0] = fp_floor(x); return;
Lec: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cFms;
Lqc: FP_TRACE_BYTECODE_ADD(cFms);
     goto TailCall_cFms;
Led: ImmedPtr[-2] = y*x+a;
Lqd: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} return;
Lee: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lnq;
Lef: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cFmms;
Lqe: FP_TRACE_BYTECODE_ADD(cFmms);
     goto TailCall_cFmms;
Leg: ByteCodePtr[-2] = cImmed;
Lqf: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lqg: AddFunctionOpcode(cMul); goto Lob;
Leh: ImmedPtr[-1] = x;
     mData->mImmed.pop_back(); goto Lqf;
Lei: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
Lqh: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lqi: AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lqg;
Lej: mData->mImmed.pop_back(); goto Lqh;
Lek: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(B); goto Lqi;
Lel: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lqi;
Len: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back(); goto Lqg;
Leo: ImmedPtr[-3] = y*x+a*b;
Lqj: for(unsigned tmp=3; tmp-->0; ) {mData->mImmed.pop_back();}
Lqk: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} return;
Lep: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Loh;
Leq: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
Lql: opcode = cFms;
     FP_ReDefinePointers(); goto Lqc;
Ler: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cFmma; goto Loc;
Les: ByteCodePtr[-2] = cImmed;
Lqm: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lqn: AddFunctionOpcode(cMul);
Lqo: FP_ReDefinePointers(); goto Lqe;
Let: ImmedPtr[-1] = x;
     mData->mImmed.pop_back(); goto Lqm;
Lfa: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
Lqp: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lqq: AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lqn;
Lfb: mData->mImmed.pop_back(); goto Lqp;
Lfc: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(B); goto Lqq;
Lfd: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lqq;
Lfe: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back(); goto Lqn;
Lff: ImmedPtr[-3] = y*x-a*b; goto Lqj;
Lfh: ImmedPtr[-2] = y*x-a; goto Lqd;
Lfi: ImmedPtr[0] = -x; goto Loj;
Lfj: ImmedPtr[-1] = fp_less(x,y); goto Lbc;
Lfk: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
Lkg: AddFunctionOpcode(cAbsNot); return;
Lfl: ImmedPtr[0] = fp_const_preciseDouble<Value_t>(0.5)/x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cMul);
     opcode = cNotNot;
     FP_ReDefinePointers(); goto Lop;
Lfm: ImmedPtr[-1] = fp_lessOrEq(x,y); goto Lbc;
Lfn: mData->mImmed.pop_back();
Ljr: mData->mByteCode.pop_back();
Lqr: AddFunctionOpcode(cAbsNotNot); return;
Lfo: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cSqr);
     mData->mImmed.push_back(x*x); goto Lpg;
Lfp: ImmedPtr[0] = fp_int(x); return;
Lfq: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSec;
     FP_TRACE_BYTECODE_ADD(cSec);
     goto TailCall_cSec;
Lfr: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSin;
Lqs: FP_TRACE_BYTECODE_ADD(cSin);
     goto TailCall_cSin;
Lfs: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr);
     mData->mImmed.push_back(x*x); goto Lpa;
Lft: mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     opcode = cPow;
Lqt: FP_ReDefinePointers();
Lra: FP_TRACE_BYTECODE_ADD(cPow);
     goto TailCall_cPow;
Lga: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSqrt; goto Lpi;
Lgb: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cCos; goto Lot;
Lgc: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cCsc;
     FP_TRACE_BYTECODE_ADD(cCsc);
     goto TailCall_cCsc;
Lgd: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cRSqrt; goto Lpc;
Lge: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lrb: opcode = cCot;
     FP_TRACE_BYTECODE_ADD(cCot);
     goto TailCall_cCot;
Lgf: ImmedPtr[0] = fp_inv(x); return;
Lgh: ImmedPtr[0] = fp_const_preciseDouble<Value_t>(0.5)/x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cMul); goto Lpt;
Lgi: ImmedPtr[-1] = fp_less(y,x); goto Lbc;
Lgj: mData->mImmed.pop_back();
Ljs: mData->mByteCode.pop_back(); goto Lkg;
Lgk: ImmedPtr[-1] = fp_lessOrEq(y,x); goto Lbc;
Lgl: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg); goto Lqr;
Lgm: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cLog);
     mData->mImmed.push_back(fp_log(x)); goto Lpk;
Lgn: mData->mByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     AddFunctionOpcode(cLog);
Lrc: mData->mByteCode.push_back(cDup); goto Lor;
Lgo: ImmedPtr[0] = fp_log(x); return;
Lgp: mData->mImmed.push_back(fp_log10(fp_const_e<Value_t>()));
Lrd: ByteCodePtr[0] = cImmed; goto Lnq;
Lgq: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cLog10);
     mData->mImmed.push_back(fp_log10(x)); goto Lpk;
Lgr: mData->mByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     AddFunctionOpcode(cLog10); goto Lrc;
Lgs: ImmedPtr[0] = fp_log10(x); return;
Lgt: mData->mImmed.push_back(fp_log2(fp_const_e<Value_t>())); goto Lrd;
Lha: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cLog2);
     mData->mImmed.push_back(fp_log2(x)); goto Lpk;
Lhb: mData->mByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     AddFunctionOpcode(cLog2); goto Lrc;
Lhc: ImmedPtr[0] = fp_log2(x); return;
Lhd: ImmedPtr[-1] = fp_max(x,y); goto Lbc;
Lhe: ImmedPtr[-1] = fp_min(x,y); goto Lbc;
Lhf: ImmedPtr[-1] = fp_mod(y,x); goto Lbc;
Lhg: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 3; goto Lrb;
Lhh: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSqr;
Lre: FP_TRACE_BYTECODE_ADD(cSqr);
     goto TailCall_cSqr;
Lhi: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cDiv; goto Lpn;
Lhj: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr); goto Los;
Lhk: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr);
     AddFunctionOpcode(cMul); goto Los;
Lhl: ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
     opcode = cPow; goto Lra;
Lhm: ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2; goto Lns;
Lhn: ImmedPtr[-1] = x;
Lrf: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lnr;
Lho: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
Lrg: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lrh: AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
Lri: mData->mByteCode.push_back(cImmed); goto Lnr;
Lhp: mData->mImmed.pop_back(); goto Lrg;
Lhq: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(B); goto Lrh;
Lhr: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lrh;
Lhs: ByteCodePtr[-1] = cImmed; goto Ldo;
Lht: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lns;
Lia: mData->mImmed.pop_back(); goto Lqk;
Lib: ImmedPtr[0] = x+x; goto Lhm;
Lic: ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     mData->mImmed.push_back(y*x);
     mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cMul); goto Lor;
Lid: ImmedPtr[-1] = x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(y*x); goto Lpk;
Lie: ImmedPtr[0] = RadiansToDegrees(x); goto Lht;
Lif: ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lrj: AddFunctionOpcode(cMul);
Lrk: AddFunctionOpcode(B);
     opcode = cDiv; goto Lpq;
Lig: ImmedPtr[0] = -x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lrj;
Lih: ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lrk;
Lii: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lnr;
Lij: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(x+x); goto Lri;
Lik: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();} goto Lqk;
Lil: ImmedPtr[-1] = y*x; goto Lrf;
Lim: ImmedPtr[0] = -x; goto Lht;
Lin: ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Lrl: AddFunctionOpcode(cMul); goto Lpr;
Lio: ImmedPtr[0] = -x;
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lrl;
Lip: ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lpr;
Liq: ImmedPtr[0] = DegreesToRadians(x); goto Lht;
Lir: ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     mData->mImmed.push_back(y*x);
     mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cMul); goto Loo;
Lis: ImmedPtr[-1] = y*x; goto Lbc;
Lit: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Los;
Lja: ByteCodePtr[0] = cDup;
     ImmedPtr -= 1;
     mData->mImmed.pop_back();
Lrm: opcode = cAdd; goto Lof;
Ljb: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lpo;
Ljc: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lpp;
Ljd: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lrj;
Lje: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lrn: AddFunctionOpcode(cSqr); goto Lnr;
Ljf: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lrl;
Ljg: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lrl;
Ljh: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lrn;
Lji: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lro: FP_TRACE_BYTECODE_ADD(cNEqual);
     goto TailCall_cNEqual;
Ljj: ImmedPtr[-1] = fp_nequal(y,x); goto Lbc;
Ljk: ImmedPtr[0] = -x; goto Lco;
Ljl: ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     opcode = cSin;
     FP_ReDefinePointers(); goto Lqs;
Ljm: ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     opcode = cSinh;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cSinh);
     goto TailCall_cSinh;
Ljn: ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     opcode = cTan;
     FP_ReDefinePointers(); goto Lpl;
Ljo: ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     opcode = cTanh;
     FP_ReDefinePointers(); goto Lpm;
Ljp: ImmedPtr[0] = -x; return;
Ljq: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lqa;
Ljt: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cNEqual; goto Lro;
Lka: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cLessOrEq;
     FP_TRACE_BYTECODE_ADD(cLessOrEq);
     goto TailCall_cLessOrEq;
Lkb: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cLess;
     FP_TRACE_BYTECODE_ADD(cLess);
     goto TailCall_cLess;
Lkc: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cGreaterOrEq;
     FP_TRACE_BYTECODE_ADD(cGreaterOrEq);
     goto TailCall_cGreaterOrEq;
Lkd: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cGreater;
     FP_TRACE_BYTECODE_ADD(cGreater);
     goto TailCall_cGreater;
Lke: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cEqual; goto Lps;
Lkf: ImmedPtr[0] = fp_not(x); return;
Lkh: ImmedPtr[-1] = fp_or(x,y); goto Lbc;
Lki: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cAbs);
     mData->mImmed.push_back(x+x);
Lrp: mData->mByteCode.push_back(cImmed); goto Lqt;
Lkj: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back(); goto Lqb;
Lkk: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cMul);
     opcode = cExp2;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cExp2);
     goto TailCall_cExp2;
Lkl: ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lqt;
Lkm: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cMul); goto Lqt;
Lkn: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lra;
Lko: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(x); goto Lrp;
Lkp: ImmedPtr[0] = Value_t(); goto Lpj;
Lkq: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lph;
Lkr: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     opcode = cCbrt;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cCbrt);
     goto TailCall_cCbrt;
Lks: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cCbrt);
Lrq: opcode = cInv;
     FP_ReDefinePointers(); goto Lpe;
Lkt: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lpb;
Lla: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lrq;
Llb: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cAbs);
     mData->mImmed.push_back(y*x); goto Lrp;
Llc: ImmedPtr[0] = x+x; goto Lkn;
Lld: ImmedPtr[-1] = fp_pow(y,x); goto Lbc;
Lle: mData->mByteCode.pop_back();
     AddFunctionOpcode(cTanh); goto Lrq;
Llf: mData->mByteCode.pop_back();
     AddFunctionOpcode(cInv);
     opcode = cAbs;
     FP_ReDefinePointers(); goto Lnp;
Llg: mData->mImmed.push_back(Value_t()); goto Lrd;
Llh: ImmedPtr[0] = DegreesToRadians(x); goto Lco;
Lli: ImmedPtr[0] = DegreesToRadians(x); return;
Llj: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinCos); goto Lrq;
Llk: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSin); goto Los;
Lll: ImmedPtr[0] = fp_sin(x); return;
Llm: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSqr);
     mData->mImmed.push_back(Value_t(-1)); goto Lpg;
Lln: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSinh); goto Los;
Llo: ImmedPtr[0] = fp_sinh(x); return;
Llp: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lre;
Llq: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lpd;
Llr: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
Lrr: opcode = cHypot;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cHypot);
     goto TailCall_cHypot;
Lls: for(unsigned tmp=5; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(B); goto Lrr;
Llt: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cAbs; goto Lnp;
Lma: ImmedPtr[0] = fp_sqrt(x); return;
Lmb: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed);
Lrs: opcode = cFmms; goto Lqo;
Lmc: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(B); goto Lrs;
Lmd: ImmedPtr[0] = x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lrs;
Lme: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lrm;
Lmf: ImmedPtr[-1] = y-x; goto Log;
Lmg: ByteCodePtr[-1] = cImmed; goto Lec;
Lmh: ImmedPtr[-1] = y-x; goto Lbc;
Lmi: ImmedPtr[0] = -x; goto Lrm;
Lmj: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lql;
Lmk: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cAdd);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lol;
Lml: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cSub); goto Lol;
Lmm: mData->mByteCode.pop_back();
     AddFunctionOpcode(cTan); goto Los;
Lmn: ImmedPtr[0] = fp_tan(x); return;
Lmo: mData->mByteCode.pop_back();
     AddFunctionOpcode(cTanh); goto Los;
Lmp: ImmedPtr[0] = fp_tanh(x); return;
Lmq: ImmedPtr[0] = fp_trunc(x); return;
Lmr: ImmedPtr[-1] = x-y;
Lrt: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lsa: AddFunctionOpcode(A); return;
Lms: ImmedPtr[0] = fp_tan(x);
Lsb: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back(); goto Lsa;
Lmt: ImmedPtr[0] = fp_log(x); goto Lsb;
Lna: ImmedPtr[0] = fp_log2(x); goto Lsb;
Lnb: ImmedPtr[0] = fp_exp(x); goto Lsb;
Lnc: ImmedPtr[0] = fp_pow(Value_t(10),x); goto Lsb;
Lnd: ImmedPtr[0] = fp_exp2(x); goto Lsb;
Lne: ImmedPtr[-1] = x/y; goto Lrt;
Lnf: ImmedPtr[-1] = x/y;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lsc: AddFunctionOpcode(OppositeComparisonOpcode(A)); return;
Lng: ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back(); goto Lsc;
Lnh: ImmedPtr[-1] = fp_pow(x,fp_inv(y)); goto Lrt;
Lni: ImmedPtr[0] = fp_asinh(x); goto Lsb;
Lnj: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cAbs);
     mData->mImmed.push_back(fp_sqrt(x));
     mData->mByteCode.push_back(cImmed); goto Lsa;
Lnk: ImmedPtr[0] = fp_atanh(x); goto Lsb;
Lnl: mData->mByteCode.push_back(cDup); return;
Lnm: ByteCodePtr[0] = cDup; return;
Lnn: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinCos);
Lsd: AddFunctionOpcode(GetParamSwappedBinaryOpcode(C)); return;
Lno: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinhCosh); goto Lsd;
return;
// This list of dummy gotos is here to inhibit
// compiler warnings on unused labels
goto TailCall_cAcos;goto TailCall_cAcosh;goto TailCall_cAnd;
goto TailCall_cAsin;goto TailCall_cAsinh;goto TailCall_cAtan;
goto TailCall_cAtan2;goto TailCall_cAtanh;goto TailCall_cCeil;
goto TailCall_cFloor;goto TailCall_cInt;goto TailCall_cLog;
goto TailCall_cLog10;goto TailCall_cLog2;goto TailCall_cMax;
goto TailCall_cMin;goto TailCall_cMod;goto TailCall_cOr;
goto TailCall_cRDiv;goto TailCall_cRad;goto TailCall_cSec;
goto TailCall_cSin;goto TailCall_cSinh;goto TailCall_cSqrt;
goto TailCall_cSub;goto TailCall_cTan;goto TailCall_cTanh;
goto TailCall_cTrunc;
#endif

#if((FP_COMPLEX_VERSION) && (FP_FLOAT_VERSION))
	Value_t x;
	unsigned A;
	unsigned B;
	Value_t y;
	Value_t a;
	unsigned C;
	Value_t b;
	unsigned D;
	switch(opcode)
	{
	TailCall_cAbs:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAbs:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(233,"cNeg cAbs", "cAbs", "");
			/* opcode = cAbs; */ // redundant, matches cAbs @ 0
			goto Lab;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(164,
				"x cAbs",
				"[fp_abs(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lac;
		}
		goto Default0;
	TailCall_cAcos:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAcos:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(204,
				"x cAcos",
				"[fp_acos(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lad;
		}
		goto Default0;
	TailCall_cAcosh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAcosh:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(201,
				"x cAcosh",
				"[fp_acosh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lae;
		}
		goto Default0;
	TailCall_cAdd:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAdd:
		switch(ByteCodePtr[0])
		{
		case cDup:
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(366,"cDup cAdd cDup cAdd", "[Value_t(4)] cMul", "");
					goto Laf;
				}
				break;
			case cMul:
				if(ByteCodePtr[-2] == cAdd)
				{
					if(ByteCodePtr[-3] == cDup)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(367,"cDup cAdd cMul cDup cAdd", "cMul [Value_t(4)] cMul", "");
						goto Lag;
					}
				}
				break;
			}
			goto Default1;
		case cMul:
			switch(ByteCodePtr[-1])
			{
			case cImmed:
				x = ImmedPtr[0];
				switch(ByteCodePtr[-2])
				{
				case cDup:
					FP_TRACE_BYTECODE_OPTIMIZATION(369,
						"cDup x cMul cAdd",
						"[x+Value_t(1)] cMul",
						"    with x = " << x << "\n");
					goto Lah;
				default:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						if(ByteCodePtr[-3] == cMul)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(272,
								"cMul A[IsVarOpcode(A)] x cMul cAdd",
								"A [DO_STACKPLUS2] [x] cFmma",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							incStackPtr();
							incStackPtr();
							--mStackPtr;
							--mStackPtr;
							goto Lai;
						}
					}
				}
				break;
			default:
				B = ByteCodePtr[-1];
				if(IsVarOpcode(B))
				{
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						if(ByteCodePtr[-3] == cMul)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(268,
								"cMul A[IsVarOpcode(A)] B[IsVarOpcode(B)] cMul cAdd",
								"A [DO_STACKPLUS2] B cFmma",
								"    with B = " << FP_TRACE_OPCODENAME(B)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							incStackPtr();
							incStackPtr();
							--mStackPtr;
							--mStackPtr;
							goto Laj;
						}
					}
				}
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						if(ByteCodePtr[-3] == cMul)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(270,
								"cMul x A[IsVarOpcode(A)] cMul cAdd",
								"[x] [DO_STACKPLUS2] A cFmma",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", x = " << x
								    << "\n");
							incStackPtr();
							incStackPtr();
							--mStackPtr;
							--mStackPtr;
							goto Lak;
						}
					}
				}
			}
			goto Default1;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(231,"cNeg cAdd", "cSub", "");
			goto Lal;
		case cImmed:
			x = ImmedPtr[0];
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(150,
						"y cAdd x cAdd",
						"[y+x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cAdd; */ // redundant, matches cAdd @ 0
					goto Lam;
				}
				break;
			case cFma:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(154,
						"y cFma x cAdd",
						"[y+x] cFma",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lan;
				}
				break;
			case cMul:
				FP_TRACE_BYTECODE_OPTIMIZATION(266,
					"cMul x cAdd",
					"[DO_STACKPLUS1] [x] cFma",
					"    with x = " << x << "\n");
				incStackPtr();
				--mStackPtr;
				/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
				goto Lao;
			case cRSub:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(354,
							"y cAdd cRSub x cAdd",
							"[ y+x] cAdd cRSub",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lap;
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(355,
						"cNeg cRSub x cAdd",
						"[-x] cAdd cRSub",
						"    with x = " << x << "\n");
					goto Laq;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(353,
						"y cRSub x cAdd",
						"[ y+x] cRSub",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lar;
				}
				break;
			case cSub:
				B = ByteCodePtr[-2];
				if(IsVarOpcode(B))
				{
					switch(ByteCodePtr[-3])
					{
					case cAdd:
						if(ByteCodePtr[-4] == cImmed)
						{
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(348,
								"y cAdd B[IsVarOpcode(B)] cSub x cAdd",
								"[ y+x] cAdd B cSub",
								"    with x = " << x
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-4] = cImmed; */ // redundant, matches y @ 5
							goto Las;
						}
						break;
					case cNeg:
						FP_TRACE_BYTECODE_OPTIMIZATION(349,
							"cNeg B[IsVarOpcode(B)] cSub x cAdd",
							"[-x] cAdd B cSub",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						goto Lat;
					case cImmed:
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(347,
							"y B[IsVarOpcode(B)] cSub x cAdd",
							"[ y+x] B cSub",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lba;
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(123,
					"y x cAdd",
					"[y+x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbb;
			}
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(55,
					"x[x==Value_t()] cAdd",
					"",
					"    with x = " << x << "\n");
				goto Lbc;
			}
			break;
		default: Default1:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					FP_TRACE_BYTECODE_OPTIMIZATION(264,
						"cMul A[IsVarOpcode(A)] cAdd",
						"[DO_STACKPLUS1] A cFma",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Lbd;
				case cRSub:
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(346,
							"x cRSub A[IsVarOpcode(A)] cAdd",
							"[DO_STACKPLUS1] A [x] cAdd cRSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						incStackPtr();
						--mStackPtr;
						goto Lbe;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(351,
						"cRSub A[IsVarOpcode(A)] cAdd",
						"[DO_STACKPLUS1] A cAdd cRSub",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Lbf;
				}
			}
		}
		goto Default0;
	TailCall_cAnd:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAnd:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(280,"cDup cAnd", "cNotNot", "");
			goto Lbg;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(140,
					"y x cAnd",
					"[fp_and(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbh;
			}
			break;
		}
		goto Default0;
	TailCall_cArg:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cArg:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(222,
				"x cArg",
				"[fp_arg(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbi;
		}
		goto Default0;
	TailCall_cAsin:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAsin:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(205,
				"x cAsin",
				"[fp_asin(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbj;
		}
		goto Default0;
	TailCall_cAsinh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAsinh:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(202,
				"x cAsinh",
				"[fp_asinh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbk;
		}
		goto Default0;
	TailCall_cAtan:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAtan:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(Value_t(x.real(),fp_abs(x.imag()))!=Value_t(0,1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(206,
					"x[Value_t(x.real(),fp_abs(x.imag()))!=Value_t(0,1)] cAtan",
					"[fp_atan(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lbl;
			}
		}
		goto Default0;
	TailCall_cAtan2:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAtan2:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(171,
					"y x cAtan2",
					"[fp_atan2(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbm;
			}
		}
		goto Default0;
	TailCall_cAtanh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAtanh:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(Value_t(fp_abs(x.real()),x.imag())!=Value_t(1,0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(203,
					"x[Value_t(fp_abs(x.real()),x.imag())!=Value_t(1,0)] cAtanh",
					"[fp_atanh(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lbn;
			}
		}
		goto Default0;
	TailCall_cCbrt:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCbrt:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(207,
				"x cCbrt",
				"[fp_cbrt(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbo;
		}
		goto Default0;
	TailCall_cCeil:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCeil:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			B = ByteCodePtr[-1];
			if(IsUnaryOpcode(B)&&IsAlwaysIntegerOpcode(B))
			{
				A = ByteCodePtr[-2];
				if(IsVarOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(458,
						"A[IsVarOpcode(A)] B[IsUnaryOpcode(B)&&IsAlwaysIntegerOpcode(B)] cAdd cCeil",
						"cCeil A B cAdd",
						"    with B = " << FP_TRACE_OPCODENAME(B)
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					goto Lbp;
				}
			}
			goto Default2;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(465,"cNeg cCeil", "cFloor cNeg", "");
			goto Lbq;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(167,
				"x cCeil",
				"[fp_ceil(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbr;
		default: Default2:;
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(454,
					"A[IsAlwaysIntegerOpcode(A)] cCeil",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cConj:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cConj:
		switch(ByteCodePtr[0])
		{
		case cConj:
			FP_TRACE_BYTECODE_OPTIMIZATION(61,"cConj cConj", "", "");
			goto Lbs;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(225,
				"x cConj",
				"[fp_conj(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbt;
		}
		goto Default0;
	TailCall_cCos:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCos:
		switch(ByteCodePtr[0])
		{
		case cAcos:
			FP_TRACE_BYTECODE_OPTIMIZATION(402,"cAcos cCos", "", "");
			goto Lbs;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(294,"cNeg cCos", "cCos", "");
			/* opcode = cCos; */ // redundant, matches cCos @ 0
			goto Lca;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(208,
				"x cCos",
				"[fp_cos(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lcb;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				switch(ByteCodePtr[-1])
				{
				case cSec:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(565,
							"B[B==A] cSec A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCos",
							"B cSec cDup cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cSec; */ // redundant, matches cSec @ 2
						goto Lcc;
					}
					break;
				case cSin:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(559,
							"B[B==A] cSin A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCos",
							"B cSinCos",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lcd;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cCosh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCosh:
		switch(ByteCodePtr[0])
		{
		case cAsinh:
			FP_TRACE_BYTECODE_OPTIMIZATION(515,"cAsinh cCosh", "[DO_STACKPLUS1] cSqr [Value_t(1)] cAdd cSqrt", "");
			incStackPtr();
			--mStackPtr;
			goto Lce;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(295,"cNeg cCosh", "cCosh", "");
			/* opcode = cCosh; */ // redundant, matches cCosh @ 0
			goto Lcf;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(209,
				"x cCosh",
				"[fp_cosh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lcg;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				if(ByteCodePtr[-1] == cSinh)
				{
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(572,
							"B[B==A] cSinh A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCosh",
							"B cSinhCosh",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lch;
					}
				}
			}
		}
		goto Default0;
	TailCall_cCot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCot:
		A = ByteCodePtr[0];
		if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
		{
			if(ByteCodePtr[-1] == cTan)
			{
				B = ByteCodePtr[-2];
				if(B==A)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(563,
						"B[B==A] cTan A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCot",
						"B cTan cDup cInv",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", B = " << FP_TRACE_OPCODENAME(B)
						    << "\n");
					/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
					/* ByteCodePtr[-1] = cTan; */ // redundant, matches cTan @ 2
					goto Lcc;
				}
			}
		}
		goto Default0;
	TailCall_cCsc:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCsc:
		A = ByteCodePtr[0];
		if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
		{
			if(ByteCodePtr[-1] == cSin)
			{
				B = ByteCodePtr[-2];
				if(B==A)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(561,
						"B[B==A] cSin A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCsc",
						"B cSin cDup cInv",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", B = " << FP_TRACE_OPCODENAME(B)
						    << "\n");
					/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
					/* ByteCodePtr[-1] = cSin; */ // redundant, matches cSin @ 2
					goto Lcc;
				}
			}
		}
		goto Default0;
	TailCall_cDeg:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cDeg:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(165,
				"x cDeg",
				"[RadiansToDegrees(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lci;
		}
		goto Default0;
	TailCall_cDiv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cDiv:
		switch(ByteCodePtr[0])
		{
		case cCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(306,"cCos cDiv", "cSec cMul", "");
			goto Lcj;
		case cCot:
			FP_TRACE_BYTECODE_OPTIMIZATION(310,"cCot cDiv", "cTan cMul", "");
			goto Lck;
		case cCsc:
			FP_TRACE_BYTECODE_OPTIMIZATION(308,"cCsc cDiv", "cSin cMul", "");
			goto Lcl;
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(76,"cDup cDiv", "[Value_t()] cMul [Value_t(1)] cAdd", "");
			goto Lcm;
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(471,"cExp cDiv", "cNeg cExp cMul", "");
			goto Lcn;
		case cExp2:
			FP_TRACE_BYTECODE_OPTIMIZATION(472,"cExp2 cDiv", "cNeg cExp2 cMul", "");
			goto Lco;
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(254,"cInv cDiv", "cMul", "");
			goto Lcp;
		case cPow:
			FP_TRACE_BYTECODE_OPTIMIZATION(470,"cPow cDiv", "cNeg cPow cMul", "");
			goto Lcq;
		case cSec:
			FP_TRACE_BYTECODE_OPTIMIZATION(309,"cSec cDiv", "cCos cMul", "");
			goto Lcr;
		case cSin:
			FP_TRACE_BYTECODE_OPTIMIZATION(305,"cSin cDiv", "cCsc cMul", "");
			goto Lcs;
		case cSinCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(567,"cSinCos cDiv", "cTan", "");
			goto Lct;
		case cSinhCosh:
			FP_TRACE_BYTECODE_OPTIMIZATION(574,"cSinhCosh cDiv", "cTanh", "");
			goto Lda;
		case cTan:
			FP_TRACE_BYTECODE_OPTIMIZATION(307,"cTan cDiv", "cCot cMul", "");
			goto Ldb;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(148,
						"cNeg x[x!=Value_t()] cDiv",
						"[-x] cDiv",
						"    with x = " << x << "\n");
					/* opcode = cDiv; */ // redundant, matches cDiv @ 0
					goto Ldc;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(121,
						"y x[x!=Value_t()] cDiv",
						"[y/x]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Ldd;
				}
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(54,
					"x[x==Value_t(1)] cDiv",
					"",
					"    with x = " << x << "\n");
				goto Lbc;
			}
			if(x!=Value_t(0))
			{
				if(ByteCodePtr[-1] == cMul)
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						y = ImmedPtr[-1];
						if((y/x)==fp_const_rad_to_deg<Value_t>())
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(377,
								"y[(y/x)==fp_const_rad_to_deg<Value_t>()] cMul x[x!=Value_t(0)] cDiv",
								"cDeg",
								"    with x = " << x
								    << ", y = " << y
								    << "\n");
							goto Lde;
						}
						if((y/x)==fp_const_deg_to_rad<Value_t>())
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(378,
								"y[(y/x)==fp_const_deg_to_rad<Value_t>()] cMul x[x!=Value_t(0)] cDiv",
								"cRad",
								"    with x = " << x
								    << ", y = " << y
								    << "\n");
							goto Ldf;
						}
						FP_TRACE_BYTECODE_OPTIMIZATION(379,
							"y cMul x[x!=Value_t(0)] cDiv",
							"[y/x] cMul",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
						goto Ldg;
					}
				}
				FP_TRACE_BYTECODE_OPTIMIZATION(381,
					"x[x!=Value_t(0)] cDiv",
					"[fp_inv(x)] cMul",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Ldh;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDiv:
					B = ByteCodePtr[-2];
					if(IsVarOpcode(B))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(327,
							"B[IsVarOpcode(B)] cDiv A[IsVarOpcode(A)] cDiv",
							"[DO_STACKPLUS1] B A cMul cDiv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						incStackPtr();
						--mStackPtr;
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* opcode = cDiv; */ // redundant, matches cDiv @ 0
						goto Ldi;
					}
					break;
				case cRDiv:
					switch(ByteCodePtr[-2])
					{
					case cImmed:
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(322,
							"x cRDiv A[IsVarOpcode(A)] cDiv",
							"A cMul [x] cRDiv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Ldj;
					default:
						B = ByteCodePtr[-2];
						if(IsVarOpcode(B))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(321,
								"B[IsVarOpcode(B)] cRDiv A[IsVarOpcode(A)] cDiv",
								"A cMul B cRDiv",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							goto Ldk;
						}
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cEqual:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(418,
						"cAbs x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Ldl;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(420,
						"cSqr x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Ldl;
				default:
					A = ByteCodePtr[-1];
					if(IsLogicalOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(486,
							"A[IsLogicalOpcode(A)] x[x==Value_t(0)] cEqual",
							"A cNot",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Ldm;
					}
				}
			}
			if(x==Value_t(1))
			{
				A = ByteCodePtr[-1];
				if(IsLogicalOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(484,
						"A[IsLogicalOpcode(A)] x[x==Value_t(1)] cEqual",
						"A",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					goto Lbc;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(138,
					"y x cEqual",
					"[fp_equal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldn;
			}
		}
		goto Default0;
	TailCall_cExp:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cExp:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(467,
					"x cAdd cExp",
					"cExp [fp_exp(x)] cMul",
					"    with x = " << x << "\n");
				goto Ldo;
			}
			break;
		case cLog:
			A = ByteCodePtr[-1];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(396,
					"A[IsNeverNegativeValueOpcode(A)] cLog cExp",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Lbs;
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(210,
				"x cExp",
				"[fp_exp(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Ldp;
		}
		goto Default0;
	TailCall_cExp2:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cExp2:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(468,
					"x cAdd cExp2",
					"cExp2 [fp_exp2(x)] cMul",
					"    with x = " << x << "\n");
				goto Ldq;
			}
			break;
		case cLog2:
			A = ByteCodePtr[-1];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(397,
					"A[IsNeverNegativeValueOpcode(A)] cLog2 cExp2",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Lbs;
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(211,
				"x cExp2",
				"[fp_exp2(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Ldr;
		}
		FP_TRACE_BYTECODE_OPTIMIZATION(544,"cExp2", "[DO_STACKPLUS1] [fp_log(Value_t(2))] cMul cExp", "");
		incStackPtr();
		--mStackPtr;
		goto Lds;
	TailCall_cFloor:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFloor:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			B = ByteCodePtr[-1];
			if(IsUnaryOpcode(B)&&IsAlwaysIntegerOpcode(B))
			{
				A = ByteCodePtr[-2];
				if(IsVarOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(457,
						"A[IsVarOpcode(A)] B[IsUnaryOpcode(B)&&IsAlwaysIntegerOpcode(B)] cAdd cFloor",
						"cFloor A B cAdd",
						"    with B = " << FP_TRACE_OPCODENAME(B)
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					goto Ldt;
				}
			}
			goto Default3;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(464,"cNeg cFloor", "cCeil cNeg", "");
			goto Lea;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(168,
				"x cFloor",
				"[fp_floor(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Leb;
		default: Default3:;
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(453,
					"A[IsAlwaysIntegerOpcode(A)] cFloor",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cFma:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFma:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(274,"cNeg cFma", "cFms", "");
			goto Lec;
		case cImmed:
			a = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[-1];
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-2];
					FP_TRACE_BYTECODE_OPTIMIZATION(129,
						"y x a cFma",
						"[y*x+a]",
						"    with a = " << a
						    << ", x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Led;
				}
			}
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(156,
					"x[x==Value_t()] cFma",
					"cMul",
					"    with x = " << x << "\n");
				goto Lee;
			}
			break;
		}
		goto Default0;
	TailCall_cFmma:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFmma:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(276,"cNeg cFmma", "cFmms", "");
			goto Lef;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(107,
							"A[IsVarOpcode(A)] cMul x[x==Value_t()] cFmma",
							"[x] cMul cFmma",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cFmma; */ // redundant, matches cFmma @ 0
						goto Leg;
					}
					goto Default4;
				default: Default4:;
					A = ByteCodePtr[-1];
					if(IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						switch(ByteCodePtr[-2])
						{
						case cImmed:
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(105,
								"y A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
								"[x] cMul cFmma",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cFmma; */ // redundant, matches cFmma @ 0
							goto Leh;
						default:
							B = ByteCodePtr[-2];
							if(IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								switch(ByteCodePtr[-3])
								{
								case cImmed:
									y = ImmedPtr[-1];
									FP_TRACE_BYTECODE_OPTIMIZATION(111,
										"y B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
										"A [x] cMul cFmma",
										"    with x = " << x
										    << ", A = " << FP_TRACE_OPCODENAME(A)
										    << ", B = " << FP_TRACE_OPCODENAME(B)
										    << ", y = " << y
										    << "\n");
									/* opcode = cFmma; */ // redundant, matches cFmma @ 0
									goto Lei;
								default:
									C = ByteCodePtr[-3];
									if(IsVarOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(109,
											"C[IsVarOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
											"A [x] cMul cFmma",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cFmma; */ // redundant, matches cFmma @ 0
										goto Lej;
									}
									if(IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(110,
											"C[IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
											"B A [x] cMul cFmma",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cFmma; */ // redundant, matches cFmma @ 0
										goto Lek;
									}
								}
							}
							if(IsVarOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(101,
									"B[IsVarOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
									"[x] cMul cFmma",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
								/* opcode = cFmma; */ // redundant, matches cFmma @ 0
								goto Leg;
							}
							if(IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(103,
									"B[IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
									"A [x] cMul cFmma",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* opcode = cFmma; */ // redundant, matches cFmma @ 0
								goto Lel;
							}
						}
					}
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(97,
							"A[IsVarOpcode(A)] x[x==Value_t()] cFmma",
							"cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						goto Lem;
					}
					if(IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(99,
							"A[IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmma",
							"[x] cMul cFmma",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cFmma; */ // redundant, matches cFmma @ 0
						goto Len;
					}
				}
			}
			b = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				a = ImmedPtr[-1];
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[-2];
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-3];
						FP_TRACE_BYTECODE_OPTIMIZATION(131,
							"y x a b cFmma",
							"[y*x+a*b]",
							"    with b = " << b
							    << ", a = " << a
							    << ", x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Leo;
					}
				}
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(157,
					"x[x==Value_t(1)] cFmma",
					"cFma",
					"    with x = " << x << "\n");
				goto Lep;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(158,
					"x[x==Value_t(-1)] cFmma",
					"cFms",
					"    with x = " << x << "\n");
				goto Leq;
			}
			break;
		}
		goto Default0;
	TailCall_cFmms:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFmms:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(277,"cNeg cFmms", "cFmma", "");
			goto Ler;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(108,
							"A[IsVarOpcode(A)] cMul x[x==Value_t()] cFmms",
							"[x] cMul cFmms",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cFmms; */ // redundant, matches cFmms @ 0
						goto Les;
					}
					goto Default5;
				default: Default5:;
					A = ByteCodePtr[-1];
					if(IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						switch(ByteCodePtr[-2])
						{
						case cImmed:
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(106,
								"y A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
								"[x] cMul cFmms",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cFmms; */ // redundant, matches cFmms @ 0
							goto Let;
						default:
							B = ByteCodePtr[-2];
							if(IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								switch(ByteCodePtr[-3])
								{
								case cImmed:
									y = ImmedPtr[-1];
									FP_TRACE_BYTECODE_OPTIMIZATION(114,
										"y B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
										"A [x] cMul cFmms",
										"    with x = " << x
										    << ", A = " << FP_TRACE_OPCODENAME(A)
										    << ", B = " << FP_TRACE_OPCODENAME(B)
										    << ", y = " << y
										    << "\n");
									/* opcode = cFmms; */ // redundant, matches cFmms @ 0
									goto Lfa;
								default:
									C = ByteCodePtr[-3];
									if(IsVarOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(112,
											"C[IsVarOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
											"A [x] cMul cFmms",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cFmms; */ // redundant, matches cFmms @ 0
										goto Lfb;
									}
									if(IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(113,
											"C[IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
											"B A [x] cMul cFmms",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cFmms; */ // redundant, matches cFmms @ 0
										goto Lfc;
									}
								}
							}
							if(IsVarOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(102,
									"B[IsVarOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
									"[x] cMul cFmms",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
								/* opcode = cFmms; */ // redundant, matches cFmms @ 0
								goto Les;
							}
							if(IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(104,
									"B[IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
									"A [x] cMul cFmms",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* opcode = cFmms; */ // redundant, matches cFmms @ 0
								goto Lfd;
							}
						}
					}
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(98,
							"A[IsVarOpcode(A)] x[x==Value_t()] cFmms",
							"cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						goto Lem;
					}
					if(IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(100,
							"A[IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cFmms",
							"[x] cMul cFmms",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cFmms; */ // redundant, matches cFmms @ 0
						goto Lfe;
					}
				}
			}
			b = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				a = ImmedPtr[-1];
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[-2];
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-3];
						FP_TRACE_BYTECODE_OPTIMIZATION(132,
							"y x a b cFmms",
							"[y*x-a*b]",
							"    with b = " << b
							    << ", a = " << a
							    << ", x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lff;
					}
				}
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(159,
					"x[x==Value_t(1)] cFmms",
					"cFms",
					"    with x = " << x << "\n");
				goto Leq;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(160,
					"x[x==Value_t(-1)] cFmms",
					"cFma",
					"    with x = " << x << "\n");
				goto Lep;
			}
			break;
		}
		goto Default0;
	TailCall_cFms:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFms:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(275,"cNeg cFms", "cFma", "");
			goto Lfg;
		case cImmed:
			a = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[-1];
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-2];
					FP_TRACE_BYTECODE_OPTIMIZATION(130,
						"y x a cFms",
						"[y*x-a]",
						"    with a = " << a
						    << ", x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lfh;
				}
			}
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(153,
				"x cFms",
				"[-x] cFma",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lfi;
		}
		goto Default0;
	TailCall_cGreater:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cGreater:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(136,
					"y x cGreater",
					"[fp_less(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lfj;
			}
		}
		goto Default0;
	TailCall_cGreaterOrEq:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cGreaterOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(137,
					"y x cGreaterOrEq",
					"[fp_lessOrEq(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lfk;
			}
		}
		goto Default0;
	TailCall_cHypot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cHypot:
		if(ByteCodePtr[0] == cSinCos)
		{
			FP_TRACE_BYTECODE_OPTIMIZATION(82,"cSinCos cHypot", "[DO_STACKPLUS1] [Value_t()] cMul [Value_t(1)] cAdd", "");
			incStackPtr();
			--mStackPtr;
			goto Lcm;
		}
		goto Default0;
	TailCall_cImag:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cImag:
		switch(ByteCodePtr[0])
		{
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(224,
				"x cImag",
				"[fp_imag(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lfl;
		default:
			A = ByteCodePtr[0];
			if(IsAlwaysRealOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(78,
					"A[IsAlwaysRealOpcode(A)] cImag",
					"A [DO_STACKPLUS1] [Value_t()] cMul",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				incStackPtr();
				--mStackPtr;
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				goto Lfm;
			}
		}
		goto Default0;
	TailCall_cInt:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cInt:
		switch(ByteCodePtr[0])
		{
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(169,
				"x cInt",
				"[fp_int(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lfn;
		default:
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(455,
					"A[IsAlwaysIntegerOpcode(A)] cInt",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cInv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cInv:
		switch(ByteCodePtr[0])
		{
		case cCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(312,"cCos cInv", "cSec", "");
			goto Lfo;
		case cCot:
			FP_TRACE_BYTECODE_OPTIMIZATION(316,"cCot cInv", "cTan", "");
			goto Lct;
		case cCsc:
			FP_TRACE_BYTECODE_OPTIMIZATION(314,"cCsc cInv", "cSin", "");
			goto Lfp;
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(60,"cInv cInv", "", "");
			goto Lbs;
		case cPow:
			FP_TRACE_BYTECODE_OPTIMIZATION(414,"cPow cInv", "cNeg cPow", "");
			goto Lfq;
		case cRSqrt:
			FP_TRACE_BYTECODE_OPTIMIZATION(241,"cRSqrt cInv", "cSqrt", "");
			goto Lfr;
		case cSec:
			FP_TRACE_BYTECODE_OPTIMIZATION(315,"cSec cInv", "cCos", "");
			goto Lfs;
		case cSin:
			FP_TRACE_BYTECODE_OPTIMIZATION(311,"cSin cInv", "cCsc", "");
			goto Lft;
		case cSqrt:
			FP_TRACE_BYTECODE_OPTIMIZATION(239,"cSqrt cInv", "cRSqrt", "");
			goto Lga;
		case cTan:
			FP_TRACE_BYTECODE_OPTIMIZATION(313,"cTan cInv", "cCot", "");
			goto Lgb;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(119,
					"x[x!=Value_t()] cInv",
					"[fp_inv(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lgc;
			}
			break;
		}
		goto Default0;
	TailCall_cLess:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLess:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				A = ByteCodePtr[-1];
				if(IsNeverNegativeValueOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(357,
						"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(0)] cLess",
						"A [x] cMul",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
					goto Lgd;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(134,
					"y x cLess",
					"[fp_less(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lge;
			}
		}
		goto Default0;
	TailCall_cLessOrEq:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLessOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(135,
					"y x cLessOrEq",
					"[fp_lessOrEq(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lgf;
			}
		}
		goto Default0;
	TailCall_cLog:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLog:
		switch(ByteCodePtr[0])
		{
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(399,"cExp cLog", "", "");
			goto Lbs;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(x>Value_t(0))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(556,
						"x[x>Value_t(0)] cMul cLog",
						"cLog [fp_log(x)] cAdd",
						"    with x = " << x << "\n");
					goto Lgg;
				}
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(212,
					"x[x!=Value_t(0)] cLog",
					"[fp_log(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lgh;
			}
			break;
		}
		goto Default0;
	TailCall_cLog10:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLog10:
		switch(ByteCodePtr[0])
		{
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(546,"cExp cLog10", "[DO_STACKPLUS1] [fp_log10(fp_const_e<Value_t>())] cMul", "");
			incStackPtr();
			--mStackPtr;
			goto Lgi;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(x>Value_t(0))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(557,
						"x[x>Value_t(0)] cMul cLog10",
						"cLog10 [fp_log10(x)] cAdd",
						"    with x = " << x << "\n");
					goto Lgj;
				}
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(213,
					"x[x!=Value_t(0)] cLog10",
					"[fp_log10(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lgk;
			}
			break;
		}
		goto Default0;
	TailCall_cLog2:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLog2:
		switch(ByteCodePtr[0])
		{
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(545,"cExp cLog2", "[DO_STACKPLUS1] [fp_log2(fp_const_e<Value_t>())] cMul", "");
			incStackPtr();
			--mStackPtr;
			goto Lgl;
		case cExp2:
			FP_TRACE_BYTECODE_OPTIMIZATION(400,"cExp2 cLog2", "", "");
			goto Lbs;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(x>Value_t(0))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(555,
						"x[x>Value_t(0)] cMul cLog2",
						"cLog2 [fp_log2(x)] cAdd",
						"    with x = " << x << "\n");
					goto Lgm;
				}
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(214,
					"x[x!=Value_t(0)] cLog2",
					"[fp_log2(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lgn;
			}
			break;
		}
		goto Default0;
	TailCall_cMax:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMax:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(58,"cDup cMax", "", "");
			goto Lbs;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(173,
					"y x cMax",
					"[fp_max(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lgo;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(64,
							"B[B==A] cDup A[IsVarOpcode(A)] cMax",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Lbs;
					}
					break;
				case cMax:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(66,
							"B[B==A] cMax A[IsVarOpcode(A)] cMax",
							"B cMax",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMax; */ // redundant, matches cMax @ 2
						goto Lbs;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cMin:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMin:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(57,"cDup cMin", "", "");
			goto Lbs;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(172,
					"y x cMin",
					"[fp_min(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lgp;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(63,
							"B[B==A] cDup A[IsVarOpcode(A)] cMin",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Lbs;
					}
					break;
				case cMin:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(65,
							"B[B==A] cMin A[IsVarOpcode(A)] cMin",
							"B cMin",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMin; */ // redundant, matches cMin @ 2
						goto Lbs;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cMod:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMod:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				if(ByteCodePtr[-1] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(122,
						"y x[x!=Value_t()] cMod",
						"[fp_mod(y,x)]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Lgq;
				}
			}
		}
		goto Default0;
	TailCall_cMul:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMul:
		switch(ByteCodePtr[0])
		{
		case cCsc:
			A = ByteCodePtr[-1];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>3)
			{
				if(ByteCodePtr[-2] == cCos)
				{
					B = ByteCodePtr[-3];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(573,
							"B[B==A] cCos A[IsVarOpcode(A)&&mData->mByteCode.size()>3] cCsc cMul",
							"B cCot",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
						goto Lgr;
					}
				}
			}
			goto Default6;
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(234,"cDup cMul", "cSqr", "");
			goto Lgs;
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(255,"cInv cMul", "cDiv", "");
			goto Lgt;
		case cNeg:
			switch(ByteCodePtr[-1])
			{
			case cDup:
				FP_TRACE_BYTECODE_OPTIMIZATION(532,"cDup cNeg cMul", "cSqr cNeg", "");
				goto Lha;
			default:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cMul)
					{
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(538,
								"B[B==A] cMul A[IsVarOpcode(A)] cNeg cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lhb;
						}
					}
				}
			}
			goto Default6;
		case cPow:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(370,
						"cDup x cPow cMul",
						"[x+Value_t(1)] cPow",
						"    with x = " << x << "\n");
					goto Lhc;
				}
			}
			goto Default6;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(91,
							"A[IsVarOpcode(A)] cMul x[x==Value_t()] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lhd;
					}
					goto Default7;
				default: Default7:;
					A = ByteCodePtr[-1];
					if(IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						switch(ByteCodePtr[-2])
						{
						case cImmed:
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(90,
								"y A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
								"[x] cMul",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lhe;
						default:
							B = ByteCodePtr[-2];
							if(IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								switch(ByteCodePtr[-3])
								{
								case cImmed:
									y = ImmedPtr[-1];
									FP_TRACE_BYTECODE_OPTIMIZATION(94,
										"y B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
										"A [x] cMul",
										"    with x = " << x
										    << ", A = " << FP_TRACE_OPCODENAME(A)
										    << ", B = " << FP_TRACE_OPCODENAME(B)
										    << ", y = " << y
										    << "\n");
									/* opcode = cMul; */ // redundant, matches cMul @ 0
									goto Lhf;
								default:
									C = ByteCodePtr[-3];
									if(IsVarOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(92,
											"C[IsVarOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
											"A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lhg;
									}
									if(IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(93,
											"C[IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
											"B A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lhh;
									}
								}
							}
							if(IsVarOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(88,
									"B[IsVarOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
									"[x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lhd;
							}
							if(IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(89,
									"B[IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
									"A [x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lhi;
							}
						}
					}
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(86,
							"A[IsVarOpcode(A)] x[x==Value_t()] cMul",
							"[x]",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						goto Lhj;
					}
					if(IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(87,
							"A[IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lhk;
					}
				}
			}
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				switch(ByteCodePtr[-2])
				{
				case cDup:
					if(x+x==Value_t(1))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(372,
							"cDup[x+x==Value_t(1)] cAdd x cMul",
							"",
							"    with x = " << x << "\n");
						goto Lhl;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(373,
						"cDup cAdd x cMul",
						"[x+x] cMul",
						"    with x = " << x << "\n");
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Lhm;
				case cMul:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(IsVarOpcode(A))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(445,
								"A[IsVarOpcode(A)] y cMul cAdd x cMul",
								"[x] cMul A [y*x] cMul cAdd",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lhn;
						}
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(444,
						"y cAdd x cMul",
						"[x] cMul [y*x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lho;
				}
				break;
			case cDeg:
				FP_TRACE_BYTECODE_OPTIMIZATION(250,
					"cDeg x cMul",
					"[DO_STACKPLUS1] [RadiansToDegrees(x)] cMul",
					"    with x = " << x << "\n");
				incStackPtr();
				--mStackPtr;
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Lhp;
			case cDiv:
				B = ByteCodePtr[-2];
				if(IsVarOpcode(B))
				{
					switch(ByteCodePtr[-3])
					{
					case cMul:
						if(ByteCodePtr[-4] == cImmed)
						{
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(334,
								"y cMul B[IsVarOpcode(B)] cDiv x cMul",
								"[y*x] cMul B cDiv",
								"    with x = " << x
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-4] = cImmed; */ // redundant, matches y @ 5
							goto Lhq;
						}
						break;
					case cNeg:
						FP_TRACE_BYTECODE_OPTIMIZATION(335,
							"cNeg B[IsVarOpcode(B)] cDiv x cMul",
							"[-x] cMul B cDiv",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						goto Lhr;
					case cImmed:
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(333,
							"y B[IsVarOpcode(B)] cDiv x cMul",
							"[y*x] B cDiv",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lhs;
					}
				}
				break;
			case cMul:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cDup)
					{
						if(x+x==Value_t(1))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(374,
								"cDup[x+x==Value_t(1)] cAdd cMul x cMul",
								"cMul",
								"    with x = " << x << "\n");
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lht;
						}
						FP_TRACE_BYTECODE_OPTIMIZATION(375,
							"cDup cAdd cMul x cMul",
							"cMul [x+x] cMul",
							"    with x = " << x << "\n");
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lia;
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					if(y*x==Value_t(1))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(68,
							"y[y*x==Value_t(1)] cMul x cMul",
							"",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Lib;
					}
					if((y*x)==fp_const_rad_to_deg<Value_t>())
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(363,
							"y[(y*x)==fp_const_rad_to_deg<Value_t>()] cMul x cMul",
							"cDeg",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Lde;
					}
					if((y*x)==fp_const_deg_to_rad<Value_t>())
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(364,
							"y[(y*x)==fp_const_deg_to_rad<Value_t>()] cMul x cMul",
							"cRad",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Ldf;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(151,
						"y cMul x cMul",
						"[y*x] cMul",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Lic;
				}
				break;
			case cNeg:
				FP_TRACE_BYTECODE_OPTIMIZATION(145,
					"cNeg x cMul",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Lid;
			case cRDiv:
				switch(ByteCodePtr[-2])
				{
				case cMul:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(341,
							"y cMul cRDiv x cMul",
							"[y*x] cMul cRDiv",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lie;
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(342,
						"cNeg cRDiv x cMul",
						"[-x] cMul cRDiv",
						"    with x = " << x << "\n");
					goto Lif;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(340,
						"y cRDiv x cMul",
						"[y*x] cRDiv",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lig;
				}
				break;
			case cRad:
				FP_TRACE_BYTECODE_OPTIMIZATION(251,
					"cRad x cMul",
					"[DO_STACKPLUS1] [DegreesToRadians(x)] cMul",
					"    with x = " << x << "\n");
				incStackPtr();
				--mStackPtr;
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Lih;
			case cSub:
				if(ByteCodePtr[-2] == cMul)
				{
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(IsVarOpcode(A))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(446,
								"A[IsVarOpcode(A)] y cMul cSub x cMul",
								"[x] cMul A [y*x] cMul cSub",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lii;
						}
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(120,
					"y x cMul",
					"[y*x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lij;
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(53,
					"x[x==Value_t(1)] cMul",
					"",
					"    with x = " << x << "\n");
				goto Lbc;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(147,
					"x[x==Value_t(-1)] cMul",
					"cNeg",
					"    with x = " << x << "\n");
				goto Lik;
			}
			if(x==Value_t(2))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(230,
					"x[x==Value_t(2)] cMul",
					"cDup cAdd",
					"    with x = " << x << "\n");
				goto Lil;
			}
			if(x==fp_const_rad_to_deg<Value_t>())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(248,
					"x[x==fp_const_rad_to_deg<Value_t>()] cMul",
					"cDeg",
					"    with x = " << x << "\n");
				goto Lim;
			}
			if(x==fp_const_deg_to_rad<Value_t>())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(249,
					"x[x==fp_const_deg_to_rad<Value_t>()] cMul",
					"cRad",
					"    with x = " << x << "\n");
				goto Lin;
			}
			break;
		default: Default6:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDiv:
					B = ByteCodePtr[-2];
					if(IsVarOpcode(B))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(330,
							"B[IsVarOpcode(B)] cDiv A[IsVarOpcode(A)] cMul",
							"[DO_STACKPLUS1] A cMul B cDiv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						incStackPtr();
						--mStackPtr;
						goto Lio;
					}
					goto Default8;
				case cMul:
					switch(ByteCodePtr[-2])
					{
					case cNeg:
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(535,
								"B[B==A] cNeg cMul A[IsVarOpcode(A)] cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lhb;
						}
						goto Default9;
					default: Default9:;
						B = ByteCodePtr[-2];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(526,
								"B[B==A] cMul A[IsVarOpcode(A)] cMul",
								"B cSqr cMul",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lip;
						}
					}
					goto Default8;
				case cNeg:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(529,
							"B[B==A] cNeg A[IsVarOpcode(A)] cMul",
							"B cSqr cNeg",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lha;
					}
					goto Default8;
				case cRDiv:
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(323,
							"x cRDiv A[IsVarOpcode(A)] cMul",
							"[DO_STACKPLUS1] A [x] cMul cRDiv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						incStackPtr();
						--mStackPtr;
						goto Liq;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(337,
						"cRDiv A[IsVarOpcode(A)] cMul",
						"[DO_STACKPLUS1] A cMul cRDiv",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Lir;
				default: Default8:;
					B = ByteCodePtr[-1];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(523,
							"B[B==A] A[IsVarOpcode(A)] cMul",
							"B cSqr",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-1] = B; */ // redundant, matches B @ 2
						goto Lgs;
					}
				}
			}
			if(IsUnaryOpcode(A))
			{
				B = ByteCodePtr[-1];
				if(IsVarOpcode(B)&&mData->mByteCode.size()>1)
				{
					if(ByteCodePtr[-2] == cMul)
					{
						C = ByteCodePtr[-3];
						if(C==A)
						{
							D = ByteCodePtr[-4];
							if(D==B)
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(542,
									"D[D==B] C[C==A] cMul B[IsVarOpcode(B)&&mData->mByteCode.size()>1] A[IsUnaryOpcode(A)] cMul",
									"D C cSqr cMul",
									"    with A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << ", C = " << FP_TRACE_OPCODENAME(C)
									    << ", D = " << FP_TRACE_OPCODENAME(D)
									    << "\n");
								/* ByteCodePtr[-4] = D; */ // redundant, matches D @ 5
								/* ByteCodePtr[-3] = C; */ // redundant, matches C @ 4
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lis;
							}
						}
					}
				}
			}
		}
		goto Default0;
	TailCall_cNEqual:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(419,
						"cAbs x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Lit;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(421,
						"cSqr x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Lit;
				default:
					A = ByteCodePtr[-1];
					if(IsLogicalOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(487,
							"A[IsLogicalOpcode(A)] x[x==Value_t(0)] cNEqual",
							"A",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lbc;
					}
				}
			}
			if(x==Value_t(1))
			{
				A = ByteCodePtr[-1];
				if(IsLogicalOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(485,
						"A[IsLogicalOpcode(A)] x[x==Value_t(1)] cNEqual",
						"A cNot",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					goto Ldm;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(139,
					"y x cNEqual",
					"[fp_nequal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lja;
			}
		}
		goto Default0;
	TailCall_cNeg:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNeg:
		switch(ByteCodePtr[0])
		{
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(146,
					"x cMul cNeg",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Ljb;
			}
			break;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(59,"cNeg cNeg", "", "");
			goto Lbs;
		case cSin:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(300,
						"x cMul cSin cNeg",
						"[-x] cMul cSin",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Ljc;
				}
			}
			break;
		case cSinh:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(301,
						"x cMul cSinh cNeg",
						"[-x] cMul cSinh",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Ljd;
				}
			}
			break;
		case cTan:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(302,
						"x cMul cTan cNeg",
						"[-x] cMul cTan",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Lje;
				}
			}
			break;
		case cTanh:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(303,
						"x cMul cTanh cNeg",
						"[-x] cMul cTanh",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Ljf;
				}
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(118,
				"x cNeg",
				"[-x]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Ljg;
		}
		goto Default0;
	TailCall_cNot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNot:
		switch(ByteCodePtr[0])
		{
		case cAbsNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(287,"cAbsNotNot cNot", "cAbsNot", "");
			goto Ljh;
		case cEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(261,"cEqual cNot", "cNEqual", "");
			goto Lji;
		case cGreater:
			FP_TRACE_BYTECODE_OPTIMIZATION(259,"cGreater cNot", "cLessOrEq", "");
			goto Ljj;
		case cGreaterOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(260,"cGreaterOrEq cNot", "cLess", "");
			goto Ljk;
		case cLess:
			FP_TRACE_BYTECODE_OPTIMIZATION(257,"cLess cNot", "cGreaterOrEq", "");
			goto Ljl;
		case cLessOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(258,"cLessOrEq cNot", "cGreater", "");
			goto Ljm;
		case cNEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(262,"cNEqual cNot", "cEqual", "");
			goto Ljn;
		case cNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(285,"cNot cNot", "cNotNot", "");
			goto Lbg;
		case cNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(286,"cNotNot cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Ljo;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(125,
				"x cNot",
				"[fp_not(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Ljp;
		}
		goto Default0;
	TailCall_cNotNot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNotNot:
		if(ByteCodePtr[0] == cNot)
		{
			FP_TRACE_BYTECODE_OPTIMIZATION(288,"cNot cNotNot", "cNot", "");
			/* ByteCodePtr[0] = cNot; */ // redundant, matches cNot @ 1
			return;
		}
		goto Default0;
	TailCall_cOr:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cOr:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(279,"cDup cOr", "cNotNot", "");
			goto Lbg;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(141,
					"y x cOr",
					"[fp_or(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ljq;
			}
			break;
		}
		goto Default0;
	TailCall_cPolar:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cPolar:
		if(ByteCodePtr[0] == cImmed)
		{
			y = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(226,
					"x y cPolar",
					"[fp_polar(x,y)]",
					"    with y = " << y
					    << ", x = " << x
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Ljr;
			}
		}
		goto Default0;
	TailCall_cPow:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cPow:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(isInteger(x))
			{
				switch(ByteCodePtr[-1])
				{
				case cExp:
					FP_TRACE_BYTECODE_OPTIMIZATION(41,
						"cExp x[isInteger(x)] cPow",
						"[x] cMul cExp",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					goto Ljs;
				case cExp2:
					FP_TRACE_BYTECODE_OPTIMIZATION(42,
						"cExp2 x[isInteger(x)] cPow",
						"[x] cMul cExp2",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					goto Ljt;
				case cPow:
					if(ByteCodePtr[-2] == cImmed)
					{
						y = ImmedPtr[-1];
						if(!isInteger(y))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(40,
								"y[!isInteger(y)] cPow x[isInteger(x)] cPow",
								"[y*x] cPow",
								"    with x = " << x
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cPow; */ // redundant, matches cPow @ 0
							goto Lka;
						}
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(43,
						"cPow x[isInteger(x)] cPow",
						"[x] cMul cPow",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cPow; */ // redundant, matches cPow @ 0
					goto Lkb;
				}
			}
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(81,
					"x[x==Value_t()] cPow",
					"[DO_STACKPLUS1] [Value_t()] cMul [Value_t(1)] cAdd",
					"    with x = " << x << "\n");
				incStackPtr();
				--mStackPtr;
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lkc;
			}
			if(x==fp_const_preciseDouble<Value_t>(0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(388,
					"x[x==fp_const_preciseDouble<Value_t>(0.5)] cPow",
					"cSqrt",
					"    with x = " << x << "\n");
				goto Lkd;
			}
			if(x==fp_inv(Value_t(3)))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(389,
					"x[x==fp_inv(Value_t(3))] cPow",
					"cCbrt",
					"    with x = " << x << "\n");
				goto Lke;
			}
			if(x==fp_inv(Value_t(-3)))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(390,
					"x[x==fp_inv(Value_t(-3))] cPow",
					"cCbrt cInv",
					"    with x = " << x << "\n");
				goto Lkf;
			}
			if(x==fp_const_preciseDouble<Value_t>(-0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(391,
					"x[x==fp_const_preciseDouble<Value_t>(-0.5)] cPow",
					"cRSqrt",
					"    with x = " << x << "\n");
				goto Lkg;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(392,
					"x[x==Value_t(-1)] cPow",
					"cInv",
					"    with x = " << x << "\n");
				goto Lkh;
			}
			switch(ByteCodePtr[-1])
			{
			case cPow:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(386,
						"y cPow x cPow",
						"[y*x] cPow",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cPow; */ // redundant, matches cPow @ 0
					goto Lka;
				}
				break;
			case cSqr:
				FP_TRACE_BYTECODE_OPTIMIZATION(44,
					"cSqr x cPow",
					"[x+x] cPow",
					"    with x = " << x << "\n");
				/* opcode = cPow; */ // redundant, matches cPow @ 0
				goto Lki;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(221,
					"y x cPow",
					"[fp_pow(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lkj;
			}
			FP_TRACE_BYTECODE_OPTIMIZATION(520,
				"x cPow",
				"[DO_POWI]",
				"    with x = " << x << "\n");
			if(TryCompilePowi(x))
			  return;
		}
		goto Default0;
	TailCall_cRDiv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRDiv:
		switch(ByteCodePtr[0])
		{
		case cSinCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(568,"cSinCos cRDiv", "cCot", "");
			goto Lgb;
		case cSinhCosh:
			FP_TRACE_BYTECODE_OPTIMIZATION(575,"cSinhCosh cRDiv", "cTanh cInv", "");
			goto Lkk;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(324,
					"x[x==Value_t(1)] cRDiv",
					"cInv",
					"    with x = " << x << "\n");
				goto Lkh;
			}
			break;
		}
		goto Default0;
	TailCall_cRSqrt:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRSqrt:
		switch(ByteCodePtr[0])
		{
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(242,"cInv cRSqrt", "cSqrt", "");
			goto Lfr;
		case cSqr:
			FP_TRACE_BYTECODE_OPTIMIZATION(244,"cSqr cRSqrt", "cInv cAbs", "");
			goto Lkl;
		}
		goto Default0;
	TailCall_cRSub:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRSub:
		if(ByteCodePtr[0] == cDup)
		{
			FP_TRACE_BYTECODE_OPTIMIZATION(75,"cDup cRSub", "[Value_t()] cMul", "");
			goto Lkm;
		}
		goto Default0;
	TailCall_cRad:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRad:
		switch(ByteCodePtr[0])
		{
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(252,
					"x cMul cRad",
					"[DO_STACKPLUS1] [DegreesToRadians(x)] cMul",
					"    with x = " << x << "\n");
				incStackPtr();
				--mStackPtr;
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Lkn;
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(166,
				"x cRad",
				"[DegreesToRadians(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lko;
		}
		goto Default0;
	TailCall_cReal:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cReal:
		switch(ByteCodePtr[0])
		{
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(223,
				"x cReal",
				"[fp_real(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lkp;
		default:
			A = ByteCodePtr[0];
			if(IsAlwaysRealOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(79,
					"A[IsAlwaysRealOpcode(A)] cReal",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cSec:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSec:
		A = ByteCodePtr[0];
		if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
		{
			switch(ByteCodePtr[-1])
			{
			case cCos:
				B = ByteCodePtr[-2];
				if(B==A)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(562,
						"B[B==A] cCos A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cSec",
						"B cCos cDup cInv",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", B = " << FP_TRACE_OPCODENAME(B)
						    << "\n");
					/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
					/* ByteCodePtr[-1] = cCos; */ // redundant, matches cCos @ 2
					goto Lcc;
				}
				break;
			case cSin:
				B = ByteCodePtr[-2];
				if(B==A)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(560,
						"B[B==A] cSin A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cSec",
						"B cSinCos cInv",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", B = " << FP_TRACE_OPCODENAME(B)
						    << "\n");
					/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
					goto Lkq;
				}
				break;
			}
		}
		goto Default0;
	TailCall_cSin:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSin:
		switch(ByteCodePtr[0])
		{
		case cAsin:
			FP_TRACE_BYTECODE_OPTIMIZATION(401,"cAsin cSin", "", "");
			goto Lbs;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(296,"cNeg cSin", "cSin cNeg", "");
			goto Lkr;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(215,
				"x cSin",
				"[fp_sin(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lks;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				if(ByteCodePtr[-1] == cCsc)
				{
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(564,
							"B[B==A] cCsc A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cSin",
							"B cCsc cDup cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cCsc; */ // redundant, matches cCsc @ 2
						goto Lcc;
					}
				}
			}
		}
		goto Default0;
	TailCall_cSinh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSinh:
		switch(ByteCodePtr[0])
		{
		case cAcosh:
			FP_TRACE_BYTECODE_OPTIMIZATION(502,"cAcosh cSinh", "[DO_STACKPLUS1] cSqr [Value_t(-1)] cAdd cSqrt", "");
			incStackPtr();
			--mStackPtr;
			goto Lkt;
		case cAsinh:
			FP_TRACE_BYTECODE_OPTIMIZATION(405,"cAsinh cSinh", "", "");
			goto Lbs;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(297,"cNeg cSinh", "cSinh cNeg", "");
			goto Lla;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(216,
				"x cSinh",
				"[fp_sinh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Llb;
		}
		goto Default0;
	TailCall_cSqr:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSqr:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(236,"cAbs cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Llc;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(235,"cNeg cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Llc;
		case cRSqrt:
			FP_TRACE_BYTECODE_OPTIMIZATION(243,"cRSqrt cSqr", "cInv", "");
			goto Lld;
		case cSqrt:
			A = ByteCodePtr[-1];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(394,
					"A[IsNeverNegativeValueOpcode(A)] cSqrt cSqr",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Lbs;
			}
			goto Default10;
		default: Default10:;
			A = ByteCodePtr[0];
			if(IsComparisonOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(590,
					"A[IsComparisonOpcode(A)] cSqr",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cSqrt:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSqrt:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cSqr)
			{
				A = ByteCodePtr[-2];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-3] == cSqr)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(577,
							"cSqr A[IsVarOpcode(A)] cSqr cAdd cSqrt",
							"A cHypot",
							"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
						goto Lle;
					}
				}
				B = ByteCodePtr[-2];
				if(IsUnaryOpcode(B))
				{
					A = ByteCodePtr[-3];
					if(IsVarOpcode(A))
					{
						if(ByteCodePtr[-4] == cSqr)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(578,
								"cSqr A[IsVarOpcode(A)] B[IsUnaryOpcode(B)] cSqr cAdd cSqrt",
								"A B cHypot",
								"    with B = " << FP_TRACE_OPCODENAME(B)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Llf;
						}
					}
				}
			}
			break;
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(240,"cInv cSqrt", "cRSqrt", "");
			goto Lga;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(217,
				"x cSqrt",
				"[fp_sqrt(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Llg;
		}
		goto Default0;
	TailCall_cSub:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSub:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(74,"cDup cSub", "[Value_t()] cMul", "");
			goto Lkm;
		case cMul:
			switch(ByteCodePtr[-1])
			{
			case cImmed:
				x = ImmedPtr[0];
				A = ByteCodePtr[-2];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-3] == cMul)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(273,
							"cMul A[IsVarOpcode(A)] x cMul cSub",
							"A [DO_STACKPLUS2] [x] cFmms",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						incStackPtr();
						incStackPtr();
						--mStackPtr;
						--mStackPtr;
						goto Llh;
					}
				}
				break;
			default:
				B = ByteCodePtr[-1];
				if(IsVarOpcode(B))
				{
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						if(ByteCodePtr[-3] == cMul)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(269,
								"cMul A[IsVarOpcode(A)] B[IsVarOpcode(B)] cMul cSub",
								"A [DO_STACKPLUS2] B cFmms",
								"    with B = " << FP_TRACE_OPCODENAME(B)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							incStackPtr();
							incStackPtr();
							--mStackPtr;
							--mStackPtr;
							goto Lli;
						}
					}
				}
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						if(ByteCodePtr[-3] == cMul)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(271,
								"cMul x A[IsVarOpcode(A)] cMul cSub",
								"[x] [DO_STACKPLUS2] A cFmms",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", x = " << x
								    << "\n");
							incStackPtr();
							incStackPtr();
							--mStackPtr;
							--mStackPtr;
							goto Llj;
						}
					}
				}
			}
			goto Default11;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(232,"cNeg cSub", "cAdd", "");
			goto Llk;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(56,
					"x[x==Value_t()] cSub",
					"",
					"    with x = " << x << "\n");
				goto Lbc;
			}
			switch(ByteCodePtr[-1])
			{
			case cFma:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(155,
						"y cFma x cSub",
						"[y-x] cFma",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lll;
				}
				break;
			case cMul:
				FP_TRACE_BYTECODE_OPTIMIZATION(267,
					"cMul x cSub",
					"[DO_STACKPLUS1] [x] cFms",
					"    with x = " << x << "\n");
				incStackPtr();
				--mStackPtr;
				/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
				goto Llm;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(124,
					"y x cSub",
					"[y-x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lln;
			}
			FP_TRACE_BYTECODE_OPTIMIZATION(49,
				"x cSub",
				"[-x] cAdd",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Llo;
		default: Default11:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					FP_TRACE_BYTECODE_OPTIMIZATION(265,
						"cMul A[IsVarOpcode(A)] cSub",
						"[DO_STACKPLUS1] A cFms",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Llp;
				case cRSub:
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(345,
							"x cRSub A[IsVarOpcode(A)] cSub",
							"A cAdd [x] cRSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Llq;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(352,
						"cRSub A[IsVarOpcode(A)] cSub",
						"[DO_STACKPLUS1] A cSub cRSub",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Llr;
				}
			}
		}
		goto Default0;
	TailCall_cTan:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cTan:
		switch(ByteCodePtr[0])
		{
		case cAtan2:
			FP_TRACE_BYTECODE_OPTIMIZATION(411,"cAtan2 cTan", "cDiv", "");
			goto Lgt;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(298,"cNeg cTan", "cTan cNeg", "");
			goto Lls;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(219,
				"x cTan",
				"[fp_tan(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Llt;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				if(ByteCodePtr[-1] == cCot)
				{
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(566,
							"B[B==A] cCot A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cTan",
							"B cCot cDup cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cCot; */ // redundant, matches cCot @ 2
						goto Lcc;
					}
				}
			}
		}
		goto Default0;
	TailCall_cTanh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cTanh:
		switch(ByteCodePtr[0])
		{
		case cAtanh:
			FP_TRACE_BYTECODE_OPTIMIZATION(408,"cAtanh cTanh", "", "");
			goto Lbs;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(299,"cNeg cTanh", "cTanh cNeg", "");
			goto Lma;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(220,
				"x cTanh",
				"[fp_tanh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lmb;
		}
		goto Default0;
	TailCall_cTrunc:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cTrunc:
		switch(ByteCodePtr[0])
		{
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(170,
				"x cTrunc",
				"[fp_trunc(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lmc;
		default:
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(452,
					"A[IsAlwaysIntegerOpcode(A)] cTrunc",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	default: Default0:;
		A = opcode;
		if(IsVarOpcode(A)&&mData->mByteCode.size()>0)
		{
			B = ByteCodePtr[0];
			if(B==A)
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(540,
					"B[B==A] A[IsVarOpcode(A)&&mData->mByteCode.size()>0]",
					"B cDup",
					"    with A = " << FP_TRACE_OPCODENAME(A)
					    << ", B = " << FP_TRACE_OPCODENAME(B)
					    << "\n");
				/* ByteCodePtr[0] = B; */ // redundant, matches B @ 1
				goto Lmd;
			}
		}
		if(IsUnaryOpcode(A))
		{
			B = ByteCodePtr[0];
			if(IsVarOpcode(B)&&mData->mByteCode.size()>1)
			{
				C = ByteCodePtr[-1];
				if(C==A)
				{
					D = ByteCodePtr[-2];
					if(D==B)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(541,
							"D[D==B] C[C==A] B[IsVarOpcode(B)&&mData->mByteCode.size()>1] A[IsUnaryOpcode(A)]",
							"D C cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", C = " << FP_TRACE_OPCODENAME(C)
							    << ", D = " << FP_TRACE_OPCODENAME(D)
							    << "\n");
						/* ByteCodePtr[-2] = D; */ // redundant, matches D @ 3
						/* ByteCodePtr[-1] = C; */ // redundant, matches C @ 2
						goto Lme;
					}
				}
			}
		}
		C = opcode;
		if(IsCommutativeOrParamSwappableBinaryOpcode(C))
		{
			switch(ByteCodePtr[0])
			{
			case cSin:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A)&&mData->mByteCode.size()>3)
				{
					if(ByteCodePtr[-2] == cCos)
					{
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(570,
								"B[B==A] cCos A[IsVarOpcode(A)&&mData->mByteCode.size()>3] cSin C[IsCommutativeOrParamSwappableBinaryOpcode(C)]",
								"B cSinCos {GetParamSwappedBinaryOpcode(C)}",
								"    with C = " << FP_TRACE_OPCODENAME(C)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lmf;
						}
					}
				}
				break;
			case cSinh:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A)&&mData->mByteCode.size()>3)
				{
					if(ByteCodePtr[-2] == cCosh)
					{
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(571,
								"B[B==A] cCosh A[IsVarOpcode(A)&&mData->mByteCode.size()>3] cSinh C[IsCommutativeOrParamSwappableBinaryOpcode(C)]",
								"B cSinhCosh {GetParamSwappedBinaryOpcode(C)}",
								"    with C = " << FP_TRACE_OPCODENAME(C)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lmg;
						}
					}
				}
				break;
			}
		}
	}
	goto Laa;
Laa: mData->mByteCode.push_back(opcode); return;
Lab: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lmh: FP_TRACE_BYTECODE_ADD(cAbs);
     goto TailCall_cAbs;
Lac: ImmedPtr[0] = fp_abs(x); return;
Lad: ImmedPtr[0] = fp_acos(x); return;
Lae: ImmedPtr[0] = fp_acosh(x); return;
Laf: mData->mImmed.push_back(Value_t(4));
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
Lmi: opcode = cMul;
Lmj: FP_ReDefinePointers();
Lmk: FP_TRACE_BYTECODE_ADD(cMul);
     goto TailCall_cMul;
Lag: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(Value_t(4));
Lml: mData->mByteCode.push_back(cImmed); goto Lmi;
Lah: ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
Lgd: opcode = cMul; goto Lmk;
Lai: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed);
Lmm: opcode = cFmma;
Lmn: FP_ReDefinePointers();
Lmo: FP_TRACE_BYTECODE_ADD(cFmma);
     goto TailCall_cFmma;
Laj: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(B); goto Lmm;
Lak: ImmedPtr[0] = x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lmm;
Lal: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSub;
Lmp: FP_TRACE_BYTECODE_ADD(cSub);
     goto TailCall_cSub;
Lam: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lmq: FP_ReDefinePointers();
Lmr: FP_TRACE_BYTECODE_ADD(cAdd);
     goto TailCall_cAdd;
Lan: ImmedPtr[-1] = y+x;
Lms: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lmt: opcode = cFma;
     FP_ReDefinePointers();
Lna: FP_TRACE_BYTECODE_ADD(cFma);
     goto TailCall_cFma;
Lao: ByteCodePtr[-1] = cImmed;
Lfg: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lnb: opcode = cFma; goto Lna;
Lap: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Lnc: AddFunctionOpcode(cAdd);
Lnd: opcode = cRSub;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cRSub);
     goto TailCall_cRSub;
Laq: ImmedPtr[0] = -x;
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lnc;
Lar: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lnd;
Las: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lne: AddFunctionOpcode(cAdd);
Lnf: AddFunctionOpcode(B);
Lng: opcode = cSub;
     FP_ReDefinePointers(); goto Lmp;
Lat: ImmedPtr[0] = -x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lne;
Lba: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lnf;
Lbb: ImmedPtr[-1] = y+x;
Lbc: mData->mImmed.pop_back();
Lbs: mData->mByteCode.pop_back(); return;
Lbd: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lmt;
Lbe: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lnc;
Lbf: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lnc;
Lbg: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cNotNot;
     FP_TRACE_BYTECODE_ADD(cNotNot);
     goto TailCall_cNotNot;
Lbh: ImmedPtr[-1] = fp_and(x,y); goto Lbc;
Lbi: ImmedPtr[0] = fp_arg(x); return;
Lbj: ImmedPtr[0] = fp_asin(x); return;
Lbk: ImmedPtr[0] = fp_asinh(x); return;
Lbl: ImmedPtr[0] = fp_atan(x); return;
Lbm: ImmedPtr[-1] = fp_atan2(y,x); goto Lbc;
Lbn: ImmedPtr[0] = fp_atanh(x); return;
Lbo: ImmedPtr[0] = fp_cbrt(x); return;
Lbp: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cCeil);
Lnh: AddFunctionOpcode(A);
     AddFunctionOpcode(B);
Lni: opcode = cAdd; goto Lmq;
Lbq: mData->mByteCode.pop_back();
     AddFunctionOpcode(cFloor);
Lnj: opcode = cNeg;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cNeg);
     goto TailCall_cNeg;
Lbr: ImmedPtr[0] = fp_ceil(x); return;
Lbt: ImmedPtr[0] = fp_conj(x); return;
Lca: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lnk: FP_TRACE_BYTECODE_ADD(cCos);
     goto TailCall_cCos;
Lcb: ImmedPtr[0] = fp_cos(x); return;
Lcc: ByteCodePtr[0] = cDup;
Lnl: opcode = cInv;
Lnm: FP_TRACE_BYTECODE_ADD(cInv);
     goto TailCall_cInv;
Lcd: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinCos); return;
Lce: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSqr);
     mData->mImmed.push_back(Value_t(1));
Lnn: mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cAdd);
Lno: opcode = cSqrt;
     FP_ReDefinePointers();
Lnp: FP_TRACE_BYTECODE_ADD(cSqrt);
     goto TailCall_cSqrt;
Lcf: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     FP_TRACE_BYTECODE_ADD(cCosh);
     goto TailCall_cCosh;
Lcg: ImmedPtr[0] = fp_cosh(x); return;
Lch: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinhCosh); return;
Lci: ImmedPtr[0] = RadiansToDegrees(x); return;
Lcj: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSec); goto Lmi;
Lck: mData->mByteCode.pop_back();
     AddFunctionOpcode(cTan); goto Lmi;
Lcl: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSin); goto Lmi;
Lcm: mData->mImmed.push_back(Value_t());
     ByteCodePtr[0] = cImmed;
Lnq: AddFunctionOpcode(cMul);
     mData->mImmed.push_back(Value_t(1));
Lnr: mData->mByteCode.push_back(cImmed); goto Lni;
Lcn: mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     AddFunctionOpcode(cExp); goto Lmi;
Lco: mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     AddFunctionOpcode(cExp2); goto Lmi;
Lcp: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lgd;
Lcq: mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     AddFunctionOpcode(cPow); goto Lmi;
Lcr: mData->mByteCode.pop_back();
     AddFunctionOpcode(cCos); goto Lmi;
Lcs: mData->mByteCode.pop_back();
     AddFunctionOpcode(cCsc); goto Lmi;
Lct: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cTan;
Lns: FP_TRACE_BYTECODE_ADD(cTan);
     goto TailCall_cTan;
Lda: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cTanh;
Lnt: FP_TRACE_BYTECODE_ADD(cTanh);
     goto TailCall_cTanh;
Ldb: mData->mByteCode.pop_back();
     AddFunctionOpcode(cCot); goto Lmi;
Ldc: ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Loa: FP_TRACE_BYTECODE_ADD(cDiv);
     goto TailCall_cDiv;
Ldd: ImmedPtr[-1] = y/x; goto Lbc;
Lde: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Lob: opcode = cDeg;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cDeg);
     goto TailCall_cDeg;
Ldf: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Loc: opcode = cRad;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cRad);
     goto TailCall_cRad;
Ldg: ImmedPtr[-1] = y/x;
Lem: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lmi;
Ldh: ImmedPtr[0] = fp_inv(x); goto Lgd;
Ldi: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cMul);
Lod: FP_ReDefinePointers(); goto Loa;
Ldj: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed);
Loe: opcode = cRDiv;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cRDiv);
     goto TailCall_cRDiv;
Ldk: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(B); goto Loe;
Ldl: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lof: FP_TRACE_BYTECODE_ADD(cEqual);
     goto TailCall_cEqual;
Ldm: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     opcode = cNot;
     FP_ReDefinePointers();
Log: FP_TRACE_BYTECODE_ADD(cNot);
     goto TailCall_cNot;
Ldn: ImmedPtr[-1] = fp_equal(y,x); goto Lbc;
Ldo: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cExp);
     mData->mImmed.push_back(fp_exp(x)); goto Lml;
Ldp: ImmedPtr[0] = fp_exp(x); return;
Ldq: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cExp2);
     mData->mImmed.push_back(fp_exp2(x)); goto Lml;
Ldr: ImmedPtr[0] = fp_exp2(x); return;
Lds: mData->mImmed.push_back(fp_log(Value_t(2)));
     mData->mByteCode.push_back(cImmed);
Loh: AddFunctionOpcode(cMul);
     opcode = cExp;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cExp);
     goto TailCall_cExp;
Ldt: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cFloor); goto Lnh;
Lea: mData->mByteCode.pop_back();
     AddFunctionOpcode(cCeil); goto Lnj;
Leb: ImmedPtr[0] = fp_floor(x); return;
Lec: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cFms;
Loi: FP_TRACE_BYTECODE_ADD(cFms);
     goto TailCall_cFms;
Led: ImmedPtr[-2] = y*x+a;
Loj: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} return;
Lee: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lmi;
Lef: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cFmms;
Lok: FP_TRACE_BYTECODE_ADD(cFmms);
     goto TailCall_cFmms;
Leg: ByteCodePtr[-2] = cImmed;
Lol: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lom: AddFunctionOpcode(cMul); goto Lmn;
Leh: ImmedPtr[-1] = x;
     mData->mImmed.pop_back(); goto Lol;
Lei: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
Lon: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Loo: AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lom;
Lej: mData->mImmed.pop_back(); goto Lon;
Lek: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(B); goto Loo;
Lel: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Loo;
Len: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back(); goto Lom;
Leo: ImmedPtr[-3] = y*x+a*b;
Lop: for(unsigned tmp=3; tmp-->0; ) {mData->mImmed.pop_back();}
Loq: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} return;
Lep: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lmt;
Leq: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
Lor: opcode = cFms;
     FP_ReDefinePointers(); goto Loi;
Ler: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cFmma; goto Lmo;
Les: ByteCodePtr[-2] = cImmed;
Los: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lot: AddFunctionOpcode(cMul);
Lpa: FP_ReDefinePointers(); goto Lok;
Let: ImmedPtr[-1] = x;
     mData->mImmed.pop_back(); goto Los;
Lfa: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
Lpb: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lpc: AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lot;
Lfb: mData->mImmed.pop_back(); goto Lpb;
Lfc: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(B); goto Lpc;
Lfd: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lpc;
Lfe: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back(); goto Lot;
Lff: ImmedPtr[-3] = y*x-a*b; goto Lop;
Lfh: ImmedPtr[-2] = y*x-a; goto Loj;
Lfi: ImmedPtr[0] = -x; goto Lnb;
Lfj: ImmedPtr[-1] = fp_less(x,y); goto Lbc;
Lfk: ImmedPtr[-1] = fp_lessOrEq(x,y); goto Lbc;
Lfl: ImmedPtr[0] = fp_imag(x); return;
Lfm: mData->mImmed.push_back(Value_t()); goto Lml;
Lfn: ImmedPtr[0] = fp_int(x); return;
Lfo: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSec;
     FP_TRACE_BYTECODE_ADD(cSec);
     goto TailCall_cSec;
Lfp: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSin;
Lpd: FP_TRACE_BYTECODE_ADD(cSin);
     goto TailCall_cSin;
Lfq: mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     opcode = cPow;
Lpe: FP_ReDefinePointers();
Lpf: FP_TRACE_BYTECODE_ADD(cPow);
     goto TailCall_cPow;
Lfr: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSqrt; goto Lnp;
Lfs: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cCos; goto Lnk;
Lft: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cCsc;
     FP_TRACE_BYTECODE_ADD(cCsc);
     goto TailCall_cCsc;
Lga: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cRSqrt;
Lpg: FP_TRACE_BYTECODE_ADD(cRSqrt);
     goto TailCall_cRSqrt;
Lgb: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lph: opcode = cCot;
     FP_TRACE_BYTECODE_ADD(cCot);
     goto TailCall_cCot;
Lgc: ImmedPtr[0] = fp_inv(x); return;
Lge: ImmedPtr[-1] = fp_less(y,x); goto Lbc;
Lgf: ImmedPtr[-1] = fp_lessOrEq(y,x); goto Lbc;
Lgg: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cLog);
     mData->mImmed.push_back(fp_log(x)); goto Lnr;
Lgh: ImmedPtr[0] = fp_log(x); return;
Lgi: mData->mImmed.push_back(fp_log10(fp_const_e<Value_t>()));
Lpi: ByteCodePtr[0] = cImmed; goto Lmi;
Lgj: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cLog10);
     mData->mImmed.push_back(fp_log10(x)); goto Lnr;
Lgk: ImmedPtr[0] = fp_log10(x); return;
Lgl: mData->mImmed.push_back(fp_log2(fp_const_e<Value_t>())); goto Lpi;
Lgm: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cLog2);
     mData->mImmed.push_back(fp_log2(x)); goto Lnr;
Lgn: ImmedPtr[0] = fp_log2(x); return;
Lgo: ImmedPtr[-1] = fp_max(x,y); goto Lbc;
Lgp: ImmedPtr[-1] = fp_min(x,y); goto Lbc;
Lgq: ImmedPtr[-1] = fp_mod(y,x); goto Lbc;
Lgr: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 3; goto Lph;
Lgs: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSqr;
Lpj: FP_TRACE_BYTECODE_ADD(cSqr);
     goto TailCall_cSqr;
Lgt: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cDiv; goto Loa;
Lha: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr); goto Lnj;
Lhb: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr);
     AddFunctionOpcode(cMul); goto Lnj;
Lhc: ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
     opcode = cPow; goto Lpf;
Lhd: ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2; goto Lmk;
Lhe: ImmedPtr[-1] = x;
Lpk: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lmj;
Lhf: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
Lpl: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lpm: AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
Lpn: mData->mByteCode.push_back(cImmed); goto Lmj;
Lhg: mData->mImmed.pop_back(); goto Lpl;
Lhh: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(B); goto Lpm;
Lhi: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lpm;
Lhj: ByteCodePtr[-1] = cImmed; goto Lbs;
Lhk: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lmk;
Lhl: mData->mImmed.pop_back(); goto Loq;
Lhm: ImmedPtr[0] = x+x; goto Lhd;
Lhn: ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     mData->mImmed.push_back(y*x);
     mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cMul); goto Lni;
Lho: ImmedPtr[-1] = x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(y*x); goto Lnr;
Lhp: ImmedPtr[0] = RadiansToDegrees(x); goto Lhk;
Lhq: ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lpo: AddFunctionOpcode(cMul);
Lpp: AddFunctionOpcode(B);
     opcode = cDiv; goto Lod;
Lhr: ImmedPtr[0] = -x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lpo;
Lhs: ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lpp;
Lht: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lmj;
Lia: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(x+x); goto Lpn;
Lib: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();} goto Loq;
Lic: ImmedPtr[-1] = y*x; goto Lpk;
Lid: ImmedPtr[0] = -x; goto Lhk;
Lie: ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Lpq: AddFunctionOpcode(cMul); goto Loe;
Lif: ImmedPtr[0] = -x;
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lpq;
Lig: ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Loe;
Lih: ImmedPtr[0] = DegreesToRadians(x); goto Lhk;
Lii: ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     mData->mImmed.push_back(y*x);
     mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cMul); goto Lng;
Lij: ImmedPtr[-1] = y*x; goto Lbc;
Lik: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lnj;
Lil: ByteCodePtr[0] = cDup;
     ImmedPtr -= 1;
     mData->mImmed.pop_back();
Lpr: opcode = cAdd; goto Lmr;
Lim: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lob;
Lin: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Loc;
Lio: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lpo;
Lip: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lps: AddFunctionOpcode(cSqr); goto Lmj;
Liq: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lpq;
Lir: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lpq;
Lis: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lps;
Lit: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lpt: FP_TRACE_BYTECODE_ADD(cNEqual);
     goto TailCall_cNEqual;
Lja: ImmedPtr[-1] = fp_nequal(y,x); goto Lbc;
Ljb: ImmedPtr[0] = -x; goto Lcp;
Ljc: ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     opcode = cSin;
     FP_ReDefinePointers(); goto Lpd;
Ljd: ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     opcode = cSinh;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cSinh);
     goto TailCall_cSinh;
Lje: ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     opcode = cTan;
     FP_ReDefinePointers(); goto Lns;
Ljf: ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     opcode = cTanh;
     FP_ReDefinePointers(); goto Lnt;
Ljg: ImmedPtr[0] = -x; return;
Ljh: mData->mByteCode.pop_back();
     AddFunctionOpcode(cAbsNot); return;
Lji: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cNEqual; goto Lpt;
Ljj: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cLessOrEq;
     FP_TRACE_BYTECODE_ADD(cLessOrEq);
     goto TailCall_cLessOrEq;
Ljk: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cLess;
     FP_TRACE_BYTECODE_ADD(cLess);
     goto TailCall_cLess;
Ljl: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cGreaterOrEq;
     FP_TRACE_BYTECODE_ADD(cGreaterOrEq);
     goto TailCall_cGreaterOrEq;
Ljm: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cGreater;
     FP_TRACE_BYTECODE_ADD(cGreater);
     goto TailCall_cGreater;
Ljn: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cEqual; goto Lof;
Ljo: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Log;
Ljp: ImmedPtr[0] = fp_not(x); return;
Ljq: ImmedPtr[-1] = fp_or(x,y); goto Lbc;
Ljr: ImmedPtr[-1] = fp_polar(x,y); goto Lbc;
Ljs: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back(); goto Loh;
Ljt: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cMul);
     opcode = cExp2;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cExp2);
     goto TailCall_cExp2;
Lka: ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lpe;
Lkb: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cMul); goto Lpe;
Lkc: ImmedPtr[0] = Value_t(); goto Lnq;
Lkd: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lno;
Lke: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     opcode = cCbrt;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cCbrt);
     goto TailCall_cCbrt;
Lkf: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cCbrt);
Lqa: opcode = cInv;
     FP_ReDefinePointers(); goto Lnm;
Lkg: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     opcode = cRSqrt;
     FP_ReDefinePointers(); goto Lpg;
Lkh: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lqa;
Lki: ImmedPtr[0] = x+x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lpf;
Lkj: ImmedPtr[-1] = fp_pow(y,x); goto Lbc;
Lkk: mData->mByteCode.pop_back();
     AddFunctionOpcode(cTanh); goto Lqa;
Lkl: mData->mByteCode.pop_back();
     AddFunctionOpcode(cInv);
     opcode = cAbs;
     FP_ReDefinePointers(); goto Lmh;
Lkm: mData->mImmed.push_back(Value_t()); goto Lpi;
Lkn: ImmedPtr[0] = DegreesToRadians(x); goto Lcp;
Lko: ImmedPtr[0] = DegreesToRadians(x); return;
Lkp: ImmedPtr[0] = fp_real(x); return;
Lkq: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinCos); goto Lqa;
Lkr: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSin); goto Lnj;
Lks: ImmedPtr[0] = fp_sin(x); return;
Lkt: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSqr);
     mData->mImmed.push_back(Value_t(-1)); goto Lnn;
Lla: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSinh); goto Lnj;
Llb: ImmedPtr[0] = fp_sinh(x); return;
Llc: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lpj;
Lld: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lnl;
Lle: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
Lqb: opcode = cHypot;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cHypot);
     goto TailCall_cHypot;
Llf: for(unsigned tmp=5; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(B); goto Lqb;
Llg: ImmedPtr[0] = fp_sqrt(x); return;
Llh: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed);
Lqc: opcode = cFmms; goto Lpa;
Lli: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(B); goto Lqc;
Llj: ImmedPtr[0] = x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lqc;
Llk: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lpr;
Lll: ImmedPtr[-1] = y-x; goto Lms;
Llm: ByteCodePtr[-1] = cImmed; goto Lec;
Lln: ImmedPtr[-1] = y-x; goto Lbc;
Llo: ImmedPtr[0] = -x; goto Lpr;
Llp: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lor;
Llq: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cAdd);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lnd;
Llr: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cSub); goto Lnd;
Lls: mData->mByteCode.pop_back();
     AddFunctionOpcode(cTan); goto Lnj;
Llt: ImmedPtr[0] = fp_tan(x); return;
Lma: mData->mByteCode.pop_back();
     AddFunctionOpcode(cTanh); goto Lnj;
Lmb: ImmedPtr[0] = fp_tanh(x); return;
Lmc: ImmedPtr[0] = fp_trunc(x); return;
Lmd: mData->mByteCode.push_back(cDup); return;
Lme: ByteCodePtr[0] = cDup; return;
Lmf: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinCos);
Lqd: AddFunctionOpcode(GetParamSwappedBinaryOpcode(C)); return;
Lmg: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinhCosh); goto Lqd;
return;
// This list of dummy gotos is here to inhibit
// compiler warnings on unused labels
goto TailCall_cAcos;goto TailCall_cAcosh;goto TailCall_cAnd;
goto TailCall_cArg;goto TailCall_cAsin;goto TailCall_cAsinh;
goto TailCall_cAtan;goto TailCall_cAtan2;goto TailCall_cAtanh;
goto TailCall_cCeil;goto TailCall_cConj;goto TailCall_cFloor;
goto TailCall_cImag;goto TailCall_cInt;goto TailCall_cLog;
goto TailCall_cLog10;goto TailCall_cLog2;goto TailCall_cMax;
goto TailCall_cMin;goto TailCall_cMod;goto TailCall_cOr;
goto TailCall_cPolar;goto TailCall_cRDiv;goto TailCall_cRad;
goto TailCall_cReal;goto TailCall_cSec;goto TailCall_cSin;
goto TailCall_cSinh;goto TailCall_cSqrt;goto TailCall_cSub;
goto TailCall_cTan;goto TailCall_cTanh;goto TailCall_cTrunc;
#endif

#undef FP_ReDefinePointers
#undef FP_TRACE_BYTECODE_OPTIMIZATION
