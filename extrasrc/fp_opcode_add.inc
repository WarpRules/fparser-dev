/* Function Parser for C++ v5.0.0   

  NOTE:
  Do not include this file in your project. The fparser.cc file #includes
this file internally and thus you don't need to do anything (other than keep
this file in the same directory as fparser.cc).

  This file contains generated code and is thus not intended to be to
be modified by hand. It was generated by util/bytecoderules_parser, which
is available in the development package.
*/
#define HasInvalidRangesOpcode HasInvalidRangesOpcode<IsComplexType<Value_t>::value>
#define FP_TRACE_BYTECODE_OPTIMIZATION(srcline,from,to,with) \
    /*std::cout << "Changing \"" from "\"\t(line " #srcline ")\n" \
                   "    into \"" to "\"\n" with << std::flush*/
#define FP_TRACE_OPCODENAME(op) \
    (op < VarBegin \
        ? FP_GetOpcodeName(OPCODE(op)) \
        : findName(mData->mNamePtrs,op,NameData<Value_t>::VARIABLE))
#define FP_TRACE_BYTECODE_ADD(opcode) \
    /*std::cout << "Adding opcode: " << FP_TRACE_OPCODENAME(opcode) \
                << ", bytecode length " << data->ByteCode.size() \
                << ", pointer is " << (void*)ByteCodePtr \
                << ", code is " << (data->ByteCode.empty() \
                                       ? (void*)0 \
                                       : (void*)&data->ByteCode[0]) \
                << std::endl*/
  unsigned* ByteCodePtr;
  Value_t*   ImmedPtr;

  #define FP_ReDefinePointers() \
    ByteCodePtr = !mData->mByteCode.empty() ? &mData->mByteCode[0] + mData->mByteCode.size() - 1 : 0; \
    ImmedPtr    = !mData->mImmed.empty()    ? &mData->mImmed[0]    + mData->mImmed.size()    - 1 : 0;
  FP_ReDefinePointers();
  FP_TRACE_BYTECODE_ADD(opcode);

#if(!(FP_COMPLEX_VERSION) && !(FP_FLOAT_VERSION))
	Value_t x;
	unsigned A;
	Value_t y;
	unsigned B;
	unsigned C;
	unsigned D;
	switch(opcode)
	{
	TailCall_cAbs:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAbs:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(201,"cNeg cAbs", "cAbs", "");
			/* opcode = cAbs; */ // redundant, matches cAbs @ 0
			goto Lab;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(132,
				"x cAbs",
				"[fp_abs(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lac;
		default:
			A = ByteCodePtr[0];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(393,
					"A[IsNeverNegativeValueOpcode(A)] cAbs",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cAdd:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAdd:
		switch(ByteCodePtr[0])
		{
		case cDup:
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(310,"cDup cAdd cDup cAdd", "[Value_t(4)] cMul", "");
					goto Lad;
				}
				break;
			case cMul:
				if(ByteCodePtr[-2] == cAdd)
				{
					if(ByteCodePtr[-3] == cDup)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(311,"cDup cAdd cMul cDup cAdd", "cMul [Value_t(4)] cMul", "");
						goto Lae;
					}
				}
				break;
			}
			goto Default1;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(313,
						"cDup x cMul cAdd",
						"[x+Value_t(1)] cMul",
						"    with x = " << x << "\n");
					goto Laf;
				}
			}
			goto Default1;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(199,"cNeg cAdd", "cSub", "");
			goto Lag;
		case cImmed:
			x = ImmedPtr[0];
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(127,
						"y cAdd x cAdd",
						"[y+x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cAdd; */ // redundant, matches cAdd @ 0
					goto Lah;
				}
				break;
			case cRSub:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(298,
							"y cAdd cRSub x cAdd",
							"[ y+x] cAdd cRSub",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lai;
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(299,
						"cNeg cRSub x cAdd",
						"[-x] cAdd cRSub",
						"    with x = " << x << "\n");
					goto Laj;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(297,
						"y cRSub x cAdd",
						"[ y+x] cRSub",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lak;
				}
				break;
			case cSub:
				B = ByteCodePtr[-2];
				if(IsVarOpcode(B))
				{
					switch(ByteCodePtr[-3])
					{
					case cAdd:
						if(ByteCodePtr[-4] == cImmed)
						{
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(292,
								"y cAdd B[IsVarOpcode(B)] cSub x cAdd",
								"[ y+x] cAdd B cSub",
								"    with x = " << x
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-4] = cImmed; */ // redundant, matches y @ 5
							goto Lal;
						}
						break;
					case cNeg:
						FP_TRACE_BYTECODE_OPTIMIZATION(293,
							"cNeg B[IsVarOpcode(B)] cSub x cAdd",
							"[-x] cAdd B cSub",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						goto Lam;
					case cImmed:
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(291,
							"y B[IsVarOpcode(B)] cSub x cAdd",
							"[ y+x] B cSub",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lan;
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(105,
					"y x cAdd",
					"[y+x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lao;
			}
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(57,
					"x[x==Value_t()] cAdd",
					"",
					"    with x = " << x << "\n");
				goto Lap;
			}
			break;
		default: Default1:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				if(ByteCodePtr[-1] == cRSub)
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(290,
							"x cRSub A[IsVarOpcode(A)] cAdd",
							"[DO_STACKPLUS1] A [x] cAdd cRSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						incStackPtr();
						--mStackPtr;
						goto Laq;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(295,
						"cRSub A[IsVarOpcode(A)] cAdd",
						"[DO_STACKPLUS1] A cAdd cRSub",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Lar;
				}
			}
		}
		goto Default0;
	TailCall_cAnd:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAnd:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(224,"cDup cAnd", "cNotNot", "");
			goto Lba;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(117,
					"y x cAnd",
					"[fp_and(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbb;
			}
			break;
		}
		goto Default0;
	TailCall_cDiv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cDiv:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(78,"cDup cDiv", "[Value_t()] cMul [Value_t(1)] cAdd", "");
			goto Lbc;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(125,
						"cNeg x[x!=Value_t()] cDiv",
						"[-x] cDiv",
						"    with x = " << x << "\n");
					/* opcode = cDiv; */ // redundant, matches cDiv @ 0
					goto Lbd;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(103,
						"y x[x!=Value_t()] cDiv",
						"[y/x]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Lbe;
				}
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(56,
					"x[x==Value_t(1)] cDiv",
					"",
					"    with x = " << x << "\n");
				goto Lap;
			}
			break;
		}
		goto Default0;
	TailCall_cEqual:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				A = ByteCodePtr[-1];
				if(IsLogicalOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(426,
						"A[IsLogicalOpcode(A)] x[x==Value_t(1)] cEqual",
						"A",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					goto Lap;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(115,
					"y x cEqual",
					"[fp_equal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbf;
			}
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(359,
						"cAbs x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Lbg;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(361,
						"cSqr x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Lbg;
				default:
					A = ByteCodePtr[-1];
					if(IsLogicalOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(428,
							"A[IsLogicalOpcode(A)] x[x==Value_t(0)] cEqual",
							"A cNot",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lbh;
					}
				}
				FP_TRACE_BYTECODE_OPTIMIZATION(416,
					"x[x==Value_t(0)] cEqual",
					"cNot",
					"    with x = " << x << "\n");
				goto Lbh;
			}
		}
		goto Default0;
	TailCall_cGreater:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cGreater:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(418,
						"cAbs x[x==Value_t(0)] cGreater",
						"cNotNot",
						"    with x = " << x << "\n");
					goto Lbi;
				default:
					A = ByteCodePtr[-1];
					if(IsNeverNegativeValueOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(422,
							"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(0)] cGreater",
							"A cNotNot",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lbj;
					}
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(113,
					"y x cGreater",
					"[fp_less(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbk;
			}
		}
		goto Default0;
	TailCall_cGreaterOrEq:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cGreaterOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(419,
						"cAbs x[x==Value_t(1)] cGreaterOrEq",
						"cNotNot",
						"    with x = " << x << "\n");
					goto Lbi;
				default:
					A = ByteCodePtr[-1];
					if(IsNeverNegativeValueOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(423,
							"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(1)] cGreaterOrEq",
							"A cNotNot",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lbj;
					}
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(114,
					"y x cGreaterOrEq",
					"[fp_lessOrEq(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbl;
			}
		}
		goto Default0;
	TailCall_cInv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cInv:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(101,
					"x[x!=Value_t()] cInv",
					"[Value_t(1)/x]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lbm;
			}
		}
		goto Default0;
	TailCall_cLess:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLess:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				A = ByteCodePtr[-1];
				if(IsNeverNegativeValueOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(301,
						"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(0)] cLess",
						"A [x] cMul",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
					goto Lbn;
				}
			}
			if(x==Value_t(1))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(420,
						"cAbs x[x==Value_t(1)] cLess",
						"cNot",
						"    with x = " << x << "\n");
					goto Lbo;
				default:
					A = ByteCodePtr[-1];
					if(IsNeverNegativeValueOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(424,
							"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(1)] cLess",
							"A cNot",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lbh;
					}
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(111,
					"y x cLess",
					"[fp_less(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbp;
			}
		}
		goto Default0;
	TailCall_cLessOrEq:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLessOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(421,
						"cAbs x[x==Value_t(0)] cLessOrEq",
						"cNot",
						"    with x = " << x << "\n");
					goto Lbo;
				default:
					A = ByteCodePtr[-1];
					if(IsNeverNegativeValueOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(425,
							"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(0)] cLessOrEq",
							"A cNot",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lbh;
					}
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(112,
					"y x cLessOrEq",
					"[fp_lessOrEq(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbq;
			}
		}
		goto Default0;
	TailCall_cMax:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMax:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(60,"cDup cMax", "", "");
			goto Lbr;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(141,
					"y x cMax",
					"[fp_max(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lca;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(66,
							"B[B==A] cDup A[IsVarOpcode(A)] cMax",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Lbr;
					}
					break;
				case cMax:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(68,
							"B[B==A] cMax A[IsVarOpcode(A)] cMax",
							"B cMax",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMax; */ // redundant, matches cMax @ 2
						goto Lbr;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cMin:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMin:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(59,"cDup cMin", "", "");
			goto Lbr;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(140,
					"y x cMin",
					"[fp_min(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lcb;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(65,
							"B[B==A] cDup A[IsVarOpcode(A)] cMin",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Lbr;
					}
					break;
				case cMin:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(67,
							"B[B==A] cMin A[IsVarOpcode(A)] cMin",
							"B cMin",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMin; */ // redundant, matches cMin @ 2
						goto Lbr;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cMod:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMod:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				if(ByteCodePtr[-1] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(104,
						"y x[x!=Value_t()] cMod",
						"[fp_mod(y,x)]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Lcc;
				}
			}
		}
		goto Default0;
	TailCall_cMul:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMul:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(202,"cDup cMul", "cSqr", "");
			goto Lcd;
		case cNeg:
			switch(ByteCodePtr[-1])
			{
			case cDup:
				FP_TRACE_BYTECODE_OPTIMIZATION(474,"cDup cNeg cMul", "cSqr cNeg", "");
				goto Lce;
			default:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cMul)
					{
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(480,
								"B[B==A] cMul A[IsVarOpcode(A)] cNeg cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lcf;
						}
					}
				}
			}
			goto Default2;
		case cPow:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(314,
						"cDup x cPow cMul",
						"[x+Value_t(1)] cPow",
						"    with x = " << x << "\n");
					goto Lcg;
				}
			}
			goto Default2;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(93,
							"A[IsVarOpcode(A)] cMul x[x==Value_t()] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lch;
					}
					goto Default3;
				default: Default3:;
					A = ByteCodePtr[-1];
					if(IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						switch(ByteCodePtr[-2])
						{
						case cImmed:
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(92,
								"y A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
								"[x] cMul",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lci;
						default:
							B = ByteCodePtr[-2];
							if(IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								switch(ByteCodePtr[-3])
								{
								case cImmed:
									y = ImmedPtr[-1];
									FP_TRACE_BYTECODE_OPTIMIZATION(96,
										"y B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
										"A [x] cMul",
										"    with x = " << x
										    << ", A = " << FP_TRACE_OPCODENAME(A)
										    << ", B = " << FP_TRACE_OPCODENAME(B)
										    << ", y = " << y
										    << "\n");
									/* opcode = cMul; */ // redundant, matches cMul @ 0
									goto Lcj;
								default:
									C = ByteCodePtr[-3];
									if(IsVarOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(94,
											"C[IsVarOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
											"A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lck;
									}
									if(IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(95,
											"C[IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
											"B A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lcl;
									}
								}
							}
							if(IsVarOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(90,
									"B[IsVarOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
									"[x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lch;
							}
							if(IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(91,
									"B[IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
									"A [x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lcm;
							}
						}
					}
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(88,
							"A[IsVarOpcode(A)] x[x==Value_t()] cMul",
							"[x]",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						goto Lcn;
					}
					if(IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(89,
							"A[IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lco;
					}
				}
			}
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				switch(ByteCodePtr[-2])
				{
				case cDup:
					FP_TRACE_BYTECODE_OPTIMIZATION(317,
						"cDup cAdd x cMul",
						"[x+x] cMul",
						"    with x = " << x << "\n");
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Lcp;
				case cMul:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(IsVarOpcode(A))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(386,
								"A[IsVarOpcode(A)] y cMul cAdd x cMul",
								"[x] cMul A [y*x] cMul cAdd",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lcq;
						}
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(385,
						"y cAdd x cMul",
						"[x] cMul [y*x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lcr;
				}
				break;
			case cMul:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cDup)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(319,
							"cDup cAdd cMul x cMul",
							"cMul [x+x] cMul",
							"    with x = " << x << "\n");
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lda;
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					if(y*x==Value_t(1))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(70,
							"y[y*x==Value_t(1)] cMul x cMul",
							"",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Ldb;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(128,
						"y cMul x cMul",
						"[y*x] cMul",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Ldc;
				}
				break;
			case cNeg:
				FP_TRACE_BYTECODE_OPTIMIZATION(122,
					"cNeg x cMul",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Ldd;
			case cSub:
				if(ByteCodePtr[-2] == cMul)
				{
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(IsVarOpcode(A))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(387,
								"A[IsVarOpcode(A)] y cMul cSub x cMul",
								"[x] cMul A [y*x] cMul cSub",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lde;
						}
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(102,
					"y x cMul",
					"[y*x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldf;
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(55,
					"x[x==Value_t(1)] cMul",
					"",
					"    with x = " << x << "\n");
				goto Lap;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(124,
					"x[x==Value_t(-1)] cMul",
					"cNeg",
					"    with x = " << x << "\n");
				goto Ldg;
			}
			if(x==Value_t(2))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(198,
					"x[x==Value_t(2)] cMul",
					"cDup cAdd",
					"    with x = " << x << "\n");
				goto Ldh;
			}
			break;
		default: Default2:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					switch(ByteCodePtr[-2])
					{
					case cNeg:
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(477,
								"B[B==A] cNeg cMul A[IsVarOpcode(A)] cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lcf;
						}
						goto Default4;
					default: Default4:;
						B = ByteCodePtr[-2];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(468,
								"B[B==A] cMul A[IsVarOpcode(A)] cMul",
								"B cSqr cMul",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Ldi;
						}
					}
					goto Default5;
				case cNeg:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(471,
							"B[B==A] cNeg A[IsVarOpcode(A)] cMul",
							"B cSqr cNeg",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lce;
					}
					goto Default5;
				default: Default5:;
					B = ByteCodePtr[-1];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(465,
							"B[B==A] A[IsVarOpcode(A)] cMul",
							"B cSqr",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-1] = B; */ // redundant, matches B @ 2
						goto Lcd;
					}
				}
			}
			if(IsUnaryOpcode(A))
			{
				B = ByteCodePtr[-1];
				if(IsVarOpcode(B)&&mData->mByteCode.size()>1)
				{
					if(ByteCodePtr[-2] == cMul)
					{
						C = ByteCodePtr[-3];
						if(C==A)
						{
							D = ByteCodePtr[-4];
							if(D==B)
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(484,
									"D[D==B] C[C==A] cMul B[IsVarOpcode(B)&&mData->mByteCode.size()>1] A[IsUnaryOpcode(A)] cMul",
									"D C cSqr cMul",
									"    with A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << ", C = " << FP_TRACE_OPCODENAME(C)
									    << ", D = " << FP_TRACE_OPCODENAME(D)
									    << "\n");
								/* ByteCodePtr[-4] = D; */ // redundant, matches D @ 5
								/* ByteCodePtr[-3] = C; */ // redundant, matches C @ 4
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Ldj;
							}
						}
					}
				}
			}
		}
		goto Default0;
	TailCall_cNEqual:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				A = ByteCodePtr[-1];
				if(IsLogicalOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(427,
						"A[IsLogicalOpcode(A)] x[x==Value_t(1)] cNEqual",
						"A cNot",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					goto Lbh;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(116,
					"y x cNEqual",
					"[fp_nequal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldk;
			}
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(360,
						"cAbs x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Ldl;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(362,
						"cSqr x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Ldl;
				default:
					A = ByteCodePtr[-1];
					if(IsLogicalOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(429,
							"A[IsLogicalOpcode(A)] x[x==Value_t(0)] cNEqual",
							"A",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lap;
					}
				}
				FP_TRACE_BYTECODE_OPTIMIZATION(417,
					"x[x==Value_t(0)] cNEqual",
					"cNotNot",
					"    with x = " << x << "\n");
				goto Lbj;
			}
		}
		goto Default0;
	TailCall_cNeg:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNeg:
		switch(ByteCodePtr[0])
		{
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(123,
					"x cMul cNeg",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Ldm;
			}
			break;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(61,"cNeg cNeg", "", "");
			goto Lbr;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(100,
				"x cNeg",
				"[-x]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Ldn;
		}
		goto Default0;
	TailCall_cNot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNot:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(227,"cAbs cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Ldo;
		case cAbsNot:
			A = ByteCodePtr[-1];
			if(IsLogicalOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(389,
					"A[IsLogicalOpcode(A)] cAbsNot cNot",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Lbr;
			}
			if(A!=cImmed)
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(390,
					"A[A!=cImmed] cAbsNot cNot",
					"A cAbsNotNot",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Ldp;
			}
			goto Default6;
		case cAbsNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(231,"cAbsNotNot cNot", "cAbsNot", "");
			goto Ldq;
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(431,
					"x cAdd cNot",
					"[-x] cEqual",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Ldr;
			}
			goto Default6;
		case cEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(220,"cEqual cNot", "cNEqual", "");
			goto Lea;
		case cGreater:
			FP_TRACE_BYTECODE_OPTIMIZATION(218,"cGreater cNot", "cLessOrEq", "");
			goto Leb;
		case cGreaterOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(219,"cGreaterOrEq cNot", "cLess", "");
			goto Lec;
		case cLess:
			FP_TRACE_BYTECODE_OPTIMIZATION(216,"cLess cNot", "cGreaterOrEq", "");
			goto Led;
		case cLessOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(217,"cLessOrEq cNot", "cGreater", "");
			goto Lee;
		case cNEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(221,"cNEqual cNot", "cEqual", "");
			goto Lef;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(226,"cNeg cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Ldo;
		case cNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(229,"cNot cNot", "cNotNot", "");
			goto Lba;
		case cNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(230,"cNotNot cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Ldo;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(107,
				"x cNot",
				"[fp_not(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Leg;
		default: Default6:;
			A = ByteCodePtr[0];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(391,
					"A[IsNeverNegativeValueOpcode(A)] cNot",
					"A cAbsNot",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				goto Leh;
			}
		}
		goto Default0;
	TailCall_cNotNot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNotNot:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(430,
					"x cAdd cNotNot",
					"[-x] cNEqual",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Lei;
			}
			break;
		case cNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(232,"cNot cNotNot", "cNot", "");
			/* ByteCodePtr[0] = cNot; */ // redundant, matches cNot @ 1
			return;
		}
		goto Default0;
	TailCall_cOr:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cOr:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(223,"cDup cOr", "cNotNot", "");
			goto Lba;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(118,
					"y x cOr",
					"[fp_or(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lej;
			}
			break;
		}
		goto Default0;
	TailCall_cRDiv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRDiv:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(268,
					"x[x==Value_t(1)] cRDiv",
					"cInv",
					"    with x = " << x << "\n");
				goto Lek;
			}
		}
		goto Default0;
	TailCall_cRSub:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRSub:
		if(ByteCodePtr[0] == cDup)
		{
			FP_TRACE_BYTECODE_OPTIMIZATION(77,"cDup cRSub", "[Value_t()] cMul", "");
			goto Lel;
		}
		goto Default0;
	TailCall_cSqr:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSqr:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(204,"cAbs cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Lem;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(203,"cNeg cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Lem;
		}
		goto Default0;
	TailCall_cSub:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSub:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(76,"cDup cSub", "[Value_t()] cMul", "");
			goto Lel;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(200,"cNeg cSub", "cAdd", "");
			goto Len;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(58,
					"x[x==Value_t()] cSub",
					"",
					"    with x = " << x << "\n");
				goto Lap;
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(106,
					"y x cSub",
					"[y-x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Leo;
			}
			FP_TRACE_BYTECODE_OPTIMIZATION(51,
				"x cSub",
				"[-x] cAdd",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lep;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				if(ByteCodePtr[-1] == cRSub)
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(289,
							"x cRSub A[IsVarOpcode(A)] cSub",
							"A cAdd [x] cRSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Leq;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(296,
						"cRSub A[IsVarOpcode(A)] cSub",
						"[DO_STACKPLUS1] A cSub cRSub",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Ler;
				}
			}
		}
		goto Default0;
	default: Default0:;
		A = opcode;
		if(IsComparisonOpcode(A))
		{
			if(ByteCodePtr[0] == cImmed)
			{
				x = ImmedPtr[0];
				switch(ByteCodePtr[-1])
				{
				case cAdd:
					if(ByteCodePtr[-2] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(364,
							"y cAdd x A[IsComparisonOpcode(A)]",
							"[x-y] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
						goto Lfa;
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(365,
						"cNeg x A[IsComparisonOpcode(A)]",
						"[-x] {OppositeComparisonOpcode(A)}",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", x = " << x
						    << "\n");
					goto Lfb;
				}
			}
		}
		if(IsVarOpcode(A)&&mData->mByteCode.size()>0)
		{
			B = ByteCodePtr[0];
			if(B==A)
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(482,
					"B[B==A] A[IsVarOpcode(A)&&mData->mByteCode.size()>0]",
					"B cDup",
					"    with A = " << FP_TRACE_OPCODENAME(A)
					    << ", B = " << FP_TRACE_OPCODENAME(B)
					    << "\n");
				/* ByteCodePtr[0] = B; */ // redundant, matches B @ 1
				goto Lfc;
			}
		}
		if(IsUnaryOpcode(A))
		{
			B = ByteCodePtr[0];
			if(IsVarOpcode(B)&&mData->mByteCode.size()>1)
			{
				C = ByteCodePtr[-1];
				if(C==A)
				{
					D = ByteCodePtr[-2];
					if(D==B)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(483,
							"D[D==B] C[C==A] B[IsVarOpcode(B)&&mData->mByteCode.size()>1] A[IsUnaryOpcode(A)]",
							"D C cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", C = " << FP_TRACE_OPCODENAME(C)
							    << ", D = " << FP_TRACE_OPCODENAME(D)
							    << "\n");
						/* ByteCodePtr[-2] = D; */ // redundant, matches D @ 3
						/* ByteCodePtr[-1] = C; */ // redundant, matches C @ 2
						goto Lfd;
					}
				}
			}
		}
	}
	goto Laa;
Laa: mData->mByteCode.push_back(opcode); return;
Lab: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     FP_TRACE_BYTECODE_ADD(cAbs);
     goto TailCall_cAbs;
Lac: ImmedPtr[0] = fp_abs(x); return;
Lad: mData->mImmed.push_back(Value_t(4));
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
Lfe: opcode = cMul;
Lff: FP_ReDefinePointers();
Lfg: FP_TRACE_BYTECODE_ADD(cMul);
     goto TailCall_cMul;
Lae: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(Value_t(4));
     mData->mByteCode.push_back(cImmed); goto Lfe;
Laf: ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
Lbn: opcode = cMul; goto Lfg;
Lag: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSub;
Lfh: FP_TRACE_BYTECODE_ADD(cSub);
     goto TailCall_cSub;
Lah: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lfi: FP_ReDefinePointers();
Lfj: FP_TRACE_BYTECODE_ADD(cAdd);
     goto TailCall_cAdd;
Lai: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Lfk: AddFunctionOpcode(cAdd);
Lfl: opcode = cRSub;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cRSub);
     goto TailCall_cRSub;
Laj: ImmedPtr[0] = -x;
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lfk;
Lak: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lfl;
Lal: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lfm: AddFunctionOpcode(cAdd);
Lfn: AddFunctionOpcode(B);
Lfo: opcode = cSub;
     FP_ReDefinePointers(); goto Lfh;
Lam: ImmedPtr[0] = -x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lfm;
Lan: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lfn;
Lao: ImmedPtr[-1] = y+x;
Lap: mData->mImmed.pop_back();
Lbr: mData->mByteCode.pop_back(); return;
Laq: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lfk;
Lar: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lfk;
Lba: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cNotNot;
Lfp: FP_TRACE_BYTECODE_ADD(cNotNot);
     goto TailCall_cNotNot;
Lbb: ImmedPtr[-1] = fp_and(x,y); goto Lap;
Lbc: mData->mImmed.push_back(Value_t());
     ByteCodePtr[0] = cImmed;
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(Value_t(1));
Lfq: mData->mByteCode.push_back(cImmed);
Lfr: opcode = cAdd; goto Lfi;
Lbd: ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     FP_TRACE_BYTECODE_ADD(cDiv);
     goto TailCall_cDiv;
Lbe: ImmedPtr[-1] = y/x; goto Lap;
Lbf: ImmedPtr[-1] = fp_equal(y,x); goto Lap;
Lbg: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lga: FP_TRACE_BYTECODE_ADD(cEqual);
     goto TailCall_cEqual;
Lbh: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
Lgb: opcode = cNot;
     FP_ReDefinePointers();
Lgc: FP_TRACE_BYTECODE_ADD(cNot);
     goto TailCall_cNot;
Lbi: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lgd: opcode = cNotNot;
     FP_ReDefinePointers(); goto Lfp;
Lbj: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lgd;
Lbk: ImmedPtr[-1] = fp_less(x,y); goto Lap;
Lbl: ImmedPtr[-1] = fp_lessOrEq(x,y); goto Lap;
Lbm: ImmedPtr[0] = Value_t(1)/x; return;
Lbo: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lgb;
Lbp: ImmedPtr[-1] = fp_less(y,x); goto Lap;
Lbq: ImmedPtr[-1] = fp_lessOrEq(y,x); goto Lap;
Lca: ImmedPtr[-1] = fp_max(x,y); goto Lap;
Lcb: ImmedPtr[-1] = fp_min(x,y); goto Lap;
Lcc: ImmedPtr[-1] = fp_mod(y,x); goto Lap;
Lcd: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSqr;
Lge: FP_TRACE_BYTECODE_ADD(cSqr);
     goto TailCall_cSqr;
Lce: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr);
Lgf: opcode = cNeg;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cNeg);
     goto TailCall_cNeg;
Lcf: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr);
     AddFunctionOpcode(cMul); goto Lgf;
Lcg: ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cPow); return;
Lch: ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2; goto Lfg;
Lci: ImmedPtr[-1] = x;
Lgg: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lff;
Lcj: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
Lgh: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lgi: AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
Lgj: mData->mByteCode.push_back(cImmed); goto Lff;
Lck: mData->mImmed.pop_back(); goto Lgh;
Lcl: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(B); goto Lgi;
Lcm: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lgi;
Lcn: ByteCodePtr[-1] = cImmed; goto Lbr;
Lco: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lfg;
Lcp: ImmedPtr[0] = x+x; goto Lch;
Lcq: ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     mData->mImmed.push_back(y*x);
     mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cMul); goto Lfr;
Lcr: ImmedPtr[-1] = x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(y*x); goto Lfq;
Lda: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(x+x); goto Lgj;
Ldb: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} return;
Ldc: ImmedPtr[-1] = y*x; goto Lgg;
Ldd: ImmedPtr[0] = -x; goto Lco;
Lde: ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     mData->mImmed.push_back(y*x);
     mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cMul); goto Lfo;
Ldf: ImmedPtr[-1] = y*x; goto Lap;
Ldg: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lgf;
Ldh: ByteCodePtr[0] = cDup;
     ImmedPtr -= 1;
     mData->mImmed.pop_back();
Lgk: opcode = cAdd; goto Lfj;
Ldi: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lgl: AddFunctionOpcode(cSqr); goto Lff;
Ldj: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lgl;
Ldk: ImmedPtr[-1] = fp_nequal(y,x); goto Lap;
Ldl: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lgm: FP_TRACE_BYTECODE_ADD(cNEqual);
     goto TailCall_cNEqual;
Ldm: ImmedPtr[0] = -x;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lbn;
Ldn: ImmedPtr[0] = -x; return;
Ldo: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lgc;
Ldp: mData->mByteCode.pop_back();
     AddFunctionOpcode(cAbsNotNot); return;
Ldq: mData->mByteCode.pop_back();
Leh: AddFunctionOpcode(cAbsNot); return;
Ldr: ImmedPtr[0] = -x;
Lef: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cEqual; goto Lga;
Lea: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cNEqual; goto Lgm;
Leb: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cLessOrEq;
     FP_TRACE_BYTECODE_ADD(cLessOrEq);
     goto TailCall_cLessOrEq;
Lec: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cLess;
     FP_TRACE_BYTECODE_ADD(cLess);
     goto TailCall_cLess;
Led: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cGreaterOrEq;
     FP_TRACE_BYTECODE_ADD(cGreaterOrEq);
     goto TailCall_cGreaterOrEq;
Lee: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cGreater;
     FP_TRACE_BYTECODE_ADD(cGreater);
     goto TailCall_cGreater;
Leg: ImmedPtr[0] = fp_not(x); return;
Lei: ImmedPtr[0] = -x; goto Lea;
Lej: ImmedPtr[-1] = fp_or(x,y); goto Lap;
Lek: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     opcode = cInv;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cInv);
     goto TailCall_cInv;
Lel: mData->mImmed.push_back(Value_t());
     ByteCodePtr[0] = cImmed; goto Lfe;
Lem: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lge;
Len: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lgk;
Leo: ImmedPtr[-1] = y-x; goto Lap;
Lep: ImmedPtr[0] = -x; goto Lgk;
Leq: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cAdd);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lfl;
Ler: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cSub); goto Lfl;
Lfa: ImmedPtr[-1] = x-y;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); return;
Lfb: ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     AddFunctionOpcode(OppositeComparisonOpcode(A)); return;
Lfc: mData->mByteCode.push_back(cDup); return;
Lfd: ByteCodePtr[0] = cDup; return;
return;
// This list of dummy gotos is here to inhibit
// compiler warnings on unused labels
goto TailCall_cAnd;goto TailCall_cMax;goto TailCall_cMin;
goto TailCall_cMod;goto TailCall_cNeg;goto TailCall_cOr;
goto TailCall_cRDiv;goto TailCall_cSub;
#endif

#if((FP_COMPLEX_VERSION) && !(FP_FLOAT_VERSION))
	Value_t x;
	Value_t y;
	unsigned B;
	unsigned A;
	unsigned C;
	unsigned D;
	switch(opcode)
	{
	TailCall_cAbs:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAbs:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(201,"cNeg cAbs", "cAbs", "");
			/* opcode = cAbs; */ // redundant, matches cAbs @ 0
			goto Lab;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(132,
				"x cAbs",
				"[fp_abs(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lac;
		}
		goto Default0;
	TailCall_cAdd:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAdd:
		switch(ByteCodePtr[0])
		{
		case cDup:
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(310,"cDup cAdd cDup cAdd", "[Value_t(4)] cMul", "");
					goto Lad;
				}
				break;
			case cMul:
				if(ByteCodePtr[-2] == cAdd)
				{
					if(ByteCodePtr[-3] == cDup)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(311,"cDup cAdd cMul cDup cAdd", "cMul [Value_t(4)] cMul", "");
						goto Lae;
					}
				}
				break;
			}
			goto Default1;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(313,
						"cDup x cMul cAdd",
						"[x+Value_t(1)] cMul",
						"    with x = " << x << "\n");
					goto Laf;
				}
			}
			goto Default1;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(199,"cNeg cAdd", "cSub", "");
			goto Lag;
		case cImmed:
			x = ImmedPtr[0];
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(127,
						"y cAdd x cAdd",
						"[y+x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cAdd; */ // redundant, matches cAdd @ 0
					goto Lah;
				}
				break;
			case cRSub:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(298,
							"y cAdd cRSub x cAdd",
							"[ y+x] cAdd cRSub",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lai;
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(299,
						"cNeg cRSub x cAdd",
						"[-x] cAdd cRSub",
						"    with x = " << x << "\n");
					goto Laj;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(297,
						"y cRSub x cAdd",
						"[ y+x] cRSub",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lak;
				}
				break;
			case cSub:
				B = ByteCodePtr[-2];
				if(IsVarOpcode(B))
				{
					switch(ByteCodePtr[-3])
					{
					case cAdd:
						if(ByteCodePtr[-4] == cImmed)
						{
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(292,
								"y cAdd B[IsVarOpcode(B)] cSub x cAdd",
								"[ y+x] cAdd B cSub",
								"    with x = " << x
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-4] = cImmed; */ // redundant, matches y @ 5
							goto Lal;
						}
						break;
					case cNeg:
						FP_TRACE_BYTECODE_OPTIMIZATION(293,
							"cNeg B[IsVarOpcode(B)] cSub x cAdd",
							"[-x] cAdd B cSub",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						goto Lam;
					case cImmed:
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(291,
							"y B[IsVarOpcode(B)] cSub x cAdd",
							"[ y+x] B cSub",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lan;
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(105,
					"y x cAdd",
					"[y+x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lao;
			}
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(57,
					"x[x==Value_t()] cAdd",
					"",
					"    with x = " << x << "\n");
				goto Lap;
			}
			break;
		default: Default1:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				if(ByteCodePtr[-1] == cRSub)
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(290,
							"x cRSub A[IsVarOpcode(A)] cAdd",
							"[DO_STACKPLUS1] A [x] cAdd cRSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						incStackPtr();
						--mStackPtr;
						goto Laq;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(295,
						"cRSub A[IsVarOpcode(A)] cAdd",
						"[DO_STACKPLUS1] A cAdd cRSub",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Lar;
				}
			}
		}
		goto Default0;
	TailCall_cAnd:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAnd:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(224,"cDup cAnd", "cNotNot", "");
			goto Lba;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(117,
					"y x cAnd",
					"[fp_and(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbb;
			}
			break;
		}
		goto Default0;
	TailCall_cConj:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cConj:
		switch(ByteCodePtr[0])
		{
		case cConj:
			FP_TRACE_BYTECODE_OPTIMIZATION(63,"cConj cConj", "", "");
			goto Lbc;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(193,
				"x cConj",
				"[fp_conj(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbd;
		}
		goto Default0;
	TailCall_cDiv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cDiv:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(78,"cDup cDiv", "[Value_t()] cMul [Value_t(1)] cAdd", "");
			goto Lbe;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(125,
						"cNeg x[x!=Value_t()] cDiv",
						"[-x] cDiv",
						"    with x = " << x << "\n");
					/* opcode = cDiv; */ // redundant, matches cDiv @ 0
					goto Lbf;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(103,
						"y x[x!=Value_t()] cDiv",
						"[y/x]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Lbg;
				}
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(56,
					"x[x==Value_t(1)] cDiv",
					"",
					"    with x = " << x << "\n");
				goto Lap;
			}
			break;
		}
		goto Default0;
	TailCall_cEqual:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				A = ByteCodePtr[-1];
				if(IsLogicalOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(426,
						"A[IsLogicalOpcode(A)] x[x==Value_t(1)] cEqual",
						"A",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					goto Lap;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(115,
					"y x cEqual",
					"[fp_equal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbh;
			}
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(359,
						"cAbs x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Lbi;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(361,
						"cSqr x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Lbi;
				default:
					A = ByteCodePtr[-1];
					if(IsLogicalOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(428,
							"A[IsLogicalOpcode(A)] x[x==Value_t(0)] cEqual",
							"A cNot",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lbj;
					}
				}
				FP_TRACE_BYTECODE_OPTIMIZATION(416,
					"x[x==Value_t(0)] cEqual",
					"cNot",
					"    with x = " << x << "\n");
				goto Lbj;
			}
		}
		goto Default0;
	TailCall_cGreater:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cGreater:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(113,
					"y x cGreater",
					"[fp_less(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbk;
			}
		}
		goto Default0;
	TailCall_cGreaterOrEq:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cGreaterOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(114,
					"y x cGreaterOrEq",
					"[fp_lessOrEq(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbl;
			}
		}
		goto Default0;
	TailCall_cImag:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cImag:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(81,"cAbs cImag", "[Value_t()] cMul", "");
			goto Lbm;
		case cReal:
			FP_TRACE_BYTECODE_OPTIMIZATION(80,"cReal cImag", "[Value_t()] cMul", "");
			goto Lbm;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(192,
				"x cImag",
				"[fp_imag(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbn;
		}
		goto Default0;
	TailCall_cInv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cInv:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(101,
					"x[x!=Value_t()] cInv",
					"[Value_t(1)/x]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lbo;
			}
		}
		goto Default0;
	TailCall_cLess:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLess:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				A = ByteCodePtr[-1];
				if(IsNeverNegativeValueOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(301,
						"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(0)] cLess",
						"A [x] cMul",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
					goto Lbp;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(111,
					"y x cLess",
					"[fp_less(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbq;
			}
		}
		goto Default0;
	TailCall_cLessOrEq:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLessOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(112,
					"y x cLessOrEq",
					"[fp_lessOrEq(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbr;
			}
		}
		goto Default0;
	TailCall_cMax:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMax:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(60,"cDup cMax", "", "");
			goto Lbc;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(141,
					"y x cMax",
					"[fp_max(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lca;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(66,
							"B[B==A] cDup A[IsVarOpcode(A)] cMax",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Lbc;
					}
					break;
				case cMax:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(68,
							"B[B==A] cMax A[IsVarOpcode(A)] cMax",
							"B cMax",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMax; */ // redundant, matches cMax @ 2
						goto Lbc;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cMin:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMin:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(59,"cDup cMin", "", "");
			goto Lbc;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(140,
					"y x cMin",
					"[fp_min(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lcb;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(65,
							"B[B==A] cDup A[IsVarOpcode(A)] cMin",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Lbc;
					}
					break;
				case cMin:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(67,
							"B[B==A] cMin A[IsVarOpcode(A)] cMin",
							"B cMin",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMin; */ // redundant, matches cMin @ 2
						goto Lbc;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cMod:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMod:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				if(ByteCodePtr[-1] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(104,
						"y x[x!=Value_t()] cMod",
						"[fp_mod(y,x)]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Lcc;
				}
			}
		}
		goto Default0;
	TailCall_cMul:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMul:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(202,"cDup cMul", "cSqr", "");
			goto Lcd;
		case cNeg:
			switch(ByteCodePtr[-1])
			{
			case cDup:
				FP_TRACE_BYTECODE_OPTIMIZATION(474,"cDup cNeg cMul", "cSqr cNeg", "");
				goto Lce;
			default:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cMul)
					{
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(480,
								"B[B==A] cMul A[IsVarOpcode(A)] cNeg cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lcf;
						}
					}
				}
			}
			goto Default2;
		case cPow:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(314,
						"cDup x cPow cMul",
						"[x+Value_t(1)] cPow",
						"    with x = " << x << "\n");
					goto Lcg;
				}
			}
			goto Default2;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(93,
							"A[IsVarOpcode(A)] cMul x[x==Value_t()] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lch;
					}
					goto Default3;
				default: Default3:;
					A = ByteCodePtr[-1];
					if(IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						switch(ByteCodePtr[-2])
						{
						case cImmed:
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(92,
								"y A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
								"[x] cMul",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lci;
						default:
							B = ByteCodePtr[-2];
							if(IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								switch(ByteCodePtr[-3])
								{
								case cImmed:
									y = ImmedPtr[-1];
									FP_TRACE_BYTECODE_OPTIMIZATION(96,
										"y B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
										"A [x] cMul",
										"    with x = " << x
										    << ", A = " << FP_TRACE_OPCODENAME(A)
										    << ", B = " << FP_TRACE_OPCODENAME(B)
										    << ", y = " << y
										    << "\n");
									/* opcode = cMul; */ // redundant, matches cMul @ 0
									goto Lcj;
								default:
									C = ByteCodePtr[-3];
									if(IsVarOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(94,
											"C[IsVarOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
											"A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lck;
									}
									if(IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(95,
											"C[IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
											"B A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lcl;
									}
								}
							}
							if(IsVarOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(90,
									"B[IsVarOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
									"[x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lch;
							}
							if(IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(91,
									"B[IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
									"A [x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lcm;
							}
						}
					}
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(88,
							"A[IsVarOpcode(A)] x[x==Value_t()] cMul",
							"[x]",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						goto Lcn;
					}
					if(IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(89,
							"A[IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lco;
					}
				}
			}
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				switch(ByteCodePtr[-2])
				{
				case cDup:
					FP_TRACE_BYTECODE_OPTIMIZATION(317,
						"cDup cAdd x cMul",
						"[x+x] cMul",
						"    with x = " << x << "\n");
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Lcp;
				case cMul:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(IsVarOpcode(A))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(386,
								"A[IsVarOpcode(A)] y cMul cAdd x cMul",
								"[x] cMul A [y*x] cMul cAdd",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lcq;
						}
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(385,
						"y cAdd x cMul",
						"[x] cMul [y*x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lcr;
				}
				break;
			case cMul:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cDup)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(319,
							"cDup cAdd cMul x cMul",
							"cMul [x+x] cMul",
							"    with x = " << x << "\n");
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lda;
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					if(y*x==Value_t(1))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(70,
							"y[y*x==Value_t(1)] cMul x cMul",
							"",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Ldb;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(128,
						"y cMul x cMul",
						"[y*x] cMul",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Ldc;
				}
				break;
			case cNeg:
				FP_TRACE_BYTECODE_OPTIMIZATION(122,
					"cNeg x cMul",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Ldd;
			case cSub:
				if(ByteCodePtr[-2] == cMul)
				{
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(IsVarOpcode(A))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(387,
								"A[IsVarOpcode(A)] y cMul cSub x cMul",
								"[x] cMul A [y*x] cMul cSub",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lde;
						}
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(102,
					"y x cMul",
					"[y*x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldf;
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(55,
					"x[x==Value_t(1)] cMul",
					"",
					"    with x = " << x << "\n");
				goto Lap;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(124,
					"x[x==Value_t(-1)] cMul",
					"cNeg",
					"    with x = " << x << "\n");
				goto Ldg;
			}
			if(x==Value_t(2))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(198,
					"x[x==Value_t(2)] cMul",
					"cDup cAdd",
					"    with x = " << x << "\n");
				goto Ldh;
			}
			break;
		default: Default2:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					switch(ByteCodePtr[-2])
					{
					case cNeg:
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(477,
								"B[B==A] cNeg cMul A[IsVarOpcode(A)] cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lcf;
						}
						goto Default4;
					default: Default4:;
						B = ByteCodePtr[-2];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(468,
								"B[B==A] cMul A[IsVarOpcode(A)] cMul",
								"B cSqr cMul",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Ldi;
						}
					}
					goto Default5;
				case cNeg:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(471,
							"B[B==A] cNeg A[IsVarOpcode(A)] cMul",
							"B cSqr cNeg",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lce;
					}
					goto Default5;
				default: Default5:;
					B = ByteCodePtr[-1];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(465,
							"B[B==A] A[IsVarOpcode(A)] cMul",
							"B cSqr",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-1] = B; */ // redundant, matches B @ 2
						goto Lcd;
					}
				}
			}
			if(IsUnaryOpcode(A))
			{
				B = ByteCodePtr[-1];
				if(IsVarOpcode(B)&&mData->mByteCode.size()>1)
				{
					if(ByteCodePtr[-2] == cMul)
					{
						C = ByteCodePtr[-3];
						if(C==A)
						{
							D = ByteCodePtr[-4];
							if(D==B)
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(484,
									"D[D==B] C[C==A] cMul B[IsVarOpcode(B)&&mData->mByteCode.size()>1] A[IsUnaryOpcode(A)] cMul",
									"D C cSqr cMul",
									"    with A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << ", C = " << FP_TRACE_OPCODENAME(C)
									    << ", D = " << FP_TRACE_OPCODENAME(D)
									    << "\n");
								/* ByteCodePtr[-4] = D; */ // redundant, matches D @ 5
								/* ByteCodePtr[-3] = C; */ // redundant, matches C @ 4
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Ldj;
							}
						}
					}
				}
			}
		}
		goto Default0;
	TailCall_cNEqual:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				A = ByteCodePtr[-1];
				if(IsLogicalOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(427,
						"A[IsLogicalOpcode(A)] x[x==Value_t(1)] cNEqual",
						"A cNot",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					goto Lbj;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(116,
					"y x cNEqual",
					"[fp_nequal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldk;
			}
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(360,
						"cAbs x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Ldl;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(362,
						"cSqr x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Ldl;
				default:
					A = ByteCodePtr[-1];
					if(IsLogicalOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(429,
							"A[IsLogicalOpcode(A)] x[x==Value_t(0)] cNEqual",
							"A",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lap;
					}
				}
				FP_TRACE_BYTECODE_OPTIMIZATION(417,
					"x[x==Value_t(0)] cNEqual",
					"cNotNot",
					"    with x = " << x << "\n");
				goto Ldm;
			}
		}
		goto Default0;
	TailCall_cNeg:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNeg:
		switch(ByteCodePtr[0])
		{
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(123,
					"x cMul cNeg",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Ldn;
			}
			break;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(61,"cNeg cNeg", "", "");
			goto Lbc;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(100,
				"x cNeg",
				"[-x]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Ldo;
		}
		goto Default0;
	TailCall_cNot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNot:
		switch(ByteCodePtr[0])
		{
		case cAbsNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(231,"cAbsNotNot cNot", "cAbsNot", "");
			goto Ldp;
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(431,
					"x cAdd cNot",
					"[-x] cEqual",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Ldq;
			}
			break;
		case cEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(220,"cEqual cNot", "cNEqual", "");
			goto Ldr;
		case cGreater:
			FP_TRACE_BYTECODE_OPTIMIZATION(218,"cGreater cNot", "cLessOrEq", "");
			goto Lea;
		case cGreaterOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(219,"cGreaterOrEq cNot", "cLess", "");
			goto Leb;
		case cLess:
			FP_TRACE_BYTECODE_OPTIMIZATION(216,"cLess cNot", "cGreaterOrEq", "");
			goto Lec;
		case cLessOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(217,"cLessOrEq cNot", "cGreater", "");
			goto Led;
		case cNEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(221,"cNEqual cNot", "cEqual", "");
			goto Lee;
		case cNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(229,"cNot cNot", "cNotNot", "");
			goto Lba;
		case cNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(230,"cNotNot cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Lef;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(107,
				"x cNot",
				"[fp_not(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Leg;
		}
		goto Default0;
	TailCall_cNotNot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNotNot:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(430,
					"x cAdd cNotNot",
					"[-x] cNEqual",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Leh;
			}
			break;
		case cNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(232,"cNot cNotNot", "cNot", "");
			/* ByteCodePtr[0] = cNot; */ // redundant, matches cNot @ 1
			return;
		}
		goto Default0;
	TailCall_cOr:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cOr:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(223,"cDup cOr", "cNotNot", "");
			goto Lba;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(118,
					"y x cOr",
					"[fp_or(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lei;
			}
			break;
		}
		goto Default0;
	TailCall_cRDiv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRDiv:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(268,
					"x[x==Value_t(1)] cRDiv",
					"cInv",
					"    with x = " << x << "\n");
				goto Lej;
			}
		}
		goto Default0;
	TailCall_cRSub:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRSub:
		if(ByteCodePtr[0] == cDup)
		{
			FP_TRACE_BYTECODE_OPTIMIZATION(77,"cDup cRSub", "[Value_t()] cMul", "");
			goto Lbm;
		}
		goto Default0;
	TailCall_cReal:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cReal:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(191,
				"x cReal",
				"[fp_real(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lek;
		}
		goto Default0;
	TailCall_cSqr:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSqr:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(204,"cAbs cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Lel;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(203,"cNeg cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Lel;
		}
		goto Default0;
	TailCall_cSub:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSub:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(76,"cDup cSub", "[Value_t()] cMul", "");
			goto Lbm;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(200,"cNeg cSub", "cAdd", "");
			goto Lem;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(58,
					"x[x==Value_t()] cSub",
					"",
					"    with x = " << x << "\n");
				goto Lap;
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(106,
					"y x cSub",
					"[y-x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Len;
			}
			FP_TRACE_BYTECODE_OPTIMIZATION(51,
				"x cSub",
				"[-x] cAdd",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Leo;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				if(ByteCodePtr[-1] == cRSub)
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(289,
							"x cRSub A[IsVarOpcode(A)] cSub",
							"A cAdd [x] cRSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Lep;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(296,
						"cRSub A[IsVarOpcode(A)] cSub",
						"[DO_STACKPLUS1] A cSub cRSub",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Leq;
				}
			}
		}
		goto Default0;
	default: Default0:;
		A = opcode;
		if(IsVarOpcode(A)&&mData->mByteCode.size()>0)
		{
			B = ByteCodePtr[0];
			if(B==A)
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(482,
					"B[B==A] A[IsVarOpcode(A)&&mData->mByteCode.size()>0]",
					"B cDup",
					"    with A = " << FP_TRACE_OPCODENAME(A)
					    << ", B = " << FP_TRACE_OPCODENAME(B)
					    << "\n");
				/* ByteCodePtr[0] = B; */ // redundant, matches B @ 1
				goto Ler;
			}
		}
		if(IsUnaryOpcode(A))
		{
			B = ByteCodePtr[0];
			if(IsVarOpcode(B)&&mData->mByteCode.size()>1)
			{
				C = ByteCodePtr[-1];
				if(C==A)
				{
					D = ByteCodePtr[-2];
					if(D==B)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(483,
							"D[D==B] C[C==A] B[IsVarOpcode(B)&&mData->mByteCode.size()>1] A[IsUnaryOpcode(A)]",
							"D C cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", C = " << FP_TRACE_OPCODENAME(C)
							    << ", D = " << FP_TRACE_OPCODENAME(D)
							    << "\n");
						/* ByteCodePtr[-2] = D; */ // redundant, matches D @ 3
						/* ByteCodePtr[-1] = C; */ // redundant, matches C @ 2
						goto Lfa;
					}
				}
			}
		}
	}
	goto Laa;
Laa: mData->mByteCode.push_back(opcode); return;
Lab: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     FP_TRACE_BYTECODE_ADD(cAbs);
     goto TailCall_cAbs;
Lac: ImmedPtr[0] = fp_abs(x); return;
Lad: mData->mImmed.push_back(Value_t(4));
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
Lfb: opcode = cMul;
Lfc: FP_ReDefinePointers();
Lfd: FP_TRACE_BYTECODE_ADD(cMul);
     goto TailCall_cMul;
Lae: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(Value_t(4));
     mData->mByteCode.push_back(cImmed); goto Lfb;
Laf: ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
Lbp: opcode = cMul; goto Lfd;
Lag: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSub;
Lfe: FP_TRACE_BYTECODE_ADD(cSub);
     goto TailCall_cSub;
Lah: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lff: FP_ReDefinePointers();
Lfg: FP_TRACE_BYTECODE_ADD(cAdd);
     goto TailCall_cAdd;
Lai: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Lfh: AddFunctionOpcode(cAdd);
Lfi: opcode = cRSub;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cRSub);
     goto TailCall_cRSub;
Laj: ImmedPtr[0] = -x;
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lfh;
Lak: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lfi;
Lal: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lfj: AddFunctionOpcode(cAdd);
Lfk: AddFunctionOpcode(B);
Lfl: opcode = cSub;
     FP_ReDefinePointers(); goto Lfe;
Lam: ImmedPtr[0] = -x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lfj;
Lan: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lfk;
Lao: ImmedPtr[-1] = y+x;
Lap: mData->mImmed.pop_back();
Lbc: mData->mByteCode.pop_back(); return;
Laq: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lfh;
Lar: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lfh;
Lba: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cNotNot;
Lfm: FP_TRACE_BYTECODE_ADD(cNotNot);
     goto TailCall_cNotNot;
Lbb: ImmedPtr[-1] = fp_and(x,y); goto Lap;
Lbd: ImmedPtr[0] = fp_conj(x); return;
Lbe: mData->mImmed.push_back(Value_t());
     ByteCodePtr[0] = cImmed;
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(Value_t(1));
Lfn: mData->mByteCode.push_back(cImmed);
Lfo: opcode = cAdd; goto Lff;
Lbf: ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     FP_TRACE_BYTECODE_ADD(cDiv);
     goto TailCall_cDiv;
Lbg: ImmedPtr[-1] = y/x; goto Lap;
Lbh: ImmedPtr[-1] = fp_equal(y,x); goto Lap;
Lbi: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lfp: FP_TRACE_BYTECODE_ADD(cEqual);
     goto TailCall_cEqual;
Lbj: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     opcode = cNot;
     FP_ReDefinePointers();
Lfq: FP_TRACE_BYTECODE_ADD(cNot);
     goto TailCall_cNot;
Lbk: ImmedPtr[-1] = fp_less(x,y); goto Lap;
Lbl: ImmedPtr[-1] = fp_lessOrEq(x,y); goto Lap;
Lbm: mData->mImmed.push_back(Value_t());
     ByteCodePtr[0] = cImmed; goto Lfb;
Lbn: ImmedPtr[0] = fp_imag(x); return;
Lbo: ImmedPtr[0] = Value_t(1)/x; return;
Lbq: ImmedPtr[-1] = fp_less(y,x); goto Lap;
Lbr: ImmedPtr[-1] = fp_lessOrEq(y,x); goto Lap;
Lca: ImmedPtr[-1] = fp_max(x,y); goto Lap;
Lcb: ImmedPtr[-1] = fp_min(x,y); goto Lap;
Lcc: ImmedPtr[-1] = fp_mod(y,x); goto Lap;
Lcd: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSqr;
Lfr: FP_TRACE_BYTECODE_ADD(cSqr);
     goto TailCall_cSqr;
Lce: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr);
Lga: opcode = cNeg;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cNeg);
     goto TailCall_cNeg;
Lcf: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr);
     AddFunctionOpcode(cMul); goto Lga;
Lcg: ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cPow); return;
Lch: ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2; goto Lfd;
Lci: ImmedPtr[-1] = x;
Lgb: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lfc;
Lcj: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
Lgc: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lgd: AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
Lge: mData->mByteCode.push_back(cImmed); goto Lfc;
Lck: mData->mImmed.pop_back(); goto Lgc;
Lcl: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(B); goto Lgd;
Lcm: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lgd;
Lcn: ByteCodePtr[-1] = cImmed; goto Lbc;
Lco: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lfd;
Lcp: ImmedPtr[0] = x+x; goto Lch;
Lcq: ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     mData->mImmed.push_back(y*x);
     mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cMul); goto Lfo;
Lcr: ImmedPtr[-1] = x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(y*x); goto Lfn;
Lda: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(x+x); goto Lge;
Ldb: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} return;
Ldc: ImmedPtr[-1] = y*x; goto Lgb;
Ldd: ImmedPtr[0] = -x; goto Lco;
Lde: ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     mData->mImmed.push_back(y*x);
     mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cMul); goto Lfl;
Ldf: ImmedPtr[-1] = y*x; goto Lap;
Ldg: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lga;
Ldh: ByteCodePtr[0] = cDup;
     ImmedPtr -= 1;
     mData->mImmed.pop_back();
Lgf: opcode = cAdd; goto Lfg;
Ldi: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lgg: AddFunctionOpcode(cSqr); goto Lfc;
Ldj: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lgg;
Ldk: ImmedPtr[-1] = fp_nequal(y,x); goto Lap;
Ldl: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lgh: FP_TRACE_BYTECODE_ADD(cNEqual);
     goto TailCall_cNEqual;
Ldm: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     opcode = cNotNot;
     FP_ReDefinePointers(); goto Lfm;
Ldn: ImmedPtr[0] = -x;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lbp;
Ldo: ImmedPtr[0] = -x; return;
Ldp: mData->mByteCode.pop_back();
     AddFunctionOpcode(cAbsNot); return;
Ldq: ImmedPtr[0] = -x;
Lee: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cEqual; goto Lfp;
Ldr: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cNEqual; goto Lgh;
Lea: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cLessOrEq;
     FP_TRACE_BYTECODE_ADD(cLessOrEq);
     goto TailCall_cLessOrEq;
Leb: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cLess;
     FP_TRACE_BYTECODE_ADD(cLess);
     goto TailCall_cLess;
Lec: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cGreaterOrEq;
     FP_TRACE_BYTECODE_ADD(cGreaterOrEq);
     goto TailCall_cGreaterOrEq;
Led: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cGreater;
     FP_TRACE_BYTECODE_ADD(cGreater);
     goto TailCall_cGreater;
Lef: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lfq;
Leg: ImmedPtr[0] = fp_not(x); return;
Leh: ImmedPtr[0] = -x; goto Ldr;
Lei: ImmedPtr[-1] = fp_or(x,y); goto Lap;
Lej: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     opcode = cInv;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cInv);
     goto TailCall_cInv;
Lek: ImmedPtr[0] = fp_real(x); return;
Lel: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lfr;
Lem: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lgf;
Len: ImmedPtr[-1] = y-x; goto Lap;
Leo: ImmedPtr[0] = -x; goto Lgf;
Lep: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cAdd);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lfi;
Leq: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cSub); goto Lfi;
Ler: mData->mByteCode.push_back(cDup); return;
Lfa: ByteCodePtr[0] = cDup; return;
return;
// This list of dummy gotos is here to inhibit
// compiler warnings on unused labels
goto TailCall_cAnd;goto TailCall_cConj;goto TailCall_cImag;
goto TailCall_cMax;goto TailCall_cMin;goto TailCall_cMod;
goto TailCall_cNeg;goto TailCall_cOr;goto TailCall_cRDiv;
goto TailCall_cReal;goto TailCall_cSub;
#endif

#if((FP_FLOAT_VERSION) && !(FP_COMPLEX_VERSION))
	Value_t x;
	unsigned A;
	Value_t y;
	unsigned B;
	unsigned C;
	unsigned D;
	switch(opcode)
	{
	TailCall_cAbs:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAbs:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(201,"cNeg cAbs", "cAbs", "");
			/* opcode = cAbs; */ // redundant, matches cAbs @ 0
			goto Lab;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(132,
				"x cAbs",
				"[fp_abs(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lac;
		default:
			A = ByteCodePtr[0];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(393,
					"A[IsNeverNegativeValueOpcode(A)] cAbs",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cAcos:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAcos:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(fp_abs(x)<=Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(148,
					"x[fp_abs(x)<=Value_t(1)] cAcos",
					"[fp_acos(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lad;
			}
		}
		goto Default0;
	TailCall_cAcosh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAcosh:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x>=Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(145,
					"x[x>=Value_t(1)] cAcosh",
					"[fp_acosh(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lae;
			}
		}
		goto Default0;
	TailCall_cAdd:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAdd:
		switch(ByteCodePtr[0])
		{
		case cDup:
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(310,"cDup cAdd cDup cAdd", "[Value_t(4)] cMul", "");
					goto Laf;
				}
				break;
			case cMul:
				if(ByteCodePtr[-2] == cAdd)
				{
					if(ByteCodePtr[-3] == cDup)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(311,"cDup cAdd cMul cDup cAdd", "cMul [Value_t(4)] cMul", "");
						goto Lag;
					}
				}
				break;
			}
			goto Default1;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(313,
						"cDup x cMul cAdd",
						"[x+Value_t(1)] cMul",
						"    with x = " << x << "\n");
					goto Lah;
				}
			}
			goto Default1;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(199,"cNeg cAdd", "cSub", "");
			goto Lai;
		case cImmed:
			x = ImmedPtr[0];
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(127,
						"y cAdd x cAdd",
						"[y+x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cAdd; */ // redundant, matches cAdd @ 0
					goto Laj;
				}
				break;
			case cRSub:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(298,
							"y cAdd cRSub x cAdd",
							"[ y+x] cAdd cRSub",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lak;
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(299,
						"cNeg cRSub x cAdd",
						"[-x] cAdd cRSub",
						"    with x = " << x << "\n");
					goto Lal;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(297,
						"y cRSub x cAdd",
						"[ y+x] cRSub",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lam;
				}
				break;
			case cSub:
				B = ByteCodePtr[-2];
				if(IsVarOpcode(B))
				{
					switch(ByteCodePtr[-3])
					{
					case cAdd:
						if(ByteCodePtr[-4] == cImmed)
						{
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(292,
								"y cAdd B[IsVarOpcode(B)] cSub x cAdd",
								"[ y+x] cAdd B cSub",
								"    with x = " << x
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-4] = cImmed; */ // redundant, matches y @ 5
							goto Lan;
						}
						break;
					case cNeg:
						FP_TRACE_BYTECODE_OPTIMIZATION(293,
							"cNeg B[IsVarOpcode(B)] cSub x cAdd",
							"[-x] cAdd B cSub",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						goto Lao;
					case cImmed:
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(291,
							"y B[IsVarOpcode(B)] cSub x cAdd",
							"[ y+x] B cSub",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lap;
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(105,
					"y x cAdd",
					"[y+x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Laq;
			}
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(57,
					"x[x==Value_t()] cAdd",
					"",
					"    with x = " << x << "\n");
				goto Lar;
			}
			break;
		default: Default1:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				if(ByteCodePtr[-1] == cRSub)
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(290,
							"x cRSub A[IsVarOpcode(A)] cAdd",
							"[DO_STACKPLUS1] A [x] cAdd cRSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						incStackPtr();
						--mStackPtr;
						goto Lba;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(295,
						"cRSub A[IsVarOpcode(A)] cAdd",
						"[DO_STACKPLUS1] A cAdd cRSub",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Lbb;
				}
			}
		}
		goto Default0;
	TailCall_cAnd:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAnd:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(224,"cDup cAnd", "cNotNot", "");
			goto Lbc;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(117,
					"y x cAnd",
					"[fp_and(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbd;
			}
			break;
		}
		goto Default0;
	TailCall_cAsin:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAsin:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(fp_abs(x)<=Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(149,
					"x[fp_abs(x)<=Value_t(1)] cAsin",
					"[fp_asin(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lbe;
			}
		}
		goto Default0;
	TailCall_cAsinh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAsinh:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(146,
				"x cAsinh",
				"[fp_asinh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbf;
		}
		goto Default0;
	TailCall_cAtan:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAtan:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(150,
				"x cAtan",
				"[fp_atan(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbg;
		}
		goto Default0;
	TailCall_cAtan2:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAtan2:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(139,
					"y x cAtan2",
					"[fp_atan2(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbh;
			}
		}
		goto Default0;
	TailCall_cAtanh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAtanh:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(fp_abs(x)<Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(147,
					"x[fp_abs(x)<Value_t(1)] cAtanh",
					"[fp_atanh(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lbi;
			}
		}
		goto Default0;
	TailCall_cCbrt:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCbrt:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(151,
				"x cCbrt",
				"[fp_cbrt(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbj;
		}
		goto Default0;
	TailCall_cCeil:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCeil:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			B = ByteCodePtr[-1];
			if(IsUnaryOpcode(B)&&IsAlwaysIntegerOpcode(B))
			{
				A = ByteCodePtr[-2];
				if(IsVarOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(400,
						"A[IsVarOpcode(A)] B[IsUnaryOpcode(B)&&IsAlwaysIntegerOpcode(B)] cAdd cCeil",
						"cCeil A B cAdd",
						"    with B = " << FP_TRACE_OPCODENAME(B)
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					goto Lbk;
				}
			}
			goto Default2;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(407,"cNeg cCeil", "cFloor cNeg", "");
			goto Lbl;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(135,
				"x cCeil",
				"[fp_ceil(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbm;
		default: Default2:;
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(396,
					"A[IsAlwaysIntegerOpcode(A)] cCeil",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cCos:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCos:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(235,"cAbs cCos", "cCos", "");
			/* opcode = cCos; */ // redundant, matches cCos @ 0
			goto Lbn;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(238,"cNeg cCos", "cCos", "");
			/* opcode = cCos; */ // redundant, matches cCos @ 0
			goto Lbn;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(152,
				"x cCos",
				"[fp_cos(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbo;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				switch(ByteCodePtr[-1])
				{
				case cSec:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(507,
							"B[B==A] cSec A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCos",
							"B cSec cDup cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cSec; */ // redundant, matches cSec @ 2
						goto Lbp;
					}
					break;
				case cSin:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(501,
							"B[B==A] cSin A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCos",
							"B cSinCos",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lbq;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cCosh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCosh:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(236,"cAbs cCosh", "cCosh", "");
			/* opcode = cCosh; */ // redundant, matches cCosh @ 0
			goto Lbr;
		case cAsinh:
			FP_TRACE_BYTECODE_OPTIMIZATION(457,"cAsinh cCosh", "[DO_STACKPLUS1] cSqr [Value_t(1)] cAdd cSqrt", "");
			incStackPtr();
			--mStackPtr;
			goto Lca;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(239,"cNeg cCosh", "cCosh", "");
			/* opcode = cCosh; */ // redundant, matches cCosh @ 0
			goto Lbr;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(153,
				"x cCosh",
				"[fp_cosh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lcb;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				if(ByteCodePtr[-1] == cSinh)
				{
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(514,
							"B[B==A] cSinh A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCosh",
							"B cSinhCosh",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lcc;
					}
				}
			}
		}
		goto Default0;
	TailCall_cCot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCot:
		A = ByteCodePtr[0];
		if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
		{
			if(ByteCodePtr[-1] == cTan)
			{
				B = ByteCodePtr[-2];
				if(B==A)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(505,
						"B[B==A] cTan A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCot",
						"B cTan cDup cInv",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", B = " << FP_TRACE_OPCODENAME(B)
						    << "\n");
					/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
					/* ByteCodePtr[-1] = cTan; */ // redundant, matches cTan @ 2
					goto Lbp;
				}
			}
		}
		goto Default0;
	TailCall_cCsc:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCsc:
		A = ByteCodePtr[0];
		if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
		{
			if(ByteCodePtr[-1] == cSin)
			{
				B = ByteCodePtr[-2];
				if(B==A)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(503,
						"B[B==A] cSin A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCsc",
						"B cSin cDup cInv",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", B = " << FP_TRACE_OPCODENAME(B)
						    << "\n");
					/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
					/* ByteCodePtr[-1] = cSin; */ // redundant, matches cSin @ 2
					goto Lbp;
				}
			}
		}
		goto Default0;
	TailCall_cDeg:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cDeg:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(133,
				"x cDeg",
				"[RadiansToDegrees(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lcd;
		}
		goto Default0;
	TailCall_cDiv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cDiv:
		switch(ByteCodePtr[0])
		{
		case cCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(250,"cCos cDiv", "cSec cMul", "");
			goto Lce;
		case cCot:
			FP_TRACE_BYTECODE_OPTIMIZATION(254,"cCot cDiv", "cTan cMul", "");
			goto Lcf;
		case cCsc:
			FP_TRACE_BYTECODE_OPTIMIZATION(252,"cCsc cDiv", "cSin cMul", "");
			goto Lcg;
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(78,"cDup cDiv", "[Value_t()] cMul [Value_t(1)] cAdd", "");
			goto Lch;
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(413,"cExp cDiv", "cNeg cExp cMul", "");
			goto Lci;
		case cExp2:
			FP_TRACE_BYTECODE_OPTIMIZATION(414,"cExp2 cDiv", "cNeg cExp2 cMul", "");
			goto Lcj;
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(213,"cInv cDiv", "cMul", "");
			goto Lck;
		case cPow:
			FP_TRACE_BYTECODE_OPTIMIZATION(412,"cPow cDiv", "cNeg cPow cMul", "");
			goto Lcl;
		case cSec:
			FP_TRACE_BYTECODE_OPTIMIZATION(253,"cSec cDiv", "cCos cMul", "");
			goto Lcm;
		case cSin:
			FP_TRACE_BYTECODE_OPTIMIZATION(249,"cSin cDiv", "cCsc cMul", "");
			goto Lcn;
		case cSinCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(509,"cSinCos cDiv", "cTan", "");
			goto Lco;
		case cSinhCosh:
			FP_TRACE_BYTECODE_OPTIMIZATION(516,"cSinhCosh cDiv", "cTanh", "");
			goto Lcp;
		case cTan:
			FP_TRACE_BYTECODE_OPTIMIZATION(251,"cTan cDiv", "cCot cMul", "");
			goto Lcq;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(125,
						"cNeg x[x!=Value_t()] cDiv",
						"[-x] cDiv",
						"    with x = " << x << "\n");
					/* opcode = cDiv; */ // redundant, matches cDiv @ 0
					goto Lcr;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(103,
						"y x[x!=Value_t()] cDiv",
						"[y/x]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Lda;
				}
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(56,
					"x[x==Value_t(1)] cDiv",
					"",
					"    with x = " << x << "\n");
				goto Lar;
			}
			if(x!=Value_t(0))
			{
				if(ByteCodePtr[-1] == cMul)
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						y = ImmedPtr[-1];
						if((y/x)==fp_const_rad_to_deg<Value_t>())
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(321,
								"y[(y/x)==fp_const_rad_to_deg<Value_t>()] cMul x[x!=Value_t(0)] cDiv",
								"cDeg",
								"    with x = " << x
								    << ", y = " << y
								    << "\n");
							goto Ldb;
						}
						if((y/x)==fp_const_deg_to_rad<Value_t>())
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(322,
								"y[(y/x)==fp_const_deg_to_rad<Value_t>()] cMul x[x!=Value_t(0)] cDiv",
								"cRad",
								"    with x = " << x
								    << ", y = " << y
								    << "\n");
							goto Ldc;
						}
						FP_TRACE_BYTECODE_OPTIMIZATION(323,
							"y cMul x[x!=Value_t(0)] cDiv",
							"[y/x] cMul",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
						goto Ldd;
					}
				}
				FP_TRACE_BYTECODE_OPTIMIZATION(325,
					"x[x!=Value_t(0)] cDiv",
					"[Value_t(1)/x] cMul",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lde;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDiv:
					B = ByteCodePtr[-2];
					if(IsVarOpcode(B))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(271,
							"B[IsVarOpcode(B)] cDiv A[IsVarOpcode(A)] cDiv",
							"[DO_STACKPLUS1] B A cMul cDiv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						incStackPtr();
						--mStackPtr;
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* opcode = cDiv; */ // redundant, matches cDiv @ 0
						goto Ldf;
					}
					break;
				case cRDiv:
					switch(ByteCodePtr[-2])
					{
					case cImmed:
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(266,
							"x cRDiv A[IsVarOpcode(A)] cDiv",
							"A cMul [x] cRDiv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Ldg;
					default:
						B = ByteCodePtr[-2];
						if(IsVarOpcode(B))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(265,
								"B[IsVarOpcode(B)] cRDiv A[IsVarOpcode(A)] cDiv",
								"A cMul B cRDiv",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							goto Ldh;
						}
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cEqual:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(359,
						"cAbs x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Ldi;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(361,
						"cSqr x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Ldi;
				default:
					A = ByteCodePtr[-1];
					if(IsLogicalOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(428,
							"A[IsLogicalOpcode(A)] x[x==Value_t(0)] cEqual",
							"A cNot",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Ldj;
					}
				}
			}
			if(x==Value_t(1))
			{
				A = ByteCodePtr[-1];
				if(IsLogicalOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(426,
						"A[IsLogicalOpcode(A)] x[x==Value_t(1)] cEqual",
						"A",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					goto Lar;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(115,
					"y x cEqual",
					"[fp_equal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldk;
			}
		}
		goto Default0;
	TailCall_cExp:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cExp:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(409,
					"x cAdd cExp",
					"cExp [fp_exp(x)] cMul",
					"    with x = " << x << "\n");
				goto Ldl;
			}
			break;
		case cLog:
			A = ByteCodePtr[-1];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(340,
					"A[IsNeverNegativeValueOpcode(A)] cLog cExp",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Ldm;
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(154,
				"x cExp",
				"[fp_exp(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Ldn;
		}
		goto Default0;
	TailCall_cExp2:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cExp2:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(410,
					"x cAdd cExp2",
					"cExp2 [fp_exp2(x)] cMul",
					"    with x = " << x << "\n");
				goto Ldo;
			}
			break;
		case cLog2:
			A = ByteCodePtr[-1];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(341,
					"A[IsNeverNegativeValueOpcode(A)] cLog2 cExp2",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Ldm;
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(155,
				"x cExp2",
				"[fp_exp2(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Ldp;
		}
		FP_TRACE_BYTECODE_OPTIMIZATION(486,"cExp2", "[DO_STACKPLUS1] [fp_log(Value_t(2))] cMul cExp", "");
		incStackPtr();
		--mStackPtr;
		goto Ldq;
	TailCall_cFloor:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFloor:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			B = ByteCodePtr[-1];
			if(IsUnaryOpcode(B)&&IsAlwaysIntegerOpcode(B))
			{
				A = ByteCodePtr[-2];
				if(IsVarOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(399,
						"A[IsVarOpcode(A)] B[IsUnaryOpcode(B)&&IsAlwaysIntegerOpcode(B)] cAdd cFloor",
						"cFloor A B cAdd",
						"    with B = " << FP_TRACE_OPCODENAME(B)
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					goto Ldr;
				}
			}
			goto Default3;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(406,"cNeg cFloor", "cCeil cNeg", "");
			goto Lea;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(136,
				"x cFloor",
				"[fp_floor(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Leb;
		default: Default3:;
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(395,
					"A[IsAlwaysIntegerOpcode(A)] cFloor",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cGreater:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cGreater:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(113,
					"y x cGreater",
					"[fp_less(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lec;
			}
			if(x==Value_t(-0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(438,
					"x[x==Value_t(-0.5)] cGreater",
					"cNeg cAbsNot",
					"    with x = " << x << "\n");
				goto Led;
			}
		}
		goto Default0;
	TailCall_cGreaterOrEq:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cGreaterOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x!=Value_t(0))
			{
				if(ByteCodePtr[-1] == cAbs)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(434,
						"cAbs x[x!=Value_t(0)] cGreaterOrEq",
						"[Value_t(0.5)/x] cMul cNotNot",
						"    with x = " << x << "\n");
					goto Lee;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(114,
					"y x cGreaterOrEq",
					"[fp_lessOrEq(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lef;
			}
			if(x==Value_t(0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(437,
					"x[x==Value_t(0.5)] cGreaterOrEq",
					"cAbsNotNot",
					"    with x = " << x << "\n");
				goto Leg;
			}
		}
		goto Default0;
	TailCall_cHypot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cHypot:
		if(ByteCodePtr[0] == cSinCos)
		{
			FP_TRACE_BYTECODE_OPTIMIZATION(84,"cSinCos cHypot", "[Value_t()] cMul [Value_t(1)] cAdd", "");
			goto Lch;
		}
		goto Default0;
	TailCall_cInt:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cInt:
		switch(ByteCodePtr[0])
		{
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(137,
				"x cInt",
				"[fp_int(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Leh;
		default:
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(397,
					"A[IsAlwaysIntegerOpcode(A)] cInt",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cInv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cInv:
		switch(ByteCodePtr[0])
		{
		case cCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(256,"cCos cInv", "cSec", "");
			goto Lei;
		case cCot:
			FP_TRACE_BYTECODE_OPTIMIZATION(260,"cCot cInv", "cTan", "");
			goto Lco;
		case cCsc:
			FP_TRACE_BYTECODE_OPTIMIZATION(258,"cCsc cInv", "cSin", "");
			goto Lej;
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(62,"cInv cInv", "", "");
			goto Ldm;
		case cPow:
			FP_TRACE_BYTECODE_OPTIMIZATION(355,"cPow cInv", "cNeg cPow", "");
			goto Lek;
		case cSec:
			FP_TRACE_BYTECODE_OPTIMIZATION(259,"cSec cInv", "cCos", "");
			goto Lel;
		case cSin:
			FP_TRACE_BYTECODE_OPTIMIZATION(255,"cSin cInv", "cCsc", "");
			goto Lem;
		case cSqrt:
			FP_TRACE_BYTECODE_OPTIMIZATION(206,"cSqrt cInv", "cRSqrt", "");
			goto Len;
		case cTan:
			FP_TRACE_BYTECODE_OPTIMIZATION(257,"cTan cInv", "cCot", "");
			goto Leo;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(101,
					"x[x!=Value_t()] cInv",
					"[Value_t(1)/x]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lep;
			}
			break;
		}
		goto Default0;
	TailCall_cLess:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLess:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				A = ByteCodePtr[-1];
				if(IsNeverNegativeValueOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(301,
						"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(0)] cLess",
						"A [x] cMul",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
					goto Leq;
				}
			}
			if(x!=Value_t(0))
			{
				if(ByteCodePtr[-1] == cAbs)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(433,
						"cAbs x[x!=Value_t(0)] cLess",
						"[Value_t(0.5)/x] cMul cNot",
						"    with x = " << x << "\n");
					goto Ler;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(111,
					"y x cLess",
					"[fp_less(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lfa;
			}
			if(x==Value_t(0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(436,
					"x[x==Value_t(0.5)] cLess",
					"cAbsNot",
					"    with x = " << x << "\n");
				goto Lfb;
			}
		}
		goto Default0;
	TailCall_cLessOrEq:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLessOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(112,
					"y x cLessOrEq",
					"[fp_lessOrEq(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lfc;
			}
			if(x==Value_t(-0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(439,
					"x[x==Value_t(-0.5)] cLessOrEq",
					"cNeg cAbsNotNot",
					"    with x = " << x << "\n");
				goto Lfd;
			}
		}
		goto Default0;
	TailCall_cLog:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLog:
		switch(ByteCodePtr[0])
		{
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(343,"cExp cLog", "", "");
			goto Ldm;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(x>Value_t(0))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(498,
						"x[x>Value_t(0)] cMul cLog",
						"cLog [fp_log(x)] cAdd",
						"    with x = " << x << "\n");
					goto Lfe;
				}
			}
			break;
		case cSqr:
			FP_TRACE_BYTECODE_OPTIMIZATION(303,"cSqr cLog", "cAbs cLog cDup cAdd", "");
			goto Lff;
		case cImmed:
			x = ImmedPtr[0];
			if(x>Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(156,
					"x[x>Value_t(0)] cLog",
					"[fp_log(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lfg;
			}
			break;
		}
		goto Default0;
	TailCall_cLog10:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLog10:
		switch(ByteCodePtr[0])
		{
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(488,"cExp cLog10", "[DO_STACKPLUS1] [fp_log10(fp_const_e<Value_t>())] cMul", "");
			incStackPtr();
			--mStackPtr;
			goto Lfh;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(x>Value_t(0))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(499,
						"x[x>Value_t(0)] cMul cLog10",
						"cLog10 [fp_log10(x)] cAdd",
						"    with x = " << x << "\n");
					goto Lfi;
				}
			}
			break;
		case cSqr:
			FP_TRACE_BYTECODE_OPTIMIZATION(305,"cSqr cLog10", "cAbs cLog10 cDup cAdd", "");
			goto Lfj;
		case cImmed:
			x = ImmedPtr[0];
			if(x>Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(157,
					"x[x>Value_t(0)] cLog10",
					"[fp_log10(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lfk;
			}
			break;
		}
		goto Default0;
	TailCall_cLog2:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLog2:
		switch(ByteCodePtr[0])
		{
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(487,"cExp cLog2", "[DO_STACKPLUS1] [fp_log2(fp_const_e<Value_t>())] cMul", "");
			incStackPtr();
			--mStackPtr;
			goto Lfl;
		case cExp2:
			FP_TRACE_BYTECODE_OPTIMIZATION(344,"cExp2 cLog2", "", "");
			goto Ldm;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(x>Value_t(0))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(497,
						"x[x>Value_t(0)] cMul cLog2",
						"cLog2 [fp_log2(x)] cAdd",
						"    with x = " << x << "\n");
					goto Lfm;
				}
			}
			break;
		case cSqr:
			FP_TRACE_BYTECODE_OPTIMIZATION(304,"cSqr cLog2", "cAbs cLog2 cDup cAdd", "");
			goto Lfn;
		case cImmed:
			x = ImmedPtr[0];
			if(x>Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(158,
					"x[x>Value_t(0)] cLog2",
					"[fp_log2(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lfo;
			}
			break;
		}
		goto Default0;
	TailCall_cMax:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMax:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(60,"cDup cMax", "", "");
			goto Ldm;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(141,
					"y x cMax",
					"[fp_max(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lfp;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(66,
							"B[B==A] cDup A[IsVarOpcode(A)] cMax",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Ldm;
					}
					break;
				case cMax:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(68,
							"B[B==A] cMax A[IsVarOpcode(A)] cMax",
							"B cMax",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMax; */ // redundant, matches cMax @ 2
						goto Ldm;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cMin:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMin:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(59,"cDup cMin", "", "");
			goto Ldm;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(140,
					"y x cMin",
					"[fp_min(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lfq;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(65,
							"B[B==A] cDup A[IsVarOpcode(A)] cMin",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Ldm;
					}
					break;
				case cMin:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(67,
							"B[B==A] cMin A[IsVarOpcode(A)] cMin",
							"B cMin",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMin; */ // redundant, matches cMin @ 2
						goto Ldm;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cMod:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMod:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				if(ByteCodePtr[-1] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(104,
						"y x[x!=Value_t()] cMod",
						"[fp_mod(y,x)]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Lfr;
				}
			}
		}
		goto Default0;
	TailCall_cMul:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMul:
		switch(ByteCodePtr[0])
		{
		case cCsc:
			A = ByteCodePtr[-1];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>3)
			{
				if(ByteCodePtr[-2] == cCos)
				{
					B = ByteCodePtr[-3];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(515,
							"B[B==A] cCos A[IsVarOpcode(A)&&mData->mByteCode.size()>3] cCsc cMul",
							"B cCot",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
						goto Lga;
					}
				}
			}
			goto Default4;
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(202,"cDup cMul", "cSqr", "");
			goto Lgb;
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(214,"cInv cMul", "cDiv", "");
			goto Lgc;
		case cNeg:
			switch(ByteCodePtr[-1])
			{
			case cDup:
				FP_TRACE_BYTECODE_OPTIMIZATION(474,"cDup cNeg cMul", "cSqr cNeg", "");
				goto Lgd;
			default:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cMul)
					{
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(480,
								"B[B==A] cMul A[IsVarOpcode(A)] cNeg cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lge;
						}
					}
				}
			}
			goto Default4;
		case cPow:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(314,
						"cDup x cPow cMul",
						"[x+Value_t(1)] cPow",
						"    with x = " << x << "\n");
					goto Lgf;
				}
			}
			goto Default4;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(93,
							"A[IsVarOpcode(A)] cMul x[x==Value_t()] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lgg;
					}
					goto Default5;
				default: Default5:;
					A = ByteCodePtr[-1];
					if(IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						switch(ByteCodePtr[-2])
						{
						case cImmed:
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(92,
								"y A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
								"[x] cMul",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lgh;
						default:
							B = ByteCodePtr[-2];
							if(IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								switch(ByteCodePtr[-3])
								{
								case cImmed:
									y = ImmedPtr[-1];
									FP_TRACE_BYTECODE_OPTIMIZATION(96,
										"y B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
										"A [x] cMul",
										"    with x = " << x
										    << ", A = " << FP_TRACE_OPCODENAME(A)
										    << ", B = " << FP_TRACE_OPCODENAME(B)
										    << ", y = " << y
										    << "\n");
									/* opcode = cMul; */ // redundant, matches cMul @ 0
									goto Lgi;
								default:
									C = ByteCodePtr[-3];
									if(IsVarOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(94,
											"C[IsVarOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
											"A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lgj;
									}
									if(IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(95,
											"C[IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
											"B A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lgk;
									}
								}
							}
							if(IsVarOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(90,
									"B[IsVarOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
									"[x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lgg;
							}
							if(IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(91,
									"B[IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
									"A [x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lgl;
							}
						}
					}
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(88,
							"A[IsVarOpcode(A)] x[x==Value_t()] cMul",
							"[x]",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						goto Lgm;
					}
					if(IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(89,
							"A[IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lgn;
					}
				}
			}
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				switch(ByteCodePtr[-2])
				{
				case cDup:
					if(x+x==Value_t(1))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(316,
							"cDup[x+x==Value_t(1)] cAdd x cMul",
							"",
							"    with x = " << x << "\n");
						goto Lgo;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(317,
						"cDup cAdd x cMul",
						"[x+x] cMul",
						"    with x = " << x << "\n");
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Lgp;
				case cMul:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(IsVarOpcode(A))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(386,
								"A[IsVarOpcode(A)] y cMul cAdd x cMul",
								"[x] cMul A [y*x] cMul cAdd",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lgq;
						}
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(385,
						"y cAdd x cMul",
						"[x] cMul [y*x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lgr;
				}
				break;
			case cDeg:
				FP_TRACE_BYTECODE_OPTIMIZATION(209,
					"cDeg x cMul",
					"[RadiansToDegrees(x)] cMul",
					"    with x = " << x << "\n");
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Lha;
			case cDiv:
				B = ByteCodePtr[-2];
				if(IsVarOpcode(B))
				{
					switch(ByteCodePtr[-3])
					{
					case cMul:
						if(ByteCodePtr[-4] == cImmed)
						{
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(278,
								"y cMul B[IsVarOpcode(B)] cDiv x cMul",
								"[y*x] cMul B cDiv",
								"    with x = " << x
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-4] = cImmed; */ // redundant, matches y @ 5
							goto Lhb;
						}
						break;
					case cNeg:
						FP_TRACE_BYTECODE_OPTIMIZATION(279,
							"cNeg B[IsVarOpcode(B)] cDiv x cMul",
							"[-x] cMul B cDiv",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						goto Lhc;
					case cImmed:
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(277,
							"y B[IsVarOpcode(B)] cDiv x cMul",
							"[y*x] B cDiv",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lhd;
					}
				}
				break;
			case cMul:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cDup)
					{
						if(x+x==Value_t(1))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(318,
								"cDup[x+x==Value_t(1)] cAdd cMul x cMul",
								"cMul",
								"    with x = " << x << "\n");
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lhe;
						}
						FP_TRACE_BYTECODE_OPTIMIZATION(319,
							"cDup cAdd cMul x cMul",
							"cMul [x+x] cMul",
							"    with x = " << x << "\n");
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lhf;
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					if(y*x==Value_t(1))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(70,
							"y[y*x==Value_t(1)] cMul x cMul",
							"",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Lhg;
					}
					if((y*x)==fp_const_rad_to_deg<Value_t>())
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(307,
							"y[(y*x)==fp_const_rad_to_deg<Value_t>()] cMul x cMul",
							"cDeg",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Ldb;
					}
					if((y*x)==fp_const_deg_to_rad<Value_t>())
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(308,
							"y[(y*x)==fp_const_deg_to_rad<Value_t>()] cMul x cMul",
							"cRad",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Ldc;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(128,
						"y cMul x cMul",
						"[y*x] cMul",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Lhh;
				}
				break;
			case cNeg:
				FP_TRACE_BYTECODE_OPTIMIZATION(122,
					"cNeg x cMul",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Lhi;
			case cRDiv:
				switch(ByteCodePtr[-2])
				{
				case cMul:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(285,
							"y cMul cRDiv x cMul",
							"[y*x] cMul cRDiv",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lhj;
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(286,
						"cNeg cRDiv x cMul",
						"[-x] cMul cRDiv",
						"    with x = " << x << "\n");
					goto Lhk;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(284,
						"y cRDiv x cMul",
						"[y*x] cRDiv",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lhl;
				}
				break;
			case cRad:
				FP_TRACE_BYTECODE_OPTIMIZATION(210,
					"cRad x cMul",
					"[DegreesToRadians(x)] cMul",
					"    with x = " << x << "\n");
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Lhm;
			case cSub:
				if(ByteCodePtr[-2] == cMul)
				{
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(IsVarOpcode(A))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(387,
								"A[IsVarOpcode(A)] y cMul cSub x cMul",
								"[x] cMul A [y*x] cMul cSub",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lhn;
						}
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(102,
					"y x cMul",
					"[y*x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lho;
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(55,
					"x[x==Value_t(1)] cMul",
					"",
					"    with x = " << x << "\n");
				goto Lar;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(124,
					"x[x==Value_t(-1)] cMul",
					"cNeg",
					"    with x = " << x << "\n");
				goto Lhp;
			}
			if(x==Value_t(2))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(198,
					"x[x==Value_t(2)] cMul",
					"cDup cAdd",
					"    with x = " << x << "\n");
				goto Lhq;
			}
			if(x==fp_const_rad_to_deg<Value_t>())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(207,
					"x[x==fp_const_rad_to_deg<Value_t>()] cMul",
					"cDeg",
					"    with x = " << x << "\n");
				goto Lhr;
			}
			if(x==fp_const_deg_to_rad<Value_t>())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(208,
					"x[x==fp_const_deg_to_rad<Value_t>()] cMul",
					"cRad",
					"    with x = " << x << "\n");
				goto Lia;
			}
			break;
		default: Default4:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDiv:
					B = ByteCodePtr[-2];
					if(IsVarOpcode(B))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(274,
							"B[IsVarOpcode(B)] cDiv A[IsVarOpcode(A)] cMul",
							"[DO_STACKPLUS1] A cMul B cDiv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						incStackPtr();
						--mStackPtr;
						goto Lib;
					}
					goto Default6;
				case cMul:
					switch(ByteCodePtr[-2])
					{
					case cNeg:
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(477,
								"B[B==A] cNeg cMul A[IsVarOpcode(A)] cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lge;
						}
						goto Default7;
					default: Default7:;
						B = ByteCodePtr[-2];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(468,
								"B[B==A] cMul A[IsVarOpcode(A)] cMul",
								"B cSqr cMul",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lic;
						}
					}
					goto Default6;
				case cNeg:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(471,
							"B[B==A] cNeg A[IsVarOpcode(A)] cMul",
							"B cSqr cNeg",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lgd;
					}
					goto Default6;
				case cRDiv:
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(267,
							"x cRDiv A[IsVarOpcode(A)] cMul",
							"[DO_STACKPLUS1] A [x] cMul cRDiv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						incStackPtr();
						--mStackPtr;
						goto Lid;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(281,
						"cRDiv A[IsVarOpcode(A)] cMul",
						"[DO_STACKPLUS1] A cMul cRDiv",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Lie;
				default: Default6:;
					B = ByteCodePtr[-1];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(465,
							"B[B==A] A[IsVarOpcode(A)] cMul",
							"B cSqr",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-1] = B; */ // redundant, matches B @ 2
						goto Lgb;
					}
				}
			}
			if(IsUnaryOpcode(A))
			{
				B = ByteCodePtr[-1];
				if(IsVarOpcode(B)&&mData->mByteCode.size()>1)
				{
					if(ByteCodePtr[-2] == cMul)
					{
						C = ByteCodePtr[-3];
						if(C==A)
						{
							D = ByteCodePtr[-4];
							if(D==B)
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(484,
									"D[D==B] C[C==A] cMul B[IsVarOpcode(B)&&mData->mByteCode.size()>1] A[IsUnaryOpcode(A)] cMul",
									"D C cSqr cMul",
									"    with A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << ", C = " << FP_TRACE_OPCODENAME(C)
									    << ", D = " << FP_TRACE_OPCODENAME(D)
									    << "\n");
								/* ByteCodePtr[-4] = D; */ // redundant, matches D @ 5
								/* ByteCodePtr[-3] = C; */ // redundant, matches C @ 4
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lif;
							}
						}
					}
				}
			}
		}
		goto Default0;
	TailCall_cNEqual:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(360,
						"cAbs x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Lig;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(362,
						"cSqr x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Lig;
				default:
					A = ByteCodePtr[-1];
					if(IsLogicalOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(429,
							"A[IsLogicalOpcode(A)] x[x==Value_t(0)] cNEqual",
							"A",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lar;
					}
				}
			}
			if(x==Value_t(1))
			{
				A = ByteCodePtr[-1];
				if(IsLogicalOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(427,
						"A[IsLogicalOpcode(A)] x[x==Value_t(1)] cNEqual",
						"A cNot",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					goto Ldj;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(116,
					"y x cNEqual",
					"[fp_nequal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lih;
			}
		}
		goto Default0;
	TailCall_cNeg:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNeg:
		switch(ByteCodePtr[0])
		{
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(123,
					"x cMul cNeg",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Lii;
			}
			break;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(61,"cNeg cNeg", "", "");
			goto Ldm;
		case cSin:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(244,
						"x cMul cSin cNeg",
						"[-x] cMul cSin",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Lij;
				}
			}
			break;
		case cSinh:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(245,
						"x cMul cSinh cNeg",
						"[-x] cMul cSinh",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Lik;
				}
			}
			break;
		case cTan:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(246,
						"x cMul cTan cNeg",
						"[-x] cMul cTan",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Lil;
				}
			}
			break;
		case cTanh:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(247,
						"x cMul cTanh cNeg",
						"[-x] cMul cTanh",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Lim;
				}
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(100,
				"x cNeg",
				"[-x]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lin;
		}
		goto Default0;
	TailCall_cNot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNot:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(227,"cAbs cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Lio;
		case cAbsNot:
			A = ByteCodePtr[-1];
			if(IsLogicalOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(389,
					"A[IsLogicalOpcode(A)] cAbsNot cNot",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Ldm;
			}
			if(A!=cImmed)
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(390,
					"A[A!=cImmed] cAbsNot cNot",
					"A cAbsNotNot",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Lip;
			}
			goto Default8;
		case cAbsNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(231,"cAbsNotNot cNot", "cAbsNot", "");
			goto Liq;
		case cEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(220,"cEqual cNot", "cNEqual", "");
			goto Lir;
		case cGreater:
			FP_TRACE_BYTECODE_OPTIMIZATION(218,"cGreater cNot", "cLessOrEq", "");
			goto Lja;
		case cGreaterOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(219,"cGreaterOrEq cNot", "cLess", "");
			goto Ljb;
		case cLess:
			FP_TRACE_BYTECODE_OPTIMIZATION(216,"cLess cNot", "cGreaterOrEq", "");
			goto Ljc;
		case cLessOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(217,"cLessOrEq cNot", "cGreater", "");
			goto Ljd;
		case cNEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(221,"cNEqual cNot", "cEqual", "");
			goto Lje;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(226,"cNeg cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Lio;
		case cNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(229,"cNot cNot", "cNotNot", "");
			goto Lbc;
		case cNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(230,"cNotNot cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Lio;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(107,
				"x cNot",
				"[fp_not(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Ljf;
		default: Default8:;
			A = ByteCodePtr[0];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(391,
					"A[IsNeverNegativeValueOpcode(A)] cNot",
					"A cAbsNot",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				goto Ljg;
			}
		}
		goto Default0;
	TailCall_cNotNot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNotNot:
		if(ByteCodePtr[0] == cNot)
		{
			FP_TRACE_BYTECODE_OPTIMIZATION(232,"cNot cNotNot", "cNot", "");
			/* ByteCodePtr[0] = cNot; */ // redundant, matches cNot @ 1
			return;
		}
		goto Default0;
	TailCall_cOr:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cOr:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(223,"cDup cOr", "cNotNot", "");
			goto Lbc;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(118,
					"y x cOr",
					"[fp_or(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ljh;
			}
			break;
		}
		goto Default0;
	TailCall_cPow:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cPow:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(!isEvenInteger(x+x))
			{
				if(ByteCodePtr[-1] == cSqr)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(22,
						"cSqr x[!isEvenInteger(x+x)] cPow",
						"cAbs [x+x] cPow",
						"    with x = " << x << "\n");
					/* opcode = cPow; */ // redundant, matches cPow @ 0
					goto Lji;
				}
			}
			if(isInteger(x))
			{
				switch(ByteCodePtr[-1])
				{
				case cExp:
					FP_TRACE_BYTECODE_OPTIMIZATION(43,
						"cExp x[isInteger(x)] cPow",
						"[x] cMul cExp",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					goto Ljj;
				case cExp2:
					FP_TRACE_BYTECODE_OPTIMIZATION(44,
						"cExp2 x[isInteger(x)] cPow",
						"[x] cMul cExp2",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					goto Ljk;
				case cPow:
					if(ByteCodePtr[-2] == cImmed)
					{
						y = ImmedPtr[-1];
						if(!isInteger(y))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(42,
								"y[!isInteger(y)] cPow x[isInteger(x)] cPow",
								"[y*x] cPow",
								"    with x = " << x
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cPow; */ // redundant, matches cPow @ 0
							goto Ljl;
						}
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(45,
						"cPow x[isInteger(x)] cPow",
						"[x] cMul cPow",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cPow; */ // redundant, matches cPow @ 0
					goto Ljm;
				}
			}
			if(isEvenInteger(x))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(441,
						"cAbs x[isEvenInteger(x)] cPow",
						"[x] cPow",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cPow; */ // redundant, matches cPow @ 0
					goto Ljn;
				case cMul:
					if(ByteCodePtr[-2] == cAbs)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(442,
							"cAbs cMul x[isEvenInteger(x)] cPow",
							"cMul [x] cPow",
							"    with x = " << x << "\n");
						/* opcode = cPow; */ // redundant, matches cPow @ 0
						goto Ljo;
					}
					break;
				}
			}
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(83,
					"x[x==Value_t()] cPow",
					"[Value_t()] cMul [Value_t(1)] cAdd",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Ljp;
			}
			if(x==Value_t(0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(332,
					"x[x==Value_t(0.5)] cPow",
					"cSqrt",
					"    with x = " << x << "\n");
				goto Ljq;
			}
			if(x==Value_t(1)/Value_t(3))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(333,
					"x[x==Value_t(1)/Value_t(3)] cPow",
					"cCbrt",
					"    with x = " << x << "\n");
				goto Ljr;
			}
			if(x==Value_t(1)/Value_t(-3))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(334,
					"x[x==Value_t(1)/Value_t(-3)] cPow",
					"cCbrt cInv",
					"    with x = " << x << "\n");
				goto Lka;
			}
			if(x==Value_t(-0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(335,
					"x[x==Value_t(-0.5)] cPow",
					"cRSqrt",
					"    with x = " << x << "\n");
				goto Lkb;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(336,
					"x[x==Value_t(-1)] cPow",
					"cInv",
					"    with x = " << x << "\n");
				goto Lkc;
			}
			switch(ByteCodePtr[-1])
			{
			case cPow:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					if(isEvenInteger(y)&&!isEvenInteger(x*y))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(21,
							"y[isEvenInteger(y)&&!isEvenInteger(x*y)] cPow x cPow",
							"cAbs [y*x] cPow",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* opcode = cPow; */ // redundant, matches cPow @ 0
						goto Lkd;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(330,
						"y cPow x cPow",
						"[y*x] cPow",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cPow; */ // redundant, matches cPow @ 0
					goto Ljl;
				}
				break;
			case cSqr:
				FP_TRACE_BYTECODE_OPTIMIZATION(46,
					"cSqr x cPow",
					"[x+x] cPow",
					"    with x = " << x << "\n");
				/* opcode = cPow; */ // redundant, matches cPow @ 0
				goto Lke;
			case cImmed:
				y = ImmedPtr[-1];
				if(y!=Value_t(0)||x>=Value_t(0))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(165,
						"y[y!=Value_t(0)||x>=Value_t(0)] x cPow",
						"[fp_pow(y,x)]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Lkf;
				}
				break;
			}
			FP_TRACE_BYTECODE_OPTIMIZATION(462,
				"x cPow",
				"[DO_POWI]",
				"    with x = " << x << "\n");
			if(TryCompilePowi(x))
			  return;
		}
		goto Default0;
	TailCall_cRDiv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRDiv:
		switch(ByteCodePtr[0])
		{
		case cSinCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(510,"cSinCos cRDiv", "cCot", "");
			goto Leo;
		case cSinhCosh:
			FP_TRACE_BYTECODE_OPTIMIZATION(517,"cSinhCosh cRDiv", "cTanh cInv", "");
			goto Lkg;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(268,
					"x[x==Value_t(1)] cRDiv",
					"cInv",
					"    with x = " << x << "\n");
				goto Lkc;
			}
			break;
		}
		goto Default0;
	TailCall_cRSub:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRSub:
		if(ByteCodePtr[0] == cDup)
		{
			FP_TRACE_BYTECODE_OPTIMIZATION(77,"cDup cRSub", "[Value_t()] cMul", "");
			goto Lkh;
		}
		goto Default0;
	TailCall_cRad:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRad:
		switch(ByteCodePtr[0])
		{
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(211,
					"x cMul cRad",
					"[DegreesToRadians(x)] cMul",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Lki;
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(134,
				"x cRad",
				"[DegreesToRadians(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lkj;
		}
		goto Default0;
	TailCall_cSec:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSec:
		A = ByteCodePtr[0];
		if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
		{
			switch(ByteCodePtr[-1])
			{
			case cCos:
				B = ByteCodePtr[-2];
				if(B==A)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(504,
						"B[B==A] cCos A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cSec",
						"B cCos cDup cInv",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", B = " << FP_TRACE_OPCODENAME(B)
						    << "\n");
					/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
					/* ByteCodePtr[-1] = cCos; */ // redundant, matches cCos @ 2
					goto Lbp;
				}
				break;
			case cSin:
				B = ByteCodePtr[-2];
				if(B==A)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(502,
						"B[B==A] cSin A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cSec",
						"B cSinCos cInv",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", B = " << FP_TRACE_OPCODENAME(B)
						    << "\n");
					/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
					goto Lkk;
				}
				break;
			}
		}
		goto Default0;
	TailCall_cSin:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSin:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(240,"cNeg cSin", "cSin cNeg", "");
			goto Lkl;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(159,
				"x cSin",
				"[fp_sin(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lkm;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				if(ByteCodePtr[-1] == cCsc)
				{
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(506,
							"B[B==A] cCsc A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cSin",
							"B cCsc cDup cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cCsc; */ // redundant, matches cCsc @ 2
						goto Lbp;
					}
				}
			}
		}
		goto Default0;
	TailCall_cSinh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSinh:
		switch(ByteCodePtr[0])
		{
		case cAcosh:
			FP_TRACE_BYTECODE_OPTIMIZATION(444,"cAcosh cSinh", "[DO_STACKPLUS1] cSqr [Value_t(-1)] cAdd cSqrt", "");
			incStackPtr();
			--mStackPtr;
			goto Lkn;
		case cAsinh:
			FP_TRACE_BYTECODE_OPTIMIZATION(349,"cAsinh cSinh", "", "");
			goto Ldm;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(241,"cNeg cSinh", "cSinh cNeg", "");
			goto Lko;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(160,
				"x cSinh",
				"[fp_sinh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lkp;
		}
		goto Default0;
	TailCall_cSqr:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSqr:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(204,"cAbs cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Lkq;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(203,"cNeg cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Lkq;
		case cSqrt:
			A = ByteCodePtr[-1];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(338,
					"A[IsNeverNegativeValueOpcode(A)] cSqrt cSqr",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Ldm;
			}
			break;
		}
		goto Default0;
	TailCall_cSqrt:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSqrt:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cSqr)
			{
				A = ByteCodePtr[-2];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-3] == cSqr)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(519,
							"cSqr A[IsVarOpcode(A)] cSqr cAdd cSqrt",
							"A cHypot",
							"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
						goto Lkr;
					}
				}
				B = ByteCodePtr[-2];
				if(IsUnaryOpcode(B))
				{
					A = ByteCodePtr[-3];
					if(IsVarOpcode(A))
					{
						if(ByteCodePtr[-4] == cSqr)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(520,
								"cSqr A[IsVarOpcode(A)] B[IsUnaryOpcode(B)] cSqr cAdd cSqrt",
								"A B cHypot",
								"    with B = " << FP_TRACE_OPCODENAME(B)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lla;
						}
					}
				}
			}
			break;
		case cSqr:
			FP_TRACE_BYTECODE_OPTIMIZATION(23,"cSqr cSqrt", "cAbs", "");
			goto Llb;
		case cImmed:
			x = ImmedPtr[0];
			if(x>=Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(161,
					"x[x>=Value_t(0)] cSqrt",
					"[fp_sqrt(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Llc;
			}
			break;
		}
		goto Default0;
	TailCall_cSub:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSub:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(76,"cDup cSub", "[Value_t()] cMul", "");
			goto Lkh;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(200,"cNeg cSub", "cAdd", "");
			goto Lld;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(58,
					"x[x==Value_t()] cSub",
					"",
					"    with x = " << x << "\n");
				goto Lar;
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(106,
					"y x cSub",
					"[y-x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lle;
			}
			FP_TRACE_BYTECODE_OPTIMIZATION(51,
				"x cSub",
				"[-x] cAdd",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Llf;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				if(ByteCodePtr[-1] == cRSub)
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(289,
							"x cRSub A[IsVarOpcode(A)] cSub",
							"A cAdd [x] cRSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Llg;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(296,
						"cRSub A[IsVarOpcode(A)] cSub",
						"[DO_STACKPLUS1] A cSub cRSub",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Llh;
				}
			}
		}
		goto Default0;
	TailCall_cTan:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cTan:
		switch(ByteCodePtr[0])
		{
		case cAtan2:
			FP_TRACE_BYTECODE_OPTIMIZATION(354,"cAtan2 cTan", "cDiv", "");
			goto Lgc;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(242,"cNeg cTan", "cTan cNeg", "");
			goto Lli;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(163,
				"x cTan",
				"[fp_tan(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Llj;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				if(ByteCodePtr[-1] == cCot)
				{
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(508,
							"B[B==A] cCot A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cTan",
							"B cCot cDup cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cCot; */ // redundant, matches cCot @ 2
						goto Lbp;
					}
				}
			}
		}
		goto Default0;
	TailCall_cTanh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cTanh:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(243,"cNeg cTanh", "cTanh cNeg", "");
			goto Llk;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(164,
				"x cTanh",
				"[fp_tanh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lll;
		}
		goto Default0;
	TailCall_cTrunc:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cTrunc:
		switch(ByteCodePtr[0])
		{
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(138,
				"x cTrunc",
				"[fp_trunc(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Llm;
		default:
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(394,
					"A[IsAlwaysIntegerOpcode(A)] cTrunc",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	default: Default0:;
		A = opcode;
		if(IsComparisonOpcode(A))
		{
			if(ByteCodePtr[0] == cImmed)
			{
				x = ImmedPtr[0];
				switch(ByteCodePtr[-1])
				{
				case cAdd:
					if(ByteCodePtr[-2] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(364,
							"y cAdd x A[IsComparisonOpcode(A)]",
							"[x-y] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
						goto Lln;
					}
					break;
				case cAtan:
					if(fp_abs(x)<fp_const_pi<Value_t>()*Value_t(0.5))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(380,
							"cAtan[fp_abs(x)<fp_const_pi<Value_t>()*Value_t(0.5)] x A[IsComparisonOpcode(A)]",
							"[fp_tan(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Llo;
					}
					break;
				case cExp:
					if(x>Value_t(0))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(370,
							"cExp[x>Value_t(0)] x A[IsComparisonOpcode(A)]",
							"[fp_log(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Llp;
					}
					break;
				case cExp2:
					if(x>Value_t(0))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(371,
							"cExp2[x>Value_t(0)] x A[IsComparisonOpcode(A)]",
							"[fp_log2(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Llq;
					}
					break;
				case cLog:
					B = ByteCodePtr[-2];
					if(IsNeverNegativeValueOpcode(B))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(373,
							"B[IsNeverNegativeValueOpcode(B)] cLog x A[IsComparisonOpcode(A)]",
							"B [fp_exp(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Llr;
					}
					break;
				case cLog10:
					B = ByteCodePtr[-2];
					if(IsNeverNegativeValueOpcode(B))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(375,
							"B[IsNeverNegativeValueOpcode(B)] cLog10 x A[IsComparisonOpcode(A)]",
							"B [fp_pow(Value_t(10),x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lma;
					}
					break;
				case cLog2:
					B = ByteCodePtr[-2];
					if(IsNeverNegativeValueOpcode(B))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(374,
							"B[IsNeverNegativeValueOpcode(B)] cLog2 x A[IsComparisonOpcode(A)]",
							"B [fp_exp2(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lmb;
					}
					break;
				case cMul:
					if(ByteCodePtr[-2] == cImmed)
					{
						y = ImmedPtr[-1];
						if(y>Value_t(0))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(366,
								"y[y>Value_t(0)] cMul x A[IsComparisonOpcode(A)]",
								"[x/y] A",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", x = " << x
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							goto Lmc;
						}
						if(y<Value_t(0))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(367,
								"y[y<Value_t(0)] cMul x A[IsComparisonOpcode(A)]",
								"[x/y] {OppositeComparisonOpcode(A)}",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", x = " << x
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							goto Lmd;
						}
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(365,
						"cNeg x A[IsComparisonOpcode(A)]",
						"[-x] {OppositeComparisonOpcode(A)}",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", x = " << x
						    << "\n");
					goto Lme;
				case cPow:
					if(x>Value_t(0))
					{
						if(ByteCodePtr[-2] == cImmed)
						{
							y = ImmedPtr[-1];
							if(y>Value_t(0))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(368,
									"y[y>Value_t(0)] cPow[x>Value_t(0)] x A[IsComparisonOpcode(A)]",
									"[fp_pow(x,Value_t(1)/y)] A",
									"    with A = " << FP_TRACE_OPCODENAME(A)
									    << ", x = " << x
									    << ", y = " << y
									    << "\n");
								/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
								goto Lmf;
							}
						}
					}
					break;
				case cSinh:
					FP_TRACE_BYTECODE_OPTIMIZATION(381,
						"cSinh x A[IsComparisonOpcode(A)]",
						"[fp_asinh(x)] A",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", x = " << x
						    << "\n");
					goto Lmg;
				case cSqr:
					if(x>Value_t(0))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(369,
							"cSqr[x>Value_t(0)] x A[IsComparisonOpcode(A)]",
							"cAbs [fp_sqrt(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Lmh;
					}
					break;
				case cTanh:
					if(fp_abs(x)<Value_t(1))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(382,
							"cTanh[fp_abs(x)<Value_t(1)] x A[IsComparisonOpcode(A)]",
							"[fp_atanh(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Lmi;
					}
					break;
				}
			}
		}
		if(IsVarOpcode(A)&&mData->mByteCode.size()>0)
		{
			B = ByteCodePtr[0];
			if(B==A)
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(482,
					"B[B==A] A[IsVarOpcode(A)&&mData->mByteCode.size()>0]",
					"B cDup",
					"    with A = " << FP_TRACE_OPCODENAME(A)
					    << ", B = " << FP_TRACE_OPCODENAME(B)
					    << "\n");
				/* ByteCodePtr[0] = B; */ // redundant, matches B @ 1
				goto Lmj;
			}
		}
		if(IsUnaryOpcode(A))
		{
			B = ByteCodePtr[0];
			if(IsVarOpcode(B)&&mData->mByteCode.size()>1)
			{
				C = ByteCodePtr[-1];
				if(C==A)
				{
					D = ByteCodePtr[-2];
					if(D==B)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(483,
							"D[D==B] C[C==A] B[IsVarOpcode(B)&&mData->mByteCode.size()>1] A[IsUnaryOpcode(A)]",
							"D C cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", C = " << FP_TRACE_OPCODENAME(C)
							    << ", D = " << FP_TRACE_OPCODENAME(D)
							    << "\n");
						/* ByteCodePtr[-2] = D; */ // redundant, matches D @ 3
						/* ByteCodePtr[-1] = C; */ // redundant, matches C @ 2
						goto Lmk;
					}
				}
			}
		}
		C = opcode;
		if(IsCommutativeOrParamSwappableBinaryOpcode(C))
		{
			switch(ByteCodePtr[0])
			{
			case cSin:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A)&&mData->mByteCode.size()>3)
				{
					if(ByteCodePtr[-2] == cCos)
					{
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(512,
								"B[B==A] cCos A[IsVarOpcode(A)&&mData->mByteCode.size()>3] cSin C[IsCommutativeOrParamSwappableBinaryOpcode(C)]",
								"B cSinCos {GetParamSwappedBinaryOpcode(C)}",
								"    with C = " << FP_TRACE_OPCODENAME(C)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lml;
						}
					}
				}
				break;
			case cSinh:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A)&&mData->mByteCode.size()>3)
				{
					if(ByteCodePtr[-2] == cCosh)
					{
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(513,
								"B[B==A] cCosh A[IsVarOpcode(A)&&mData->mByteCode.size()>3] cSinh C[IsCommutativeOrParamSwappableBinaryOpcode(C)]",
								"B cSinhCosh {GetParamSwappedBinaryOpcode(C)}",
								"    with C = " << FP_TRACE_OPCODENAME(C)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lmm;
						}
					}
				}
				break;
			}
		}
	}
	goto Laa;
Laa: mData->mByteCode.push_back(opcode); return;
Lab: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lmn: FP_TRACE_BYTECODE_ADD(cAbs);
     goto TailCall_cAbs;
Lac: ImmedPtr[0] = fp_abs(x); return;
Lad: ImmedPtr[0] = fp_acos(x); return;
Lae: ImmedPtr[0] = fp_acosh(x); return;
Laf: mData->mImmed.push_back(Value_t(4));
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
Lmo: opcode = cMul;
Lmp: FP_ReDefinePointers();
Lmq: FP_TRACE_BYTECODE_ADD(cMul);
     goto TailCall_cMul;
Lag: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(Value_t(4));
Lmr: mData->mByteCode.push_back(cImmed); goto Lmo;
Lah: ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
Leq: opcode = cMul; goto Lmq;
Lai: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSub;
Lna: FP_TRACE_BYTECODE_ADD(cSub);
     goto TailCall_cSub;
Laj: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lnb: FP_ReDefinePointers();
Lnc: FP_TRACE_BYTECODE_ADD(cAdd);
     goto TailCall_cAdd;
Lak: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Lnd: AddFunctionOpcode(cAdd);
Lne: opcode = cRSub;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cRSub);
     goto TailCall_cRSub;
Lal: ImmedPtr[0] = -x;
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lnd;
Lam: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lne;
Lan: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lnf: AddFunctionOpcode(cAdd);
Lng: AddFunctionOpcode(B);
Lnh: opcode = cSub;
     FP_ReDefinePointers(); goto Lna;
Lao: ImmedPtr[0] = -x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lnf;
Lap: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lng;
Laq: ImmedPtr[-1] = y+x;
Lar: mData->mImmed.pop_back();
Ldm: mData->mByteCode.pop_back(); return;
Lba: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lnd;
Lbb: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lnd;
Lbc: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cNotNot;
Lni: FP_TRACE_BYTECODE_ADD(cNotNot);
     goto TailCall_cNotNot;
Lbd: ImmedPtr[-1] = fp_and(x,y); goto Lar;
Lbe: ImmedPtr[0] = fp_asin(x); return;
Lbf: ImmedPtr[0] = fp_asinh(x); return;
Lbg: ImmedPtr[0] = fp_atan(x); return;
Lbh: ImmedPtr[-1] = fp_atan2(y,x); goto Lar;
Lbi: ImmedPtr[0] = fp_atanh(x); return;
Lbj: ImmedPtr[0] = fp_cbrt(x); return;
Lbk: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cCeil);
Lnj: AddFunctionOpcode(A);
     AddFunctionOpcode(B);
Lnk: opcode = cAdd; goto Lnb;
Lbl: mData->mByteCode.pop_back();
     AddFunctionOpcode(cFloor);
Lnl: opcode = cNeg;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cNeg);
     goto TailCall_cNeg;
Lbm: ImmedPtr[0] = fp_ceil(x); return;
Lbn: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lnm: FP_TRACE_BYTECODE_ADD(cCos);
     goto TailCall_cCos;
Lbo: ImmedPtr[0] = fp_cos(x); return;
Lbp: ByteCodePtr[0] = cDup;
     opcode = cInv;
Lnn: FP_TRACE_BYTECODE_ADD(cInv);
     goto TailCall_cInv;
Lbq: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinCos); return;
Lbr: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     FP_TRACE_BYTECODE_ADD(cCosh);
     goto TailCall_cCosh;
Lca: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSqr);
     mData->mImmed.push_back(Value_t(1));
Lno: mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cAdd);
Lnp: opcode = cSqrt;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cSqrt);
     goto TailCall_cSqrt;
Lcb: ImmedPtr[0] = fp_cosh(x); return;
Lcc: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinhCosh); return;
Lcd: ImmedPtr[0] = RadiansToDegrees(x); return;
Lce: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSec); goto Lmo;
Lcf: mData->mByteCode.pop_back();
     AddFunctionOpcode(cTan); goto Lmo;
Lcg: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSin); goto Lmo;
Lch: mData->mImmed.push_back(Value_t());
     ByteCodePtr[0] = cImmed;
Lnq: AddFunctionOpcode(cMul);
     mData->mImmed.push_back(Value_t(1));
Lnr: mData->mByteCode.push_back(cImmed); goto Lnk;
Lci: mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     AddFunctionOpcode(cExp); goto Lmo;
Lcj: mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     AddFunctionOpcode(cExp2); goto Lmo;
Lck: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Leq;
Lcl: mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     AddFunctionOpcode(cPow); goto Lmo;
Lcm: mData->mByteCode.pop_back();
     AddFunctionOpcode(cCos); goto Lmo;
Lcn: mData->mByteCode.pop_back();
     AddFunctionOpcode(cCsc); goto Lmo;
Lco: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cTan;
Loa: FP_TRACE_BYTECODE_ADD(cTan);
     goto TailCall_cTan;
Lcp: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cTanh;
Lob: FP_TRACE_BYTECODE_ADD(cTanh);
     goto TailCall_cTanh;
Lcq: mData->mByteCode.pop_back();
     AddFunctionOpcode(cCot); goto Lmo;
Lcr: ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Loc: FP_TRACE_BYTECODE_ADD(cDiv);
     goto TailCall_cDiv;
Lda: ImmedPtr[-1] = y/x; goto Lar;
Ldb: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Lod: opcode = cDeg;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cDeg);
     goto TailCall_cDeg;
Ldc: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Loe: opcode = cRad;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cRad);
     goto TailCall_cRad;
Ldd: ImmedPtr[-1] = y/x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lmo;
Lde: ImmedPtr[0] = Value_t(1)/x; goto Leq;
Ldf: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cMul);
Lof: FP_ReDefinePointers(); goto Loc;
Ldg: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed);
Log: opcode = cRDiv;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cRDiv);
     goto TailCall_cRDiv;
Ldh: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(B); goto Log;
Ldi: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Loh: FP_TRACE_BYTECODE_ADD(cEqual);
     goto TailCall_cEqual;
Ldj: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
Loi: opcode = cNot;
     FP_ReDefinePointers();
Loj: FP_TRACE_BYTECODE_ADD(cNot);
     goto TailCall_cNot;
Ldk: ImmedPtr[-1] = fp_equal(y,x); goto Lar;
Ldl: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cExp);
     mData->mImmed.push_back(fp_exp(x)); goto Lmr;
Ldn: ImmedPtr[0] = fp_exp(x); return;
Ldo: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cExp2);
     mData->mImmed.push_back(fp_exp2(x)); goto Lmr;
Ldp: ImmedPtr[0] = fp_exp2(x); return;
Ldq: mData->mImmed.push_back(fp_log(Value_t(2)));
     mData->mByteCode.push_back(cImmed);
Lok: AddFunctionOpcode(cMul);
     opcode = cExp;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cExp);
     goto TailCall_cExp;
Ldr: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cFloor); goto Lnj;
Lea: mData->mByteCode.pop_back();
     AddFunctionOpcode(cCeil); goto Lnl;
Leb: ImmedPtr[0] = fp_floor(x); return;
Lec: ImmedPtr[-1] = fp_less(x,y); goto Lar;
Led: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
Ljg: AddFunctionOpcode(cAbsNot); return;
Lee: ImmedPtr[0] = Value_t(0.5)/x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cMul);
     opcode = cNotNot;
     FP_ReDefinePointers(); goto Lni;
Lef: ImmedPtr[-1] = fp_lessOrEq(x,y); goto Lar;
Leg: mData->mImmed.pop_back();
Lip: mData->mByteCode.pop_back();
Lol: AddFunctionOpcode(cAbsNotNot); return;
Leh: ImmedPtr[0] = fp_int(x); return;
Lei: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSec;
     FP_TRACE_BYTECODE_ADD(cSec);
     goto TailCall_cSec;
Lej: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSin;
Lom: FP_TRACE_BYTECODE_ADD(cSin);
     goto TailCall_cSin;
Lek: mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     opcode = cPow;
Lon: FP_ReDefinePointers();
Loo: FP_TRACE_BYTECODE_ADD(cPow);
     goto TailCall_cPow;
Lel: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cCos; goto Lnm;
Lem: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cCsc;
     FP_TRACE_BYTECODE_ADD(cCsc);
     goto TailCall_cCsc;
Len: mData->mByteCode.pop_back();
     AddFunctionOpcode(cRSqrt); return;
Leo: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lop: opcode = cCot;
     FP_TRACE_BYTECODE_ADD(cCot);
     goto TailCall_cCot;
Lep: ImmedPtr[0] = Value_t(1)/x; return;
Ler: ImmedPtr[0] = Value_t(0.5)/x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cMul); goto Loi;
Lfa: ImmedPtr[-1] = fp_less(y,x); goto Lar;
Lfb: mData->mImmed.pop_back();
Liq: mData->mByteCode.pop_back(); goto Ljg;
Lfc: ImmedPtr[-1] = fp_lessOrEq(y,x); goto Lar;
Lfd: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg); goto Lol;
Lfe: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cLog);
     mData->mImmed.push_back(fp_log(x)); goto Lnr;
Lff: mData->mByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     AddFunctionOpcode(cLog);
Loq: mData->mByteCode.push_back(cDup); goto Lnk;
Lfg: ImmedPtr[0] = fp_log(x); return;
Lfh: mData->mImmed.push_back(fp_log10(fp_const_e<Value_t>()));
Lor: ByteCodePtr[0] = cImmed; goto Lmo;
Lfi: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cLog10);
     mData->mImmed.push_back(fp_log10(x)); goto Lnr;
Lfj: mData->mByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     AddFunctionOpcode(cLog10); goto Loq;
Lfk: ImmedPtr[0] = fp_log10(x); return;
Lfl: mData->mImmed.push_back(fp_log2(fp_const_e<Value_t>())); goto Lor;
Lfm: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cLog2);
     mData->mImmed.push_back(fp_log2(x)); goto Lnr;
Lfn: mData->mByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     AddFunctionOpcode(cLog2); goto Loq;
Lfo: ImmedPtr[0] = fp_log2(x); return;
Lfp: ImmedPtr[-1] = fp_max(x,y); goto Lar;
Lfq: ImmedPtr[-1] = fp_min(x,y); goto Lar;
Lfr: ImmedPtr[-1] = fp_mod(y,x); goto Lar;
Lga: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 3; goto Lop;
Lgb: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSqr;
Lpa: FP_TRACE_BYTECODE_ADD(cSqr);
     goto TailCall_cSqr;
Lgc: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cDiv; goto Loc;
Lgd: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr); goto Lnl;
Lge: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr);
     AddFunctionOpcode(cMul); goto Lnl;
Lgf: ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
     opcode = cPow; goto Loo;
Lgg: ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2; goto Lmq;
Lgh: ImmedPtr[-1] = x;
Lpb: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lmp;
Lgi: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
Lpc: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lpd: AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
Lpe: mData->mByteCode.push_back(cImmed); goto Lmp;
Lgj: mData->mImmed.pop_back(); goto Lpc;
Lgk: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(B); goto Lpd;
Lgl: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lpd;
Lgm: ByteCodePtr[-1] = cImmed; goto Ldm;
Lgn: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lmq;
Lgo: mData->mImmed.pop_back();
Lpf: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} return;
Lgp: ImmedPtr[0] = x+x; goto Lgg;
Lgq: ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     mData->mImmed.push_back(y*x);
     mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cMul); goto Lnk;
Lgr: ImmedPtr[-1] = x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(y*x); goto Lnr;
Lha: ImmedPtr[0] = RadiansToDegrees(x); goto Lgn;
Lhb: ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lpg: AddFunctionOpcode(cMul);
Lph: AddFunctionOpcode(B);
     opcode = cDiv; goto Lof;
Lhc: ImmedPtr[0] = -x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lpg;
Lhd: ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lph;
Lhe: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lmp;
Lhf: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(x+x); goto Lpe;
Lhg: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();} goto Lpf;
Lhh: ImmedPtr[-1] = y*x; goto Lpb;
Lhi: ImmedPtr[0] = -x; goto Lgn;
Lhj: ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Lpi: AddFunctionOpcode(cMul); goto Log;
Lhk: ImmedPtr[0] = -x;
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lpi;
Lhl: ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Log;
Lhm: ImmedPtr[0] = DegreesToRadians(x); goto Lgn;
Lhn: ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     mData->mImmed.push_back(y*x);
     mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cMul); goto Lnh;
Lho: ImmedPtr[-1] = y*x; goto Lar;
Lhp: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lnl;
Lhq: ByteCodePtr[0] = cDup;
     ImmedPtr -= 1;
     mData->mImmed.pop_back();
Lpj: opcode = cAdd; goto Lnc;
Lhr: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lod;
Lia: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Loe;
Lib: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lpg;
Lic: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lpk: AddFunctionOpcode(cSqr); goto Lmp;
Lid: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lpi;
Lie: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lpi;
Lif: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lpk;
Lig: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lpl: FP_TRACE_BYTECODE_ADD(cNEqual);
     goto TailCall_cNEqual;
Lih: ImmedPtr[-1] = fp_nequal(y,x); goto Lar;
Lii: ImmedPtr[0] = -x; goto Lck;
Lij: ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     opcode = cSin;
     FP_ReDefinePointers(); goto Lom;
Lik: ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     opcode = cSinh;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cSinh);
     goto TailCall_cSinh;
Lil: ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     opcode = cTan;
     FP_ReDefinePointers(); goto Loa;
Lim: ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     opcode = cTanh;
     FP_ReDefinePointers(); goto Lob;
Lin: ImmedPtr[0] = -x; return;
Lio: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Loj;
Lir: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cNEqual; goto Lpl;
Lja: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cLessOrEq;
     FP_TRACE_BYTECODE_ADD(cLessOrEq);
     goto TailCall_cLessOrEq;
Ljb: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cLess;
     FP_TRACE_BYTECODE_ADD(cLess);
     goto TailCall_cLess;
Ljc: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cGreaterOrEq;
     FP_TRACE_BYTECODE_ADD(cGreaterOrEq);
     goto TailCall_cGreaterOrEq;
Ljd: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cGreater;
     FP_TRACE_BYTECODE_ADD(cGreater);
     goto TailCall_cGreater;
Lje: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cEqual; goto Loh;
Ljf: ImmedPtr[0] = fp_not(x); return;
Ljh: ImmedPtr[-1] = fp_or(x,y); goto Lar;
Lji: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cAbs);
     mData->mImmed.push_back(x+x);
Lpm: mData->mByteCode.push_back(cImmed); goto Lon;
Ljj: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back(); goto Lok;
Ljk: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cMul);
     opcode = cExp2;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cExp2);
     goto TailCall_cExp2;
Ljl: ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lon;
Ljm: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cMul); goto Lon;
Ljn: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Loo;
Ljo: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(x); goto Lpm;
Ljp: ImmedPtr[0] = Value_t(); goto Lnq;
Ljq: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lnp;
Ljr: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     opcode = cCbrt;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cCbrt);
     goto TailCall_cCbrt;
Lka: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cCbrt);
Lpn: opcode = cInv;
     FP_ReDefinePointers(); goto Lnn;
Lkb: mData->mImmed.pop_back(); goto Len;
Lkc: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lpn;
Lkd: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cAbs);
     mData->mImmed.push_back(y*x); goto Lpm;
Lke: ImmedPtr[0] = x+x; goto Ljn;
Lkf: ImmedPtr[-1] = fp_pow(y,x); goto Lar;
Lkg: mData->mByteCode.pop_back();
     AddFunctionOpcode(cTanh); goto Lpn;
Lkh: mData->mImmed.push_back(Value_t()); goto Lor;
Lki: ImmedPtr[0] = DegreesToRadians(x); goto Lck;
Lkj: ImmedPtr[0] = DegreesToRadians(x); return;
Lkk: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinCos); goto Lpn;
Lkl: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSin); goto Lnl;
Lkm: ImmedPtr[0] = fp_sin(x); return;
Lkn: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSqr);
     mData->mImmed.push_back(Value_t(-1)); goto Lno;
Lko: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSinh); goto Lnl;
Lkp: ImmedPtr[0] = fp_sinh(x); return;
Lkq: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lpa;
Lkr: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
Lpo: opcode = cHypot;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cHypot);
     goto TailCall_cHypot;
Lla: for(unsigned tmp=5; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(B); goto Lpo;
Llb: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cAbs; goto Lmn;
Llc: ImmedPtr[0] = fp_sqrt(x); return;
Lld: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lpj;
Lle: ImmedPtr[-1] = y-x; goto Lar;
Llf: ImmedPtr[0] = -x; goto Lpj;
Llg: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cAdd);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lne;
Llh: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cSub); goto Lne;
Lli: mData->mByteCode.pop_back();
     AddFunctionOpcode(cTan); goto Lnl;
Llj: ImmedPtr[0] = fp_tan(x); return;
Llk: mData->mByteCode.pop_back();
     AddFunctionOpcode(cTanh); goto Lnl;
Lll: ImmedPtr[0] = fp_tanh(x); return;
Llm: ImmedPtr[0] = fp_trunc(x); return;
Lln: ImmedPtr[-1] = x-y;
Lpp: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lpq: AddFunctionOpcode(A); return;
Llo: ImmedPtr[0] = fp_tan(x);
Lpr: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back(); goto Lpq;
Llp: ImmedPtr[0] = fp_log(x); goto Lpr;
Llq: ImmedPtr[0] = fp_log2(x); goto Lpr;
Llr: ImmedPtr[0] = fp_exp(x); goto Lpr;
Lma: ImmedPtr[0] = fp_pow(Value_t(10),x); goto Lpr;
Lmb: ImmedPtr[0] = fp_exp2(x); goto Lpr;
Lmc: ImmedPtr[-1] = x/y; goto Lpp;
Lmd: ImmedPtr[-1] = x/y;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lqa: AddFunctionOpcode(OppositeComparisonOpcode(A)); return;
Lme: ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back(); goto Lqa;
Lmf: ImmedPtr[-1] = fp_pow(x,Value_t(1)/y); goto Lpp;
Lmg: ImmedPtr[0] = fp_asinh(x); goto Lpr;
Lmh: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cAbs);
     mData->mImmed.push_back(fp_sqrt(x));
     mData->mByteCode.push_back(cImmed); goto Lpq;
Lmi: ImmedPtr[0] = fp_atanh(x); goto Lpr;
Lmj: mData->mByteCode.push_back(cDup); return;
Lmk: ByteCodePtr[0] = cDup; return;
Lml: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinCos);
Lqb: AddFunctionOpcode(GetParamSwappedBinaryOpcode(C)); return;
Lmm: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinhCosh); goto Lqb;
return;
// This list of dummy gotos is here to inhibit
// compiler warnings on unused labels
goto TailCall_cAcos;goto TailCall_cAcosh;goto TailCall_cAnd;
goto TailCall_cAsin;goto TailCall_cAsinh;goto TailCall_cAtan;
goto TailCall_cAtan2;goto TailCall_cAtanh;goto TailCall_cCeil;
goto TailCall_cFloor;goto TailCall_cInt;goto TailCall_cLog;
goto TailCall_cLog10;goto TailCall_cLog2;goto TailCall_cMax;
goto TailCall_cMin;goto TailCall_cMod;goto TailCall_cOr;
goto TailCall_cRDiv;goto TailCall_cRad;goto TailCall_cSec;
goto TailCall_cSin;goto TailCall_cSinh;goto TailCall_cSqrt;
goto TailCall_cSub;goto TailCall_cTan;goto TailCall_cTanh;
goto TailCall_cTrunc;
#endif

#if((FP_COMPLEX_VERSION) && (FP_FLOAT_VERSION))
	Value_t x;
	Value_t y;
	unsigned B;
	unsigned A;
	unsigned C;
	unsigned D;
	switch(opcode)
	{
	TailCall_cAbs:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAbs:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(201,"cNeg cAbs", "cAbs", "");
			/* opcode = cAbs; */ // redundant, matches cAbs @ 0
			goto Lab;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(132,
				"x cAbs",
				"[fp_abs(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lac;
		}
		goto Default0;
	TailCall_cAcos:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAcos:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(172,
				"x cAcos",
				"[fp_acos(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lad;
		}
		goto Default0;
	TailCall_cAcosh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAcosh:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(169,
				"x cAcosh",
				"[fp_acosh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lae;
		}
		goto Default0;
	TailCall_cAdd:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAdd:
		switch(ByteCodePtr[0])
		{
		case cDup:
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(310,"cDup cAdd cDup cAdd", "[Value_t(4)] cMul", "");
					goto Laf;
				}
				break;
			case cMul:
				if(ByteCodePtr[-2] == cAdd)
				{
					if(ByteCodePtr[-3] == cDup)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(311,"cDup cAdd cMul cDup cAdd", "cMul [Value_t(4)] cMul", "");
						goto Lag;
					}
				}
				break;
			}
			goto Default1;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(313,
						"cDup x cMul cAdd",
						"[x+Value_t(1)] cMul",
						"    with x = " << x << "\n");
					goto Lah;
				}
			}
			goto Default1;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(199,"cNeg cAdd", "cSub", "");
			goto Lai;
		case cImmed:
			x = ImmedPtr[0];
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(127,
						"y cAdd x cAdd",
						"[y+x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cAdd; */ // redundant, matches cAdd @ 0
					goto Laj;
				}
				break;
			case cRSub:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(298,
							"y cAdd cRSub x cAdd",
							"[ y+x] cAdd cRSub",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lak;
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(299,
						"cNeg cRSub x cAdd",
						"[-x] cAdd cRSub",
						"    with x = " << x << "\n");
					goto Lal;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(297,
						"y cRSub x cAdd",
						"[ y+x] cRSub",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lam;
				}
				break;
			case cSub:
				B = ByteCodePtr[-2];
				if(IsVarOpcode(B))
				{
					switch(ByteCodePtr[-3])
					{
					case cAdd:
						if(ByteCodePtr[-4] == cImmed)
						{
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(292,
								"y cAdd B[IsVarOpcode(B)] cSub x cAdd",
								"[ y+x] cAdd B cSub",
								"    with x = " << x
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-4] = cImmed; */ // redundant, matches y @ 5
							goto Lan;
						}
						break;
					case cNeg:
						FP_TRACE_BYTECODE_OPTIMIZATION(293,
							"cNeg B[IsVarOpcode(B)] cSub x cAdd",
							"[-x] cAdd B cSub",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						goto Lao;
					case cImmed:
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(291,
							"y B[IsVarOpcode(B)] cSub x cAdd",
							"[ y+x] B cSub",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lap;
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(105,
					"y x cAdd",
					"[y+x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Laq;
			}
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(57,
					"x[x==Value_t()] cAdd",
					"",
					"    with x = " << x << "\n");
				goto Lar;
			}
			break;
		default: Default1:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				if(ByteCodePtr[-1] == cRSub)
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(290,
							"x cRSub A[IsVarOpcode(A)] cAdd",
							"[DO_STACKPLUS1] A [x] cAdd cRSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						incStackPtr();
						--mStackPtr;
						goto Lba;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(295,
						"cRSub A[IsVarOpcode(A)] cAdd",
						"[DO_STACKPLUS1] A cAdd cRSub",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Lbb;
				}
			}
		}
		goto Default0;
	TailCall_cAnd:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAnd:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(224,"cDup cAnd", "cNotNot", "");
			goto Lbc;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(117,
					"y x cAnd",
					"[fp_and(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbd;
			}
			break;
		}
		goto Default0;
	TailCall_cArg:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cArg:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(190,
				"x cArg",
				"[fp_arg(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbe;
		}
		goto Default0;
	TailCall_cAsin:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAsin:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(173,
				"x cAsin",
				"[fp_asin(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbf;
		}
		goto Default0;
	TailCall_cAsinh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAsinh:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(170,
				"x cAsinh",
				"[fp_asinh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbg;
		}
		goto Default0;
	TailCall_cAtan:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAtan:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(Value_t(x.real(),fp_abs(x.imag()))!=Value_t(0,1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(174,
					"x[Value_t(x.real(),fp_abs(x.imag()))!=Value_t(0,1)] cAtan",
					"[fp_atan(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lbh;
			}
		}
		goto Default0;
	TailCall_cAtan2:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAtan2:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(139,
					"y x cAtan2",
					"[fp_atan2(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbi;
			}
		}
		goto Default0;
	TailCall_cAtanh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAtanh:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(Value_t(fp_abs(x.real()),x.imag())!=Value_t(1,0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(171,
					"x[Value_t(fp_abs(x.real()),x.imag())!=Value_t(1,0)] cAtanh",
					"[fp_atanh(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lbj;
			}
		}
		goto Default0;
	TailCall_cCbrt:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCbrt:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(175,
				"x cCbrt",
				"[fp_cbrt(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbk;
		}
		goto Default0;
	TailCall_cCeil:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCeil:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			B = ByteCodePtr[-1];
			if(IsUnaryOpcode(B)&&IsAlwaysIntegerOpcode(B))
			{
				A = ByteCodePtr[-2];
				if(IsVarOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(400,
						"A[IsVarOpcode(A)] B[IsUnaryOpcode(B)&&IsAlwaysIntegerOpcode(B)] cAdd cCeil",
						"cCeil A B cAdd",
						"    with B = " << FP_TRACE_OPCODENAME(B)
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					goto Lbl;
				}
			}
			goto Default2;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(407,"cNeg cCeil", "cFloor cNeg", "");
			goto Lbm;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(135,
				"x cCeil",
				"[fp_ceil(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbn;
		default: Default2:;
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(396,
					"A[IsAlwaysIntegerOpcode(A)] cCeil",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cConj:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cConj:
		switch(ByteCodePtr[0])
		{
		case cConj:
			FP_TRACE_BYTECODE_OPTIMIZATION(63,"cConj cConj", "", "");
			goto Lbo;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(193,
				"x cConj",
				"[fp_conj(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbp;
		}
		goto Default0;
	TailCall_cCos:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCos:
		switch(ByteCodePtr[0])
		{
		case cAcos:
			FP_TRACE_BYTECODE_OPTIMIZATION(346,"cAcos cCos", "", "");
			goto Lbo;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(238,"cNeg cCos", "cCos", "");
			/* opcode = cCos; */ // redundant, matches cCos @ 0
			goto Lbq;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(176,
				"x cCos",
				"[fp_cos(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbr;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				switch(ByteCodePtr[-1])
				{
				case cSec:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(507,
							"B[B==A] cSec A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCos",
							"B cSec cDup cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cSec; */ // redundant, matches cSec @ 2
						goto Lca;
					}
					break;
				case cSin:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(501,
							"B[B==A] cSin A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCos",
							"B cSinCos",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lcb;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cCosh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCosh:
		switch(ByteCodePtr[0])
		{
		case cAsinh:
			FP_TRACE_BYTECODE_OPTIMIZATION(457,"cAsinh cCosh", "[DO_STACKPLUS1] cSqr [Value_t(1)] cAdd cSqrt", "");
			incStackPtr();
			--mStackPtr;
			goto Lcc;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(239,"cNeg cCosh", "cCosh", "");
			/* opcode = cCosh; */ // redundant, matches cCosh @ 0
			goto Lcd;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(177,
				"x cCosh",
				"[fp_cosh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lce;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				if(ByteCodePtr[-1] == cSinh)
				{
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(514,
							"B[B==A] cSinh A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCosh",
							"B cSinhCosh",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lcf;
					}
				}
			}
		}
		goto Default0;
	TailCall_cCot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCot:
		A = ByteCodePtr[0];
		if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
		{
			if(ByteCodePtr[-1] == cTan)
			{
				B = ByteCodePtr[-2];
				if(B==A)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(505,
						"B[B==A] cTan A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCot",
						"B cTan cDup cInv",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", B = " << FP_TRACE_OPCODENAME(B)
						    << "\n");
					/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
					/* ByteCodePtr[-1] = cTan; */ // redundant, matches cTan @ 2
					goto Lca;
				}
			}
		}
		goto Default0;
	TailCall_cCsc:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCsc:
		A = ByteCodePtr[0];
		if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
		{
			if(ByteCodePtr[-1] == cSin)
			{
				B = ByteCodePtr[-2];
				if(B==A)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(503,
						"B[B==A] cSin A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCsc",
						"B cSin cDup cInv",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", B = " << FP_TRACE_OPCODENAME(B)
						    << "\n");
					/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
					/* ByteCodePtr[-1] = cSin; */ // redundant, matches cSin @ 2
					goto Lca;
				}
			}
		}
		goto Default0;
	TailCall_cDeg:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cDeg:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(133,
				"x cDeg",
				"[RadiansToDegrees(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lcg;
		}
		goto Default0;
	TailCall_cDiv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cDiv:
		switch(ByteCodePtr[0])
		{
		case cCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(250,"cCos cDiv", "cSec cMul", "");
			goto Lch;
		case cCot:
			FP_TRACE_BYTECODE_OPTIMIZATION(254,"cCot cDiv", "cTan cMul", "");
			goto Lci;
		case cCsc:
			FP_TRACE_BYTECODE_OPTIMIZATION(252,"cCsc cDiv", "cSin cMul", "");
			goto Lcj;
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(78,"cDup cDiv", "[Value_t()] cMul [Value_t(1)] cAdd", "");
			goto Lck;
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(413,"cExp cDiv", "cNeg cExp cMul", "");
			goto Lcl;
		case cExp2:
			FP_TRACE_BYTECODE_OPTIMIZATION(414,"cExp2 cDiv", "cNeg cExp2 cMul", "");
			goto Lcm;
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(213,"cInv cDiv", "cMul", "");
			goto Lcn;
		case cPow:
			FP_TRACE_BYTECODE_OPTIMIZATION(412,"cPow cDiv", "cNeg cPow cMul", "");
			goto Lco;
		case cSec:
			FP_TRACE_BYTECODE_OPTIMIZATION(253,"cSec cDiv", "cCos cMul", "");
			goto Lcp;
		case cSin:
			FP_TRACE_BYTECODE_OPTIMIZATION(249,"cSin cDiv", "cCsc cMul", "");
			goto Lcq;
		case cSinCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(509,"cSinCos cDiv", "cTan", "");
			goto Lcr;
		case cSinhCosh:
			FP_TRACE_BYTECODE_OPTIMIZATION(516,"cSinhCosh cDiv", "cTanh", "");
			goto Lda;
		case cTan:
			FP_TRACE_BYTECODE_OPTIMIZATION(251,"cTan cDiv", "cCot cMul", "");
			goto Ldb;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(125,
						"cNeg x[x!=Value_t()] cDiv",
						"[-x] cDiv",
						"    with x = " << x << "\n");
					/* opcode = cDiv; */ // redundant, matches cDiv @ 0
					goto Ldc;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(103,
						"y x[x!=Value_t()] cDiv",
						"[y/x]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Ldd;
				}
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(56,
					"x[x==Value_t(1)] cDiv",
					"",
					"    with x = " << x << "\n");
				goto Lar;
			}
			if(x!=Value_t(0))
			{
				if(ByteCodePtr[-1] == cMul)
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						y = ImmedPtr[-1];
						if((y/x)==fp_const_rad_to_deg<Value_t>())
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(321,
								"y[(y/x)==fp_const_rad_to_deg<Value_t>()] cMul x[x!=Value_t(0)] cDiv",
								"cDeg",
								"    with x = " << x
								    << ", y = " << y
								    << "\n");
							goto Lde;
						}
						if((y/x)==fp_const_deg_to_rad<Value_t>())
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(322,
								"y[(y/x)==fp_const_deg_to_rad<Value_t>()] cMul x[x!=Value_t(0)] cDiv",
								"cRad",
								"    with x = " << x
								    << ", y = " << y
								    << "\n");
							goto Ldf;
						}
						FP_TRACE_BYTECODE_OPTIMIZATION(323,
							"y cMul x[x!=Value_t(0)] cDiv",
							"[y/x] cMul",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
						goto Ldg;
					}
				}
				FP_TRACE_BYTECODE_OPTIMIZATION(325,
					"x[x!=Value_t(0)] cDiv",
					"[Value_t(1)/x] cMul",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Ldh;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDiv:
					B = ByteCodePtr[-2];
					if(IsVarOpcode(B))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(271,
							"B[IsVarOpcode(B)] cDiv A[IsVarOpcode(A)] cDiv",
							"[DO_STACKPLUS1] B A cMul cDiv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						incStackPtr();
						--mStackPtr;
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* opcode = cDiv; */ // redundant, matches cDiv @ 0
						goto Ldi;
					}
					break;
				case cRDiv:
					switch(ByteCodePtr[-2])
					{
					case cImmed:
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(266,
							"x cRDiv A[IsVarOpcode(A)] cDiv",
							"A cMul [x] cRDiv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Ldj;
					default:
						B = ByteCodePtr[-2];
						if(IsVarOpcode(B))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(265,
								"B[IsVarOpcode(B)] cRDiv A[IsVarOpcode(A)] cDiv",
								"A cMul B cRDiv",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							goto Ldk;
						}
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cEqual:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(359,
						"cAbs x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Ldl;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(361,
						"cSqr x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Ldl;
				default:
					A = ByteCodePtr[-1];
					if(IsLogicalOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(428,
							"A[IsLogicalOpcode(A)] x[x==Value_t(0)] cEqual",
							"A cNot",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Ldm;
					}
				}
			}
			if(x==Value_t(1))
			{
				A = ByteCodePtr[-1];
				if(IsLogicalOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(426,
						"A[IsLogicalOpcode(A)] x[x==Value_t(1)] cEqual",
						"A",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					goto Lar;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(115,
					"y x cEqual",
					"[fp_equal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldn;
			}
		}
		goto Default0;
	TailCall_cExp:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cExp:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(409,
					"x cAdd cExp",
					"cExp [fp_exp(x)] cMul",
					"    with x = " << x << "\n");
				goto Ldo;
			}
			break;
		case cLog:
			A = ByteCodePtr[-1];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(340,
					"A[IsNeverNegativeValueOpcode(A)] cLog cExp",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Lbo;
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(178,
				"x cExp",
				"[fp_exp(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Ldp;
		}
		goto Default0;
	TailCall_cExp2:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cExp2:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(410,
					"x cAdd cExp2",
					"cExp2 [fp_exp2(x)] cMul",
					"    with x = " << x << "\n");
				goto Ldq;
			}
			break;
		case cLog2:
			A = ByteCodePtr[-1];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(341,
					"A[IsNeverNegativeValueOpcode(A)] cLog2 cExp2",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Lbo;
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(179,
				"x cExp2",
				"[fp_exp2(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Ldr;
		}
		FP_TRACE_BYTECODE_OPTIMIZATION(486,"cExp2", "[DO_STACKPLUS1] [fp_log(Value_t(2))] cMul cExp", "");
		incStackPtr();
		--mStackPtr;
		goto Lea;
	TailCall_cFloor:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFloor:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			B = ByteCodePtr[-1];
			if(IsUnaryOpcode(B)&&IsAlwaysIntegerOpcode(B))
			{
				A = ByteCodePtr[-2];
				if(IsVarOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(399,
						"A[IsVarOpcode(A)] B[IsUnaryOpcode(B)&&IsAlwaysIntegerOpcode(B)] cAdd cFloor",
						"cFloor A B cAdd",
						"    with B = " << FP_TRACE_OPCODENAME(B)
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					goto Leb;
				}
			}
			goto Default3;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(406,"cNeg cFloor", "cCeil cNeg", "");
			goto Lec;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(136,
				"x cFloor",
				"[fp_floor(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Led;
		default: Default3:;
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(395,
					"A[IsAlwaysIntegerOpcode(A)] cFloor",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cGreater:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cGreater:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(113,
					"y x cGreater",
					"[fp_less(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lee;
			}
		}
		goto Default0;
	TailCall_cGreaterOrEq:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cGreaterOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(114,
					"y x cGreaterOrEq",
					"[fp_lessOrEq(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lef;
			}
		}
		goto Default0;
	TailCall_cHypot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cHypot:
		if(ByteCodePtr[0] == cSinCos)
		{
			FP_TRACE_BYTECODE_OPTIMIZATION(84,"cSinCos cHypot", "[Value_t()] cMul [Value_t(1)] cAdd", "");
			goto Lck;
		}
		goto Default0;
	TailCall_cImag:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cImag:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(81,"cAbs cImag", "[Value_t()] cMul", "");
			goto Leg;
		case cReal:
			FP_TRACE_BYTECODE_OPTIMIZATION(80,"cReal cImag", "[Value_t()] cMul", "");
			goto Leg;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(192,
				"x cImag",
				"[fp_imag(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Leh;
		}
		goto Default0;
	TailCall_cInt:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cInt:
		switch(ByteCodePtr[0])
		{
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(137,
				"x cInt",
				"[fp_int(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lei;
		default:
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(397,
					"A[IsAlwaysIntegerOpcode(A)] cInt",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cInv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cInv:
		switch(ByteCodePtr[0])
		{
		case cCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(256,"cCos cInv", "cSec", "");
			goto Lej;
		case cCot:
			FP_TRACE_BYTECODE_OPTIMIZATION(260,"cCot cInv", "cTan", "");
			goto Lcr;
		case cCsc:
			FP_TRACE_BYTECODE_OPTIMIZATION(258,"cCsc cInv", "cSin", "");
			goto Lek;
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(62,"cInv cInv", "", "");
			goto Lbo;
		case cPow:
			FP_TRACE_BYTECODE_OPTIMIZATION(355,"cPow cInv", "cNeg cPow", "");
			goto Lel;
		case cSec:
			FP_TRACE_BYTECODE_OPTIMIZATION(259,"cSec cInv", "cCos", "");
			goto Lem;
		case cSin:
			FP_TRACE_BYTECODE_OPTIMIZATION(255,"cSin cInv", "cCsc", "");
			goto Len;
		case cSqrt:
			FP_TRACE_BYTECODE_OPTIMIZATION(206,"cSqrt cInv", "cRSqrt", "");
			goto Leo;
		case cTan:
			FP_TRACE_BYTECODE_OPTIMIZATION(257,"cTan cInv", "cCot", "");
			goto Lep;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(101,
					"x[x!=Value_t()] cInv",
					"[Value_t(1)/x]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Leq;
			}
			break;
		}
		goto Default0;
	TailCall_cLess:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLess:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				A = ByteCodePtr[-1];
				if(IsNeverNegativeValueOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(301,
						"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(0)] cLess",
						"A [x] cMul",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
					goto Ler;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(111,
					"y x cLess",
					"[fp_less(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lfa;
			}
		}
		goto Default0;
	TailCall_cLessOrEq:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLessOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(112,
					"y x cLessOrEq",
					"[fp_lessOrEq(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lfb;
			}
		}
		goto Default0;
	TailCall_cLog:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLog:
		switch(ByteCodePtr[0])
		{
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(343,"cExp cLog", "", "");
			goto Lbo;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(x>Value_t(0))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(498,
						"x[x>Value_t(0)] cMul cLog",
						"cLog [fp_log(x)] cAdd",
						"    with x = " << x << "\n");
					goto Lfc;
				}
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(180,
					"x[x!=Value_t(0)] cLog",
					"[fp_log(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lfd;
			}
			break;
		}
		goto Default0;
	TailCall_cLog10:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLog10:
		switch(ByteCodePtr[0])
		{
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(488,"cExp cLog10", "[DO_STACKPLUS1] [fp_log10(fp_const_e<Value_t>())] cMul", "");
			incStackPtr();
			--mStackPtr;
			goto Lfe;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(x>Value_t(0))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(499,
						"x[x>Value_t(0)] cMul cLog10",
						"cLog10 [fp_log10(x)] cAdd",
						"    with x = " << x << "\n");
					goto Lff;
				}
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(181,
					"x[x!=Value_t(0)] cLog10",
					"[fp_log10(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lfg;
			}
			break;
		}
		goto Default0;
	TailCall_cLog2:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLog2:
		switch(ByteCodePtr[0])
		{
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(487,"cExp cLog2", "[DO_STACKPLUS1] [fp_log2(fp_const_e<Value_t>())] cMul", "");
			incStackPtr();
			--mStackPtr;
			goto Lfh;
		case cExp2:
			FP_TRACE_BYTECODE_OPTIMIZATION(344,"cExp2 cLog2", "", "");
			goto Lbo;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(x>Value_t(0))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(497,
						"x[x>Value_t(0)] cMul cLog2",
						"cLog2 [fp_log2(x)] cAdd",
						"    with x = " << x << "\n");
					goto Lfi;
				}
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(182,
					"x[x!=Value_t(0)] cLog2",
					"[fp_log2(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lfj;
			}
			break;
		}
		goto Default0;
	TailCall_cMax:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMax:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(60,"cDup cMax", "", "");
			goto Lbo;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(141,
					"y x cMax",
					"[fp_max(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lfk;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(66,
							"B[B==A] cDup A[IsVarOpcode(A)] cMax",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Lbo;
					}
					break;
				case cMax:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(68,
							"B[B==A] cMax A[IsVarOpcode(A)] cMax",
							"B cMax",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMax; */ // redundant, matches cMax @ 2
						goto Lbo;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cMin:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMin:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(59,"cDup cMin", "", "");
			goto Lbo;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(140,
					"y x cMin",
					"[fp_min(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lfl;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(65,
							"B[B==A] cDup A[IsVarOpcode(A)] cMin",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Lbo;
					}
					break;
				case cMin:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(67,
							"B[B==A] cMin A[IsVarOpcode(A)] cMin",
							"B cMin",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMin; */ // redundant, matches cMin @ 2
						goto Lbo;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cMod:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMod:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				if(ByteCodePtr[-1] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(104,
						"y x[x!=Value_t()] cMod",
						"[fp_mod(y,x)]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Lfm;
				}
			}
		}
		goto Default0;
	TailCall_cMul:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMul:
		switch(ByteCodePtr[0])
		{
		case cCsc:
			A = ByteCodePtr[-1];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>3)
			{
				if(ByteCodePtr[-2] == cCos)
				{
					B = ByteCodePtr[-3];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(515,
							"B[B==A] cCos A[IsVarOpcode(A)&&mData->mByteCode.size()>3] cCsc cMul",
							"B cCot",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
						goto Lfn;
					}
				}
			}
			goto Default4;
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(202,"cDup cMul", "cSqr", "");
			goto Lfo;
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(214,"cInv cMul", "cDiv", "");
			goto Lfp;
		case cNeg:
			switch(ByteCodePtr[-1])
			{
			case cDup:
				FP_TRACE_BYTECODE_OPTIMIZATION(474,"cDup cNeg cMul", "cSqr cNeg", "");
				goto Lfq;
			default:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cMul)
					{
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(480,
								"B[B==A] cMul A[IsVarOpcode(A)] cNeg cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lfr;
						}
					}
				}
			}
			goto Default4;
		case cPow:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(314,
						"cDup x cPow cMul",
						"[x+Value_t(1)] cPow",
						"    with x = " << x << "\n");
					goto Lga;
				}
			}
			goto Default4;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(93,
							"A[IsVarOpcode(A)] cMul x[x==Value_t()] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lgb;
					}
					goto Default5;
				default: Default5:;
					A = ByteCodePtr[-1];
					if(IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						switch(ByteCodePtr[-2])
						{
						case cImmed:
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(92,
								"y A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
								"[x] cMul",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lgc;
						default:
							B = ByteCodePtr[-2];
							if(IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								switch(ByteCodePtr[-3])
								{
								case cImmed:
									y = ImmedPtr[-1];
									FP_TRACE_BYTECODE_OPTIMIZATION(96,
										"y B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
										"A [x] cMul",
										"    with x = " << x
										    << ", A = " << FP_TRACE_OPCODENAME(A)
										    << ", B = " << FP_TRACE_OPCODENAME(B)
										    << ", y = " << y
										    << "\n");
									/* opcode = cMul; */ // redundant, matches cMul @ 0
									goto Lgd;
								default:
									C = ByteCodePtr[-3];
									if(IsVarOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(94,
											"C[IsVarOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
											"A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lge;
									}
									if(IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(95,
											"C[IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
											"B A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lgf;
									}
								}
							}
							if(IsVarOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(90,
									"B[IsVarOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
									"[x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lgb;
							}
							if(IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(91,
									"B[IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
									"A [x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lgg;
							}
						}
					}
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(88,
							"A[IsVarOpcode(A)] x[x==Value_t()] cMul",
							"[x]",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						goto Lgh;
					}
					if(IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(89,
							"A[IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lgi;
					}
				}
			}
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				switch(ByteCodePtr[-2])
				{
				case cDup:
					if(x+x==Value_t(1))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(316,
							"cDup[x+x==Value_t(1)] cAdd x cMul",
							"",
							"    with x = " << x << "\n");
						goto Lgj;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(317,
						"cDup cAdd x cMul",
						"[x+x] cMul",
						"    with x = " << x << "\n");
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Lgk;
				case cMul:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(IsVarOpcode(A))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(386,
								"A[IsVarOpcode(A)] y cMul cAdd x cMul",
								"[x] cMul A [y*x] cMul cAdd",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lgl;
						}
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(385,
						"y cAdd x cMul",
						"[x] cMul [y*x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lgm;
				}
				break;
			case cDeg:
				FP_TRACE_BYTECODE_OPTIMIZATION(209,
					"cDeg x cMul",
					"[RadiansToDegrees(x)] cMul",
					"    with x = " << x << "\n");
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Lgn;
			case cDiv:
				B = ByteCodePtr[-2];
				if(IsVarOpcode(B))
				{
					switch(ByteCodePtr[-3])
					{
					case cMul:
						if(ByteCodePtr[-4] == cImmed)
						{
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(278,
								"y cMul B[IsVarOpcode(B)] cDiv x cMul",
								"[y*x] cMul B cDiv",
								"    with x = " << x
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-4] = cImmed; */ // redundant, matches y @ 5
							goto Lgo;
						}
						break;
					case cNeg:
						FP_TRACE_BYTECODE_OPTIMIZATION(279,
							"cNeg B[IsVarOpcode(B)] cDiv x cMul",
							"[-x] cMul B cDiv",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						goto Lgp;
					case cImmed:
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(277,
							"y B[IsVarOpcode(B)] cDiv x cMul",
							"[y*x] B cDiv",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lgq;
					}
				}
				break;
			case cMul:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cDup)
					{
						if(x+x==Value_t(1))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(318,
								"cDup[x+x==Value_t(1)] cAdd cMul x cMul",
								"cMul",
								"    with x = " << x << "\n");
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lgr;
						}
						FP_TRACE_BYTECODE_OPTIMIZATION(319,
							"cDup cAdd cMul x cMul",
							"cMul [x+x] cMul",
							"    with x = " << x << "\n");
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lha;
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					if(y*x==Value_t(1))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(70,
							"y[y*x==Value_t(1)] cMul x cMul",
							"",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Lhb;
					}
					if((y*x)==fp_const_rad_to_deg<Value_t>())
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(307,
							"y[(y*x)==fp_const_rad_to_deg<Value_t>()] cMul x cMul",
							"cDeg",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Lde;
					}
					if((y*x)==fp_const_deg_to_rad<Value_t>())
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(308,
							"y[(y*x)==fp_const_deg_to_rad<Value_t>()] cMul x cMul",
							"cRad",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Ldf;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(128,
						"y cMul x cMul",
						"[y*x] cMul",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Lhc;
				}
				break;
			case cNeg:
				FP_TRACE_BYTECODE_OPTIMIZATION(122,
					"cNeg x cMul",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Lhd;
			case cRDiv:
				switch(ByteCodePtr[-2])
				{
				case cMul:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(285,
							"y cMul cRDiv x cMul",
							"[y*x] cMul cRDiv",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lhe;
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(286,
						"cNeg cRDiv x cMul",
						"[-x] cMul cRDiv",
						"    with x = " << x << "\n");
					goto Lhf;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(284,
						"y cRDiv x cMul",
						"[y*x] cRDiv",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lhg;
				}
				break;
			case cRad:
				FP_TRACE_BYTECODE_OPTIMIZATION(210,
					"cRad x cMul",
					"[DegreesToRadians(x)] cMul",
					"    with x = " << x << "\n");
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Lhh;
			case cSub:
				if(ByteCodePtr[-2] == cMul)
				{
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(IsVarOpcode(A))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(387,
								"A[IsVarOpcode(A)] y cMul cSub x cMul",
								"[x] cMul A [y*x] cMul cSub",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lhi;
						}
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(102,
					"y x cMul",
					"[y*x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lhj;
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(55,
					"x[x==Value_t(1)] cMul",
					"",
					"    with x = " << x << "\n");
				goto Lar;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(124,
					"x[x==Value_t(-1)] cMul",
					"cNeg",
					"    with x = " << x << "\n");
				goto Lhk;
			}
			if(x==Value_t(2))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(198,
					"x[x==Value_t(2)] cMul",
					"cDup cAdd",
					"    with x = " << x << "\n");
				goto Lhl;
			}
			if(x==fp_const_rad_to_deg<Value_t>())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(207,
					"x[x==fp_const_rad_to_deg<Value_t>()] cMul",
					"cDeg",
					"    with x = " << x << "\n");
				goto Lhm;
			}
			if(x==fp_const_deg_to_rad<Value_t>())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(208,
					"x[x==fp_const_deg_to_rad<Value_t>()] cMul",
					"cRad",
					"    with x = " << x << "\n");
				goto Lhn;
			}
			break;
		default: Default4:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDiv:
					B = ByteCodePtr[-2];
					if(IsVarOpcode(B))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(274,
							"B[IsVarOpcode(B)] cDiv A[IsVarOpcode(A)] cMul",
							"[DO_STACKPLUS1] A cMul B cDiv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						incStackPtr();
						--mStackPtr;
						goto Lho;
					}
					goto Default6;
				case cMul:
					switch(ByteCodePtr[-2])
					{
					case cNeg:
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(477,
								"B[B==A] cNeg cMul A[IsVarOpcode(A)] cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lfr;
						}
						goto Default7;
					default: Default7:;
						B = ByteCodePtr[-2];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(468,
								"B[B==A] cMul A[IsVarOpcode(A)] cMul",
								"B cSqr cMul",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lhp;
						}
					}
					goto Default6;
				case cNeg:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(471,
							"B[B==A] cNeg A[IsVarOpcode(A)] cMul",
							"B cSqr cNeg",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lfq;
					}
					goto Default6;
				case cRDiv:
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(267,
							"x cRDiv A[IsVarOpcode(A)] cMul",
							"[DO_STACKPLUS1] A [x] cMul cRDiv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						incStackPtr();
						--mStackPtr;
						goto Lhq;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(281,
						"cRDiv A[IsVarOpcode(A)] cMul",
						"[DO_STACKPLUS1] A cMul cRDiv",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Lhr;
				default: Default6:;
					B = ByteCodePtr[-1];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(465,
							"B[B==A] A[IsVarOpcode(A)] cMul",
							"B cSqr",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-1] = B; */ // redundant, matches B @ 2
						goto Lfo;
					}
				}
			}
			if(IsUnaryOpcode(A))
			{
				B = ByteCodePtr[-1];
				if(IsVarOpcode(B)&&mData->mByteCode.size()>1)
				{
					if(ByteCodePtr[-2] == cMul)
					{
						C = ByteCodePtr[-3];
						if(C==A)
						{
							D = ByteCodePtr[-4];
							if(D==B)
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(484,
									"D[D==B] C[C==A] cMul B[IsVarOpcode(B)&&mData->mByteCode.size()>1] A[IsUnaryOpcode(A)] cMul",
									"D C cSqr cMul",
									"    with A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << ", C = " << FP_TRACE_OPCODENAME(C)
									    << ", D = " << FP_TRACE_OPCODENAME(D)
									    << "\n");
								/* ByteCodePtr[-4] = D; */ // redundant, matches D @ 5
								/* ByteCodePtr[-3] = C; */ // redundant, matches C @ 4
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lia;
							}
						}
					}
				}
			}
		}
		goto Default0;
	TailCall_cNEqual:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(360,
						"cAbs x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Lib;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(362,
						"cSqr x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Lib;
				default:
					A = ByteCodePtr[-1];
					if(IsLogicalOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(429,
							"A[IsLogicalOpcode(A)] x[x==Value_t(0)] cNEqual",
							"A",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lar;
					}
				}
			}
			if(x==Value_t(1))
			{
				A = ByteCodePtr[-1];
				if(IsLogicalOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(427,
						"A[IsLogicalOpcode(A)] x[x==Value_t(1)] cNEqual",
						"A cNot",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					goto Ldm;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(116,
					"y x cNEqual",
					"[fp_nequal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lic;
			}
		}
		goto Default0;
	TailCall_cNeg:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNeg:
		switch(ByteCodePtr[0])
		{
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(123,
					"x cMul cNeg",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Lid;
			}
			break;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(61,"cNeg cNeg", "", "");
			goto Lbo;
		case cSin:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(244,
						"x cMul cSin cNeg",
						"[-x] cMul cSin",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Lie;
				}
			}
			break;
		case cSinh:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(245,
						"x cMul cSinh cNeg",
						"[-x] cMul cSinh",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Lif;
				}
			}
			break;
		case cTan:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(246,
						"x cMul cTan cNeg",
						"[-x] cMul cTan",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Lig;
				}
			}
			break;
		case cTanh:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(247,
						"x cMul cTanh cNeg",
						"[-x] cMul cTanh",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Lih;
				}
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(100,
				"x cNeg",
				"[-x]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lii;
		}
		goto Default0;
	TailCall_cNot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNot:
		switch(ByteCodePtr[0])
		{
		case cAbsNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(231,"cAbsNotNot cNot", "cAbsNot", "");
			goto Lij;
		case cEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(220,"cEqual cNot", "cNEqual", "");
			goto Lik;
		case cGreater:
			FP_TRACE_BYTECODE_OPTIMIZATION(218,"cGreater cNot", "cLessOrEq", "");
			goto Lil;
		case cGreaterOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(219,"cGreaterOrEq cNot", "cLess", "");
			goto Lim;
		case cLess:
			FP_TRACE_BYTECODE_OPTIMIZATION(216,"cLess cNot", "cGreaterOrEq", "");
			goto Lin;
		case cLessOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(217,"cLessOrEq cNot", "cGreater", "");
			goto Lio;
		case cNEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(221,"cNEqual cNot", "cEqual", "");
			goto Lip;
		case cNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(229,"cNot cNot", "cNotNot", "");
			goto Lbc;
		case cNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(230,"cNotNot cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Liq;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(107,
				"x cNot",
				"[fp_not(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lir;
		}
		goto Default0;
	TailCall_cNotNot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNotNot:
		if(ByteCodePtr[0] == cNot)
		{
			FP_TRACE_BYTECODE_OPTIMIZATION(232,"cNot cNotNot", "cNot", "");
			/* ByteCodePtr[0] = cNot; */ // redundant, matches cNot @ 1
			return;
		}
		goto Default0;
	TailCall_cOr:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cOr:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(223,"cDup cOr", "cNotNot", "");
			goto Lbc;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(118,
					"y x cOr",
					"[fp_or(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lja;
			}
			break;
		}
		goto Default0;
	TailCall_cPolar:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cPolar:
		if(ByteCodePtr[0] == cImmed)
		{
			y = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(194,
					"x y cPolar",
					"[fp_polar(x,y)]",
					"    with y = " << y
					    << ", x = " << x
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Ljb;
			}
		}
		goto Default0;
	TailCall_cPow:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cPow:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(isInteger(x))
			{
				switch(ByteCodePtr[-1])
				{
				case cExp:
					FP_TRACE_BYTECODE_OPTIMIZATION(43,
						"cExp x[isInteger(x)] cPow",
						"[x] cMul cExp",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					goto Ljc;
				case cExp2:
					FP_TRACE_BYTECODE_OPTIMIZATION(44,
						"cExp2 x[isInteger(x)] cPow",
						"[x] cMul cExp2",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					goto Ljd;
				case cPow:
					if(ByteCodePtr[-2] == cImmed)
					{
						y = ImmedPtr[-1];
						if(!isInteger(y))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(42,
								"y[!isInteger(y)] cPow x[isInteger(x)] cPow",
								"[y*x] cPow",
								"    with x = " << x
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cPow; */ // redundant, matches cPow @ 0
							goto Lje;
						}
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(45,
						"cPow x[isInteger(x)] cPow",
						"[x] cMul cPow",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cPow; */ // redundant, matches cPow @ 0
					goto Ljf;
				}
			}
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(83,
					"x[x==Value_t()] cPow",
					"[Value_t()] cMul [Value_t(1)] cAdd",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Ljg;
			}
			if(x==Value_t(0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(332,
					"x[x==Value_t(0.5)] cPow",
					"cSqrt",
					"    with x = " << x << "\n");
				goto Ljh;
			}
			if(x==Value_t(1)/Value_t(3))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(333,
					"x[x==Value_t(1)/Value_t(3)] cPow",
					"cCbrt",
					"    with x = " << x << "\n");
				goto Lji;
			}
			if(x==Value_t(1)/Value_t(-3))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(334,
					"x[x==Value_t(1)/Value_t(-3)] cPow",
					"cCbrt cInv",
					"    with x = " << x << "\n");
				goto Ljj;
			}
			if(x==Value_t(-0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(335,
					"x[x==Value_t(-0.5)] cPow",
					"cRSqrt",
					"    with x = " << x << "\n");
				goto Ljk;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(336,
					"x[x==Value_t(-1)] cPow",
					"cInv",
					"    with x = " << x << "\n");
				goto Ljl;
			}
			switch(ByteCodePtr[-1])
			{
			case cPow:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(330,
						"y cPow x cPow",
						"[y*x] cPow",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cPow; */ // redundant, matches cPow @ 0
					goto Lje;
				}
				break;
			case cSqr:
				FP_TRACE_BYTECODE_OPTIMIZATION(46,
					"cSqr x cPow",
					"[x+x] cPow",
					"    with x = " << x << "\n");
				/* opcode = cPow; */ // redundant, matches cPow @ 0
				goto Ljm;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(189,
					"y x cPow",
					"[fp_pow(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ljn;
			}
			FP_TRACE_BYTECODE_OPTIMIZATION(462,
				"x cPow",
				"[DO_POWI]",
				"    with x = " << x << "\n");
			if(TryCompilePowi(x))
			  return;
		}
		goto Default0;
	TailCall_cRDiv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRDiv:
		switch(ByteCodePtr[0])
		{
		case cSinCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(510,"cSinCos cRDiv", "cCot", "");
			goto Lep;
		case cSinhCosh:
			FP_TRACE_BYTECODE_OPTIMIZATION(517,"cSinhCosh cRDiv", "cTanh cInv", "");
			goto Ljo;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(268,
					"x[x==Value_t(1)] cRDiv",
					"cInv",
					"    with x = " << x << "\n");
				goto Ljl;
			}
			break;
		}
		goto Default0;
	TailCall_cRSub:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRSub:
		if(ByteCodePtr[0] == cDup)
		{
			FP_TRACE_BYTECODE_OPTIMIZATION(77,"cDup cRSub", "[Value_t()] cMul", "");
			goto Leg;
		}
		goto Default0;
	TailCall_cRad:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRad:
		switch(ByteCodePtr[0])
		{
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(211,
					"x cMul cRad",
					"[DegreesToRadians(x)] cMul",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Ljp;
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(134,
				"x cRad",
				"[DegreesToRadians(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Ljq;
		}
		goto Default0;
	TailCall_cReal:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cReal:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(191,
				"x cReal",
				"[fp_real(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Ljr;
		}
		goto Default0;
	TailCall_cSec:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSec:
		A = ByteCodePtr[0];
		if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
		{
			switch(ByteCodePtr[-1])
			{
			case cCos:
				B = ByteCodePtr[-2];
				if(B==A)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(504,
						"B[B==A] cCos A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cSec",
						"B cCos cDup cInv",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", B = " << FP_TRACE_OPCODENAME(B)
						    << "\n");
					/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
					/* ByteCodePtr[-1] = cCos; */ // redundant, matches cCos @ 2
					goto Lca;
				}
				break;
			case cSin:
				B = ByteCodePtr[-2];
				if(B==A)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(502,
						"B[B==A] cSin A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cSec",
						"B cSinCos cInv",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", B = " << FP_TRACE_OPCODENAME(B)
						    << "\n");
					/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
					goto Lka;
				}
				break;
			}
		}
		goto Default0;
	TailCall_cSin:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSin:
		switch(ByteCodePtr[0])
		{
		case cAsin:
			FP_TRACE_BYTECODE_OPTIMIZATION(345,"cAsin cSin", "", "");
			goto Lbo;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(240,"cNeg cSin", "cSin cNeg", "");
			goto Lkb;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(183,
				"x cSin",
				"[fp_sin(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lkc;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				if(ByteCodePtr[-1] == cCsc)
				{
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(506,
							"B[B==A] cCsc A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cSin",
							"B cCsc cDup cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cCsc; */ // redundant, matches cCsc @ 2
						goto Lca;
					}
				}
			}
		}
		goto Default0;
	TailCall_cSinh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSinh:
		switch(ByteCodePtr[0])
		{
		case cAcosh:
			FP_TRACE_BYTECODE_OPTIMIZATION(444,"cAcosh cSinh", "[DO_STACKPLUS1] cSqr [Value_t(-1)] cAdd cSqrt", "");
			incStackPtr();
			--mStackPtr;
			goto Lkd;
		case cAsinh:
			FP_TRACE_BYTECODE_OPTIMIZATION(349,"cAsinh cSinh", "", "");
			goto Lbo;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(241,"cNeg cSinh", "cSinh cNeg", "");
			goto Lke;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(184,
				"x cSinh",
				"[fp_sinh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lkf;
		}
		goto Default0;
	TailCall_cSqr:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSqr:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(204,"cAbs cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Lkg;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(203,"cNeg cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Lkg;
		case cSqrt:
			A = ByteCodePtr[-1];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(338,
					"A[IsNeverNegativeValueOpcode(A)] cSqrt cSqr",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Lbo;
			}
			break;
		}
		goto Default0;
	TailCall_cSqrt:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSqrt:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cSqr)
			{
				A = ByteCodePtr[-2];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-3] == cSqr)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(519,
							"cSqr A[IsVarOpcode(A)] cSqr cAdd cSqrt",
							"A cHypot",
							"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
						goto Lkh;
					}
				}
				B = ByteCodePtr[-2];
				if(IsUnaryOpcode(B))
				{
					A = ByteCodePtr[-3];
					if(IsVarOpcode(A))
					{
						if(ByteCodePtr[-4] == cSqr)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(520,
								"cSqr A[IsVarOpcode(A)] B[IsUnaryOpcode(B)] cSqr cAdd cSqrt",
								"A B cHypot",
								"    with B = " << FP_TRACE_OPCODENAME(B)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lki;
						}
					}
				}
			}
			break;
		case cSqr:
			FP_TRACE_BYTECODE_OPTIMIZATION(23,"cSqr cSqrt", "cAbs", "");
			goto Lkj;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(185,
				"x cSqrt",
				"[fp_sqrt(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lkk;
		}
		goto Default0;
	TailCall_cSub:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSub:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(76,"cDup cSub", "[Value_t()] cMul", "");
			goto Leg;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(200,"cNeg cSub", "cAdd", "");
			goto Lkl;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(58,
					"x[x==Value_t()] cSub",
					"",
					"    with x = " << x << "\n");
				goto Lar;
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(106,
					"y x cSub",
					"[y-x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lkm;
			}
			FP_TRACE_BYTECODE_OPTIMIZATION(51,
				"x cSub",
				"[-x] cAdd",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lkn;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				if(ByteCodePtr[-1] == cRSub)
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(289,
							"x cRSub A[IsVarOpcode(A)] cSub",
							"A cAdd [x] cRSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Lko;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(296,
						"cRSub A[IsVarOpcode(A)] cSub",
						"[DO_STACKPLUS1] A cSub cRSub",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Lkp;
				}
			}
		}
		goto Default0;
	TailCall_cTan:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cTan:
		switch(ByteCodePtr[0])
		{
		case cAtan2:
			FP_TRACE_BYTECODE_OPTIMIZATION(354,"cAtan2 cTan", "cDiv", "");
			goto Lfp;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(242,"cNeg cTan", "cTan cNeg", "");
			goto Lkq;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(187,
				"x cTan",
				"[fp_tan(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lkr;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				if(ByteCodePtr[-1] == cCot)
				{
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(508,
							"B[B==A] cCot A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cTan",
							"B cCot cDup cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cCot; */ // redundant, matches cCot @ 2
						goto Lca;
					}
				}
			}
		}
		goto Default0;
	TailCall_cTanh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cTanh:
		switch(ByteCodePtr[0])
		{
		case cAtanh:
			FP_TRACE_BYTECODE_OPTIMIZATION(352,"cAtanh cTanh", "", "");
			goto Lbo;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(243,"cNeg cTanh", "cTanh cNeg", "");
			goto Lla;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(188,
				"x cTanh",
				"[fp_tanh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Llb;
		}
		goto Default0;
	TailCall_cTrunc:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cTrunc:
		switch(ByteCodePtr[0])
		{
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(138,
				"x cTrunc",
				"[fp_trunc(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Llc;
		default:
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(394,
					"A[IsAlwaysIntegerOpcode(A)] cTrunc",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	default: Default0:;
		A = opcode;
		if(IsVarOpcode(A)&&mData->mByteCode.size()>0)
		{
			B = ByteCodePtr[0];
			if(B==A)
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(482,
					"B[B==A] A[IsVarOpcode(A)&&mData->mByteCode.size()>0]",
					"B cDup",
					"    with A = " << FP_TRACE_OPCODENAME(A)
					    << ", B = " << FP_TRACE_OPCODENAME(B)
					    << "\n");
				/* ByteCodePtr[0] = B; */ // redundant, matches B @ 1
				goto Lld;
			}
		}
		if(IsUnaryOpcode(A))
		{
			B = ByteCodePtr[0];
			if(IsVarOpcode(B)&&mData->mByteCode.size()>1)
			{
				C = ByteCodePtr[-1];
				if(C==A)
				{
					D = ByteCodePtr[-2];
					if(D==B)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(483,
							"D[D==B] C[C==A] B[IsVarOpcode(B)&&mData->mByteCode.size()>1] A[IsUnaryOpcode(A)]",
							"D C cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", C = " << FP_TRACE_OPCODENAME(C)
							    << ", D = " << FP_TRACE_OPCODENAME(D)
							    << "\n");
						/* ByteCodePtr[-2] = D; */ // redundant, matches D @ 3
						/* ByteCodePtr[-1] = C; */ // redundant, matches C @ 2
						goto Lle;
					}
				}
			}
		}
		C = opcode;
		if(IsCommutativeOrParamSwappableBinaryOpcode(C))
		{
			switch(ByteCodePtr[0])
			{
			case cSin:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A)&&mData->mByteCode.size()>3)
				{
					if(ByteCodePtr[-2] == cCos)
					{
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(512,
								"B[B==A] cCos A[IsVarOpcode(A)&&mData->mByteCode.size()>3] cSin C[IsCommutativeOrParamSwappableBinaryOpcode(C)]",
								"B cSinCos {GetParamSwappedBinaryOpcode(C)}",
								"    with C = " << FP_TRACE_OPCODENAME(C)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Llf;
						}
					}
				}
				break;
			case cSinh:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A)&&mData->mByteCode.size()>3)
				{
					if(ByteCodePtr[-2] == cCosh)
					{
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(513,
								"B[B==A] cCosh A[IsVarOpcode(A)&&mData->mByteCode.size()>3] cSinh C[IsCommutativeOrParamSwappableBinaryOpcode(C)]",
								"B cSinhCosh {GetParamSwappedBinaryOpcode(C)}",
								"    with C = " << FP_TRACE_OPCODENAME(C)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Llg;
						}
					}
				}
				break;
			}
		}
	}
	goto Laa;
Laa: mData->mByteCode.push_back(opcode); return;
Lab: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Llh: FP_TRACE_BYTECODE_ADD(cAbs);
     goto TailCall_cAbs;
Lac: ImmedPtr[0] = fp_abs(x); return;
Lad: ImmedPtr[0] = fp_acos(x); return;
Lae: ImmedPtr[0] = fp_acosh(x); return;
Laf: mData->mImmed.push_back(Value_t(4));
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
Lli: opcode = cMul;
Llj: FP_ReDefinePointers();
Llk: FP_TRACE_BYTECODE_ADD(cMul);
     goto TailCall_cMul;
Lag: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(Value_t(4));
Lll: mData->mByteCode.push_back(cImmed); goto Lli;
Lah: ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
Ler: opcode = cMul; goto Llk;
Lai: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSub;
Llm: FP_TRACE_BYTECODE_ADD(cSub);
     goto TailCall_cSub;
Laj: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lln: FP_ReDefinePointers();
Llo: FP_TRACE_BYTECODE_ADD(cAdd);
     goto TailCall_cAdd;
Lak: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Llp: AddFunctionOpcode(cAdd);
Llq: opcode = cRSub;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cRSub);
     goto TailCall_cRSub;
Lal: ImmedPtr[0] = -x;
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Llp;
Lam: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Llq;
Lan: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Llr: AddFunctionOpcode(cAdd);
Lma: AddFunctionOpcode(B);
Lmb: opcode = cSub;
     FP_ReDefinePointers(); goto Llm;
Lao: ImmedPtr[0] = -x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Llr;
Lap: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lma;
Laq: ImmedPtr[-1] = y+x;
Lar: mData->mImmed.pop_back();
Lbo: mData->mByteCode.pop_back(); return;
Lba: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Llp;
Lbb: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Llp;
Lbc: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cNotNot;
     FP_TRACE_BYTECODE_ADD(cNotNot);
     goto TailCall_cNotNot;
Lbd: ImmedPtr[-1] = fp_and(x,y); goto Lar;
Lbe: ImmedPtr[0] = fp_arg(x); return;
Lbf: ImmedPtr[0] = fp_asin(x); return;
Lbg: ImmedPtr[0] = fp_asinh(x); return;
Lbh: ImmedPtr[0] = fp_atan(x); return;
Lbi: ImmedPtr[-1] = fp_atan2(y,x); goto Lar;
Lbj: ImmedPtr[0] = fp_atanh(x); return;
Lbk: ImmedPtr[0] = fp_cbrt(x); return;
Lbl: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cCeil);
Lmc: AddFunctionOpcode(A);
     AddFunctionOpcode(B);
Lmd: opcode = cAdd; goto Lln;
Lbm: mData->mByteCode.pop_back();
     AddFunctionOpcode(cFloor);
Lme: opcode = cNeg;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cNeg);
     goto TailCall_cNeg;
Lbn: ImmedPtr[0] = fp_ceil(x); return;
Lbp: ImmedPtr[0] = fp_conj(x); return;
Lbq: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lmf: FP_TRACE_BYTECODE_ADD(cCos);
     goto TailCall_cCos;
Lbr: ImmedPtr[0] = fp_cos(x); return;
Lca: ByteCodePtr[0] = cDup;
     opcode = cInv;
Lmg: FP_TRACE_BYTECODE_ADD(cInv);
     goto TailCall_cInv;
Lcb: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinCos); return;
Lcc: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSqr);
     mData->mImmed.push_back(Value_t(1));
Lmh: mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cAdd);
Lmi: opcode = cSqrt;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cSqrt);
     goto TailCall_cSqrt;
Lcd: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     FP_TRACE_BYTECODE_ADD(cCosh);
     goto TailCall_cCosh;
Lce: ImmedPtr[0] = fp_cosh(x); return;
Lcf: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinhCosh); return;
Lcg: ImmedPtr[0] = RadiansToDegrees(x); return;
Lch: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSec); goto Lli;
Lci: mData->mByteCode.pop_back();
     AddFunctionOpcode(cTan); goto Lli;
Lcj: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSin); goto Lli;
Lck: mData->mImmed.push_back(Value_t());
     ByteCodePtr[0] = cImmed;
Lmj: AddFunctionOpcode(cMul);
     mData->mImmed.push_back(Value_t(1));
Lmk: mData->mByteCode.push_back(cImmed); goto Lmd;
Lcl: mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     AddFunctionOpcode(cExp); goto Lli;
Lcm: mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     AddFunctionOpcode(cExp2); goto Lli;
Lcn: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Ler;
Lco: mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     AddFunctionOpcode(cPow); goto Lli;
Lcp: mData->mByteCode.pop_back();
     AddFunctionOpcode(cCos); goto Lli;
Lcq: mData->mByteCode.pop_back();
     AddFunctionOpcode(cCsc); goto Lli;
Lcr: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cTan;
Lml: FP_TRACE_BYTECODE_ADD(cTan);
     goto TailCall_cTan;
Lda: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cTanh;
Lmm: FP_TRACE_BYTECODE_ADD(cTanh);
     goto TailCall_cTanh;
Ldb: mData->mByteCode.pop_back();
     AddFunctionOpcode(cCot); goto Lli;
Ldc: ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lmn: FP_TRACE_BYTECODE_ADD(cDiv);
     goto TailCall_cDiv;
Ldd: ImmedPtr[-1] = y/x; goto Lar;
Lde: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Lmo: opcode = cDeg;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cDeg);
     goto TailCall_cDeg;
Ldf: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Lmp: opcode = cRad;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cRad);
     goto TailCall_cRad;
Ldg: ImmedPtr[-1] = y/x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lli;
Ldh: ImmedPtr[0] = Value_t(1)/x; goto Ler;
Ldi: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cMul);
Lmq: FP_ReDefinePointers(); goto Lmn;
Ldj: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed);
Lmr: opcode = cRDiv;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cRDiv);
     goto TailCall_cRDiv;
Ldk: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(B); goto Lmr;
Ldl: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lna: FP_TRACE_BYTECODE_ADD(cEqual);
     goto TailCall_cEqual;
Ldm: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     opcode = cNot;
     FP_ReDefinePointers();
Lnb: FP_TRACE_BYTECODE_ADD(cNot);
     goto TailCall_cNot;
Ldn: ImmedPtr[-1] = fp_equal(y,x); goto Lar;
Ldo: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cExp);
     mData->mImmed.push_back(fp_exp(x)); goto Lll;
Ldp: ImmedPtr[0] = fp_exp(x); return;
Ldq: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cExp2);
     mData->mImmed.push_back(fp_exp2(x)); goto Lll;
Ldr: ImmedPtr[0] = fp_exp2(x); return;
Lea: mData->mImmed.push_back(fp_log(Value_t(2)));
     mData->mByteCode.push_back(cImmed);
Lnc: AddFunctionOpcode(cMul);
     opcode = cExp;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cExp);
     goto TailCall_cExp;
Leb: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cFloor); goto Lmc;
Lec: mData->mByteCode.pop_back();
     AddFunctionOpcode(cCeil); goto Lme;
Led: ImmedPtr[0] = fp_floor(x); return;
Lee: ImmedPtr[-1] = fp_less(x,y); goto Lar;
Lef: ImmedPtr[-1] = fp_lessOrEq(x,y); goto Lar;
Leg: mData->mImmed.push_back(Value_t());
Lnd: ByteCodePtr[0] = cImmed; goto Lli;
Leh: ImmedPtr[0] = fp_imag(x); return;
Lei: ImmedPtr[0] = fp_int(x); return;
Lej: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSec;
     FP_TRACE_BYTECODE_ADD(cSec);
     goto TailCall_cSec;
Lek: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSin;
Lne: FP_TRACE_BYTECODE_ADD(cSin);
     goto TailCall_cSin;
Lel: mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     opcode = cPow;
Lnf: FP_ReDefinePointers();
Lng: FP_TRACE_BYTECODE_ADD(cPow);
     goto TailCall_cPow;
Lem: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cCos; goto Lmf;
Len: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cCsc;
     FP_TRACE_BYTECODE_ADD(cCsc);
     goto TailCall_cCsc;
Leo: mData->mByteCode.pop_back();
     AddFunctionOpcode(cRSqrt); return;
Lep: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lnh: opcode = cCot;
     FP_TRACE_BYTECODE_ADD(cCot);
     goto TailCall_cCot;
Leq: ImmedPtr[0] = Value_t(1)/x; return;
Lfa: ImmedPtr[-1] = fp_less(y,x); goto Lar;
Lfb: ImmedPtr[-1] = fp_lessOrEq(y,x); goto Lar;
Lfc: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cLog);
     mData->mImmed.push_back(fp_log(x)); goto Lmk;
Lfd: ImmedPtr[0] = fp_log(x); return;
Lfe: mData->mImmed.push_back(fp_log10(fp_const_e<Value_t>())); goto Lnd;
Lff: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cLog10);
     mData->mImmed.push_back(fp_log10(x)); goto Lmk;
Lfg: ImmedPtr[0] = fp_log10(x); return;
Lfh: mData->mImmed.push_back(fp_log2(fp_const_e<Value_t>())); goto Lnd;
Lfi: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cLog2);
     mData->mImmed.push_back(fp_log2(x)); goto Lmk;
Lfj: ImmedPtr[0] = fp_log2(x); return;
Lfk: ImmedPtr[-1] = fp_max(x,y); goto Lar;
Lfl: ImmedPtr[-1] = fp_min(x,y); goto Lar;
Lfm: ImmedPtr[-1] = fp_mod(y,x); goto Lar;
Lfn: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 3; goto Lnh;
Lfo: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSqr;
Lni: FP_TRACE_BYTECODE_ADD(cSqr);
     goto TailCall_cSqr;
Lfp: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cDiv; goto Lmn;
Lfq: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr); goto Lme;
Lfr: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr);
     AddFunctionOpcode(cMul); goto Lme;
Lga: ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
     opcode = cPow; goto Lng;
Lgb: ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2; goto Llk;
Lgc: ImmedPtr[-1] = x;
Lnj: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Llj;
Lgd: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
Lnk: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lnl: AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
Lnm: mData->mByteCode.push_back(cImmed); goto Llj;
Lge: mData->mImmed.pop_back(); goto Lnk;
Lgf: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(B); goto Lnl;
Lgg: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lnl;
Lgh: ByteCodePtr[-1] = cImmed; goto Lbo;
Lgi: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Llk;
Lgj: mData->mImmed.pop_back();
Lnn: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} return;
Lgk: ImmedPtr[0] = x+x; goto Lgb;
Lgl: ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     mData->mImmed.push_back(y*x);
     mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cMul); goto Lmd;
Lgm: ImmedPtr[-1] = x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(y*x); goto Lmk;
Lgn: ImmedPtr[0] = RadiansToDegrees(x); goto Lgi;
Lgo: ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lno: AddFunctionOpcode(cMul);
Lnp: AddFunctionOpcode(B);
     opcode = cDiv; goto Lmq;
Lgp: ImmedPtr[0] = -x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lno;
Lgq: ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lnp;
Lgr: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();} goto Llj;
Lha: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(x+x); goto Lnm;
Lhb: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();} goto Lnn;
Lhc: ImmedPtr[-1] = y*x; goto Lnj;
Lhd: ImmedPtr[0] = -x; goto Lgi;
Lhe: ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Lnq: AddFunctionOpcode(cMul); goto Lmr;
Lhf: ImmedPtr[0] = -x;
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lnq;
Lhg: ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lmr;
Lhh: ImmedPtr[0] = DegreesToRadians(x); goto Lgi;
Lhi: ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     mData->mImmed.push_back(y*x);
     mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cMul); goto Lmb;
Lhj: ImmedPtr[-1] = y*x; goto Lar;
Lhk: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lme;
Lhl: ByteCodePtr[0] = cDup;
     ImmedPtr -= 1;
     mData->mImmed.pop_back();
Lnr: opcode = cAdd; goto Llo;
Lhm: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lmo;
Lhn: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lmp;
Lho: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lno;
Lhp: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Loa: AddFunctionOpcode(cSqr); goto Llj;
Lhq: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lnq;
Lhr: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lnq;
Lia: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Loa;
Lib: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lob: FP_TRACE_BYTECODE_ADD(cNEqual);
     goto TailCall_cNEqual;
Lic: ImmedPtr[-1] = fp_nequal(y,x); goto Lar;
Lid: ImmedPtr[0] = -x; goto Lcn;
Lie: ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     opcode = cSin;
     FP_ReDefinePointers(); goto Lne;
Lif: ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     opcode = cSinh;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cSinh);
     goto TailCall_cSinh;
Lig: ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     opcode = cTan;
     FP_ReDefinePointers(); goto Lml;
Lih: ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     opcode = cTanh;
     FP_ReDefinePointers(); goto Lmm;
Lii: ImmedPtr[0] = -x; return;
Lij: mData->mByteCode.pop_back();
     AddFunctionOpcode(cAbsNot); return;
Lik: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cNEqual; goto Lob;
Lil: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cLessOrEq;
     FP_TRACE_BYTECODE_ADD(cLessOrEq);
     goto TailCall_cLessOrEq;
Lim: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cLess;
     FP_TRACE_BYTECODE_ADD(cLess);
     goto TailCall_cLess;
Lin: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cGreaterOrEq;
     FP_TRACE_BYTECODE_ADD(cGreaterOrEq);
     goto TailCall_cGreaterOrEq;
Lio: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cGreater;
     FP_TRACE_BYTECODE_ADD(cGreater);
     goto TailCall_cGreater;
Lip: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cEqual; goto Lna;
Liq: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lnb;
Lir: ImmedPtr[0] = fp_not(x); return;
Lja: ImmedPtr[-1] = fp_or(x,y); goto Lar;
Ljb: ImmedPtr[-1] = fp_polar(x,y); goto Lar;
Ljc: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back(); goto Lnc;
Ljd: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cMul);
     opcode = cExp2;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cExp2);
     goto TailCall_cExp2;
Lje: ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lnf;
Ljf: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cMul); goto Lnf;
Ljg: ImmedPtr[0] = Value_t(); goto Lmj;
Ljh: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lmi;
Lji: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     opcode = cCbrt;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cCbrt);
     goto TailCall_cCbrt;
Ljj: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cCbrt);
Loc: opcode = cInv;
     FP_ReDefinePointers(); goto Lmg;
Ljk: mData->mImmed.pop_back(); goto Leo;
Ljl: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Loc;
Ljm: ImmedPtr[0] = x+x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lng;
Ljn: ImmedPtr[-1] = fp_pow(y,x); goto Lar;
Ljo: mData->mByteCode.pop_back();
     AddFunctionOpcode(cTanh); goto Loc;
Ljp: ImmedPtr[0] = DegreesToRadians(x); goto Lcn;
Ljq: ImmedPtr[0] = DegreesToRadians(x); return;
Ljr: ImmedPtr[0] = fp_real(x); return;
Lka: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinCos); goto Loc;
Lkb: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSin); goto Lme;
Lkc: ImmedPtr[0] = fp_sin(x); return;
Lkd: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSqr);
     mData->mImmed.push_back(Value_t(-1)); goto Lmh;
Lke: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSinh); goto Lme;
Lkf: ImmedPtr[0] = fp_sinh(x); return;
Lkg: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lni;
Lkh: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
Lod: opcode = cHypot;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cHypot);
     goto TailCall_cHypot;
Lki: for(unsigned tmp=5; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(B); goto Lod;
Lkj: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cAbs; goto Llh;
Lkk: ImmedPtr[0] = fp_sqrt(x); return;
Lkl: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lnr;
Lkm: ImmedPtr[-1] = y-x; goto Lar;
Lkn: ImmedPtr[0] = -x; goto Lnr;
Lko: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cAdd);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Llq;
Lkp: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cSub); goto Llq;
Lkq: mData->mByteCode.pop_back();
     AddFunctionOpcode(cTan); goto Lme;
Lkr: ImmedPtr[0] = fp_tan(x); return;
Lla: mData->mByteCode.pop_back();
     AddFunctionOpcode(cTanh); goto Lme;
Llb: ImmedPtr[0] = fp_tanh(x); return;
Llc: ImmedPtr[0] = fp_trunc(x); return;
Lld: mData->mByteCode.push_back(cDup); return;
Lle: ByteCodePtr[0] = cDup; return;
Llf: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinCos);
Loe: AddFunctionOpcode(GetParamSwappedBinaryOpcode(C)); return;
Llg: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinhCosh); goto Loe;
return;
// This list of dummy gotos is here to inhibit
// compiler warnings on unused labels
goto TailCall_cAcos;goto TailCall_cAcosh;goto TailCall_cAnd;
goto TailCall_cArg;goto TailCall_cAsin;goto TailCall_cAsinh;
goto TailCall_cAtan;goto TailCall_cAtan2;goto TailCall_cAtanh;
goto TailCall_cCeil;goto TailCall_cConj;goto TailCall_cFloor;
goto TailCall_cImag;goto TailCall_cInt;goto TailCall_cLog;
goto TailCall_cLog10;goto TailCall_cLog2;goto TailCall_cMax;
goto TailCall_cMin;goto TailCall_cMod;goto TailCall_cOr;
goto TailCall_cPolar;goto TailCall_cRDiv;goto TailCall_cRad;
goto TailCall_cReal;goto TailCall_cSec;goto TailCall_cSin;
goto TailCall_cSinh;goto TailCall_cSqrt;goto TailCall_cSub;
goto TailCall_cTan;goto TailCall_cTanh;goto TailCall_cTrunc;
#endif

#undef FP_ReDefinePointers
#undef FP_TRACE_BYTECODE_OPTIMIZATION
#undef FP_TRACE_OPCODENAME
