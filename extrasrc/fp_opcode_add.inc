/* Function Parser for C++ v4.5.2   

  NOTE:
  Do not include this file in your project. The fparser.cc file #includes
this file internally and thus you don't need to do anything (other than keep
this file in the same directory as fparser.cc).

  This file contains generated code and is thus not intended to be to
be modified by hand. It was generated by util/bytecoderules_parser, which
is available in the development package.
*/
#define HasInvalidRangesOpcode HasInvalidRangesOpcode<IsComplexType<Value_t>::value>
#define FP_TRACE_BYTECODE_OPTIMIZATION(srcline,from,to,with) \
    /*std::cout << "Changing \"" from "\"\t(line " #srcline ")\n" \
                   "    into \"" to "\"\n" with << std::flush*/
#define FP_TRACE_OPCODENAME(op) \
    (op < VarBegin \
        ? FP_GetOpcodeName(OPCODE(op)) \
        : findName(mData->mNamePtrs,op,NameData<Value_t>::VARIABLE))
#define FP_TRACE_BYTECODE_ADD(opcode) \
    /*std::cout << "Adding opcode: " << FP_TRACE_OPCODENAME(opcode) \
                << ", bytecode length " << data->ByteCode.size() \
                << ", pointer is " << (void*)ByteCodePtr \
                << ", code is " << (data->ByteCode.empty() \
                                       ? (void*)0 \
                                       : (void*)&data->ByteCode[0]) \
                << std::endl*/
  unsigned* ByteCodePtr;
  Value_t*   ImmedPtr;

  #define FP_ReDefinePointers() \
    ByteCodePtr = !mData->mByteCode.empty() ? &mData->mByteCode[0] + mData->mByteCode.size() - 1 : 0; \
    ImmedPtr    = !mData->mImmed.empty()    ? &mData->mImmed[0]    + mData->mImmed.size()    - 1 : 0;
  FP_ReDefinePointers();
  FP_TRACE_BYTECODE_ADD(opcode);

#if(!(FP_COMPLEX_VERSION) && !(FP_FLOAT_VERSION))
	Value_t x;
	unsigned A;
	Value_t y;
	unsigned B;
	unsigned C;
	unsigned D;
	switch(opcode)
	{
	TailCall_cAbs:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAbs:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(201,"cNeg cAbs", "cAbs", "");
			/* opcode = cAbs; */ // redundant, matches cAbs @ 0
			goto Lab;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(132,
				"x cAbs",
				"[fp_abs(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lac;
		default:
			A = ByteCodePtr[0];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(393,
					"A[IsNeverNegativeValueOpcode(A)] cAbs",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cAdd:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAdd:
		switch(ByteCodePtr[0])
		{
		case cDup:
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(310,"cDup cAdd cDup cAdd", "[Value_t(4)] cMul", "");
					goto Lad;
				}
				break;
			case cMul:
				if(ByteCodePtr[-2] == cAdd)
				{
					if(ByteCodePtr[-3] == cDup)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(311,"cDup cAdd cMul cDup cAdd", "cMul [Value_t(4)] cMul", "");
						goto Lae;
					}
				}
				break;
			}
			goto Default1;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(313,
						"cDup x cMul cAdd",
						"[x+Value_t(1)] cMul",
						"    with x = " << x << "\n");
					goto Laf;
				}
			}
			goto Default1;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(199,"cNeg cAdd", "cSub", "");
			goto Lag;
		case cImmed:
			x = ImmedPtr[0];
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(127,
						"y cAdd x cAdd",
						"[y+x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cAdd; */ // redundant, matches cAdd @ 0
					goto Lah;
				}
				break;
			case cRSub:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(298,
							"y cAdd cRSub x cAdd",
							"[ y+x] cAdd cRSub",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lai;
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(299,
						"cNeg cRSub x cAdd",
						"[-x] cAdd cRSub",
						"    with x = " << x << "\n");
					goto Laj;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(297,
						"y cRSub x cAdd",
						"[ y+x] cRSub",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lak;
				}
				break;
			case cSub:
				B = ByteCodePtr[-2];
				if(IsVarOpcode(B))
				{
					switch(ByteCodePtr[-3])
					{
					case cAdd:
						if(ByteCodePtr[-4] == cImmed)
						{
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(292,
								"y cAdd B[IsVarOpcode(B)] cSub x cAdd",
								"[ y+x] cAdd B cSub",
								"    with x = " << x
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-4] = cImmed; */ // redundant, matches y @ 5
							goto Lal;
						}
						break;
					case cNeg:
						FP_TRACE_BYTECODE_OPTIMIZATION(293,
							"cNeg B[IsVarOpcode(B)] cSub x cAdd",
							"[-x] cAdd B cSub",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						goto Lam;
					case cImmed:
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(291,
							"y B[IsVarOpcode(B)] cSub x cAdd",
							"[ y+x] B cSub",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lan;
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(105,
					"y x cAdd",
					"[y+x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lao;
			}
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(57,
					"x[x==Value_t()] cAdd",
					"",
					"    with x = " << x << "\n");
				goto Lap;
			}
			break;
		default: Default1:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				if(ByteCodePtr[-1] == cRSub)
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(290,
							"x cRSub A[IsVarOpcode(A)] cAdd",
							"[DO_STACKPLUS1] A [x] cAdd cRSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						incStackPtr();
						--mStackPtr;
						goto Laq;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(295,
						"cRSub A[IsVarOpcode(A)] cAdd",
						"[DO_STACKPLUS1] A cAdd cRSub",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Lba;
				}
			}
		}
		goto Default0;
	TailCall_cAnd:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAnd:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(224,"cDup cAnd", "cNotNot", "");
			goto Lbb;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(117,
					"y x cAnd",
					"[fp_and(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbc;
			}
			break;
		}
		goto Default0;
	TailCall_cDiv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cDiv:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(78,"cDup cDiv", "[Value_t()] cMul [Value_t(1)] cAdd", "");
			goto Lbd;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(125,
						"cNeg x[x!=Value_t()] cDiv",
						"[-x] cDiv",
						"    with x = " << x << "\n");
					/* opcode = cDiv; */ // redundant, matches cDiv @ 0
					goto Lbe;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(103,
						"y x[x!=Value_t()] cDiv",
						"[y/x]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Lbf;
				}
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(56,
					"x[x==Value_t(1)] cDiv",
					"",
					"    with x = " << x << "\n");
				goto Lap;
			}
			break;
		}
		goto Default0;
	TailCall_cEqual:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				A = ByteCodePtr[-1];
				if(IsLogicalOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(421,
						"A[IsLogicalOpcode(A)] x[x==Value_t(1)] cEqual",
						"A",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					goto Lap;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(115,
					"y x cEqual",
					"[fp_equal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbg;
			}
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(359,
						"cAbs x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Lbh;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(361,
						"cSqr x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Lbh;
				}
				FP_TRACE_BYTECODE_OPTIMIZATION(411,
					"x[x==Value_t(0)] cEqual",
					"cNot",
					"    with x = " << x << "\n");
				goto Lbi;
			}
		}
		goto Default0;
	TailCall_cGreater:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cGreater:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(413,
						"cAbs x[x==Value_t(0)] cGreater",
						"cNotNot",
						"    with x = " << x << "\n");
					goto Lbj;
				default:
					A = ByteCodePtr[-1];
					if(IsNeverNegativeValueOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(417,
							"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(0)] cGreater",
							"A cNotNot",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lbk;
					}
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(113,
					"y x cGreater",
					"[fp_less(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbl;
			}
		}
		goto Default0;
	TailCall_cGreaterOrEq:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cGreaterOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(414,
						"cAbs x[x==Value_t(1)] cGreaterOrEq",
						"cNotNot",
						"    with x = " << x << "\n");
					goto Lbj;
				default:
					A = ByteCodePtr[-1];
					if(IsNeverNegativeValueOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(418,
							"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(1)] cGreaterOrEq",
							"A cNotNot",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lbk;
					}
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(114,
					"y x cGreaterOrEq",
					"[fp_lessOrEq(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbm;
			}
		}
		goto Default0;
	TailCall_cInv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cInv:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(101,
					"x[x!=Value_t()] cInv",
					"[Value_t(1)/x]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lbn;
			}
		}
		goto Default0;
	TailCall_cLess:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLess:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				A = ByteCodePtr[-1];
				if(IsNeverNegativeValueOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(301,
						"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(0)] cLess",
						"A [x] cMul",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
					goto Lbo;
				}
			}
			if(x==Value_t(1))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(415,
						"cAbs x[x==Value_t(1)] cLess",
						"cNot",
						"    with x = " << x << "\n");
					goto Lbp;
				default:
					A = ByteCodePtr[-1];
					if(IsNeverNegativeValueOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(419,
							"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(1)] cLess",
							"A cNot",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lbi;
					}
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(111,
					"y x cLess",
					"[fp_less(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbq;
			}
		}
		goto Default0;
	TailCall_cLessOrEq:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLessOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(416,
						"cAbs x[x==Value_t(0)] cLessOrEq",
						"cNot",
						"    with x = " << x << "\n");
					goto Lbp;
				default:
					A = ByteCodePtr[-1];
					if(IsNeverNegativeValueOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(420,
							"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(0)] cLessOrEq",
							"A cNot",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lbi;
					}
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(112,
					"y x cLessOrEq",
					"[fp_lessOrEq(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lca;
			}
		}
		goto Default0;
	TailCall_cMax:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMax:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(60,"cDup cMax", "", "");
			goto Lcb;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(141,
					"y x cMax",
					"[fp_max(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lcc;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(66,
							"B[B==A] cDup A[IsVarOpcode(A)] cMax",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Lcb;
					}
					break;
				case cMax:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(68,
							"B[B==A] cMax A[IsVarOpcode(A)] cMax",
							"B cMax",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMax; */ // redundant, matches cMax @ 2
						goto Lcb;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cMin:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMin:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(59,"cDup cMin", "", "");
			goto Lcb;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(140,
					"y x cMin",
					"[fp_min(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lcd;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(65,
							"B[B==A] cDup A[IsVarOpcode(A)] cMin",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Lcb;
					}
					break;
				case cMin:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(67,
							"B[B==A] cMin A[IsVarOpcode(A)] cMin",
							"B cMin",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMin; */ // redundant, matches cMin @ 2
						goto Lcb;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cMod:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMod:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				if(ByteCodePtr[-1] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(104,
						"y x[x!=Value_t()] cMod",
						"[fp_mod(y,x)]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Lce;
				}
			}
		}
		goto Default0;
	TailCall_cMul:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMul:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(202,"cDup cMul", "cSqr", "");
			goto Lcf;
		case cNeg:
			switch(ByteCodePtr[-1])
			{
			case cDup:
				FP_TRACE_BYTECODE_OPTIMIZATION(467,"cDup cNeg cMul", "cSqr cNeg", "");
				goto Lcg;
			default:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cMul)
					{
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(473,
								"B[B==A] cMul A[IsVarOpcode(A)] cNeg cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lch;
						}
					}
				}
			}
			goto Default2;
		case cPow:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(314,
						"cDup x cPow cMul",
						"[x+Value_t(1)] cPow",
						"    with x = " << x << "\n");
					goto Lci;
				}
			}
			goto Default2;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(93,
							"A[IsVarOpcode(A)] cMul x[x==Value_t()] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lcj;
					}
					goto Default3;
				default: Default3:;
					A = ByteCodePtr[-1];
					if(IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						switch(ByteCodePtr[-2])
						{
						case cImmed:
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(92,
								"y A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
								"[x] cMul",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lck;
						default:
							B = ByteCodePtr[-2];
							if(IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								switch(ByteCodePtr[-3])
								{
								case cImmed:
									y = ImmedPtr[-1];
									FP_TRACE_BYTECODE_OPTIMIZATION(96,
										"y B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
										"A [x] cMul",
										"    with x = " << x
										    << ", A = " << FP_TRACE_OPCODENAME(A)
										    << ", B = " << FP_TRACE_OPCODENAME(B)
										    << ", y = " << y
										    << "\n");
									/* opcode = cMul; */ // redundant, matches cMul @ 0
									goto Lcl;
								default:
									C = ByteCodePtr[-3];
									if(IsVarOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(94,
											"C[IsVarOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
											"A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lcm;
									}
									if(IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(95,
											"C[IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
											"B A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lcn;
									}
								}
							}
							if(IsVarOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(90,
									"B[IsVarOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
									"[x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lcj;
							}
							if(IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(91,
									"B[IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
									"A [x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lco;
							}
						}
					}
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(88,
							"A[IsVarOpcode(A)] x[x==Value_t()] cMul",
							"[x]",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						goto Lcp;
					}
					if(IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(89,
							"A[IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lcq;
					}
				}
			}
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				switch(ByteCodePtr[-2])
				{
				case cDup:
					FP_TRACE_BYTECODE_OPTIMIZATION(317,
						"cDup cAdd x cMul",
						"[x+x] cMul",
						"    with x = " << x << "\n");
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Lda;
				case cMul:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(IsVarOpcode(A))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(386,
								"A[IsVarOpcode(A)] y cMul cAdd x cMul",
								"[x] cMul A [y*x] cMul cAdd",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Ldb;
						}
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(385,
						"y cAdd x cMul",
						"[x] cMul [y*x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Ldc;
				}
				break;
			case cMul:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cDup)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(319,
							"cDup cAdd cMul x cMul",
							"cMul [x+x] cMul",
							"    with x = " << x << "\n");
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Ldd;
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					if(y*x==Value_t(1))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(70,
							"y[y*x==Value_t(1)] cMul x cMul",
							"",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Lde;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(128,
						"y cMul x cMul",
						"[y*x] cMul",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Ldf;
				}
				break;
			case cNeg:
				FP_TRACE_BYTECODE_OPTIMIZATION(122,
					"cNeg x cMul",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Ldg;
			case cSub:
				if(ByteCodePtr[-2] == cMul)
				{
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(IsVarOpcode(A))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(387,
								"A[IsVarOpcode(A)] y cMul cSub x cMul",
								"[x] cMul A [y*x] cMul cSub",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Ldh;
						}
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(102,
					"y x cMul",
					"[y*x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldi;
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(55,
					"x[x==Value_t(1)] cMul",
					"",
					"    with x = " << x << "\n");
				goto Lap;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(124,
					"x[x==Value_t(-1)] cMul",
					"cNeg",
					"    with x = " << x << "\n");
				goto Ldj;
			}
			if(x==Value_t(2))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(198,
					"x[x==Value_t(2)] cMul",
					"cDup cAdd",
					"    with x = " << x << "\n");
				goto Ldk;
			}
			break;
		default: Default2:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					switch(ByteCodePtr[-2])
					{
					case cNeg:
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(470,
								"B[B==A] cNeg cMul A[IsVarOpcode(A)] cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lch;
						}
						goto Default4;
					default: Default4:;
						B = ByteCodePtr[-2];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(461,
								"B[B==A] cMul A[IsVarOpcode(A)] cMul",
								"B cSqr cMul",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Ldl;
						}
					}
					goto Default5;
				case cNeg:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(464,
							"B[B==A] cNeg A[IsVarOpcode(A)] cMul",
							"B cSqr cNeg",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lcg;
					}
					goto Default5;
				default: Default5:;
					B = ByteCodePtr[-1];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(458,
							"B[B==A] A[IsVarOpcode(A)] cMul",
							"B cSqr",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-1] = B; */ // redundant, matches B @ 2
						goto Lcf;
					}
				}
			}
			if(IsUnaryOpcode(A))
			{
				B = ByteCodePtr[-1];
				if(IsVarOpcode(B)&&mData->mByteCode.size()>1)
				{
					if(ByteCodePtr[-2] == cMul)
					{
						C = ByteCodePtr[-3];
						if(C==A)
						{
							D = ByteCodePtr[-4];
							if(D==B)
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(477,
									"D[D==B] C[C==A] cMul B[IsVarOpcode(B)&&mData->mByteCode.size()>1] A[IsUnaryOpcode(A)] cMul",
									"D C cSqr cMul",
									"    with A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << ", C = " << FP_TRACE_OPCODENAME(C)
									    << ", D = " << FP_TRACE_OPCODENAME(D)
									    << "\n");
								/* ByteCodePtr[-4] = D; */ // redundant, matches D @ 5
								/* ByteCodePtr[-3] = C; */ // redundant, matches C @ 4
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Ldm;
							}
						}
					}
				}
			}
		}
		goto Default0;
	TailCall_cNEqual:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				A = ByteCodePtr[-1];
				if(IsLogicalOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(422,
						"A[IsLogicalOpcode(A)] x[x==Value_t(1)] cNEqual",
						"A cNot",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					goto Lbi;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(116,
					"y x cNEqual",
					"[fp_nequal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldn;
			}
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(360,
						"cAbs x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Ldo;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(362,
						"cSqr x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Ldo;
				}
				FP_TRACE_BYTECODE_OPTIMIZATION(412,
					"x[x==Value_t(0)] cNEqual",
					"cNotNot",
					"    with x = " << x << "\n");
				goto Lbk;
			}
		}
		goto Default0;
	TailCall_cNeg:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNeg:
		switch(ByteCodePtr[0])
		{
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(123,
					"x cMul cNeg",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Ldp;
			}
			break;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(61,"cNeg cNeg", "", "");
			goto Lcb;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(100,
				"x cNeg",
				"[-x]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Ldq;
		}
		goto Default0;
	TailCall_cNot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNot:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(227,"cAbs cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Lea;
		case cAbsNot:
			A = ByteCodePtr[-1];
			if(IsLogicalOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(389,
					"A[IsLogicalOpcode(A)] cAbsNot cNot",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Lcb;
			}
			if(A!=cImmed)
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(390,
					"A[A!=cImmed] cAbsNot cNot",
					"A cAbsNotNot",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Leb;
			}
			goto Default6;
		case cAbsNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(231,"cAbsNotNot cNot", "cAbsNot", "");
			goto Lec;
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(424,
					"x cAdd cNot",
					"[-x] cEqual",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Led;
			}
			goto Default6;
		case cEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(220,"cEqual cNot", "cNEqual", "");
			goto Lee;
		case cGreater:
			FP_TRACE_BYTECODE_OPTIMIZATION(218,"cGreater cNot", "cLessOrEq", "");
			goto Lef;
		case cGreaterOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(219,"cGreaterOrEq cNot", "cLess", "");
			goto Leg;
		case cLess:
			FP_TRACE_BYTECODE_OPTIMIZATION(216,"cLess cNot", "cGreaterOrEq", "");
			goto Leh;
		case cLessOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(217,"cLessOrEq cNot", "cGreater", "");
			goto Lei;
		case cNEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(221,"cNEqual cNot", "cEqual", "");
			goto Lej;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(226,"cNeg cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Lea;
		case cNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(229,"cNot cNot", "cNotNot", "");
			goto Lbb;
		case cNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(230,"cNotNot cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Lea;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(107,
				"x cNot",
				"[fp_not(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lek;
		default: Default6:;
			A = ByteCodePtr[0];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(391,
					"A[IsNeverNegativeValueOpcode(A)] cNot",
					"A cAbsNot",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				goto Lel;
			}
		}
		goto Default0;
	TailCall_cNotNot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNotNot:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(423,
					"x cAdd cNotNot",
					"[-x] cNEqual",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Lem;
			}
			break;
		case cNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(232,"cNot cNotNot", "cNot", "");
			/* ByteCodePtr[0] = cNot; */ // redundant, matches cNot @ 1
			return;
		}
		goto Default0;
	TailCall_cOr:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cOr:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(223,"cDup cOr", "cNotNot", "");
			goto Lbb;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(118,
					"y x cOr",
					"[fp_or(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Len;
			}
			break;
		}
		goto Default0;
	TailCall_cRDiv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRDiv:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(268,
					"x[x==Value_t(1)] cRDiv",
					"cInv",
					"    with x = " << x << "\n");
				goto Leo;
			}
		}
		goto Default0;
	TailCall_cRSub:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRSub:
		if(ByteCodePtr[0] == cDup)
		{
			FP_TRACE_BYTECODE_OPTIMIZATION(77,"cDup cRSub", "[Value_t()] cMul", "");
			goto Lep;
		}
		goto Default0;
	TailCall_cSqr:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSqr:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(204,"cAbs cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Leq;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(203,"cNeg cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Leq;
		}
		goto Default0;
	TailCall_cSub:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSub:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(76,"cDup cSub", "[Value_t()] cMul", "");
			goto Lep;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(200,"cNeg cSub", "cAdd", "");
			goto Lfa;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(58,
					"x[x==Value_t()] cSub",
					"",
					"    with x = " << x << "\n");
				goto Lap;
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(106,
					"y x cSub",
					"[y-x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lfb;
			}
			FP_TRACE_BYTECODE_OPTIMIZATION(51,
				"x cSub",
				"[-x] cAdd",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lfc;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				if(ByteCodePtr[-1] == cRSub)
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(289,
							"x cRSub A[IsVarOpcode(A)] cSub",
							"A cAdd [x] cRSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Lfd;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(296,
						"cRSub A[IsVarOpcode(A)] cSub",
						"[DO_STACKPLUS1] A cSub cRSub",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Lfe;
				}
			}
		}
		goto Default0;
	default: Default0:;
		A = opcode;
		if(IsComparisonOpcode(A))
		{
			if(ByteCodePtr[0] == cImmed)
			{
				x = ImmedPtr[0];
				switch(ByteCodePtr[-1])
				{
				case cAdd:
					if(ByteCodePtr[-2] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(364,
							"y cAdd x A[IsComparisonOpcode(A)]",
							"[x-y] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
						goto Lff;
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(365,
						"cNeg x A[IsComparisonOpcode(A)]",
						"[-x] {OppositeComparisonOpcode(A)}",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", x = " << x
						    << "\n");
					goto Lfg;
				}
			}
		}
		if(IsVarOpcode(A)&&mData->mByteCode.size()>0)
		{
			B = ByteCodePtr[0];
			if(B==A)
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(475,
					"B[B==A] A[IsVarOpcode(A)&&mData->mByteCode.size()>0]",
					"B cDup",
					"    with A = " << FP_TRACE_OPCODENAME(A)
					    << ", B = " << FP_TRACE_OPCODENAME(B)
					    << "\n");
				/* ByteCodePtr[0] = B; */ // redundant, matches B @ 1
				goto Lfh;
			}
		}
		if(IsUnaryOpcode(A))
		{
			B = ByteCodePtr[0];
			if(IsVarOpcode(B)&&mData->mByteCode.size()>1)
			{
				C = ByteCodePtr[-1];
				if(C==A)
				{
					D = ByteCodePtr[-2];
					if(D==B)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(476,
							"D[D==B] C[C==A] B[IsVarOpcode(B)&&mData->mByteCode.size()>1] A[IsUnaryOpcode(A)]",
							"D C cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", C = " << FP_TRACE_OPCODENAME(C)
							    << ", D = " << FP_TRACE_OPCODENAME(D)
							    << "\n");
						/* ByteCodePtr[-2] = D; */ // redundant, matches D @ 3
						/* ByteCodePtr[-1] = C; */ // redundant, matches C @ 2
						goto Lfi;
					}
				}
			}
		}
	}
	goto Laa;
Laa: mData->mByteCode.push_back(opcode); return;
Lab: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     FP_TRACE_BYTECODE_ADD(cAbs);
     goto TailCall_cAbs;
Lac: ImmedPtr[0] = fp_abs(x); return;
Lad: mData->mImmed.push_back(Value_t(4));
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
Lfj: opcode = cMul;
Lfk: FP_ReDefinePointers();
Lfl: FP_TRACE_BYTECODE_ADD(cMul);
     goto TailCall_cMul;
Lae: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(Value_t(4));
     mData->mByteCode.push_back(cImmed); goto Lfj;
Laf: ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
Lbo: opcode = cMul; goto Lfl;
Lag: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSub;
Lfm: FP_TRACE_BYTECODE_ADD(cSub);
     goto TailCall_cSub;
Lah: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lfn: FP_ReDefinePointers();
Lfo: FP_TRACE_BYTECODE_ADD(cAdd);
     goto TailCall_cAdd;
Lai: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Lfp: AddFunctionOpcode(cAdd);
Lfq: opcode = cRSub;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cRSub);
     goto TailCall_cRSub;
Laj: ImmedPtr[0] = -x;
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lfp;
Lak: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lfq;
Lal: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lga: AddFunctionOpcode(cAdd);
Lgb: AddFunctionOpcode(B);
Lgc: opcode = cSub;
     FP_ReDefinePointers(); goto Lfm;
Lam: ImmedPtr[0] = -x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lga;
Lan: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lgb;
Lao: ImmedPtr[-1] = y+x;
Lap: mData->mImmed.pop_back();
Lcb: mData->mByteCode.pop_back(); return;
Laq: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lfp;
Lba: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lfp;
Lbb: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cNotNot;
Lgd: FP_TRACE_BYTECODE_ADD(cNotNot);
     goto TailCall_cNotNot;
Lbc: ImmedPtr[-1] = fp_and(x,y); goto Lap;
Lbd: mData->mImmed.push_back(Value_t());
     ByteCodePtr[0] = cImmed;
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(Value_t(1));
Lge: mData->mByteCode.push_back(cImmed);
Lgf: opcode = cAdd; goto Lfn;
Lbe: ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     FP_TRACE_BYTECODE_ADD(cDiv);
     goto TailCall_cDiv;
Lbf: ImmedPtr[-1] = y/x; goto Lap;
Lbg: ImmedPtr[-1] = fp_equal(y,x); goto Lap;
Lbh: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lgg: FP_TRACE_BYTECODE_ADD(cEqual);
     goto TailCall_cEqual;
Lbi: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
Lgh: opcode = cNot;
     FP_ReDefinePointers();
Lgi: FP_TRACE_BYTECODE_ADD(cNot);
     goto TailCall_cNot;
Lbj: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lgj: opcode = cNotNot;
     FP_ReDefinePointers(); goto Lgd;
Lbk: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lgj;
Lbl: ImmedPtr[-1] = fp_less(x,y); goto Lap;
Lbm: ImmedPtr[-1] = fp_lessOrEq(x,y); goto Lap;
Lbn: ImmedPtr[0] = Value_t(1)/x; return;
Lbp: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lgh;
Lbq: ImmedPtr[-1] = fp_less(y,x); goto Lap;
Lca: ImmedPtr[-1] = fp_lessOrEq(y,x); goto Lap;
Lcc: ImmedPtr[-1] = fp_max(x,y); goto Lap;
Lcd: ImmedPtr[-1] = fp_min(x,y); goto Lap;
Lce: ImmedPtr[-1] = fp_mod(y,x); goto Lap;
Lcf: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSqr;
Lgk: FP_TRACE_BYTECODE_ADD(cSqr);
     goto TailCall_cSqr;
Lcg: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr);
Lgl: opcode = cNeg;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cNeg);
     goto TailCall_cNeg;
Lch: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr);
     AddFunctionOpcode(cMul); goto Lgl;
Lci: ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cPow); return;
Lcj: ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2; goto Lfl;
Lck: ImmedPtr[-1] = x;
Lgm: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lfk;
Lcl: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
Lgn: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lgo: AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
Lgp: mData->mByteCode.push_back(cImmed); goto Lfk;
Lcm: mData->mImmed.pop_back(); goto Lgn;
Lcn: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(B); goto Lgo;
Lco: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lgo;
Lcp: ByteCodePtr[-1] = cImmed; goto Lcb;
Lcq: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lfl;
Lda: ImmedPtr[0] = x+x; goto Lcj;
Ldb: ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     mData->mImmed.push_back(y*x);
     mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cMul); goto Lgf;
Ldc: ImmedPtr[-1] = x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(y*x); goto Lge;
Ldd: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(x+x); goto Lgp;
Lde: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} return;
Ldf: ImmedPtr[-1] = y*x; goto Lgm;
Ldg: ImmedPtr[0] = -x; goto Lcq;
Ldh: ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     mData->mImmed.push_back(y*x);
     mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cMul); goto Lgc;
Ldi: ImmedPtr[-1] = y*x; goto Lap;
Ldj: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lgl;
Ldk: ByteCodePtr[0] = cDup;
     ImmedPtr -= 1;
     mData->mImmed.pop_back();
Lgq: opcode = cAdd; goto Lfo;
Ldl: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lha: AddFunctionOpcode(cSqr); goto Lfk;
Ldm: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lha;
Ldn: ImmedPtr[-1] = fp_nequal(y,x); goto Lap;
Ldo: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lhb: FP_TRACE_BYTECODE_ADD(cNEqual);
     goto TailCall_cNEqual;
Ldp: ImmedPtr[0] = -x;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lbo;
Ldq: ImmedPtr[0] = -x; return;
Lea: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lgi;
Leb: mData->mByteCode.pop_back();
     AddFunctionOpcode(cAbsNotNot); return;
Lec: mData->mByteCode.pop_back();
Lel: AddFunctionOpcode(cAbsNot); return;
Led: ImmedPtr[0] = -x;
Lej: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cEqual; goto Lgg;
Lee: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cNEqual; goto Lhb;
Lef: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cLessOrEq;
     FP_TRACE_BYTECODE_ADD(cLessOrEq);
     goto TailCall_cLessOrEq;
Leg: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cLess;
     FP_TRACE_BYTECODE_ADD(cLess);
     goto TailCall_cLess;
Leh: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cGreaterOrEq;
     FP_TRACE_BYTECODE_ADD(cGreaterOrEq);
     goto TailCall_cGreaterOrEq;
Lei: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cGreater;
     FP_TRACE_BYTECODE_ADD(cGreater);
     goto TailCall_cGreater;
Lek: ImmedPtr[0] = fp_not(x); return;
Lem: ImmedPtr[0] = -x; goto Lee;
Len: ImmedPtr[-1] = fp_or(x,y); goto Lap;
Leo: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     opcode = cInv;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cInv);
     goto TailCall_cInv;
Lep: mData->mImmed.push_back(Value_t());
     ByteCodePtr[0] = cImmed; goto Lfj;
Leq: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lgk;
Lfa: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lgq;
Lfb: ImmedPtr[-1] = y-x; goto Lap;
Lfc: ImmedPtr[0] = -x; goto Lgq;
Lfd: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cAdd);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lfq;
Lfe: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cSub); goto Lfq;
Lff: ImmedPtr[-1] = x-y;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); return;
Lfg: ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     AddFunctionOpcode(OppositeComparisonOpcode(A)); return;
Lfh: mData->mByteCode.push_back(cDup); return;
Lfi: ByteCodePtr[0] = cDup; return;
return;
// This list of dummy gotos is here to inhibit
// compiler warnings on unused labels
goto TailCall_cAnd;goto TailCall_cMax;goto TailCall_cMin;
goto TailCall_cMod;goto TailCall_cNeg;goto TailCall_cOr;
goto TailCall_cRDiv;goto TailCall_cSub;
#endif

#if((FP_COMPLEX_VERSION) && !(FP_FLOAT_VERSION))
	Value_t x;
	Value_t y;
	unsigned B;
	unsigned A;
	unsigned C;
	unsigned D;
	switch(opcode)
	{
	TailCall_cAbs:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAbs:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(201,"cNeg cAbs", "cAbs", "");
			/* opcode = cAbs; */ // redundant, matches cAbs @ 0
			goto Lab;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(132,
				"x cAbs",
				"[fp_abs(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lac;
		}
		goto Default0;
	TailCall_cAdd:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAdd:
		switch(ByteCodePtr[0])
		{
		case cDup:
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(310,"cDup cAdd cDup cAdd", "[Value_t(4)] cMul", "");
					goto Lad;
				}
				break;
			case cMul:
				if(ByteCodePtr[-2] == cAdd)
				{
					if(ByteCodePtr[-3] == cDup)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(311,"cDup cAdd cMul cDup cAdd", "cMul [Value_t(4)] cMul", "");
						goto Lae;
					}
				}
				break;
			}
			goto Default1;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(313,
						"cDup x cMul cAdd",
						"[x+Value_t(1)] cMul",
						"    with x = " << x << "\n");
					goto Laf;
				}
			}
			goto Default1;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(199,"cNeg cAdd", "cSub", "");
			goto Lag;
		case cImmed:
			x = ImmedPtr[0];
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(127,
						"y cAdd x cAdd",
						"[y+x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cAdd; */ // redundant, matches cAdd @ 0
					goto Lah;
				}
				break;
			case cRSub:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(298,
							"y cAdd cRSub x cAdd",
							"[ y+x] cAdd cRSub",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lai;
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(299,
						"cNeg cRSub x cAdd",
						"[-x] cAdd cRSub",
						"    with x = " << x << "\n");
					goto Laj;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(297,
						"y cRSub x cAdd",
						"[ y+x] cRSub",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lak;
				}
				break;
			case cSub:
				B = ByteCodePtr[-2];
				if(IsVarOpcode(B))
				{
					switch(ByteCodePtr[-3])
					{
					case cAdd:
						if(ByteCodePtr[-4] == cImmed)
						{
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(292,
								"y cAdd B[IsVarOpcode(B)] cSub x cAdd",
								"[ y+x] cAdd B cSub",
								"    with x = " << x
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-4] = cImmed; */ // redundant, matches y @ 5
							goto Lal;
						}
						break;
					case cNeg:
						FP_TRACE_BYTECODE_OPTIMIZATION(293,
							"cNeg B[IsVarOpcode(B)] cSub x cAdd",
							"[-x] cAdd B cSub",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						goto Lam;
					case cImmed:
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(291,
							"y B[IsVarOpcode(B)] cSub x cAdd",
							"[ y+x] B cSub",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lan;
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(105,
					"y x cAdd",
					"[y+x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lao;
			}
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(57,
					"x[x==Value_t()] cAdd",
					"",
					"    with x = " << x << "\n");
				goto Lap;
			}
			break;
		default: Default1:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				if(ByteCodePtr[-1] == cRSub)
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(290,
							"x cRSub A[IsVarOpcode(A)] cAdd",
							"[DO_STACKPLUS1] A [x] cAdd cRSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						incStackPtr();
						--mStackPtr;
						goto Laq;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(295,
						"cRSub A[IsVarOpcode(A)] cAdd",
						"[DO_STACKPLUS1] A cAdd cRSub",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Lba;
				}
			}
		}
		goto Default0;
	TailCall_cAnd:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAnd:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(224,"cDup cAnd", "cNotNot", "");
			goto Lbb;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(117,
					"y x cAnd",
					"[fp_and(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbc;
			}
			break;
		}
		goto Default0;
	TailCall_cConj:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cConj:
		switch(ByteCodePtr[0])
		{
		case cConj:
			FP_TRACE_BYTECODE_OPTIMIZATION(63,"cConj cConj", "", "");
			goto Lbd;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(193,
				"x cConj",
				"[fp_conj(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbe;
		}
		goto Default0;
	TailCall_cDiv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cDiv:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(78,"cDup cDiv", "[Value_t()] cMul [Value_t(1)] cAdd", "");
			goto Lbf;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(125,
						"cNeg x[x!=Value_t()] cDiv",
						"[-x] cDiv",
						"    with x = " << x << "\n");
					/* opcode = cDiv; */ // redundant, matches cDiv @ 0
					goto Lbg;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(103,
						"y x[x!=Value_t()] cDiv",
						"[y/x]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Lbh;
				}
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(56,
					"x[x==Value_t(1)] cDiv",
					"",
					"    with x = " << x << "\n");
				goto Lap;
			}
			break;
		}
		goto Default0;
	TailCall_cEqual:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				A = ByteCodePtr[-1];
				if(IsLogicalOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(421,
						"A[IsLogicalOpcode(A)] x[x==Value_t(1)] cEqual",
						"A",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					goto Lap;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(115,
					"y x cEqual",
					"[fp_equal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbi;
			}
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(359,
						"cAbs x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Lbj;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(361,
						"cSqr x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Lbj;
				}
				FP_TRACE_BYTECODE_OPTIMIZATION(411,
					"x[x==Value_t(0)] cEqual",
					"cNot",
					"    with x = " << x << "\n");
				goto Lbk;
			}
		}
		goto Default0;
	TailCall_cGreater:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cGreater:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(113,
					"y x cGreater",
					"[fp_less(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbl;
			}
		}
		goto Default0;
	TailCall_cGreaterOrEq:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cGreaterOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(114,
					"y x cGreaterOrEq",
					"[fp_lessOrEq(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbm;
			}
		}
		goto Default0;
	TailCall_cImag:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cImag:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(81,"cAbs cImag", "[Value_t()] cMul", "");
			goto Lbn;
		case cReal:
			FP_TRACE_BYTECODE_OPTIMIZATION(80,"cReal cImag", "[Value_t()] cMul", "");
			goto Lbn;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(192,
				"x cImag",
				"[fp_imag(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbo;
		}
		goto Default0;
	TailCall_cInv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cInv:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(101,
					"x[x!=Value_t()] cInv",
					"[Value_t(1)/x]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lbp;
			}
		}
		goto Default0;
	TailCall_cLess:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLess:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				A = ByteCodePtr[-1];
				if(IsNeverNegativeValueOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(301,
						"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(0)] cLess",
						"A [x] cMul",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
					goto Lbq;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(111,
					"y x cLess",
					"[fp_less(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lca;
			}
		}
		goto Default0;
	TailCall_cLessOrEq:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLessOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(112,
					"y x cLessOrEq",
					"[fp_lessOrEq(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lcb;
			}
		}
		goto Default0;
	TailCall_cMax:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMax:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(60,"cDup cMax", "", "");
			goto Lbd;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(141,
					"y x cMax",
					"[fp_max(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lcc;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(66,
							"B[B==A] cDup A[IsVarOpcode(A)] cMax",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Lbd;
					}
					break;
				case cMax:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(68,
							"B[B==A] cMax A[IsVarOpcode(A)] cMax",
							"B cMax",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMax; */ // redundant, matches cMax @ 2
						goto Lbd;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cMin:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMin:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(59,"cDup cMin", "", "");
			goto Lbd;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(140,
					"y x cMin",
					"[fp_min(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lcd;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(65,
							"B[B==A] cDup A[IsVarOpcode(A)] cMin",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Lbd;
					}
					break;
				case cMin:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(67,
							"B[B==A] cMin A[IsVarOpcode(A)] cMin",
							"B cMin",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMin; */ // redundant, matches cMin @ 2
						goto Lbd;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cMod:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMod:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				if(ByteCodePtr[-1] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(104,
						"y x[x!=Value_t()] cMod",
						"[fp_mod(y,x)]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Lce;
				}
			}
		}
		goto Default0;
	TailCall_cMul:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMul:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(202,"cDup cMul", "cSqr", "");
			goto Lcf;
		case cNeg:
			switch(ByteCodePtr[-1])
			{
			case cDup:
				FP_TRACE_BYTECODE_OPTIMIZATION(467,"cDup cNeg cMul", "cSqr cNeg", "");
				goto Lcg;
			default:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cMul)
					{
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(473,
								"B[B==A] cMul A[IsVarOpcode(A)] cNeg cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lch;
						}
					}
				}
			}
			goto Default2;
		case cPow:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(314,
						"cDup x cPow cMul",
						"[x+Value_t(1)] cPow",
						"    with x = " << x << "\n");
					goto Lci;
				}
			}
			goto Default2;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(93,
							"A[IsVarOpcode(A)] cMul x[x==Value_t()] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lcj;
					}
					goto Default3;
				default: Default3:;
					A = ByteCodePtr[-1];
					if(IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						switch(ByteCodePtr[-2])
						{
						case cImmed:
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(92,
								"y A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
								"[x] cMul",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lck;
						default:
							B = ByteCodePtr[-2];
							if(IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								switch(ByteCodePtr[-3])
								{
								case cImmed:
									y = ImmedPtr[-1];
									FP_TRACE_BYTECODE_OPTIMIZATION(96,
										"y B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
										"A [x] cMul",
										"    with x = " << x
										    << ", A = " << FP_TRACE_OPCODENAME(A)
										    << ", B = " << FP_TRACE_OPCODENAME(B)
										    << ", y = " << y
										    << "\n");
									/* opcode = cMul; */ // redundant, matches cMul @ 0
									goto Lcl;
								default:
									C = ByteCodePtr[-3];
									if(IsVarOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(94,
											"C[IsVarOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
											"A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lcm;
									}
									if(IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(95,
											"C[IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
											"B A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lcn;
									}
								}
							}
							if(IsVarOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(90,
									"B[IsVarOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
									"[x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lcj;
							}
							if(IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(91,
									"B[IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
									"A [x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lco;
							}
						}
					}
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(88,
							"A[IsVarOpcode(A)] x[x==Value_t()] cMul",
							"[x]",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						goto Lcp;
					}
					if(IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(89,
							"A[IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lcq;
					}
				}
			}
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				switch(ByteCodePtr[-2])
				{
				case cDup:
					FP_TRACE_BYTECODE_OPTIMIZATION(317,
						"cDup cAdd x cMul",
						"[x+x] cMul",
						"    with x = " << x << "\n");
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Lda;
				case cMul:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(IsVarOpcode(A))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(386,
								"A[IsVarOpcode(A)] y cMul cAdd x cMul",
								"[x] cMul A [y*x] cMul cAdd",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Ldb;
						}
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(385,
						"y cAdd x cMul",
						"[x] cMul [y*x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Ldc;
				}
				break;
			case cMul:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cDup)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(319,
							"cDup cAdd cMul x cMul",
							"cMul [x+x] cMul",
							"    with x = " << x << "\n");
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Ldd;
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					if(y*x==Value_t(1))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(70,
							"y[y*x==Value_t(1)] cMul x cMul",
							"",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Lde;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(128,
						"y cMul x cMul",
						"[y*x] cMul",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Ldf;
				}
				break;
			case cNeg:
				FP_TRACE_BYTECODE_OPTIMIZATION(122,
					"cNeg x cMul",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Ldg;
			case cSub:
				if(ByteCodePtr[-2] == cMul)
				{
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(IsVarOpcode(A))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(387,
								"A[IsVarOpcode(A)] y cMul cSub x cMul",
								"[x] cMul A [y*x] cMul cSub",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Ldh;
						}
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(102,
					"y x cMul",
					"[y*x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldi;
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(55,
					"x[x==Value_t(1)] cMul",
					"",
					"    with x = " << x << "\n");
				goto Lap;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(124,
					"x[x==Value_t(-1)] cMul",
					"cNeg",
					"    with x = " << x << "\n");
				goto Ldj;
			}
			if(x==Value_t(2))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(198,
					"x[x==Value_t(2)] cMul",
					"cDup cAdd",
					"    with x = " << x << "\n");
				goto Ldk;
			}
			break;
		default: Default2:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					switch(ByteCodePtr[-2])
					{
					case cNeg:
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(470,
								"B[B==A] cNeg cMul A[IsVarOpcode(A)] cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lch;
						}
						goto Default4;
					default: Default4:;
						B = ByteCodePtr[-2];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(461,
								"B[B==A] cMul A[IsVarOpcode(A)] cMul",
								"B cSqr cMul",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Ldl;
						}
					}
					goto Default5;
				case cNeg:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(464,
							"B[B==A] cNeg A[IsVarOpcode(A)] cMul",
							"B cSqr cNeg",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lcg;
					}
					goto Default5;
				default: Default5:;
					B = ByteCodePtr[-1];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(458,
							"B[B==A] A[IsVarOpcode(A)] cMul",
							"B cSqr",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-1] = B; */ // redundant, matches B @ 2
						goto Lcf;
					}
				}
			}
			if(IsUnaryOpcode(A))
			{
				B = ByteCodePtr[-1];
				if(IsVarOpcode(B)&&mData->mByteCode.size()>1)
				{
					if(ByteCodePtr[-2] == cMul)
					{
						C = ByteCodePtr[-3];
						if(C==A)
						{
							D = ByteCodePtr[-4];
							if(D==B)
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(477,
									"D[D==B] C[C==A] cMul B[IsVarOpcode(B)&&mData->mByteCode.size()>1] A[IsUnaryOpcode(A)] cMul",
									"D C cSqr cMul",
									"    with A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << ", C = " << FP_TRACE_OPCODENAME(C)
									    << ", D = " << FP_TRACE_OPCODENAME(D)
									    << "\n");
								/* ByteCodePtr[-4] = D; */ // redundant, matches D @ 5
								/* ByteCodePtr[-3] = C; */ // redundant, matches C @ 4
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Ldm;
							}
						}
					}
				}
			}
		}
		goto Default0;
	TailCall_cNEqual:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				A = ByteCodePtr[-1];
				if(IsLogicalOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(422,
						"A[IsLogicalOpcode(A)] x[x==Value_t(1)] cNEqual",
						"A cNot",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					goto Lbk;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(116,
					"y x cNEqual",
					"[fp_nequal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldn;
			}
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(360,
						"cAbs x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Ldo;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(362,
						"cSqr x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Ldo;
				}
				FP_TRACE_BYTECODE_OPTIMIZATION(412,
					"x[x==Value_t(0)] cNEqual",
					"cNotNot",
					"    with x = " << x << "\n");
				goto Ldp;
			}
		}
		goto Default0;
	TailCall_cNeg:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNeg:
		switch(ByteCodePtr[0])
		{
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(123,
					"x cMul cNeg",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Ldq;
			}
			break;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(61,"cNeg cNeg", "", "");
			goto Lbd;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(100,
				"x cNeg",
				"[-x]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lea;
		}
		goto Default0;
	TailCall_cNot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNot:
		switch(ByteCodePtr[0])
		{
		case cAbsNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(231,"cAbsNotNot cNot", "cAbsNot", "");
			goto Leb;
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(424,
					"x cAdd cNot",
					"[-x] cEqual",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Lec;
			}
			break;
		case cEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(220,"cEqual cNot", "cNEqual", "");
			goto Led;
		case cGreater:
			FP_TRACE_BYTECODE_OPTIMIZATION(218,"cGreater cNot", "cLessOrEq", "");
			goto Lee;
		case cGreaterOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(219,"cGreaterOrEq cNot", "cLess", "");
			goto Lef;
		case cLess:
			FP_TRACE_BYTECODE_OPTIMIZATION(216,"cLess cNot", "cGreaterOrEq", "");
			goto Leg;
		case cLessOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(217,"cLessOrEq cNot", "cGreater", "");
			goto Leh;
		case cNEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(221,"cNEqual cNot", "cEqual", "");
			goto Lei;
		case cNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(229,"cNot cNot", "cNotNot", "");
			goto Lbb;
		case cNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(230,"cNotNot cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Lej;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(107,
				"x cNot",
				"[fp_not(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lek;
		}
		goto Default0;
	TailCall_cNotNot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNotNot:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(423,
					"x cAdd cNotNot",
					"[-x] cNEqual",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Lel;
			}
			break;
		case cNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(232,"cNot cNotNot", "cNot", "");
			/* ByteCodePtr[0] = cNot; */ // redundant, matches cNot @ 1
			return;
		}
		goto Default0;
	TailCall_cOr:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cOr:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(223,"cDup cOr", "cNotNot", "");
			goto Lbb;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(118,
					"y x cOr",
					"[fp_or(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lem;
			}
			break;
		}
		goto Default0;
	TailCall_cRDiv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRDiv:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(268,
					"x[x==Value_t(1)] cRDiv",
					"cInv",
					"    with x = " << x << "\n");
				goto Len;
			}
		}
		goto Default0;
	TailCall_cRSub:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRSub:
		if(ByteCodePtr[0] == cDup)
		{
			FP_TRACE_BYTECODE_OPTIMIZATION(77,"cDup cRSub", "[Value_t()] cMul", "");
			goto Lbn;
		}
		goto Default0;
	TailCall_cReal:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cReal:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(191,
				"x cReal",
				"[fp_real(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Leo;
		}
		goto Default0;
	TailCall_cSqr:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSqr:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(204,"cAbs cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Lep;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(203,"cNeg cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Lep;
		}
		goto Default0;
	TailCall_cSub:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSub:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(76,"cDup cSub", "[Value_t()] cMul", "");
			goto Lbn;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(200,"cNeg cSub", "cAdd", "");
			goto Leq;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(58,
					"x[x==Value_t()] cSub",
					"",
					"    with x = " << x << "\n");
				goto Lap;
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(106,
					"y x cSub",
					"[y-x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lfa;
			}
			FP_TRACE_BYTECODE_OPTIMIZATION(51,
				"x cSub",
				"[-x] cAdd",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lfb;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				if(ByteCodePtr[-1] == cRSub)
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(289,
							"x cRSub A[IsVarOpcode(A)] cSub",
							"A cAdd [x] cRSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Lfc;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(296,
						"cRSub A[IsVarOpcode(A)] cSub",
						"[DO_STACKPLUS1] A cSub cRSub",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Lfd;
				}
			}
		}
		goto Default0;
	default: Default0:;
		A = opcode;
		if(IsVarOpcode(A)&&mData->mByteCode.size()>0)
		{
			B = ByteCodePtr[0];
			if(B==A)
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(475,
					"B[B==A] A[IsVarOpcode(A)&&mData->mByteCode.size()>0]",
					"B cDup",
					"    with A = " << FP_TRACE_OPCODENAME(A)
					    << ", B = " << FP_TRACE_OPCODENAME(B)
					    << "\n");
				/* ByteCodePtr[0] = B; */ // redundant, matches B @ 1
				goto Lfe;
			}
		}
		if(IsUnaryOpcode(A))
		{
			B = ByteCodePtr[0];
			if(IsVarOpcode(B)&&mData->mByteCode.size()>1)
			{
				C = ByteCodePtr[-1];
				if(C==A)
				{
					D = ByteCodePtr[-2];
					if(D==B)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(476,
							"D[D==B] C[C==A] B[IsVarOpcode(B)&&mData->mByteCode.size()>1] A[IsUnaryOpcode(A)]",
							"D C cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", C = " << FP_TRACE_OPCODENAME(C)
							    << ", D = " << FP_TRACE_OPCODENAME(D)
							    << "\n");
						/* ByteCodePtr[-2] = D; */ // redundant, matches D @ 3
						/* ByteCodePtr[-1] = C; */ // redundant, matches C @ 2
						goto Lff;
					}
				}
			}
		}
	}
	goto Laa;
Laa: mData->mByteCode.push_back(opcode); return;
Lab: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     FP_TRACE_BYTECODE_ADD(cAbs);
     goto TailCall_cAbs;
Lac: ImmedPtr[0] = fp_abs(x); return;
Lad: mData->mImmed.push_back(Value_t(4));
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
Lfg: opcode = cMul;
Lfh: FP_ReDefinePointers();
Lfi: FP_TRACE_BYTECODE_ADD(cMul);
     goto TailCall_cMul;
Lae: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(Value_t(4));
     mData->mByteCode.push_back(cImmed); goto Lfg;
Laf: ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
Lbq: opcode = cMul; goto Lfi;
Lag: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSub;
Lfj: FP_TRACE_BYTECODE_ADD(cSub);
     goto TailCall_cSub;
Lah: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lfk: FP_ReDefinePointers();
Lfl: FP_TRACE_BYTECODE_ADD(cAdd);
     goto TailCall_cAdd;
Lai: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Lfm: AddFunctionOpcode(cAdd);
Lfn: opcode = cRSub;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cRSub);
     goto TailCall_cRSub;
Laj: ImmedPtr[0] = -x;
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lfm;
Lak: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lfn;
Lal: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lfo: AddFunctionOpcode(cAdd);
Lfp: AddFunctionOpcode(B);
Lfq: opcode = cSub;
     FP_ReDefinePointers(); goto Lfj;
Lam: ImmedPtr[0] = -x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lfo;
Lan: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lfp;
Lao: ImmedPtr[-1] = y+x;
Lap: mData->mImmed.pop_back();
Lbd: mData->mByteCode.pop_back(); return;
Laq: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lfm;
Lba: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lfm;
Lbb: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cNotNot;
Lga: FP_TRACE_BYTECODE_ADD(cNotNot);
     goto TailCall_cNotNot;
Lbc: ImmedPtr[-1] = fp_and(x,y); goto Lap;
Lbe: ImmedPtr[0] = fp_conj(x); return;
Lbf: mData->mImmed.push_back(Value_t());
     ByteCodePtr[0] = cImmed;
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(Value_t(1));
Lgb: mData->mByteCode.push_back(cImmed);
Lgc: opcode = cAdd; goto Lfk;
Lbg: ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     FP_TRACE_BYTECODE_ADD(cDiv);
     goto TailCall_cDiv;
Lbh: ImmedPtr[-1] = y/x; goto Lap;
Lbi: ImmedPtr[-1] = fp_equal(y,x); goto Lap;
Lbj: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lgd: FP_TRACE_BYTECODE_ADD(cEqual);
     goto TailCall_cEqual;
Lbk: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     opcode = cNot;
     FP_ReDefinePointers();
Lge: FP_TRACE_BYTECODE_ADD(cNot);
     goto TailCall_cNot;
Lbl: ImmedPtr[-1] = fp_less(x,y); goto Lap;
Lbm: ImmedPtr[-1] = fp_lessOrEq(x,y); goto Lap;
Lbn: mData->mImmed.push_back(Value_t());
     ByteCodePtr[0] = cImmed; goto Lfg;
Lbo: ImmedPtr[0] = fp_imag(x); return;
Lbp: ImmedPtr[0] = Value_t(1)/x; return;
Lca: ImmedPtr[-1] = fp_less(y,x); goto Lap;
Lcb: ImmedPtr[-1] = fp_lessOrEq(y,x); goto Lap;
Lcc: ImmedPtr[-1] = fp_max(x,y); goto Lap;
Lcd: ImmedPtr[-1] = fp_min(x,y); goto Lap;
Lce: ImmedPtr[-1] = fp_mod(y,x); goto Lap;
Lcf: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSqr;
Lgf: FP_TRACE_BYTECODE_ADD(cSqr);
     goto TailCall_cSqr;
Lcg: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr);
Lgg: opcode = cNeg;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cNeg);
     goto TailCall_cNeg;
Lch: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr);
     AddFunctionOpcode(cMul); goto Lgg;
Lci: ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cPow); return;
Lcj: ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2; goto Lfi;
Lck: ImmedPtr[-1] = x;
Lgh: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lfh;
Lcl: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
Lgi: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lgj: AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
Lgk: mData->mByteCode.push_back(cImmed); goto Lfh;
Lcm: mData->mImmed.pop_back(); goto Lgi;
Lcn: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(B); goto Lgj;
Lco: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lgj;
Lcp: ByteCodePtr[-1] = cImmed; goto Lbd;
Lcq: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lfi;
Lda: ImmedPtr[0] = x+x; goto Lcj;
Ldb: ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     mData->mImmed.push_back(y*x);
     mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cMul); goto Lgc;
Ldc: ImmedPtr[-1] = x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(y*x); goto Lgb;
Ldd: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(x+x); goto Lgk;
Lde: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} return;
Ldf: ImmedPtr[-1] = y*x; goto Lgh;
Ldg: ImmedPtr[0] = -x; goto Lcq;
Ldh: ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     mData->mImmed.push_back(y*x);
     mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cMul); goto Lfq;
Ldi: ImmedPtr[-1] = y*x; goto Lap;
Ldj: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lgg;
Ldk: ByteCodePtr[0] = cDup;
     ImmedPtr -= 1;
     mData->mImmed.pop_back();
Lgl: opcode = cAdd; goto Lfl;
Ldl: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lgm: AddFunctionOpcode(cSqr); goto Lfh;
Ldm: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lgm;
Ldn: ImmedPtr[-1] = fp_nequal(y,x); goto Lap;
Ldo: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lgn: FP_TRACE_BYTECODE_ADD(cNEqual);
     goto TailCall_cNEqual;
Ldp: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     opcode = cNotNot;
     FP_ReDefinePointers(); goto Lga;
Ldq: ImmedPtr[0] = -x;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lbq;
Lea: ImmedPtr[0] = -x; return;
Leb: mData->mByteCode.pop_back();
     AddFunctionOpcode(cAbsNot); return;
Lec: ImmedPtr[0] = -x;
Lei: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cEqual; goto Lgd;
Led: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cNEqual; goto Lgn;
Lee: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cLessOrEq;
     FP_TRACE_BYTECODE_ADD(cLessOrEq);
     goto TailCall_cLessOrEq;
Lef: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cLess;
     FP_TRACE_BYTECODE_ADD(cLess);
     goto TailCall_cLess;
Leg: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cGreaterOrEq;
     FP_TRACE_BYTECODE_ADD(cGreaterOrEq);
     goto TailCall_cGreaterOrEq;
Leh: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cGreater;
     FP_TRACE_BYTECODE_ADD(cGreater);
     goto TailCall_cGreater;
Lej: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lge;
Lek: ImmedPtr[0] = fp_not(x); return;
Lel: ImmedPtr[0] = -x; goto Led;
Lem: ImmedPtr[-1] = fp_or(x,y); goto Lap;
Len: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     opcode = cInv;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cInv);
     goto TailCall_cInv;
Leo: ImmedPtr[0] = fp_real(x); return;
Lep: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lgf;
Leq: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lgl;
Lfa: ImmedPtr[-1] = y-x; goto Lap;
Lfb: ImmedPtr[0] = -x; goto Lgl;
Lfc: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cAdd);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lfn;
Lfd: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cSub); goto Lfn;
Lfe: mData->mByteCode.push_back(cDup); return;
Lff: ByteCodePtr[0] = cDup; return;
return;
// This list of dummy gotos is here to inhibit
// compiler warnings on unused labels
goto TailCall_cAnd;goto TailCall_cConj;goto TailCall_cImag;
goto TailCall_cMax;goto TailCall_cMin;goto TailCall_cMod;
goto TailCall_cNeg;goto TailCall_cOr;goto TailCall_cRDiv;
goto TailCall_cReal;goto TailCall_cSub;
#endif

#if((FP_FLOAT_VERSION) && !(FP_COMPLEX_VERSION))
	Value_t x;
	unsigned A;
	Value_t y;
	unsigned B;
	unsigned C;
	unsigned D;
	switch(opcode)
	{
	TailCall_cAbs:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAbs:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(201,"cNeg cAbs", "cAbs", "");
			/* opcode = cAbs; */ // redundant, matches cAbs @ 0
			goto Lab;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(132,
				"x cAbs",
				"[fp_abs(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lac;
		default:
			A = ByteCodePtr[0];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(393,
					"A[IsNeverNegativeValueOpcode(A)] cAbs",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cAcos:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAcos:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(fp_abs(x)<=Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(148,
					"x[fp_abs(x)<=Value_t(1)] cAcos",
					"[fp_acos(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lad;
			}
		}
		goto Default0;
	TailCall_cAcosh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAcosh:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x>=Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(145,
					"x[x>=Value_t(1)] cAcosh",
					"[fp_acosh(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lae;
			}
		}
		goto Default0;
	TailCall_cAdd:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAdd:
		switch(ByteCodePtr[0])
		{
		case cDup:
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(310,"cDup cAdd cDup cAdd", "[Value_t(4)] cMul", "");
					goto Laf;
				}
				break;
			case cMul:
				if(ByteCodePtr[-2] == cAdd)
				{
					if(ByteCodePtr[-3] == cDup)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(311,"cDup cAdd cMul cDup cAdd", "cMul [Value_t(4)] cMul", "");
						goto Lag;
					}
				}
				break;
			}
			goto Default1;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(313,
						"cDup x cMul cAdd",
						"[x+Value_t(1)] cMul",
						"    with x = " << x << "\n");
					goto Lah;
				}
			}
			goto Default1;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(199,"cNeg cAdd", "cSub", "");
			goto Lai;
		case cImmed:
			x = ImmedPtr[0];
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(127,
						"y cAdd x cAdd",
						"[y+x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cAdd; */ // redundant, matches cAdd @ 0
					goto Laj;
				}
				break;
			case cRSub:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(298,
							"y cAdd cRSub x cAdd",
							"[ y+x] cAdd cRSub",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lak;
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(299,
						"cNeg cRSub x cAdd",
						"[-x] cAdd cRSub",
						"    with x = " << x << "\n");
					goto Lal;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(297,
						"y cRSub x cAdd",
						"[ y+x] cRSub",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lam;
				}
				break;
			case cSub:
				B = ByteCodePtr[-2];
				if(IsVarOpcode(B))
				{
					switch(ByteCodePtr[-3])
					{
					case cAdd:
						if(ByteCodePtr[-4] == cImmed)
						{
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(292,
								"y cAdd B[IsVarOpcode(B)] cSub x cAdd",
								"[ y+x] cAdd B cSub",
								"    with x = " << x
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-4] = cImmed; */ // redundant, matches y @ 5
							goto Lan;
						}
						break;
					case cNeg:
						FP_TRACE_BYTECODE_OPTIMIZATION(293,
							"cNeg B[IsVarOpcode(B)] cSub x cAdd",
							"[-x] cAdd B cSub",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						goto Lao;
					case cImmed:
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(291,
							"y B[IsVarOpcode(B)] cSub x cAdd",
							"[ y+x] B cSub",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lap;
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(105,
					"y x cAdd",
					"[y+x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Laq;
			}
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(57,
					"x[x==Value_t()] cAdd",
					"",
					"    with x = " << x << "\n");
				goto Lba;
			}
			break;
		default: Default1:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				if(ByteCodePtr[-1] == cRSub)
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(290,
							"x cRSub A[IsVarOpcode(A)] cAdd",
							"[DO_STACKPLUS1] A [x] cAdd cRSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						incStackPtr();
						--mStackPtr;
						goto Lbb;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(295,
						"cRSub A[IsVarOpcode(A)] cAdd",
						"[DO_STACKPLUS1] A cAdd cRSub",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Lbc;
				}
			}
		}
		goto Default0;
	TailCall_cAnd:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAnd:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(224,"cDup cAnd", "cNotNot", "");
			goto Lbd;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(117,
					"y x cAnd",
					"[fp_and(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbe;
			}
			break;
		}
		goto Default0;
	TailCall_cAsin:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAsin:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(fp_abs(x)<=Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(149,
					"x[fp_abs(x)<=Value_t(1)] cAsin",
					"[fp_asin(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lbf;
			}
		}
		goto Default0;
	TailCall_cAsinh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAsinh:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(146,
				"x cAsinh",
				"[fp_asinh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbg;
		}
		goto Default0;
	TailCall_cAtan:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAtan:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(150,
				"x cAtan",
				"[fp_atan(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbh;
		}
		goto Default0;
	TailCall_cAtan2:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAtan2:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(139,
					"y x cAtan2",
					"[fp_atan2(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbi;
			}
		}
		goto Default0;
	TailCall_cAtanh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAtanh:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(fp_abs(x)<Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(147,
					"x[fp_abs(x)<Value_t(1)] cAtanh",
					"[fp_atanh(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lbj;
			}
		}
		goto Default0;
	TailCall_cCbrt:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCbrt:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(151,
				"x cCbrt",
				"[fp_cbrt(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbk;
		}
		goto Default0;
	TailCall_cCeil:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCeil:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(402,"cNeg cCeil", "cFloor cNeg", "");
			goto Lbl;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(135,
				"x cCeil",
				"[fp_ceil(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbm;
		default:
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(396,
					"A[IsAlwaysIntegerOpcode(A)] cCeil",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cCos:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCos:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(235,"cAbs cCos", "cCos", "");
			/* opcode = cCos; */ // redundant, matches cCos @ 0
			goto Lbn;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(238,"cNeg cCos", "cCos", "");
			/* opcode = cCos; */ // redundant, matches cCos @ 0
			goto Lbn;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(152,
				"x cCos",
				"[fp_cos(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbo;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				switch(ByteCodePtr[-1])
				{
				case cSec:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(500,
							"B[B==A] cSec A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCos",
							"B cSec cDup cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cSec; */ // redundant, matches cSec @ 2
						goto Lbp;
					}
					break;
				case cSin:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(494,
							"B[B==A] cSin A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCos",
							"B cSinCos",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lbq;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cCosh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCosh:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(236,"cAbs cCosh", "cCosh", "");
			/* opcode = cCosh; */ // redundant, matches cCosh @ 0
			goto Lca;
		case cAsinh:
			FP_TRACE_BYTECODE_OPTIMIZATION(450,"cAsinh cCosh", "[DO_STACKPLUS1] cSqr [Value_t(1)] cAdd cSqrt", "");
			incStackPtr();
			--mStackPtr;
			goto Lcb;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(239,"cNeg cCosh", "cCosh", "");
			/* opcode = cCosh; */ // redundant, matches cCosh @ 0
			goto Lca;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(153,
				"x cCosh",
				"[fp_cosh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lcc;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				if(ByteCodePtr[-1] == cSinh)
				{
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(507,
							"B[B==A] cSinh A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCosh",
							"B cSinhCosh",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lcd;
					}
				}
			}
		}
		goto Default0;
	TailCall_cCot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCot:
		A = ByteCodePtr[0];
		if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
		{
			if(ByteCodePtr[-1] == cTan)
			{
				B = ByteCodePtr[-2];
				if(B==A)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(498,
						"B[B==A] cTan A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCot",
						"B cTan cDup cInv",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", B = " << FP_TRACE_OPCODENAME(B)
						    << "\n");
					/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
					/* ByteCodePtr[-1] = cTan; */ // redundant, matches cTan @ 2
					goto Lbp;
				}
			}
		}
		goto Default0;
	TailCall_cCsc:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCsc:
		A = ByteCodePtr[0];
		if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
		{
			if(ByteCodePtr[-1] == cSin)
			{
				B = ByteCodePtr[-2];
				if(B==A)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(496,
						"B[B==A] cSin A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCsc",
						"B cSin cDup cInv",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", B = " << FP_TRACE_OPCODENAME(B)
						    << "\n");
					/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
					/* ByteCodePtr[-1] = cSin; */ // redundant, matches cSin @ 2
					goto Lbp;
				}
			}
		}
		goto Default0;
	TailCall_cDeg:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cDeg:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(133,
				"x cDeg",
				"[RadiansToDegrees(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lce;
		}
		goto Default0;
	TailCall_cDiv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cDiv:
		switch(ByteCodePtr[0])
		{
		case cCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(250,"cCos cDiv", "cSec cMul", "");
			goto Lcf;
		case cCot:
			FP_TRACE_BYTECODE_OPTIMIZATION(254,"cCot cDiv", "cTan cMul", "");
			goto Lcg;
		case cCsc:
			FP_TRACE_BYTECODE_OPTIMIZATION(252,"cCsc cDiv", "cSin cMul", "");
			goto Lch;
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(78,"cDup cDiv", "[Value_t()] cMul [Value_t(1)] cAdd", "");
			goto Lci;
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(408,"cExp cDiv", "cNeg cExp cMul", "");
			goto Lcj;
		case cExp2:
			FP_TRACE_BYTECODE_OPTIMIZATION(409,"cExp2 cDiv", "cNeg cExp2 cMul", "");
			goto Lck;
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(213,"cInv cDiv", "cMul", "");
			goto Lcl;
		case cPow:
			FP_TRACE_BYTECODE_OPTIMIZATION(407,"cPow cDiv", "cNeg cPow cMul", "");
			goto Lcm;
		case cSec:
			FP_TRACE_BYTECODE_OPTIMIZATION(253,"cSec cDiv", "cCos cMul", "");
			goto Lcn;
		case cSin:
			FP_TRACE_BYTECODE_OPTIMIZATION(249,"cSin cDiv", "cCsc cMul", "");
			goto Lco;
		case cSinCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(502,"cSinCos cDiv", "cTan", "");
			goto Lcp;
		case cSinhCosh:
			FP_TRACE_BYTECODE_OPTIMIZATION(509,"cSinhCosh cDiv", "cTanh", "");
			goto Lcq;
		case cTan:
			FP_TRACE_BYTECODE_OPTIMIZATION(251,"cTan cDiv", "cCot cMul", "");
			goto Lda;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(125,
						"cNeg x[x!=Value_t()] cDiv",
						"[-x] cDiv",
						"    with x = " << x << "\n");
					/* opcode = cDiv; */ // redundant, matches cDiv @ 0
					goto Ldb;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(103,
						"y x[x!=Value_t()] cDiv",
						"[y/x]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Ldc;
				}
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(56,
					"x[x==Value_t(1)] cDiv",
					"",
					"    with x = " << x << "\n");
				goto Lba;
			}
			if(x!=Value_t(0))
			{
				if(ByteCodePtr[-1] == cMul)
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						y = ImmedPtr[-1];
						if((y/x)==fp_const_rad_to_deg<Value_t>())
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(321,
								"y[(y/x)==fp_const_rad_to_deg<Value_t>()] cMul x[x!=Value_t(0)] cDiv",
								"cDeg",
								"    with x = " << x
								    << ", y = " << y
								    << "\n");
							goto Ldd;
						}
						if((y/x)==fp_const_deg_to_rad<Value_t>())
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(322,
								"y[(y/x)==fp_const_deg_to_rad<Value_t>()] cMul x[x!=Value_t(0)] cDiv",
								"cRad",
								"    with x = " << x
								    << ", y = " << y
								    << "\n");
							goto Lde;
						}
						FP_TRACE_BYTECODE_OPTIMIZATION(323,
							"y cMul x[x!=Value_t(0)] cDiv",
							"[y/x] cMul",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
						goto Ldf;
					}
				}
				FP_TRACE_BYTECODE_OPTIMIZATION(325,
					"x[x!=Value_t(0)] cDiv",
					"[Value_t(1)/x] cMul",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Ldg;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDiv:
					B = ByteCodePtr[-2];
					if(IsVarOpcode(B))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(271,
							"B[IsVarOpcode(B)] cDiv A[IsVarOpcode(A)] cDiv",
							"[DO_STACKPLUS1] B A cMul cDiv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						incStackPtr();
						--mStackPtr;
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* opcode = cDiv; */ // redundant, matches cDiv @ 0
						goto Ldh;
					}
					break;
				case cRDiv:
					switch(ByteCodePtr[-2])
					{
					case cImmed:
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(266,
							"x cRDiv A[IsVarOpcode(A)] cDiv",
							"A cMul [x] cRDiv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Ldi;
					default:
						B = ByteCodePtr[-2];
						if(IsVarOpcode(B))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(265,
								"B[IsVarOpcode(B)] cRDiv A[IsVarOpcode(A)] cDiv",
								"A cMul B cRDiv",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							goto Ldj;
						}
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cEqual:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(359,
						"cAbs x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Ldk;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(361,
						"cSqr x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Ldk;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(115,
					"y x cEqual",
					"[fp_equal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldl;
			}
		}
		goto Default0;
	TailCall_cExp:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cExp:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(404,
					"x cAdd cExp",
					"cExp [fp_exp(x)] cMul",
					"    with x = " << x << "\n");
				goto Ldm;
			}
			break;
		case cLog:
			A = ByteCodePtr[-1];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(340,
					"A[IsNeverNegativeValueOpcode(A)] cLog cExp",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Ldn;
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(154,
				"x cExp",
				"[fp_exp(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Ldo;
		}
		goto Default0;
	TailCall_cExp2:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cExp2:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(405,
					"x cAdd cExp2",
					"cExp2 [fp_exp2(x)] cMul",
					"    with x = " << x << "\n");
				goto Ldp;
			}
			break;
		case cLog2:
			A = ByteCodePtr[-1];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(341,
					"A[IsNeverNegativeValueOpcode(A)] cLog2 cExp2",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Ldn;
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(155,
				"x cExp2",
				"[fp_exp2(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Ldq;
		}
		FP_TRACE_BYTECODE_OPTIMIZATION(479,"cExp2", "[DO_STACKPLUS1] [fp_log(Value_t(2))] cMul cExp", "");
		incStackPtr();
		--mStackPtr;
		goto Lea;
	TailCall_cFloor:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFloor:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(401,"cNeg cFloor", "cCeil cNeg", "");
			goto Leb;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(136,
				"x cFloor",
				"[fp_floor(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lec;
		default:
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(395,
					"A[IsAlwaysIntegerOpcode(A)] cFloor",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cGreater:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cGreater:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(113,
					"y x cGreater",
					"[fp_less(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Led;
			}
			if(x==Value_t(-0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(431,
					"x[x==Value_t(-0.5)] cGreater",
					"cNeg cAbsNot",
					"    with x = " << x << "\n");
				goto Lee;
			}
		}
		goto Default0;
	TailCall_cGreaterOrEq:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cGreaterOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x!=Value_t(0))
			{
				if(ByteCodePtr[-1] == cAbs)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(427,
						"cAbs x[x!=Value_t(0)] cGreaterOrEq",
						"[Value_t(0.5)/x] cMul cNotNot",
						"    with x = " << x << "\n");
					goto Lef;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(114,
					"y x cGreaterOrEq",
					"[fp_lessOrEq(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Leg;
			}
			if(x==Value_t(0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(430,
					"x[x==Value_t(0.5)] cGreaterOrEq",
					"cAbsNotNot",
					"    with x = " << x << "\n");
				goto Leh;
			}
		}
		goto Default0;
	TailCall_cHypot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cHypot:
		if(ByteCodePtr[0] == cSinCos)
		{
			FP_TRACE_BYTECODE_OPTIMIZATION(84,"cSinCos cHypot", "[Value_t()] cMul [Value_t(1)] cAdd", "");
			goto Lci;
		}
		goto Default0;
	TailCall_cInt:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cInt:
		switch(ByteCodePtr[0])
		{
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(137,
				"x cInt",
				"[fp_int(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lei;
		default:
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(397,
					"A[IsAlwaysIntegerOpcode(A)] cInt",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cInv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cInv:
		switch(ByteCodePtr[0])
		{
		case cCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(256,"cCos cInv", "cSec", "");
			goto Lej;
		case cCot:
			FP_TRACE_BYTECODE_OPTIMIZATION(260,"cCot cInv", "cTan", "");
			goto Lcp;
		case cCsc:
			FP_TRACE_BYTECODE_OPTIMIZATION(258,"cCsc cInv", "cSin", "");
			goto Lek;
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(62,"cInv cInv", "", "");
			goto Ldn;
		case cPow:
			FP_TRACE_BYTECODE_OPTIMIZATION(355,"cPow cInv", "cNeg cPow", "");
			goto Lel;
		case cSec:
			FP_TRACE_BYTECODE_OPTIMIZATION(259,"cSec cInv", "cCos", "");
			goto Lem;
		case cSin:
			FP_TRACE_BYTECODE_OPTIMIZATION(255,"cSin cInv", "cCsc", "");
			goto Len;
		case cSqrt:
			FP_TRACE_BYTECODE_OPTIMIZATION(206,"cSqrt cInv", "cRSqrt", "");
			goto Leo;
		case cTan:
			FP_TRACE_BYTECODE_OPTIMIZATION(257,"cTan cInv", "cCot", "");
			goto Lep;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(101,
					"x[x!=Value_t()] cInv",
					"[Value_t(1)/x]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Leq;
			}
			break;
		}
		goto Default0;
	TailCall_cLess:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLess:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				A = ByteCodePtr[-1];
				if(IsNeverNegativeValueOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(301,
						"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(0)] cLess",
						"A [x] cMul",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
					goto Lfa;
				}
			}
			if(x!=Value_t(0))
			{
				if(ByteCodePtr[-1] == cAbs)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(426,
						"cAbs x[x!=Value_t(0)] cLess",
						"[Value_t(0.5)/x] cMul cNot",
						"    with x = " << x << "\n");
					goto Lfb;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(111,
					"y x cLess",
					"[fp_less(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lfc;
			}
			if(x==Value_t(0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(429,
					"x[x==Value_t(0.5)] cLess",
					"cAbsNot",
					"    with x = " << x << "\n");
				goto Lfd;
			}
		}
		goto Default0;
	TailCall_cLessOrEq:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLessOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(112,
					"y x cLessOrEq",
					"[fp_lessOrEq(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lfe;
			}
			if(x==Value_t(-0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(432,
					"x[x==Value_t(-0.5)] cLessOrEq",
					"cNeg cAbsNotNot",
					"    with x = " << x << "\n");
				goto Lff;
			}
		}
		goto Default0;
	TailCall_cLog:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLog:
		switch(ByteCodePtr[0])
		{
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(343,"cExp cLog", "", "");
			goto Ldn;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(x>Value_t(0))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(491,
						"x[x>Value_t(0)] cMul cLog",
						"cLog [fp_log(x)] cAdd",
						"    with x = " << x << "\n");
					goto Lfg;
				}
			}
			break;
		case cSqr:
			FP_TRACE_BYTECODE_OPTIMIZATION(303,"cSqr cLog", "cAbs cLog cDup cAdd", "");
			goto Lfh;
		case cImmed:
			x = ImmedPtr[0];
			if(x>Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(156,
					"x[x>Value_t(0)] cLog",
					"[fp_log(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lfi;
			}
			break;
		}
		goto Default0;
	TailCall_cLog10:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLog10:
		switch(ByteCodePtr[0])
		{
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(481,"cExp cLog10", "[DO_STACKPLUS1] [fp_log10(fp_const_e<Value_t>())] cMul", "");
			incStackPtr();
			--mStackPtr;
			goto Lfj;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(x>Value_t(0))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(492,
						"x[x>Value_t(0)] cMul cLog10",
						"cLog10 [fp_log10(x)] cAdd",
						"    with x = " << x << "\n");
					goto Lfk;
				}
			}
			break;
		case cSqr:
			FP_TRACE_BYTECODE_OPTIMIZATION(305,"cSqr cLog10", "cAbs cLog10 cDup cAdd", "");
			goto Lfl;
		case cImmed:
			x = ImmedPtr[0];
			if(x>Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(157,
					"x[x>Value_t(0)] cLog10",
					"[fp_log10(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lfm;
			}
			break;
		}
		goto Default0;
	TailCall_cLog2:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLog2:
		switch(ByteCodePtr[0])
		{
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(480,"cExp cLog2", "[DO_STACKPLUS1] [fp_log2(fp_const_e<Value_t>())] cMul", "");
			incStackPtr();
			--mStackPtr;
			goto Lfn;
		case cExp2:
			FP_TRACE_BYTECODE_OPTIMIZATION(344,"cExp2 cLog2", "", "");
			goto Ldn;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(x>Value_t(0))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(490,
						"x[x>Value_t(0)] cMul cLog2",
						"cLog2 [fp_log2(x)] cAdd",
						"    with x = " << x << "\n");
					goto Lfo;
				}
			}
			break;
		case cSqr:
			FP_TRACE_BYTECODE_OPTIMIZATION(304,"cSqr cLog2", "cAbs cLog2 cDup cAdd", "");
			goto Lfp;
		case cImmed:
			x = ImmedPtr[0];
			if(x>Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(158,
					"x[x>Value_t(0)] cLog2",
					"[fp_log2(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lfq;
			}
			break;
		}
		goto Default0;
	TailCall_cMax:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMax:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(60,"cDup cMax", "", "");
			goto Ldn;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(141,
					"y x cMax",
					"[fp_max(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lga;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(66,
							"B[B==A] cDup A[IsVarOpcode(A)] cMax",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Ldn;
					}
					break;
				case cMax:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(68,
							"B[B==A] cMax A[IsVarOpcode(A)] cMax",
							"B cMax",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMax; */ // redundant, matches cMax @ 2
						goto Ldn;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cMin:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMin:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(59,"cDup cMin", "", "");
			goto Ldn;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(140,
					"y x cMin",
					"[fp_min(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lgb;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(65,
							"B[B==A] cDup A[IsVarOpcode(A)] cMin",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Ldn;
					}
					break;
				case cMin:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(67,
							"B[B==A] cMin A[IsVarOpcode(A)] cMin",
							"B cMin",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMin; */ // redundant, matches cMin @ 2
						goto Ldn;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cMod:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMod:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				if(ByteCodePtr[-1] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(104,
						"y x[x!=Value_t()] cMod",
						"[fp_mod(y,x)]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Lgc;
				}
			}
		}
		goto Default0;
	TailCall_cMul:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMul:
		switch(ByteCodePtr[0])
		{
		case cCsc:
			A = ByteCodePtr[-1];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>3)
			{
				if(ByteCodePtr[-2] == cCos)
				{
					B = ByteCodePtr[-3];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(508,
							"B[B==A] cCos A[IsVarOpcode(A)&&mData->mByteCode.size()>3] cCsc cMul",
							"B cCot",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
						goto Lgd;
					}
				}
			}
			goto Default2;
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(202,"cDup cMul", "cSqr", "");
			goto Lge;
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(214,"cInv cMul", "cDiv", "");
			goto Lgf;
		case cNeg:
			switch(ByteCodePtr[-1])
			{
			case cDup:
				FP_TRACE_BYTECODE_OPTIMIZATION(467,"cDup cNeg cMul", "cSqr cNeg", "");
				goto Lgg;
			default:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cMul)
					{
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(473,
								"B[B==A] cMul A[IsVarOpcode(A)] cNeg cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lgh;
						}
					}
				}
			}
			goto Default2;
		case cPow:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(314,
						"cDup x cPow cMul",
						"[x+Value_t(1)] cPow",
						"    with x = " << x << "\n");
					goto Lgi;
				}
			}
			goto Default2;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(93,
							"A[IsVarOpcode(A)] cMul x[x==Value_t()] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lgj;
					}
					goto Default3;
				default: Default3:;
					A = ByteCodePtr[-1];
					if(IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						switch(ByteCodePtr[-2])
						{
						case cImmed:
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(92,
								"y A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
								"[x] cMul",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lgk;
						default:
							B = ByteCodePtr[-2];
							if(IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								switch(ByteCodePtr[-3])
								{
								case cImmed:
									y = ImmedPtr[-1];
									FP_TRACE_BYTECODE_OPTIMIZATION(96,
										"y B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
										"A [x] cMul",
										"    with x = " << x
										    << ", A = " << FP_TRACE_OPCODENAME(A)
										    << ", B = " << FP_TRACE_OPCODENAME(B)
										    << ", y = " << y
										    << "\n");
									/* opcode = cMul; */ // redundant, matches cMul @ 0
									goto Lgl;
								default:
									C = ByteCodePtr[-3];
									if(IsVarOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(94,
											"C[IsVarOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
											"A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lgm;
									}
									if(IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(95,
											"C[IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
											"B A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lgn;
									}
								}
							}
							if(IsVarOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(90,
									"B[IsVarOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
									"[x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lgj;
							}
							if(IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(91,
									"B[IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
									"A [x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lgo;
							}
						}
					}
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(88,
							"A[IsVarOpcode(A)] x[x==Value_t()] cMul",
							"[x]",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						goto Lgp;
					}
					if(IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(89,
							"A[IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lgq;
					}
				}
			}
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				switch(ByteCodePtr[-2])
				{
				case cDup:
					if(x+x==Value_t(1))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(316,
							"cDup[x+x==Value_t(1)] cAdd x cMul",
							"",
							"    with x = " << x << "\n");
						goto Lha;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(317,
						"cDup cAdd x cMul",
						"[x+x] cMul",
						"    with x = " << x << "\n");
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Lhb;
				case cMul:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(IsVarOpcode(A))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(386,
								"A[IsVarOpcode(A)] y cMul cAdd x cMul",
								"[x] cMul A [y*x] cMul cAdd",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lhc;
						}
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(385,
						"y cAdd x cMul",
						"[x] cMul [y*x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lhd;
				}
				break;
			case cDeg:
				FP_TRACE_BYTECODE_OPTIMIZATION(209,
					"cDeg x cMul",
					"[RadiansToDegrees(x)] cMul",
					"    with x = " << x << "\n");
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Lhe;
			case cDiv:
				B = ByteCodePtr[-2];
				if(IsVarOpcode(B))
				{
					switch(ByteCodePtr[-3])
					{
					case cMul:
						if(ByteCodePtr[-4] == cImmed)
						{
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(278,
								"y cMul B[IsVarOpcode(B)] cDiv x cMul",
								"[y*x] cMul B cDiv",
								"    with x = " << x
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-4] = cImmed; */ // redundant, matches y @ 5
							goto Lhf;
						}
						break;
					case cNeg:
						FP_TRACE_BYTECODE_OPTIMIZATION(279,
							"cNeg B[IsVarOpcode(B)] cDiv x cMul",
							"[-x] cMul B cDiv",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						goto Lhg;
					case cImmed:
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(277,
							"y B[IsVarOpcode(B)] cDiv x cMul",
							"[y*x] B cDiv",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lhh;
					}
				}
				break;
			case cMul:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cDup)
					{
						if(x+x==Value_t(1))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(318,
								"cDup[x+x==Value_t(1)] cAdd cMul x cMul",
								"cMul",
								"    with x = " << x << "\n");
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lhi;
						}
						FP_TRACE_BYTECODE_OPTIMIZATION(319,
							"cDup cAdd cMul x cMul",
							"cMul [x+x] cMul",
							"    with x = " << x << "\n");
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lhj;
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					if(y*x==Value_t(1))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(70,
							"y[y*x==Value_t(1)] cMul x cMul",
							"",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Lhk;
					}
					if((y*x)==fp_const_rad_to_deg<Value_t>())
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(307,
							"y[(y*x)==fp_const_rad_to_deg<Value_t>()] cMul x cMul",
							"cDeg",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Ldd;
					}
					if((y*x)==fp_const_deg_to_rad<Value_t>())
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(308,
							"y[(y*x)==fp_const_deg_to_rad<Value_t>()] cMul x cMul",
							"cRad",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Lde;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(128,
						"y cMul x cMul",
						"[y*x] cMul",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Lhl;
				}
				break;
			case cNeg:
				FP_TRACE_BYTECODE_OPTIMIZATION(122,
					"cNeg x cMul",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Lhm;
			case cRDiv:
				switch(ByteCodePtr[-2])
				{
				case cMul:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(285,
							"y cMul cRDiv x cMul",
							"[y*x] cMul cRDiv",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lhn;
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(286,
						"cNeg cRDiv x cMul",
						"[-x] cMul cRDiv",
						"    with x = " << x << "\n");
					goto Lho;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(284,
						"y cRDiv x cMul",
						"[y*x] cRDiv",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lhp;
				}
				break;
			case cRad:
				FP_TRACE_BYTECODE_OPTIMIZATION(210,
					"cRad x cMul",
					"[DegreesToRadians(x)] cMul",
					"    with x = " << x << "\n");
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Lhq;
			case cSub:
				if(ByteCodePtr[-2] == cMul)
				{
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(IsVarOpcode(A))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(387,
								"A[IsVarOpcode(A)] y cMul cSub x cMul",
								"[x] cMul A [y*x] cMul cSub",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lia;
						}
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(102,
					"y x cMul",
					"[y*x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lib;
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(55,
					"x[x==Value_t(1)] cMul",
					"",
					"    with x = " << x << "\n");
				goto Lba;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(124,
					"x[x==Value_t(-1)] cMul",
					"cNeg",
					"    with x = " << x << "\n");
				goto Lic;
			}
			if(x==Value_t(2))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(198,
					"x[x==Value_t(2)] cMul",
					"cDup cAdd",
					"    with x = " << x << "\n");
				goto Lid;
			}
			if(x==fp_const_rad_to_deg<Value_t>())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(207,
					"x[x==fp_const_rad_to_deg<Value_t>()] cMul",
					"cDeg",
					"    with x = " << x << "\n");
				goto Lie;
			}
			if(x==fp_const_deg_to_rad<Value_t>())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(208,
					"x[x==fp_const_deg_to_rad<Value_t>()] cMul",
					"cRad",
					"    with x = " << x << "\n");
				goto Lif;
			}
			break;
		default: Default2:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDiv:
					B = ByteCodePtr[-2];
					if(IsVarOpcode(B))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(274,
							"B[IsVarOpcode(B)] cDiv A[IsVarOpcode(A)] cMul",
							"[DO_STACKPLUS1] A cMul B cDiv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						incStackPtr();
						--mStackPtr;
						goto Lig;
					}
					goto Default4;
				case cMul:
					switch(ByteCodePtr[-2])
					{
					case cNeg:
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(470,
								"B[B==A] cNeg cMul A[IsVarOpcode(A)] cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lgh;
						}
						goto Default5;
					default: Default5:;
						B = ByteCodePtr[-2];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(461,
								"B[B==A] cMul A[IsVarOpcode(A)] cMul",
								"B cSqr cMul",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lih;
						}
					}
					goto Default4;
				case cNeg:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(464,
							"B[B==A] cNeg A[IsVarOpcode(A)] cMul",
							"B cSqr cNeg",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lgg;
					}
					goto Default4;
				case cRDiv:
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(267,
							"x cRDiv A[IsVarOpcode(A)] cMul",
							"[DO_STACKPLUS1] A [x] cMul cRDiv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						incStackPtr();
						--mStackPtr;
						goto Lii;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(281,
						"cRDiv A[IsVarOpcode(A)] cMul",
						"[DO_STACKPLUS1] A cMul cRDiv",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Lij;
				default: Default4:;
					B = ByteCodePtr[-1];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(458,
							"B[B==A] A[IsVarOpcode(A)] cMul",
							"B cSqr",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-1] = B; */ // redundant, matches B @ 2
						goto Lge;
					}
				}
			}
			if(IsUnaryOpcode(A))
			{
				B = ByteCodePtr[-1];
				if(IsVarOpcode(B)&&mData->mByteCode.size()>1)
				{
					if(ByteCodePtr[-2] == cMul)
					{
						C = ByteCodePtr[-3];
						if(C==A)
						{
							D = ByteCodePtr[-4];
							if(D==B)
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(477,
									"D[D==B] C[C==A] cMul B[IsVarOpcode(B)&&mData->mByteCode.size()>1] A[IsUnaryOpcode(A)] cMul",
									"D C cSqr cMul",
									"    with A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << ", C = " << FP_TRACE_OPCODENAME(C)
									    << ", D = " << FP_TRACE_OPCODENAME(D)
									    << "\n");
								/* ByteCodePtr[-4] = D; */ // redundant, matches D @ 5
								/* ByteCodePtr[-3] = C; */ // redundant, matches C @ 4
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lik;
							}
						}
					}
				}
			}
		}
		goto Default0;
	TailCall_cNEqual:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(360,
						"cAbs x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Lil;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(362,
						"cSqr x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Lil;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(116,
					"y x cNEqual",
					"[fp_nequal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lim;
			}
		}
		goto Default0;
	TailCall_cNeg:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNeg:
		switch(ByteCodePtr[0])
		{
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(123,
					"x cMul cNeg",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Lin;
			}
			break;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(61,"cNeg cNeg", "", "");
			goto Ldn;
		case cSin:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(244,
						"x cMul cSin cNeg",
						"[-x] cMul cSin",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Lio;
				}
			}
			break;
		case cSinh:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(245,
						"x cMul cSinh cNeg",
						"[-x] cMul cSinh",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Lip;
				}
			}
			break;
		case cTan:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(246,
						"x cMul cTan cNeg",
						"[-x] cMul cTan",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Liq;
				}
			}
			break;
		case cTanh:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(247,
						"x cMul cTanh cNeg",
						"[-x] cMul cTanh",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Lja;
				}
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(100,
				"x cNeg",
				"[-x]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Ljb;
		}
		goto Default0;
	TailCall_cNot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNot:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(227,"cAbs cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Ljc;
		case cAbsNot:
			A = ByteCodePtr[-1];
			if(IsLogicalOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(389,
					"A[IsLogicalOpcode(A)] cAbsNot cNot",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Ldn;
			}
			if(A!=cImmed)
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(390,
					"A[A!=cImmed] cAbsNot cNot",
					"A cAbsNotNot",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Ljd;
			}
			goto Default6;
		case cAbsNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(231,"cAbsNotNot cNot", "cAbsNot", "");
			goto Lje;
		case cEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(220,"cEqual cNot", "cNEqual", "");
			goto Ljf;
		case cGreater:
			FP_TRACE_BYTECODE_OPTIMIZATION(218,"cGreater cNot", "cLessOrEq", "");
			goto Ljg;
		case cGreaterOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(219,"cGreaterOrEq cNot", "cLess", "");
			goto Ljh;
		case cLess:
			FP_TRACE_BYTECODE_OPTIMIZATION(216,"cLess cNot", "cGreaterOrEq", "");
			goto Lji;
		case cLessOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(217,"cLessOrEq cNot", "cGreater", "");
			goto Ljj;
		case cNEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(221,"cNEqual cNot", "cEqual", "");
			goto Ljk;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(226,"cNeg cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Ljc;
		case cNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(229,"cNot cNot", "cNotNot", "");
			goto Lbd;
		case cNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(230,"cNotNot cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Ljc;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(107,
				"x cNot",
				"[fp_not(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Ljl;
		default: Default6:;
			A = ByteCodePtr[0];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(391,
					"A[IsNeverNegativeValueOpcode(A)] cNot",
					"A cAbsNot",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				goto Ljm;
			}
		}
		goto Default0;
	TailCall_cNotNot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNotNot:
		if(ByteCodePtr[0] == cNot)
		{
			FP_TRACE_BYTECODE_OPTIMIZATION(232,"cNot cNotNot", "cNot", "");
			/* ByteCodePtr[0] = cNot; */ // redundant, matches cNot @ 1
			return;
		}
		goto Default0;
	TailCall_cOr:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cOr:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(223,"cDup cOr", "cNotNot", "");
			goto Lbd;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(118,
					"y x cOr",
					"[fp_or(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ljn;
			}
			break;
		}
		goto Default0;
	TailCall_cPow:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cPow:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(!isEvenInteger(x+x))
			{
				if(ByteCodePtr[-1] == cSqr)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(22,
						"cSqr x[!isEvenInteger(x+x)] cPow",
						"cAbs [x+x] cPow",
						"    with x = " << x << "\n");
					/* opcode = cPow; */ // redundant, matches cPow @ 0
					goto Ljo;
				}
			}
			if(isInteger(x))
			{
				switch(ByteCodePtr[-1])
				{
				case cExp:
					FP_TRACE_BYTECODE_OPTIMIZATION(43,
						"cExp x[isInteger(x)] cPow",
						"[x] cMul cExp",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					goto Ljp;
				case cExp2:
					FP_TRACE_BYTECODE_OPTIMIZATION(44,
						"cExp2 x[isInteger(x)] cPow",
						"[x] cMul cExp2",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					goto Ljq;
				case cPow:
					if(ByteCodePtr[-2] == cImmed)
					{
						y = ImmedPtr[-1];
						if(!isInteger(y))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(42,
								"y[!isInteger(y)] cPow x[isInteger(x)] cPow",
								"[y*x] cPow",
								"    with x = " << x
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cPow; */ // redundant, matches cPow @ 0
							goto Lka;
						}
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(45,
						"cPow x[isInteger(x)] cPow",
						"[x] cMul cPow",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cPow; */ // redundant, matches cPow @ 0
					goto Lkb;
				}
			}
			if(isEvenInteger(x))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(434,
						"cAbs x[isEvenInteger(x)] cPow",
						"[x] cPow",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cPow; */ // redundant, matches cPow @ 0
					goto Lkc;
				case cMul:
					if(ByteCodePtr[-2] == cAbs)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(435,
							"cAbs cMul x[isEvenInteger(x)] cPow",
							"cMul [x] cPow",
							"    with x = " << x << "\n");
						/* opcode = cPow; */ // redundant, matches cPow @ 0
						goto Lkd;
					}
					break;
				}
			}
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(83,
					"x[x==Value_t()] cPow",
					"[Value_t()] cMul [Value_t(1)] cAdd",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lke;
			}
			if(x==Value_t(0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(332,
					"x[x==Value_t(0.5)] cPow",
					"cSqrt",
					"    with x = " << x << "\n");
				goto Lkf;
			}
			if(x==Value_t(1)/Value_t(3))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(333,
					"x[x==Value_t(1)/Value_t(3)] cPow",
					"cCbrt",
					"    with x = " << x << "\n");
				goto Lkg;
			}
			if(x==Value_t(1)/Value_t(-3))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(334,
					"x[x==Value_t(1)/Value_t(-3)] cPow",
					"cCbrt cInv",
					"    with x = " << x << "\n");
				goto Lkh;
			}
			if(x==Value_t(-0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(335,
					"x[x==Value_t(-0.5)] cPow",
					"cRSqrt",
					"    with x = " << x << "\n");
				goto Lki;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(336,
					"x[x==Value_t(-1)] cPow",
					"cInv",
					"    with x = " << x << "\n");
				goto Lkj;
			}
			switch(ByteCodePtr[-1])
			{
			case cPow:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					if(isEvenInteger(y)&&!isEvenInteger(x*y))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(21,
							"y[isEvenInteger(y)&&!isEvenInteger(x*y)] cPow x cPow",
							"cAbs [y*x] cPow",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* opcode = cPow; */ // redundant, matches cPow @ 0
						goto Lkk;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(330,
						"y cPow x cPow",
						"[y*x] cPow",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cPow; */ // redundant, matches cPow @ 0
					goto Lka;
				}
				break;
			case cSqr:
				FP_TRACE_BYTECODE_OPTIMIZATION(46,
					"cSqr x cPow",
					"[x+x] cPow",
					"    with x = " << x << "\n");
				/* opcode = cPow; */ // redundant, matches cPow @ 0
				goto Lkl;
			case cImmed:
				y = ImmedPtr[-1];
				if(y!=Value_t(0)||x>=Value_t(0))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(165,
						"y[y!=Value_t(0)||x>=Value_t(0)] x cPow",
						"[fp_pow(y,x)]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Lkm;
				}
				break;
			}
			FP_TRACE_BYTECODE_OPTIMIZATION(455,
				"x cPow",
				"[DO_POWI]",
				"    with x = " << x << "\n");
			if(TryCompilePowi(x))
			  return;
		}
		goto Default0;
	TailCall_cRDiv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRDiv:
		switch(ByteCodePtr[0])
		{
		case cSinCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(503,"cSinCos cRDiv", "cCot", "");
			goto Lep;
		case cSinhCosh:
			FP_TRACE_BYTECODE_OPTIMIZATION(510,"cSinhCosh cRDiv", "cTanh cInv", "");
			goto Lkn;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(268,
					"x[x==Value_t(1)] cRDiv",
					"cInv",
					"    with x = " << x << "\n");
				goto Lkj;
			}
			break;
		}
		goto Default0;
	TailCall_cRSub:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRSub:
		if(ByteCodePtr[0] == cDup)
		{
			FP_TRACE_BYTECODE_OPTIMIZATION(77,"cDup cRSub", "[Value_t()] cMul", "");
			goto Lko;
		}
		goto Default0;
	TailCall_cRad:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRad:
		switch(ByteCodePtr[0])
		{
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(211,
					"x cMul cRad",
					"[DegreesToRadians(x)] cMul",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Lkp;
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(134,
				"x cRad",
				"[DegreesToRadians(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lkq;
		}
		goto Default0;
	TailCall_cSec:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSec:
		A = ByteCodePtr[0];
		if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
		{
			switch(ByteCodePtr[-1])
			{
			case cCos:
				B = ByteCodePtr[-2];
				if(B==A)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(497,
						"B[B==A] cCos A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cSec",
						"B cCos cDup cInv",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", B = " << FP_TRACE_OPCODENAME(B)
						    << "\n");
					/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
					/* ByteCodePtr[-1] = cCos; */ // redundant, matches cCos @ 2
					goto Lbp;
				}
				break;
			case cSin:
				B = ByteCodePtr[-2];
				if(B==A)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(495,
						"B[B==A] cSin A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cSec",
						"B cSinCos cInv",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", B = " << FP_TRACE_OPCODENAME(B)
						    << "\n");
					/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
					goto Lla;
				}
				break;
			}
		}
		goto Default0;
	TailCall_cSin:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSin:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(240,"cNeg cSin", "cSin cNeg", "");
			goto Llb;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(159,
				"x cSin",
				"[fp_sin(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Llc;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				if(ByteCodePtr[-1] == cCsc)
				{
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(499,
							"B[B==A] cCsc A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cSin",
							"B cCsc cDup cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cCsc; */ // redundant, matches cCsc @ 2
						goto Lbp;
					}
				}
			}
		}
		goto Default0;
	TailCall_cSinh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSinh:
		switch(ByteCodePtr[0])
		{
		case cAcosh:
			FP_TRACE_BYTECODE_OPTIMIZATION(437,"cAcosh cSinh", "[DO_STACKPLUS1] cSqr [Value_t(-1)] cAdd cSqrt", "");
			incStackPtr();
			--mStackPtr;
			goto Lld;
		case cAsinh:
			FP_TRACE_BYTECODE_OPTIMIZATION(349,"cAsinh cSinh", "", "");
			goto Ldn;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(241,"cNeg cSinh", "cSinh cNeg", "");
			goto Lle;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(160,
				"x cSinh",
				"[fp_sinh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Llf;
		}
		goto Default0;
	TailCall_cSqr:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSqr:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(204,"cAbs cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Llg;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(203,"cNeg cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Llg;
		case cSqrt:
			A = ByteCodePtr[-1];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(338,
					"A[IsNeverNegativeValueOpcode(A)] cSqrt cSqr",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Ldn;
			}
			break;
		}
		goto Default0;
	TailCall_cSqrt:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSqrt:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cSqr)
			{
				A = ByteCodePtr[-2];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-3] == cSqr)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(512,
							"cSqr A[IsVarOpcode(A)] cSqr cAdd cSqrt",
							"A cHypot",
							"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
						goto Llh;
					}
				}
				B = ByteCodePtr[-2];
				if(IsUnaryOpcode(B))
				{
					A = ByteCodePtr[-3];
					if(IsVarOpcode(A))
					{
						if(ByteCodePtr[-4] == cSqr)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(513,
								"cSqr A[IsVarOpcode(A)] B[IsUnaryOpcode(B)] cSqr cAdd cSqrt",
								"A B cHypot",
								"    with B = " << FP_TRACE_OPCODENAME(B)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lli;
						}
					}
				}
			}
			break;
		case cSqr:
			FP_TRACE_BYTECODE_OPTIMIZATION(23,"cSqr cSqrt", "cAbs", "");
			goto Llj;
		case cImmed:
			x = ImmedPtr[0];
			if(x>=Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(161,
					"x[x>=Value_t(0)] cSqrt",
					"[fp_sqrt(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Llk;
			}
			break;
		}
		goto Default0;
	TailCall_cSub:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSub:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(76,"cDup cSub", "[Value_t()] cMul", "");
			goto Lko;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(200,"cNeg cSub", "cAdd", "");
			goto Lll;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(58,
					"x[x==Value_t()] cSub",
					"",
					"    with x = " << x << "\n");
				goto Lba;
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(106,
					"y x cSub",
					"[y-x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Llm;
			}
			FP_TRACE_BYTECODE_OPTIMIZATION(51,
				"x cSub",
				"[-x] cAdd",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lln;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				if(ByteCodePtr[-1] == cRSub)
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(289,
							"x cRSub A[IsVarOpcode(A)] cSub",
							"A cAdd [x] cRSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Llo;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(296,
						"cRSub A[IsVarOpcode(A)] cSub",
						"[DO_STACKPLUS1] A cSub cRSub",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Llp;
				}
			}
		}
		goto Default0;
	TailCall_cTan:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cTan:
		switch(ByteCodePtr[0])
		{
		case cAtan2:
			FP_TRACE_BYTECODE_OPTIMIZATION(354,"cAtan2 cTan", "cDiv", "");
			goto Lgf;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(242,"cNeg cTan", "cTan cNeg", "");
			goto Llq;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(163,
				"x cTan",
				"[fp_tan(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lma;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				if(ByteCodePtr[-1] == cCot)
				{
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(501,
							"B[B==A] cCot A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cTan",
							"B cCot cDup cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cCot; */ // redundant, matches cCot @ 2
						goto Lbp;
					}
				}
			}
		}
		goto Default0;
	TailCall_cTanh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cTanh:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(243,"cNeg cTanh", "cTanh cNeg", "");
			goto Lmb;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(164,
				"x cTanh",
				"[fp_tanh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lmc;
		}
		goto Default0;
	TailCall_cTrunc:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cTrunc:
		switch(ByteCodePtr[0])
		{
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(138,
				"x cTrunc",
				"[fp_trunc(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lmd;
		default:
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(394,
					"A[IsAlwaysIntegerOpcode(A)] cTrunc",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	default: Default0:;
		A = opcode;
		if(IsComparisonOpcode(A))
		{
			if(ByteCodePtr[0] == cImmed)
			{
				x = ImmedPtr[0];
				switch(ByteCodePtr[-1])
				{
				case cAdd:
					if(ByteCodePtr[-2] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(364,
							"y cAdd x A[IsComparisonOpcode(A)]",
							"[x-y] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
						goto Lme;
					}
					break;
				case cAtan:
					if(fp_abs(x)<fp_const_pi<Value_t>()*Value_t(0.5))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(380,
							"cAtan[fp_abs(x)<fp_const_pi<Value_t>()*Value_t(0.5)] x A[IsComparisonOpcode(A)]",
							"[fp_tan(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Lmf;
					}
					break;
				case cExp:
					if(x>Value_t(0))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(370,
							"cExp[x>Value_t(0)] x A[IsComparisonOpcode(A)]",
							"[fp_log(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Lmg;
					}
					break;
				case cExp2:
					if(x>Value_t(0))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(371,
							"cExp2[x>Value_t(0)] x A[IsComparisonOpcode(A)]",
							"[fp_log2(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Lmh;
					}
					break;
				case cLog:
					B = ByteCodePtr[-2];
					if(IsNeverNegativeValueOpcode(B))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(373,
							"B[IsNeverNegativeValueOpcode(B)] cLog x A[IsComparisonOpcode(A)]",
							"B [fp_exp(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lmi;
					}
					break;
				case cLog10:
					B = ByteCodePtr[-2];
					if(IsNeverNegativeValueOpcode(B))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(375,
							"B[IsNeverNegativeValueOpcode(B)] cLog10 x A[IsComparisonOpcode(A)]",
							"B [fp_pow(Value_t(10),x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lmj;
					}
					break;
				case cLog2:
					B = ByteCodePtr[-2];
					if(IsNeverNegativeValueOpcode(B))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(374,
							"B[IsNeverNegativeValueOpcode(B)] cLog2 x A[IsComparisonOpcode(A)]",
							"B [fp_exp2(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lmk;
					}
					break;
				case cMul:
					if(ByteCodePtr[-2] == cImmed)
					{
						y = ImmedPtr[-1];
						if(y>Value_t(0))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(366,
								"y[y>Value_t(0)] cMul x A[IsComparisonOpcode(A)]",
								"[x/y] A",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", x = " << x
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							goto Lml;
						}
						if(y<Value_t(0))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(367,
								"y[y<Value_t(0)] cMul x A[IsComparisonOpcode(A)]",
								"[x/y] {OppositeComparisonOpcode(A)}",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", x = " << x
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							goto Lmm;
						}
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(365,
						"cNeg x A[IsComparisonOpcode(A)]",
						"[-x] {OppositeComparisonOpcode(A)}",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", x = " << x
						    << "\n");
					goto Lmn;
				case cPow:
					if(x>Value_t(0))
					{
						if(ByteCodePtr[-2] == cImmed)
						{
							y = ImmedPtr[-1];
							if(y>Value_t(0))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(368,
									"y[y>Value_t(0)] cPow[x>Value_t(0)] x A[IsComparisonOpcode(A)]",
									"[fp_pow(x,Value_t(1)/y)] A",
									"    with A = " << FP_TRACE_OPCODENAME(A)
									    << ", x = " << x
									    << ", y = " << y
									    << "\n");
								/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
								goto Lmo;
							}
						}
					}
					break;
				case cSinh:
					FP_TRACE_BYTECODE_OPTIMIZATION(381,
						"cSinh x A[IsComparisonOpcode(A)]",
						"[fp_asinh(x)] A",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", x = " << x
						    << "\n");
					goto Lmp;
				case cSqr:
					if(x>Value_t(0))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(369,
							"cSqr[x>Value_t(0)] x A[IsComparisonOpcode(A)]",
							"cAbs [fp_sqrt(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Lmq;
					}
					break;
				case cTanh:
					if(fp_abs(x)<Value_t(1))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(382,
							"cTanh[fp_abs(x)<Value_t(1)] x A[IsComparisonOpcode(A)]",
							"[fp_atanh(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Lna;
					}
					break;
				}
			}
		}
		if(IsVarOpcode(A)&&mData->mByteCode.size()>0)
		{
			B = ByteCodePtr[0];
			if(B==A)
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(475,
					"B[B==A] A[IsVarOpcode(A)&&mData->mByteCode.size()>0]",
					"B cDup",
					"    with A = " << FP_TRACE_OPCODENAME(A)
					    << ", B = " << FP_TRACE_OPCODENAME(B)
					    << "\n");
				/* ByteCodePtr[0] = B; */ // redundant, matches B @ 1
				goto Lnb;
			}
		}
		if(IsUnaryOpcode(A))
		{
			B = ByteCodePtr[0];
			if(IsVarOpcode(B)&&mData->mByteCode.size()>1)
			{
				C = ByteCodePtr[-1];
				if(C==A)
				{
					D = ByteCodePtr[-2];
					if(D==B)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(476,
							"D[D==B] C[C==A] B[IsVarOpcode(B)&&mData->mByteCode.size()>1] A[IsUnaryOpcode(A)]",
							"D C cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", C = " << FP_TRACE_OPCODENAME(C)
							    << ", D = " << FP_TRACE_OPCODENAME(D)
							    << "\n");
						/* ByteCodePtr[-2] = D; */ // redundant, matches D @ 3
						/* ByteCodePtr[-1] = C; */ // redundant, matches C @ 2
						goto Lnc;
					}
				}
			}
		}
		C = opcode;
		if(IsCommutativeOrParamSwappableBinaryOpcode(C))
		{
			switch(ByteCodePtr[0])
			{
			case cSin:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A)&&mData->mByteCode.size()>3)
				{
					if(ByteCodePtr[-2] == cCos)
					{
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(505,
								"B[B==A] cCos A[IsVarOpcode(A)&&mData->mByteCode.size()>3] cSin C[IsCommutativeOrParamSwappableBinaryOpcode(C)]",
								"B cSinCos {GetParamSwappedBinaryOpcode(C)}",
								"    with C = " << FP_TRACE_OPCODENAME(C)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lnd;
						}
					}
				}
				break;
			case cSinh:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A)&&mData->mByteCode.size()>3)
				{
					if(ByteCodePtr[-2] == cCosh)
					{
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(506,
								"B[B==A] cCosh A[IsVarOpcode(A)&&mData->mByteCode.size()>3] cSinh C[IsCommutativeOrParamSwappableBinaryOpcode(C)]",
								"B cSinhCosh {GetParamSwappedBinaryOpcode(C)}",
								"    with C = " << FP_TRACE_OPCODENAME(C)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lne;
						}
					}
				}
				break;
			}
		}
	}
	goto Laa;
Laa: mData->mByteCode.push_back(opcode); return;
Lab: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lnf: FP_TRACE_BYTECODE_ADD(cAbs);
     goto TailCall_cAbs;
Lac: ImmedPtr[0] = fp_abs(x); return;
Lad: ImmedPtr[0] = fp_acos(x); return;
Lae: ImmedPtr[0] = fp_acosh(x); return;
Laf: mData->mImmed.push_back(Value_t(4));
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
Lng: opcode = cMul;
Lnh: FP_ReDefinePointers();
Lni: FP_TRACE_BYTECODE_ADD(cMul);
     goto TailCall_cMul;
Lag: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(Value_t(4));
Lnj: mData->mByteCode.push_back(cImmed); goto Lng;
Lah: ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
Lfa: opcode = cMul; goto Lni;
Lai: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSub;
Lnk: FP_TRACE_BYTECODE_ADD(cSub);
     goto TailCall_cSub;
Laj: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lnl: FP_ReDefinePointers();
Lnm: FP_TRACE_BYTECODE_ADD(cAdd);
     goto TailCall_cAdd;
Lak: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Lnn: AddFunctionOpcode(cAdd);
Lno: opcode = cRSub;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cRSub);
     goto TailCall_cRSub;
Lal: ImmedPtr[0] = -x;
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lnn;
Lam: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lno;
Lan: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lnp: AddFunctionOpcode(cAdd);
Lnq: AddFunctionOpcode(B);
Loa: opcode = cSub;
     FP_ReDefinePointers(); goto Lnk;
Lao: ImmedPtr[0] = -x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lnp;
Lap: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lnq;
Laq: ImmedPtr[-1] = y+x;
Lba: mData->mImmed.pop_back();
Ldn: mData->mByteCode.pop_back(); return;
Lbb: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lnn;
Lbc: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lnn;
Lbd: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cNotNot;
Lob: FP_TRACE_BYTECODE_ADD(cNotNot);
     goto TailCall_cNotNot;
Lbe: ImmedPtr[-1] = fp_and(x,y); goto Lba;
Lbf: ImmedPtr[0] = fp_asin(x); return;
Lbg: ImmedPtr[0] = fp_asinh(x); return;
Lbh: ImmedPtr[0] = fp_atan(x); return;
Lbi: ImmedPtr[-1] = fp_atan2(y,x); goto Lba;
Lbj: ImmedPtr[0] = fp_atanh(x); return;
Lbk: ImmedPtr[0] = fp_cbrt(x); return;
Lbl: mData->mByteCode.pop_back();
     AddFunctionOpcode(cFloor);
Loc: opcode = cNeg;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cNeg);
     goto TailCall_cNeg;
Lbm: ImmedPtr[0] = fp_ceil(x); return;
Lbn: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lod: FP_TRACE_BYTECODE_ADD(cCos);
     goto TailCall_cCos;
Lbo: ImmedPtr[0] = fp_cos(x); return;
Lbp: ByteCodePtr[0] = cDup;
     opcode = cInv;
Loe: FP_TRACE_BYTECODE_ADD(cInv);
     goto TailCall_cInv;
Lbq: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinCos); return;
Lca: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     FP_TRACE_BYTECODE_ADD(cCosh);
     goto TailCall_cCosh;
Lcb: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSqr);
     mData->mImmed.push_back(Value_t(1));
Lof: mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cAdd);
Log: opcode = cSqrt;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cSqrt);
     goto TailCall_cSqrt;
Lcc: ImmedPtr[0] = fp_cosh(x); return;
Lcd: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinhCosh); return;
Lce: ImmedPtr[0] = RadiansToDegrees(x); return;
Lcf: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSec); goto Lng;
Lcg: mData->mByteCode.pop_back();
     AddFunctionOpcode(cTan); goto Lng;
Lch: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSin); goto Lng;
Lci: mData->mImmed.push_back(Value_t());
     ByteCodePtr[0] = cImmed;
Loh: AddFunctionOpcode(cMul);
     mData->mImmed.push_back(Value_t(1));
Loi: mData->mByteCode.push_back(cImmed);
Loj: opcode = cAdd; goto Lnl;
Lcj: mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     AddFunctionOpcode(cExp); goto Lng;
Lck: mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     AddFunctionOpcode(cExp2); goto Lng;
Lcl: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lfa;
Lcm: mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     AddFunctionOpcode(cPow); goto Lng;
Lcn: mData->mByteCode.pop_back();
     AddFunctionOpcode(cCos); goto Lng;
Lco: mData->mByteCode.pop_back();
     AddFunctionOpcode(cCsc); goto Lng;
Lcp: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cTan;
Lok: FP_TRACE_BYTECODE_ADD(cTan);
     goto TailCall_cTan;
Lcq: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cTanh;
Lol: FP_TRACE_BYTECODE_ADD(cTanh);
     goto TailCall_cTanh;
Lda: mData->mByteCode.pop_back();
     AddFunctionOpcode(cCot); goto Lng;
Ldb: ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lom: FP_TRACE_BYTECODE_ADD(cDiv);
     goto TailCall_cDiv;
Ldc: ImmedPtr[-1] = y/x; goto Lba;
Ldd: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Lon: opcode = cDeg;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cDeg);
     goto TailCall_cDeg;
Lde: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Loo: opcode = cRad;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cRad);
     goto TailCall_cRad;
Ldf: ImmedPtr[-1] = y/x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lng;
Ldg: ImmedPtr[0] = Value_t(1)/x; goto Lfa;
Ldh: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cMul);
Lop: FP_ReDefinePointers(); goto Lom;
Ldi: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed);
Loq: opcode = cRDiv;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cRDiv);
     goto TailCall_cRDiv;
Ldj: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(B); goto Loq;
Ldk: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lpa: FP_TRACE_BYTECODE_ADD(cEqual);
     goto TailCall_cEqual;
Ldl: ImmedPtr[-1] = fp_equal(y,x); goto Lba;
Ldm: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cExp);
     mData->mImmed.push_back(fp_exp(x)); goto Lnj;
Ldo: ImmedPtr[0] = fp_exp(x); return;
Ldp: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cExp2);
     mData->mImmed.push_back(fp_exp2(x)); goto Lnj;
Ldq: ImmedPtr[0] = fp_exp2(x); return;
Lea: mData->mImmed.push_back(fp_log(Value_t(2)));
     mData->mByteCode.push_back(cImmed);
Lpb: AddFunctionOpcode(cMul);
     opcode = cExp;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cExp);
     goto TailCall_cExp;
Leb: mData->mByteCode.pop_back();
     AddFunctionOpcode(cCeil); goto Loc;
Lec: ImmedPtr[0] = fp_floor(x); return;
Led: ImmedPtr[-1] = fp_less(x,y); goto Lba;
Lee: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
Ljm: AddFunctionOpcode(cAbsNot); return;
Lef: ImmedPtr[0] = Value_t(0.5)/x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cMul);
     opcode = cNotNot;
     FP_ReDefinePointers(); goto Lob;
Leg: ImmedPtr[-1] = fp_lessOrEq(x,y); goto Lba;
Leh: mData->mImmed.pop_back();
Ljd: mData->mByteCode.pop_back();
Lpc: AddFunctionOpcode(cAbsNotNot); return;
Lei: ImmedPtr[0] = fp_int(x); return;
Lej: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSec;
     FP_TRACE_BYTECODE_ADD(cSec);
     goto TailCall_cSec;
Lek: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSin;
Lpd: FP_TRACE_BYTECODE_ADD(cSin);
     goto TailCall_cSin;
Lel: mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     opcode = cPow;
Lpe: FP_ReDefinePointers();
Lpf: FP_TRACE_BYTECODE_ADD(cPow);
     goto TailCall_cPow;
Lem: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cCos; goto Lod;
Len: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cCsc;
     FP_TRACE_BYTECODE_ADD(cCsc);
     goto TailCall_cCsc;
Leo: mData->mByteCode.pop_back();
     AddFunctionOpcode(cRSqrt); return;
Lep: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lpg: opcode = cCot;
     FP_TRACE_BYTECODE_ADD(cCot);
     goto TailCall_cCot;
Leq: ImmedPtr[0] = Value_t(1)/x; return;
Lfb: ImmedPtr[0] = Value_t(0.5)/x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cMul);
     opcode = cNot;
     FP_ReDefinePointers();
Lph: FP_TRACE_BYTECODE_ADD(cNot);
     goto TailCall_cNot;
Lfc: ImmedPtr[-1] = fp_less(y,x); goto Lba;
Lfd: mData->mImmed.pop_back();
Lje: mData->mByteCode.pop_back(); goto Ljm;
Lfe: ImmedPtr[-1] = fp_lessOrEq(y,x); goto Lba;
Lff: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg); goto Lpc;
Lfg: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cLog);
     mData->mImmed.push_back(fp_log(x)); goto Loi;
Lfh: mData->mByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     AddFunctionOpcode(cLog);
Lpi: mData->mByteCode.push_back(cDup); goto Loj;
Lfi: ImmedPtr[0] = fp_log(x); return;
Lfj: mData->mImmed.push_back(fp_log10(fp_const_e<Value_t>()));
Lpj: ByteCodePtr[0] = cImmed; goto Lng;
Lfk: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cLog10);
     mData->mImmed.push_back(fp_log10(x)); goto Loi;
Lfl: mData->mByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     AddFunctionOpcode(cLog10); goto Lpi;
Lfm: ImmedPtr[0] = fp_log10(x); return;
Lfn: mData->mImmed.push_back(fp_log2(fp_const_e<Value_t>())); goto Lpj;
Lfo: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cLog2);
     mData->mImmed.push_back(fp_log2(x)); goto Loi;
Lfp: mData->mByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     AddFunctionOpcode(cLog2); goto Lpi;
Lfq: ImmedPtr[0] = fp_log2(x); return;
Lga: ImmedPtr[-1] = fp_max(x,y); goto Lba;
Lgb: ImmedPtr[-1] = fp_min(x,y); goto Lba;
Lgc: ImmedPtr[-1] = fp_mod(y,x); goto Lba;
Lgd: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 3; goto Lpg;
Lge: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSqr;
Lpk: FP_TRACE_BYTECODE_ADD(cSqr);
     goto TailCall_cSqr;
Lgf: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cDiv; goto Lom;
Lgg: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr); goto Loc;
Lgh: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr);
     AddFunctionOpcode(cMul); goto Loc;
Lgi: ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
     opcode = cPow; goto Lpf;
Lgj: ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2; goto Lni;
Lgk: ImmedPtr[-1] = x;
Lpl: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lnh;
Lgl: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
Lpm: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lpn: AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
Lpo: mData->mByteCode.push_back(cImmed); goto Lnh;
Lgm: mData->mImmed.pop_back(); goto Lpm;
Lgn: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(B); goto Lpn;
Lgo: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lpn;
Lgp: ByteCodePtr[-1] = cImmed; goto Ldn;
Lgq: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lni;
Lha: mData->mImmed.pop_back();
Lpp: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} return;
Lhb: ImmedPtr[0] = x+x; goto Lgj;
Lhc: ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     mData->mImmed.push_back(y*x);
     mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cMul); goto Loj;
Lhd: ImmedPtr[-1] = x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(y*x); goto Loi;
Lhe: ImmedPtr[0] = RadiansToDegrees(x); goto Lgq;
Lhf: ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lpq: AddFunctionOpcode(cMul);
Lqa: AddFunctionOpcode(B);
     opcode = cDiv; goto Lop;
Lhg: ImmedPtr[0] = -x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lpq;
Lhh: ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lqa;
Lhi: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lnh;
Lhj: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(x+x); goto Lpo;
Lhk: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();} goto Lpp;
Lhl: ImmedPtr[-1] = y*x; goto Lpl;
Lhm: ImmedPtr[0] = -x; goto Lgq;
Lhn: ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Lqb: AddFunctionOpcode(cMul); goto Loq;
Lho: ImmedPtr[0] = -x;
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lqb;
Lhp: ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Loq;
Lhq: ImmedPtr[0] = DegreesToRadians(x); goto Lgq;
Lia: ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     mData->mImmed.push_back(y*x);
     mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cMul); goto Loa;
Lib: ImmedPtr[-1] = y*x; goto Lba;
Lic: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Loc;
Lid: ByteCodePtr[0] = cDup;
     ImmedPtr -= 1;
     mData->mImmed.pop_back();
Lqc: opcode = cAdd; goto Lnm;
Lie: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lon;
Lif: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Loo;
Lig: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lpq;
Lih: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lqd: AddFunctionOpcode(cSqr); goto Lnh;
Lii: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lqb;
Lij: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lqb;
Lik: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lqd;
Lil: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lqe: FP_TRACE_BYTECODE_ADD(cNEqual);
     goto TailCall_cNEqual;
Lim: ImmedPtr[-1] = fp_nequal(y,x); goto Lba;
Lin: ImmedPtr[0] = -x; goto Lcl;
Lio: ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     opcode = cSin;
     FP_ReDefinePointers(); goto Lpd;
Lip: ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     opcode = cSinh;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cSinh);
     goto TailCall_cSinh;
Liq: ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     opcode = cTan;
     FP_ReDefinePointers(); goto Lok;
Lja: ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     opcode = cTanh;
     FP_ReDefinePointers(); goto Lol;
Ljb: ImmedPtr[0] = -x; return;
Ljc: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lph;
Ljf: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cNEqual; goto Lqe;
Ljg: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cLessOrEq;
     FP_TRACE_BYTECODE_ADD(cLessOrEq);
     goto TailCall_cLessOrEq;
Ljh: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cLess;
     FP_TRACE_BYTECODE_ADD(cLess);
     goto TailCall_cLess;
Lji: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cGreaterOrEq;
     FP_TRACE_BYTECODE_ADD(cGreaterOrEq);
     goto TailCall_cGreaterOrEq;
Ljj: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cGreater;
     FP_TRACE_BYTECODE_ADD(cGreater);
     goto TailCall_cGreater;
Ljk: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cEqual; goto Lpa;
Ljl: ImmedPtr[0] = fp_not(x); return;
Ljn: ImmedPtr[-1] = fp_or(x,y); goto Lba;
Ljo: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cAbs);
     mData->mImmed.push_back(x+x);
Lqf: mData->mByteCode.push_back(cImmed); goto Lpe;
Ljp: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back(); goto Lpb;
Ljq: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cMul);
     opcode = cExp2;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cExp2);
     goto TailCall_cExp2;
Lka: ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lpe;
Lkb: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cMul); goto Lpe;
Lkc: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lpf;
Lkd: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(x); goto Lqf;
Lke: ImmedPtr[0] = Value_t(); goto Loh;
Lkf: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Log;
Lkg: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     opcode = cCbrt;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cCbrt);
     goto TailCall_cCbrt;
Lkh: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cCbrt);
Lqg: opcode = cInv;
     FP_ReDefinePointers(); goto Loe;
Lki: mData->mImmed.pop_back(); goto Leo;
Lkj: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lqg;
Lkk: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cAbs);
     mData->mImmed.push_back(y*x); goto Lqf;
Lkl: ImmedPtr[0] = x+x; goto Lkc;
Lkm: ImmedPtr[-1] = fp_pow(y,x); goto Lba;
Lkn: mData->mByteCode.pop_back();
     AddFunctionOpcode(cTanh); goto Lqg;
Lko: mData->mImmed.push_back(Value_t()); goto Lpj;
Lkp: ImmedPtr[0] = DegreesToRadians(x); goto Lcl;
Lkq: ImmedPtr[0] = DegreesToRadians(x); return;
Lla: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinCos); goto Lqg;
Llb: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSin); goto Loc;
Llc: ImmedPtr[0] = fp_sin(x); return;
Lld: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSqr);
     mData->mImmed.push_back(Value_t(-1)); goto Lof;
Lle: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSinh); goto Loc;
Llf: ImmedPtr[0] = fp_sinh(x); return;
Llg: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lpk;
Llh: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
Lqh: opcode = cHypot;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cHypot);
     goto TailCall_cHypot;
Lli: for(unsigned tmp=5; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(B); goto Lqh;
Llj: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cAbs; goto Lnf;
Llk: ImmedPtr[0] = fp_sqrt(x); return;
Lll: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lqc;
Llm: ImmedPtr[-1] = y-x; goto Lba;
Lln: ImmedPtr[0] = -x; goto Lqc;
Llo: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cAdd);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lno;
Llp: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cSub); goto Lno;
Llq: mData->mByteCode.pop_back();
     AddFunctionOpcode(cTan); goto Loc;
Lma: ImmedPtr[0] = fp_tan(x); return;
Lmb: mData->mByteCode.pop_back();
     AddFunctionOpcode(cTanh); goto Loc;
Lmc: ImmedPtr[0] = fp_tanh(x); return;
Lmd: ImmedPtr[0] = fp_trunc(x); return;
Lme: ImmedPtr[-1] = x-y;
Lqi: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lqj: AddFunctionOpcode(A); return;
Lmf: ImmedPtr[0] = fp_tan(x);
Lqk: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back(); goto Lqj;
Lmg: ImmedPtr[0] = fp_log(x); goto Lqk;
Lmh: ImmedPtr[0] = fp_log2(x); goto Lqk;
Lmi: ImmedPtr[0] = fp_exp(x); goto Lqk;
Lmj: ImmedPtr[0] = fp_pow(Value_t(10),x); goto Lqk;
Lmk: ImmedPtr[0] = fp_exp2(x); goto Lqk;
Lml: ImmedPtr[-1] = x/y; goto Lqi;
Lmm: ImmedPtr[-1] = x/y;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lql: AddFunctionOpcode(OppositeComparisonOpcode(A)); return;
Lmn: ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back(); goto Lql;
Lmo: ImmedPtr[-1] = fp_pow(x,Value_t(1)/y); goto Lqi;
Lmp: ImmedPtr[0] = fp_asinh(x); goto Lqk;
Lmq: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cAbs);
     mData->mImmed.push_back(fp_sqrt(x));
     mData->mByteCode.push_back(cImmed); goto Lqj;
Lna: ImmedPtr[0] = fp_atanh(x); goto Lqk;
Lnb: mData->mByteCode.push_back(cDup); return;
Lnc: ByteCodePtr[0] = cDup; return;
Lnd: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinCos);
Lqm: AddFunctionOpcode(GetParamSwappedBinaryOpcode(C)); return;
Lne: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinhCosh); goto Lqm;
return;
// This list of dummy gotos is here to inhibit
// compiler warnings on unused labels
goto TailCall_cAcos;goto TailCall_cAcosh;goto TailCall_cAnd;
goto TailCall_cAsin;goto TailCall_cAsinh;goto TailCall_cAtan;
goto TailCall_cAtan2;goto TailCall_cAtanh;goto TailCall_cCeil;
goto TailCall_cFloor;goto TailCall_cInt;goto TailCall_cLog;
goto TailCall_cLog10;goto TailCall_cLog2;goto TailCall_cMax;
goto TailCall_cMin;goto TailCall_cMod;goto TailCall_cOr;
goto TailCall_cRDiv;goto TailCall_cRad;goto TailCall_cSec;
goto TailCall_cSin;goto TailCall_cSinh;goto TailCall_cSqrt;
goto TailCall_cSub;goto TailCall_cTan;goto TailCall_cTanh;
goto TailCall_cTrunc;
#endif

#if((FP_COMPLEX_VERSION) && (FP_FLOAT_VERSION))
	Value_t x;
	Value_t y;
	unsigned B;
	unsigned A;
	unsigned C;
	unsigned D;
	switch(opcode)
	{
	TailCall_cAbs:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAbs:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(201,"cNeg cAbs", "cAbs", "");
			/* opcode = cAbs; */ // redundant, matches cAbs @ 0
			goto Lab;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(132,
				"x cAbs",
				"[fp_abs(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lac;
		}
		goto Default0;
	TailCall_cAcos:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAcos:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(172,
				"x cAcos",
				"[fp_acos(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lad;
		}
		goto Default0;
	TailCall_cAcosh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAcosh:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(169,
				"x cAcosh",
				"[fp_acosh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lae;
		}
		goto Default0;
	TailCall_cAdd:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAdd:
		switch(ByteCodePtr[0])
		{
		case cDup:
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(310,"cDup cAdd cDup cAdd", "[Value_t(4)] cMul", "");
					goto Laf;
				}
				break;
			case cMul:
				if(ByteCodePtr[-2] == cAdd)
				{
					if(ByteCodePtr[-3] == cDup)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(311,"cDup cAdd cMul cDup cAdd", "cMul [Value_t(4)] cMul", "");
						goto Lag;
					}
				}
				break;
			}
			goto Default1;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(313,
						"cDup x cMul cAdd",
						"[x+Value_t(1)] cMul",
						"    with x = " << x << "\n");
					goto Lah;
				}
			}
			goto Default1;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(199,"cNeg cAdd", "cSub", "");
			goto Lai;
		case cImmed:
			x = ImmedPtr[0];
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(127,
						"y cAdd x cAdd",
						"[y+x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cAdd; */ // redundant, matches cAdd @ 0
					goto Laj;
				}
				break;
			case cRSub:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(298,
							"y cAdd cRSub x cAdd",
							"[ y+x] cAdd cRSub",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lak;
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(299,
						"cNeg cRSub x cAdd",
						"[-x] cAdd cRSub",
						"    with x = " << x << "\n");
					goto Lal;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(297,
						"y cRSub x cAdd",
						"[ y+x] cRSub",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lam;
				}
				break;
			case cSub:
				B = ByteCodePtr[-2];
				if(IsVarOpcode(B))
				{
					switch(ByteCodePtr[-3])
					{
					case cAdd:
						if(ByteCodePtr[-4] == cImmed)
						{
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(292,
								"y cAdd B[IsVarOpcode(B)] cSub x cAdd",
								"[ y+x] cAdd B cSub",
								"    with x = " << x
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-4] = cImmed; */ // redundant, matches y @ 5
							goto Lan;
						}
						break;
					case cNeg:
						FP_TRACE_BYTECODE_OPTIMIZATION(293,
							"cNeg B[IsVarOpcode(B)] cSub x cAdd",
							"[-x] cAdd B cSub",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						goto Lao;
					case cImmed:
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(291,
							"y B[IsVarOpcode(B)] cSub x cAdd",
							"[ y+x] B cSub",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lap;
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(105,
					"y x cAdd",
					"[y+x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Laq;
			}
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(57,
					"x[x==Value_t()] cAdd",
					"",
					"    with x = " << x << "\n");
				goto Lba;
			}
			break;
		default: Default1:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				if(ByteCodePtr[-1] == cRSub)
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(290,
							"x cRSub A[IsVarOpcode(A)] cAdd",
							"[DO_STACKPLUS1] A [x] cAdd cRSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						incStackPtr();
						--mStackPtr;
						goto Lbb;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(295,
						"cRSub A[IsVarOpcode(A)] cAdd",
						"[DO_STACKPLUS1] A cAdd cRSub",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Lbc;
				}
			}
		}
		goto Default0;
	TailCall_cAnd:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAnd:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(224,"cDup cAnd", "cNotNot", "");
			goto Lbd;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(117,
					"y x cAnd",
					"[fp_and(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbe;
			}
			break;
		}
		goto Default0;
	TailCall_cArg:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cArg:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(190,
				"x cArg",
				"[fp_arg(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbf;
		}
		goto Default0;
	TailCall_cAsin:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAsin:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(173,
				"x cAsin",
				"[fp_asin(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbg;
		}
		goto Default0;
	TailCall_cAsinh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAsinh:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(170,
				"x cAsinh",
				"[fp_asinh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbh;
		}
		goto Default0;
	TailCall_cAtan:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAtan:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(Value_t(x.real(),fp_abs(x.imag()))!=Value_t(0,1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(174,
					"x[Value_t(x.real(),fp_abs(x.imag()))!=Value_t(0,1)] cAtan",
					"[fp_atan(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lbi;
			}
		}
		goto Default0;
	TailCall_cAtan2:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAtan2:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(139,
					"y x cAtan2",
					"[fp_atan2(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbj;
			}
		}
		goto Default0;
	TailCall_cAtanh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cAtanh:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(Value_t(fp_abs(x.real()),x.imag())!=Value_t(1,0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(171,
					"x[Value_t(fp_abs(x.real()),x.imag())!=Value_t(1,0)] cAtanh",
					"[fp_atanh(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lbk;
			}
		}
		goto Default0;
	TailCall_cCbrt:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCbrt:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(175,
				"x cCbrt",
				"[fp_cbrt(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbl;
		}
		goto Default0;
	TailCall_cCeil:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCeil:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(402,"cNeg cCeil", "cFloor cNeg", "");
			goto Lbm;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(135,
				"x cCeil",
				"[fp_ceil(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbn;
		default:
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(396,
					"A[IsAlwaysIntegerOpcode(A)] cCeil",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cConj:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cConj:
		switch(ByteCodePtr[0])
		{
		case cConj:
			FP_TRACE_BYTECODE_OPTIMIZATION(63,"cConj cConj", "", "");
			goto Lbo;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(193,
				"x cConj",
				"[fp_conj(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbp;
		}
		goto Default0;
	TailCall_cCos:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCos:
		switch(ByteCodePtr[0])
		{
		case cAcos:
			FP_TRACE_BYTECODE_OPTIMIZATION(346,"cAcos cCos", "", "");
			goto Lbo;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(238,"cNeg cCos", "cCos", "");
			/* opcode = cCos; */ // redundant, matches cCos @ 0
			goto Lbq;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(176,
				"x cCos",
				"[fp_cos(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lca;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				switch(ByteCodePtr[-1])
				{
				case cSec:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(500,
							"B[B==A] cSec A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCos",
							"B cSec cDup cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cSec; */ // redundant, matches cSec @ 2
						goto Lcb;
					}
					break;
				case cSin:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(494,
							"B[B==A] cSin A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCos",
							"B cSinCos",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lcc;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cCosh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCosh:
		switch(ByteCodePtr[0])
		{
		case cAsinh:
			FP_TRACE_BYTECODE_OPTIMIZATION(450,"cAsinh cCosh", "[DO_STACKPLUS1] cSqr [Value_t(1)] cAdd cSqrt", "");
			incStackPtr();
			--mStackPtr;
			goto Lcd;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(239,"cNeg cCosh", "cCosh", "");
			/* opcode = cCosh; */ // redundant, matches cCosh @ 0
			goto Lce;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(177,
				"x cCosh",
				"[fp_cosh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lcf;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				if(ByteCodePtr[-1] == cSinh)
				{
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(507,
							"B[B==A] cSinh A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCosh",
							"B cSinhCosh",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lcg;
					}
				}
			}
		}
		goto Default0;
	TailCall_cCot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCot:
		A = ByteCodePtr[0];
		if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
		{
			if(ByteCodePtr[-1] == cTan)
			{
				B = ByteCodePtr[-2];
				if(B==A)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(498,
						"B[B==A] cTan A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCot",
						"B cTan cDup cInv",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", B = " << FP_TRACE_OPCODENAME(B)
						    << "\n");
					/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
					/* ByteCodePtr[-1] = cTan; */ // redundant, matches cTan @ 2
					goto Lcb;
				}
			}
		}
		goto Default0;
	TailCall_cCsc:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cCsc:
		A = ByteCodePtr[0];
		if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
		{
			if(ByteCodePtr[-1] == cSin)
			{
				B = ByteCodePtr[-2];
				if(B==A)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(496,
						"B[B==A] cSin A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cCsc",
						"B cSin cDup cInv",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", B = " << FP_TRACE_OPCODENAME(B)
						    << "\n");
					/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
					/* ByteCodePtr[-1] = cSin; */ // redundant, matches cSin @ 2
					goto Lcb;
				}
			}
		}
		goto Default0;
	TailCall_cDeg:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cDeg:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(133,
				"x cDeg",
				"[RadiansToDegrees(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lch;
		}
		goto Default0;
	TailCall_cDiv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cDiv:
		switch(ByteCodePtr[0])
		{
		case cCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(250,"cCos cDiv", "cSec cMul", "");
			goto Lci;
		case cCot:
			FP_TRACE_BYTECODE_OPTIMIZATION(254,"cCot cDiv", "cTan cMul", "");
			goto Lcj;
		case cCsc:
			FP_TRACE_BYTECODE_OPTIMIZATION(252,"cCsc cDiv", "cSin cMul", "");
			goto Lck;
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(78,"cDup cDiv", "[Value_t()] cMul [Value_t(1)] cAdd", "");
			goto Lcl;
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(408,"cExp cDiv", "cNeg cExp cMul", "");
			goto Lcm;
		case cExp2:
			FP_TRACE_BYTECODE_OPTIMIZATION(409,"cExp2 cDiv", "cNeg cExp2 cMul", "");
			goto Lcn;
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(213,"cInv cDiv", "cMul", "");
			goto Lco;
		case cPow:
			FP_TRACE_BYTECODE_OPTIMIZATION(407,"cPow cDiv", "cNeg cPow cMul", "");
			goto Lcp;
		case cSec:
			FP_TRACE_BYTECODE_OPTIMIZATION(253,"cSec cDiv", "cCos cMul", "");
			goto Lcq;
		case cSin:
			FP_TRACE_BYTECODE_OPTIMIZATION(249,"cSin cDiv", "cCsc cMul", "");
			goto Lda;
		case cSinCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(502,"cSinCos cDiv", "cTan", "");
			goto Ldb;
		case cSinhCosh:
			FP_TRACE_BYTECODE_OPTIMIZATION(509,"cSinhCosh cDiv", "cTanh", "");
			goto Ldc;
		case cTan:
			FP_TRACE_BYTECODE_OPTIMIZATION(251,"cTan cDiv", "cCot cMul", "");
			goto Ldd;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(125,
						"cNeg x[x!=Value_t()] cDiv",
						"[-x] cDiv",
						"    with x = " << x << "\n");
					/* opcode = cDiv; */ // redundant, matches cDiv @ 0
					goto Lde;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(103,
						"y x[x!=Value_t()] cDiv",
						"[y/x]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Ldf;
				}
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(56,
					"x[x==Value_t(1)] cDiv",
					"",
					"    with x = " << x << "\n");
				goto Lba;
			}
			if(x!=Value_t(0))
			{
				if(ByteCodePtr[-1] == cMul)
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						y = ImmedPtr[-1];
						if((y/x)==fp_const_rad_to_deg<Value_t>())
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(321,
								"y[(y/x)==fp_const_rad_to_deg<Value_t>()] cMul x[x!=Value_t(0)] cDiv",
								"cDeg",
								"    with x = " << x
								    << ", y = " << y
								    << "\n");
							goto Ldg;
						}
						if((y/x)==fp_const_deg_to_rad<Value_t>())
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(322,
								"y[(y/x)==fp_const_deg_to_rad<Value_t>()] cMul x[x!=Value_t(0)] cDiv",
								"cRad",
								"    with x = " << x
								    << ", y = " << y
								    << "\n");
							goto Ldh;
						}
						FP_TRACE_BYTECODE_OPTIMIZATION(323,
							"y cMul x[x!=Value_t(0)] cDiv",
							"[y/x] cMul",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
						goto Ldi;
					}
				}
				FP_TRACE_BYTECODE_OPTIMIZATION(325,
					"x[x!=Value_t(0)] cDiv",
					"[Value_t(1)/x] cMul",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Ldj;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDiv:
					B = ByteCodePtr[-2];
					if(IsVarOpcode(B))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(271,
							"B[IsVarOpcode(B)] cDiv A[IsVarOpcode(A)] cDiv",
							"[DO_STACKPLUS1] B A cMul cDiv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						incStackPtr();
						--mStackPtr;
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* opcode = cDiv; */ // redundant, matches cDiv @ 0
						goto Ldk;
					}
					break;
				case cRDiv:
					switch(ByteCodePtr[-2])
					{
					case cImmed:
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(266,
							"x cRDiv A[IsVarOpcode(A)] cDiv",
							"A cMul [x] cRDiv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Ldl;
					default:
						B = ByteCodePtr[-2];
						if(IsVarOpcode(B))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(265,
								"B[IsVarOpcode(B)] cRDiv A[IsVarOpcode(A)] cDiv",
								"A cMul B cRDiv",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							goto Ldm;
						}
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cEqual:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(359,
						"cAbs x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Ldn;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(361,
						"cSqr x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Ldn;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(115,
					"y x cEqual",
					"[fp_equal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldo;
			}
		}
		goto Default0;
	TailCall_cExp:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cExp:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(404,
					"x cAdd cExp",
					"cExp [fp_exp(x)] cMul",
					"    with x = " << x << "\n");
				goto Ldp;
			}
			break;
		case cLog:
			A = ByteCodePtr[-1];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(340,
					"A[IsNeverNegativeValueOpcode(A)] cLog cExp",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Lbo;
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(178,
				"x cExp",
				"[fp_exp(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Ldq;
		}
		goto Default0;
	TailCall_cExp2:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cExp2:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(405,
					"x cAdd cExp2",
					"cExp2 [fp_exp2(x)] cMul",
					"    with x = " << x << "\n");
				goto Lea;
			}
			break;
		case cLog2:
			A = ByteCodePtr[-1];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(341,
					"A[IsNeverNegativeValueOpcode(A)] cLog2 cExp2",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Lbo;
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(179,
				"x cExp2",
				"[fp_exp2(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Leb;
		}
		FP_TRACE_BYTECODE_OPTIMIZATION(479,"cExp2", "[DO_STACKPLUS1] [fp_log(Value_t(2))] cMul cExp", "");
		incStackPtr();
		--mStackPtr;
		goto Lec;
	TailCall_cFloor:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cFloor:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(401,"cNeg cFloor", "cCeil cNeg", "");
			goto Led;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(136,
				"x cFloor",
				"[fp_floor(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lee;
		default:
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(395,
					"A[IsAlwaysIntegerOpcode(A)] cFloor",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cGreater:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cGreater:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(113,
					"y x cGreater",
					"[fp_less(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lef;
			}
		}
		goto Default0;
	TailCall_cGreaterOrEq:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cGreaterOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(114,
					"y x cGreaterOrEq",
					"[fp_lessOrEq(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Leg;
			}
		}
		goto Default0;
	TailCall_cHypot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cHypot:
		if(ByteCodePtr[0] == cSinCos)
		{
			FP_TRACE_BYTECODE_OPTIMIZATION(84,"cSinCos cHypot", "[Value_t()] cMul [Value_t(1)] cAdd", "");
			goto Lcl;
		}
		goto Default0;
	TailCall_cImag:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cImag:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(81,"cAbs cImag", "[Value_t()] cMul", "");
			goto Leh;
		case cReal:
			FP_TRACE_BYTECODE_OPTIMIZATION(80,"cReal cImag", "[Value_t()] cMul", "");
			goto Leh;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(192,
				"x cImag",
				"[fp_imag(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lei;
		}
		goto Default0;
	TailCall_cInt:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cInt:
		switch(ByteCodePtr[0])
		{
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(137,
				"x cInt",
				"[fp_int(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lej;
		default:
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(397,
					"A[IsAlwaysIntegerOpcode(A)] cInt",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cInv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cInv:
		switch(ByteCodePtr[0])
		{
		case cCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(256,"cCos cInv", "cSec", "");
			goto Lek;
		case cCot:
			FP_TRACE_BYTECODE_OPTIMIZATION(260,"cCot cInv", "cTan", "");
			goto Ldb;
		case cCsc:
			FP_TRACE_BYTECODE_OPTIMIZATION(258,"cCsc cInv", "cSin", "");
			goto Lel;
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(62,"cInv cInv", "", "");
			goto Lbo;
		case cPow:
			FP_TRACE_BYTECODE_OPTIMIZATION(355,"cPow cInv", "cNeg cPow", "");
			goto Lem;
		case cSec:
			FP_TRACE_BYTECODE_OPTIMIZATION(259,"cSec cInv", "cCos", "");
			goto Len;
		case cSin:
			FP_TRACE_BYTECODE_OPTIMIZATION(255,"cSin cInv", "cCsc", "");
			goto Leo;
		case cSqrt:
			FP_TRACE_BYTECODE_OPTIMIZATION(206,"cSqrt cInv", "cRSqrt", "");
			goto Lep;
		case cTan:
			FP_TRACE_BYTECODE_OPTIMIZATION(257,"cTan cInv", "cCot", "");
			goto Leq;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(101,
					"x[x!=Value_t()] cInv",
					"[Value_t(1)/x]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lfa;
			}
			break;
		}
		goto Default0;
	TailCall_cLess:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLess:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				A = ByteCodePtr[-1];
				if(IsNeverNegativeValueOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(301,
						"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(0)] cLess",
						"A [x] cMul",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
					goto Lfb;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(111,
					"y x cLess",
					"[fp_less(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lfc;
			}
		}
		goto Default0;
	TailCall_cLessOrEq:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLessOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(112,
					"y x cLessOrEq",
					"[fp_lessOrEq(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lfd;
			}
		}
		goto Default0;
	TailCall_cLog:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLog:
		switch(ByteCodePtr[0])
		{
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(343,"cExp cLog", "", "");
			goto Lbo;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(x>Value_t(0))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(491,
						"x[x>Value_t(0)] cMul cLog",
						"cLog [fp_log(x)] cAdd",
						"    with x = " << x << "\n");
					goto Lfe;
				}
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(180,
					"x[x!=Value_t(0)] cLog",
					"[fp_log(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lff;
			}
			break;
		}
		goto Default0;
	TailCall_cLog10:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLog10:
		switch(ByteCodePtr[0])
		{
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(481,"cExp cLog10", "[DO_STACKPLUS1] [fp_log10(fp_const_e<Value_t>())] cMul", "");
			incStackPtr();
			--mStackPtr;
			goto Lfg;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(x>Value_t(0))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(492,
						"x[x>Value_t(0)] cMul cLog10",
						"cLog10 [fp_log10(x)] cAdd",
						"    with x = " << x << "\n");
					goto Lfh;
				}
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(181,
					"x[x!=Value_t(0)] cLog10",
					"[fp_log10(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lfi;
			}
			break;
		}
		goto Default0;
	TailCall_cLog2:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cLog2:
		switch(ByteCodePtr[0])
		{
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(480,"cExp cLog2", "[DO_STACKPLUS1] [fp_log2(fp_const_e<Value_t>())] cMul", "");
			incStackPtr();
			--mStackPtr;
			goto Lfj;
		case cExp2:
			FP_TRACE_BYTECODE_OPTIMIZATION(344,"cExp2 cLog2", "", "");
			goto Lbo;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(x>Value_t(0))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(490,
						"x[x>Value_t(0)] cMul cLog2",
						"cLog2 [fp_log2(x)] cAdd",
						"    with x = " << x << "\n");
					goto Lfk;
				}
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(182,
					"x[x!=Value_t(0)] cLog2",
					"[fp_log2(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lfl;
			}
			break;
		}
		goto Default0;
	TailCall_cMax:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMax:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(60,"cDup cMax", "", "");
			goto Lbo;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(141,
					"y x cMax",
					"[fp_max(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lfm;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(66,
							"B[B==A] cDup A[IsVarOpcode(A)] cMax",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Lbo;
					}
					break;
				case cMax:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(68,
							"B[B==A] cMax A[IsVarOpcode(A)] cMax",
							"B cMax",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMax; */ // redundant, matches cMax @ 2
						goto Lbo;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cMin:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMin:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(59,"cDup cMin", "", "");
			goto Lbo;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(140,
					"y x cMin",
					"[fp_min(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lfn;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(65,
							"B[B==A] cDup A[IsVarOpcode(A)] cMin",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Lbo;
					}
					break;
				case cMin:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(67,
							"B[B==A] cMin A[IsVarOpcode(A)] cMin",
							"B cMin",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMin; */ // redundant, matches cMin @ 2
						goto Lbo;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cMod:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMod:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x!=Value_t())
			{
				if(ByteCodePtr[-1] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(104,
						"y x[x!=Value_t()] cMod",
						"[fp_mod(y,x)]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Lfo;
				}
			}
		}
		goto Default0;
	TailCall_cMul:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cMul:
		switch(ByteCodePtr[0])
		{
		case cCsc:
			A = ByteCodePtr[-1];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>3)
			{
				if(ByteCodePtr[-2] == cCos)
				{
					B = ByteCodePtr[-3];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(508,
							"B[B==A] cCos A[IsVarOpcode(A)&&mData->mByteCode.size()>3] cCsc cMul",
							"B cCot",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
						goto Lfp;
					}
				}
			}
			goto Default2;
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(202,"cDup cMul", "cSqr", "");
			goto Lfq;
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(214,"cInv cMul", "cDiv", "");
			goto Lga;
		case cNeg:
			switch(ByteCodePtr[-1])
			{
			case cDup:
				FP_TRACE_BYTECODE_OPTIMIZATION(467,"cDup cNeg cMul", "cSqr cNeg", "");
				goto Lgb;
			default:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-2] == cMul)
					{
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(473,
								"B[B==A] cMul A[IsVarOpcode(A)] cNeg cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lgc;
						}
					}
				}
			}
			goto Default2;
		case cPow:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(314,
						"cDup x cPow cMul",
						"[x+Value_t(1)] cPow",
						"    with x = " << x << "\n");
					goto Lgd;
				}
			}
			goto Default2;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					A = ByteCodePtr[-2];
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(93,
							"A[IsVarOpcode(A)] cMul x[x==Value_t()] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lge;
					}
					goto Default3;
				default: Default3:;
					A = ByteCodePtr[-1];
					if(IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						switch(ByteCodePtr[-2])
						{
						case cImmed:
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(92,
								"y A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
								"[x] cMul",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lgf;
						default:
							B = ByteCodePtr[-2];
							if(IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								switch(ByteCodePtr[-3])
								{
								case cImmed:
									y = ImmedPtr[-1];
									FP_TRACE_BYTECODE_OPTIMIZATION(96,
										"y B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
										"A [x] cMul",
										"    with x = " << x
										    << ", A = " << FP_TRACE_OPCODENAME(A)
										    << ", B = " << FP_TRACE_OPCODENAME(B)
										    << ", y = " << y
										    << "\n");
									/* opcode = cMul; */ // redundant, matches cMul @ 0
									goto Lgg;
								default:
									C = ByteCodePtr[-3];
									if(IsVarOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(94,
											"C[IsVarOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
											"A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lgh;
									}
									if(IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(95,
											"C[IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
											"B A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lgi;
									}
								}
							}
							if(IsVarOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(90,
									"B[IsVarOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
									"[x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lge;
							}
							if(IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(91,
									"B[IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
									"A [x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lgj;
							}
						}
					}
					if(IsVarOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(88,
							"A[IsVarOpcode(A)] x[x==Value_t()] cMul",
							"[x]",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						goto Lgk;
					}
					if(IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(89,
							"A[IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t()] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lgl;
					}
				}
			}
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				switch(ByteCodePtr[-2])
				{
				case cDup:
					if(x+x==Value_t(1))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(316,
							"cDup[x+x==Value_t(1)] cAdd x cMul",
							"",
							"    with x = " << x << "\n");
						goto Lgm;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(317,
						"cDup cAdd x cMul",
						"[x+x] cMul",
						"    with x = " << x << "\n");
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Lgn;
				case cMul:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(IsVarOpcode(A))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(386,
								"A[IsVarOpcode(A)] y cMul cAdd x cMul",
								"[x] cMul A [y*x] cMul cAdd",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lgo;
						}
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(385,
						"y cAdd x cMul",
						"[x] cMul [y*x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lgp;
				}
				break;
			case cDeg:
				FP_TRACE_BYTECODE_OPTIMIZATION(209,
					"cDeg x cMul",
					"[RadiansToDegrees(x)] cMul",
					"    with x = " << x << "\n");
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Lgq;
			case cDiv:
				B = ByteCodePtr[-2];
				if(IsVarOpcode(B))
				{
					switch(ByteCodePtr[-3])
					{
					case cMul:
						if(ByteCodePtr[-4] == cImmed)
						{
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(278,
								"y cMul B[IsVarOpcode(B)] cDiv x cMul",
								"[y*x] cMul B cDiv",
								"    with x = " << x
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-4] = cImmed; */ // redundant, matches y @ 5
							goto Lha;
						}
						break;
					case cNeg:
						FP_TRACE_BYTECODE_OPTIMIZATION(279,
							"cNeg B[IsVarOpcode(B)] cDiv x cMul",
							"[-x] cMul B cDiv",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						goto Lhb;
					case cImmed:
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(277,
							"y B[IsVarOpcode(B)] cDiv x cMul",
							"[y*x] B cDiv",
							"    with x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lhc;
					}
				}
				break;
			case cMul:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cDup)
					{
						if(x+x==Value_t(1))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(318,
								"cDup[x+x==Value_t(1)] cAdd cMul x cMul",
								"cMul",
								"    with x = " << x << "\n");
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lhd;
						}
						FP_TRACE_BYTECODE_OPTIMIZATION(319,
							"cDup cAdd cMul x cMul",
							"cMul [x+x] cMul",
							"    with x = " << x << "\n");
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lhe;
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					if(y*x==Value_t(1))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(70,
							"y[y*x==Value_t(1)] cMul x cMul",
							"",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Lhf;
					}
					if((y*x)==fp_const_rad_to_deg<Value_t>())
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(307,
							"y[(y*x)==fp_const_rad_to_deg<Value_t>()] cMul x cMul",
							"cDeg",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Ldg;
					}
					if((y*x)==fp_const_deg_to_rad<Value_t>())
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(308,
							"y[(y*x)==fp_const_deg_to_rad<Value_t>()] cMul x cMul",
							"cRad",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Ldh;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(128,
						"y cMul x cMul",
						"[y*x] cMul",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Lhg;
				}
				break;
			case cNeg:
				FP_TRACE_BYTECODE_OPTIMIZATION(122,
					"cNeg x cMul",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Lhh;
			case cRDiv:
				switch(ByteCodePtr[-2])
				{
				case cMul:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(285,
							"y cMul cRDiv x cMul",
							"[y*x] cMul cRDiv",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches y @ 4
						goto Lhi;
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(286,
						"cNeg cRDiv x cMul",
						"[-x] cMul cRDiv",
						"    with x = " << x << "\n");
					goto Lhj;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(284,
						"y cRDiv x cMul",
						"[y*x] cRDiv",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lhk;
				}
				break;
			case cRad:
				FP_TRACE_BYTECODE_OPTIMIZATION(210,
					"cRad x cMul",
					"[DegreesToRadians(x)] cMul",
					"    with x = " << x << "\n");
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Lhl;
			case cSub:
				if(ByteCodePtr[-2] == cMul)
				{
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(IsVarOpcode(A))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(387,
								"A[IsVarOpcode(A)] y cMul cSub x cMul",
								"[x] cMul A [y*x] cMul cSub",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lhm;
						}
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(102,
					"y x cMul",
					"[y*x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lhn;
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(55,
					"x[x==Value_t(1)] cMul",
					"",
					"    with x = " << x << "\n");
				goto Lba;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(124,
					"x[x==Value_t(-1)] cMul",
					"cNeg",
					"    with x = " << x << "\n");
				goto Lho;
			}
			if(x==Value_t(2))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(198,
					"x[x==Value_t(2)] cMul",
					"cDup cAdd",
					"    with x = " << x << "\n");
				goto Lhp;
			}
			if(x==fp_const_rad_to_deg<Value_t>())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(207,
					"x[x==fp_const_rad_to_deg<Value_t>()] cMul",
					"cDeg",
					"    with x = " << x << "\n");
				goto Lhq;
			}
			if(x==fp_const_deg_to_rad<Value_t>())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(208,
					"x[x==fp_const_deg_to_rad<Value_t>()] cMul",
					"cRad",
					"    with x = " << x << "\n");
				goto Lia;
			}
			break;
		default: Default2:;
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				switch(ByteCodePtr[-1])
				{
				case cDiv:
					B = ByteCodePtr[-2];
					if(IsVarOpcode(B))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(274,
							"B[IsVarOpcode(B)] cDiv A[IsVarOpcode(A)] cMul",
							"[DO_STACKPLUS1] A cMul B cDiv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						incStackPtr();
						--mStackPtr;
						goto Lib;
					}
					goto Default4;
				case cMul:
					switch(ByteCodePtr[-2])
					{
					case cNeg:
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(470,
								"B[B==A] cNeg cMul A[IsVarOpcode(A)] cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lgc;
						}
						goto Default5;
					default: Default5:;
						B = ByteCodePtr[-2];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(461,
								"B[B==A] cMul A[IsVarOpcode(A)] cMul",
								"B cSqr cMul",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lic;
						}
					}
					goto Default4;
				case cNeg:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(464,
							"B[B==A] cNeg A[IsVarOpcode(A)] cMul",
							"B cSqr cNeg",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lgb;
					}
					goto Default4;
				case cRDiv:
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(267,
							"x cRDiv A[IsVarOpcode(A)] cMul",
							"[DO_STACKPLUS1] A [x] cMul cRDiv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						incStackPtr();
						--mStackPtr;
						goto Lid;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(281,
						"cRDiv A[IsVarOpcode(A)] cMul",
						"[DO_STACKPLUS1] A cMul cRDiv",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Lie;
				default: Default4:;
					B = ByteCodePtr[-1];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(458,
							"B[B==A] A[IsVarOpcode(A)] cMul",
							"B cSqr",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-1] = B; */ // redundant, matches B @ 2
						goto Lfq;
					}
				}
			}
			if(IsUnaryOpcode(A))
			{
				B = ByteCodePtr[-1];
				if(IsVarOpcode(B)&&mData->mByteCode.size()>1)
				{
					if(ByteCodePtr[-2] == cMul)
					{
						C = ByteCodePtr[-3];
						if(C==A)
						{
							D = ByteCodePtr[-4];
							if(D==B)
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(477,
									"D[D==B] C[C==A] cMul B[IsVarOpcode(B)&&mData->mByteCode.size()>1] A[IsUnaryOpcode(A)] cMul",
									"D C cSqr cMul",
									"    with A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << ", C = " << FP_TRACE_OPCODENAME(C)
									    << ", D = " << FP_TRACE_OPCODENAME(D)
									    << "\n");
								/* ByteCodePtr[-4] = D; */ // redundant, matches D @ 5
								/* ByteCodePtr[-3] = C; */ // redundant, matches C @ 4
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lif;
							}
						}
					}
				}
			}
		}
		goto Default0;
	TailCall_cNEqual:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(360,
						"cAbs x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Lig;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(362,
						"cSqr x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Lig;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(116,
					"y x cNEqual",
					"[fp_nequal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lih;
			}
		}
		goto Default0;
	TailCall_cNeg:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNeg:
		switch(ByteCodePtr[0])
		{
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(123,
					"x cMul cNeg",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Lii;
			}
			break;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(61,"cNeg cNeg", "", "");
			goto Lbo;
		case cSin:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(244,
						"x cMul cSin cNeg",
						"[-x] cMul cSin",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Lij;
				}
			}
			break;
		case cSinh:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(245,
						"x cMul cSinh cNeg",
						"[-x] cMul cSinh",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Lik;
				}
			}
			break;
		case cTan:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(246,
						"x cMul cTan cNeg",
						"[-x] cMul cTan",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Lil;
				}
			}
			break;
		case cTanh:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(247,
						"x cMul cTanh cNeg",
						"[-x] cMul cTanh",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Lim;
				}
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(100,
				"x cNeg",
				"[-x]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lin;
		}
		goto Default0;
	TailCall_cNot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNot:
		switch(ByteCodePtr[0])
		{
		case cAbsNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(231,"cAbsNotNot cNot", "cAbsNot", "");
			goto Lio;
		case cEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(220,"cEqual cNot", "cNEqual", "");
			goto Lip;
		case cGreater:
			FP_TRACE_BYTECODE_OPTIMIZATION(218,"cGreater cNot", "cLessOrEq", "");
			goto Liq;
		case cGreaterOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(219,"cGreaterOrEq cNot", "cLess", "");
			goto Lja;
		case cLess:
			FP_TRACE_BYTECODE_OPTIMIZATION(216,"cLess cNot", "cGreaterOrEq", "");
			goto Ljb;
		case cLessOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(217,"cLessOrEq cNot", "cGreater", "");
			goto Ljc;
		case cNEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(221,"cNEqual cNot", "cEqual", "");
			goto Ljd;
		case cNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(229,"cNot cNot", "cNotNot", "");
			goto Lbd;
		case cNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(230,"cNotNot cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Lje;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(107,
				"x cNot",
				"[fp_not(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Ljf;
		}
		goto Default0;
	TailCall_cNotNot:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cNotNot:
		if(ByteCodePtr[0] == cNot)
		{
			FP_TRACE_BYTECODE_OPTIMIZATION(232,"cNot cNotNot", "cNot", "");
			/* ByteCodePtr[0] = cNot; */ // redundant, matches cNot @ 1
			return;
		}
		goto Default0;
	TailCall_cOr:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cOr:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(223,"cDup cOr", "cNotNot", "");
			goto Lbd;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(118,
					"y x cOr",
					"[fp_or(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ljg;
			}
			break;
		}
		goto Default0;
	TailCall_cPolar:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cPolar:
		if(ByteCodePtr[0] == cImmed)
		{
			y = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(194,
					"x y cPolar",
					"[fp_polar(x,y)]",
					"    with y = " << y
					    << ", x = " << x
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Ljh;
			}
		}
		goto Default0;
	TailCall_cPow:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cPow:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(isInteger(x))
			{
				switch(ByteCodePtr[-1])
				{
				case cExp:
					FP_TRACE_BYTECODE_OPTIMIZATION(43,
						"cExp x[isInteger(x)] cPow",
						"[x] cMul cExp",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					goto Lji;
				case cExp2:
					FP_TRACE_BYTECODE_OPTIMIZATION(44,
						"cExp2 x[isInteger(x)] cPow",
						"[x] cMul cExp2",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					goto Ljj;
				case cPow:
					if(ByteCodePtr[-2] == cImmed)
					{
						y = ImmedPtr[-1];
						if(!isInteger(y))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(42,
								"y[!isInteger(y)] cPow x[isInteger(x)] cPow",
								"[y*x] cPow",
								"    with x = " << x
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cPow; */ // redundant, matches cPow @ 0
							goto Ljk;
						}
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(45,
						"cPow x[isInteger(x)] cPow",
						"[x] cMul cPow",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cPow; */ // redundant, matches cPow @ 0
					goto Ljl;
				}
			}
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(83,
					"x[x==Value_t()] cPow",
					"[Value_t()] cMul [Value_t(1)] cAdd",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Ljm;
			}
			if(x==Value_t(0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(332,
					"x[x==Value_t(0.5)] cPow",
					"cSqrt",
					"    with x = " << x << "\n");
				goto Ljn;
			}
			if(x==Value_t(1)/Value_t(3))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(333,
					"x[x==Value_t(1)/Value_t(3)] cPow",
					"cCbrt",
					"    with x = " << x << "\n");
				goto Ljo;
			}
			if(x==Value_t(1)/Value_t(-3))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(334,
					"x[x==Value_t(1)/Value_t(-3)] cPow",
					"cCbrt cInv",
					"    with x = " << x << "\n");
				goto Ljp;
			}
			if(x==Value_t(-0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(335,
					"x[x==Value_t(-0.5)] cPow",
					"cRSqrt",
					"    with x = " << x << "\n");
				goto Ljq;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(336,
					"x[x==Value_t(-1)] cPow",
					"cInv",
					"    with x = " << x << "\n");
				goto Lka;
			}
			switch(ByteCodePtr[-1])
			{
			case cPow:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(330,
						"y cPow x cPow",
						"[y*x] cPow",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cPow; */ // redundant, matches cPow @ 0
					goto Ljk;
				}
				break;
			case cSqr:
				FP_TRACE_BYTECODE_OPTIMIZATION(46,
					"cSqr x cPow",
					"[x+x] cPow",
					"    with x = " << x << "\n");
				/* opcode = cPow; */ // redundant, matches cPow @ 0
				goto Lkb;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(189,
					"y x cPow",
					"[fp_pow(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lkc;
			}
			FP_TRACE_BYTECODE_OPTIMIZATION(455,
				"x cPow",
				"[DO_POWI]",
				"    with x = " << x << "\n");
			if(TryCompilePowi(x))
			  return;
		}
		goto Default0;
	TailCall_cRDiv:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRDiv:
		switch(ByteCodePtr[0])
		{
		case cSinCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(503,"cSinCos cRDiv", "cCot", "");
			goto Leq;
		case cSinhCosh:
			FP_TRACE_BYTECODE_OPTIMIZATION(510,"cSinhCosh cRDiv", "cTanh cInv", "");
			goto Lkd;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(268,
					"x[x==Value_t(1)] cRDiv",
					"cInv",
					"    with x = " << x << "\n");
				goto Lka;
			}
			break;
		}
		goto Default0;
	TailCall_cRSub:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRSub:
		if(ByteCodePtr[0] == cDup)
		{
			FP_TRACE_BYTECODE_OPTIMIZATION(77,"cDup cRSub", "[Value_t()] cMul", "");
			goto Leh;
		}
		goto Default0;
	TailCall_cRad:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cRad:
		switch(ByteCodePtr[0])
		{
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(211,
					"x cMul cRad",
					"[DegreesToRadians(x)] cMul",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Lke;
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(134,
				"x cRad",
				"[DegreesToRadians(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lkf;
		}
		goto Default0;
	TailCall_cReal:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cReal:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(191,
				"x cReal",
				"[fp_real(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lkg;
		}
		goto Default0;
	TailCall_cSec:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSec:
		A = ByteCodePtr[0];
		if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
		{
			switch(ByteCodePtr[-1])
			{
			case cCos:
				B = ByteCodePtr[-2];
				if(B==A)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(497,
						"B[B==A] cCos A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cSec",
						"B cCos cDup cInv",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", B = " << FP_TRACE_OPCODENAME(B)
						    << "\n");
					/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
					/* ByteCodePtr[-1] = cCos; */ // redundant, matches cCos @ 2
					goto Lcb;
				}
				break;
			case cSin:
				B = ByteCodePtr[-2];
				if(B==A)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(495,
						"B[B==A] cSin A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cSec",
						"B cSinCos cInv",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", B = " << FP_TRACE_OPCODENAME(B)
						    << "\n");
					/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
					goto Lkh;
				}
				break;
			}
		}
		goto Default0;
	TailCall_cSin:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSin:
		switch(ByteCodePtr[0])
		{
		case cAsin:
			FP_TRACE_BYTECODE_OPTIMIZATION(345,"cAsin cSin", "", "");
			goto Lbo;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(240,"cNeg cSin", "cSin cNeg", "");
			goto Lki;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(183,
				"x cSin",
				"[fp_sin(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lkj;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				if(ByteCodePtr[-1] == cCsc)
				{
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(499,
							"B[B==A] cCsc A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cSin",
							"B cCsc cDup cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cCsc; */ // redundant, matches cCsc @ 2
						goto Lcb;
					}
				}
			}
		}
		goto Default0;
	TailCall_cSinh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSinh:
		switch(ByteCodePtr[0])
		{
		case cAcosh:
			FP_TRACE_BYTECODE_OPTIMIZATION(437,"cAcosh cSinh", "[DO_STACKPLUS1] cSqr [Value_t(-1)] cAdd cSqrt", "");
			incStackPtr();
			--mStackPtr;
			goto Lkk;
		case cAsinh:
			FP_TRACE_BYTECODE_OPTIMIZATION(349,"cAsinh cSinh", "", "");
			goto Lbo;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(241,"cNeg cSinh", "cSinh cNeg", "");
			goto Lkl;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(184,
				"x cSinh",
				"[fp_sinh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lkm;
		}
		goto Default0;
	TailCall_cSqr:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSqr:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(204,"cAbs cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Lkn;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(203,"cNeg cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Lkn;
		case cSqrt:
			A = ByteCodePtr[-1];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(338,
					"A[IsNeverNegativeValueOpcode(A)] cSqrt cSqr",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Lbo;
			}
			break;
		}
		goto Default0;
	TailCall_cSqrt:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSqrt:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cSqr)
			{
				A = ByteCodePtr[-2];
				if(IsVarOpcode(A))
				{
					if(ByteCodePtr[-3] == cSqr)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(512,
							"cSqr A[IsVarOpcode(A)] cSqr cAdd cSqrt",
							"A cHypot",
							"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
						goto Lko;
					}
				}
				B = ByteCodePtr[-2];
				if(IsUnaryOpcode(B))
				{
					A = ByteCodePtr[-3];
					if(IsVarOpcode(A))
					{
						if(ByteCodePtr[-4] == cSqr)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(513,
								"cSqr A[IsVarOpcode(A)] B[IsUnaryOpcode(B)] cSqr cAdd cSqrt",
								"A B cHypot",
								"    with B = " << FP_TRACE_OPCODENAME(B)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lkp;
						}
					}
				}
			}
			break;
		case cSqr:
			FP_TRACE_BYTECODE_OPTIMIZATION(23,"cSqr cSqrt", "cAbs", "");
			goto Lkq;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(185,
				"x cSqrt",
				"[fp_sqrt(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lla;
		}
		goto Default0;
	TailCall_cSub:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cSub:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(76,"cDup cSub", "[Value_t()] cMul", "");
			goto Leh;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(200,"cNeg cSub", "cAdd", "");
			goto Llb;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(58,
					"x[x==Value_t()] cSub",
					"",
					"    with x = " << x << "\n");
				goto Lba;
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(106,
					"y x cSub",
					"[y-x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Llc;
			}
			FP_TRACE_BYTECODE_OPTIMIZATION(51,
				"x cSub",
				"[-x] cAdd",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lld;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A))
			{
				if(ByteCodePtr[-1] == cRSub)
				{
					if(ByteCodePtr[-2] == cImmed)
					{
						x = ImmedPtr[0];
						FP_TRACE_BYTECODE_OPTIMIZATION(289,
							"x cRSub A[IsVarOpcode(A)] cSub",
							"A cAdd [x] cRSub",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Lle;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(296,
						"cRSub A[IsVarOpcode(A)] cSub",
						"[DO_STACKPLUS1] A cSub cRSub",
						"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
					incStackPtr();
					--mStackPtr;
					goto Llf;
				}
			}
		}
		goto Default0;
	TailCall_cTan:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cTan:
		switch(ByteCodePtr[0])
		{
		case cAtan2:
			FP_TRACE_BYTECODE_OPTIMIZATION(354,"cAtan2 cTan", "cDiv", "");
			goto Lga;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(242,"cNeg cTan", "cTan cNeg", "");
			goto Llg;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(187,
				"x cTan",
				"[fp_tan(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Llh;
		default:
			A = ByteCodePtr[0];
			if(IsVarOpcode(A)&&mData->mByteCode.size()>2)
			{
				if(ByteCodePtr[-1] == cCot)
				{
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(501,
							"B[B==A] cCot A[IsVarOpcode(A)&&mData->mByteCode.size()>2] cTan",
							"B cCot cDup cInv",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cCot; */ // redundant, matches cCot @ 2
						goto Lcb;
					}
				}
			}
		}
		goto Default0;
	TailCall_cTanh:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cTanh:
		switch(ByteCodePtr[0])
		{
		case cAtanh:
			FP_TRACE_BYTECODE_OPTIMIZATION(352,"cAtanh cTanh", "", "");
			goto Lbo;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(243,"cNeg cTanh", "cTanh cNeg", "");
			goto Lli;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(188,
				"x cTanh",
				"[fp_tanh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Llj;
		}
		goto Default0;
	TailCall_cTrunc:
	if(!ByteCodePtr)
	{
		goto Laa;
	}
	[[fallthrough]];
	case cTrunc:
		switch(ByteCodePtr[0])
		{
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(138,
				"x cTrunc",
				"[fp_trunc(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Llk;
		default:
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(394,
					"A[IsAlwaysIntegerOpcode(A)] cTrunc",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	default: Default0:;
		A = opcode;
		if(IsVarOpcode(A)&&mData->mByteCode.size()>0)
		{
			B = ByteCodePtr[0];
			if(B==A)
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(475,
					"B[B==A] A[IsVarOpcode(A)&&mData->mByteCode.size()>0]",
					"B cDup",
					"    with A = " << FP_TRACE_OPCODENAME(A)
					    << ", B = " << FP_TRACE_OPCODENAME(B)
					    << "\n");
				/* ByteCodePtr[0] = B; */ // redundant, matches B @ 1
				goto Lll;
			}
		}
		if(IsUnaryOpcode(A))
		{
			B = ByteCodePtr[0];
			if(IsVarOpcode(B)&&mData->mByteCode.size()>1)
			{
				C = ByteCodePtr[-1];
				if(C==A)
				{
					D = ByteCodePtr[-2];
					if(D==B)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(476,
							"D[D==B] C[C==A] B[IsVarOpcode(B)&&mData->mByteCode.size()>1] A[IsUnaryOpcode(A)]",
							"D C cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", C = " << FP_TRACE_OPCODENAME(C)
							    << ", D = " << FP_TRACE_OPCODENAME(D)
							    << "\n");
						/* ByteCodePtr[-2] = D; */ // redundant, matches D @ 3
						/* ByteCodePtr[-1] = C; */ // redundant, matches C @ 2
						goto Llm;
					}
				}
			}
		}
		C = opcode;
		if(IsCommutativeOrParamSwappableBinaryOpcode(C))
		{
			switch(ByteCodePtr[0])
			{
			case cSin:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A)&&mData->mByteCode.size()>3)
				{
					if(ByteCodePtr[-2] == cCos)
					{
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(505,
								"B[B==A] cCos A[IsVarOpcode(A)&&mData->mByteCode.size()>3] cSin C[IsCommutativeOrParamSwappableBinaryOpcode(C)]",
								"B cSinCos {GetParamSwappedBinaryOpcode(C)}",
								"    with C = " << FP_TRACE_OPCODENAME(C)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lln;
						}
					}
				}
				break;
			case cSinh:
				A = ByteCodePtr[-1];
				if(IsVarOpcode(A)&&mData->mByteCode.size()>3)
				{
					if(ByteCodePtr[-2] == cCosh)
					{
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(506,
								"B[B==A] cCosh A[IsVarOpcode(A)&&mData->mByteCode.size()>3] cSinh C[IsCommutativeOrParamSwappableBinaryOpcode(C)]",
								"B cSinhCosh {GetParamSwappedBinaryOpcode(C)}",
								"    with C = " << FP_TRACE_OPCODENAME(C)
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Llo;
						}
					}
				}
				break;
			}
		}
	}
	goto Laa;
Laa: mData->mByteCode.push_back(opcode); return;
Lab: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Llp: FP_TRACE_BYTECODE_ADD(cAbs);
     goto TailCall_cAbs;
Lac: ImmedPtr[0] = fp_abs(x); return;
Lad: ImmedPtr[0] = fp_acos(x); return;
Lae: ImmedPtr[0] = fp_acosh(x); return;
Laf: mData->mImmed.push_back(Value_t(4));
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
Llq: opcode = cMul;
Lma: FP_ReDefinePointers();
Lmb: FP_TRACE_BYTECODE_ADD(cMul);
     goto TailCall_cMul;
Lag: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(Value_t(4));
Lmc: mData->mByteCode.push_back(cImmed); goto Llq;
Lah: ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
Lfb: opcode = cMul; goto Lmb;
Lai: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSub;
Lmd: FP_TRACE_BYTECODE_ADD(cSub);
     goto TailCall_cSub;
Laj: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Lme: FP_ReDefinePointers();
Lmf: FP_TRACE_BYTECODE_ADD(cAdd);
     goto TailCall_cAdd;
Lak: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Lmg: AddFunctionOpcode(cAdd);
Lmh: opcode = cRSub;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cRSub);
     goto TailCall_cRSub;
Lal: ImmedPtr[0] = -x;
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lmg;
Lam: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lmh;
Lan: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lmi: AddFunctionOpcode(cAdd);
Lmj: AddFunctionOpcode(B);
Lmk: opcode = cSub;
     FP_ReDefinePointers(); goto Lmd;
Lao: ImmedPtr[0] = -x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lmi;
Lap: ImmedPtr[-1] = y+x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lmj;
Laq: ImmedPtr[-1] = y+x;
Lba: mData->mImmed.pop_back();
Lbo: mData->mByteCode.pop_back(); return;
Lbb: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lmg;
Lbc: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lmg;
Lbd: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cNotNot;
     FP_TRACE_BYTECODE_ADD(cNotNot);
     goto TailCall_cNotNot;
Lbe: ImmedPtr[-1] = fp_and(x,y); goto Lba;
Lbf: ImmedPtr[0] = fp_arg(x); return;
Lbg: ImmedPtr[0] = fp_asin(x); return;
Lbh: ImmedPtr[0] = fp_asinh(x); return;
Lbi: ImmedPtr[0] = fp_atan(x); return;
Lbj: ImmedPtr[-1] = fp_atan2(y,x); goto Lba;
Lbk: ImmedPtr[0] = fp_atanh(x); return;
Lbl: ImmedPtr[0] = fp_cbrt(x); return;
Lbm: mData->mByteCode.pop_back();
     AddFunctionOpcode(cFloor);
Lml: opcode = cNeg;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cNeg);
     goto TailCall_cNeg;
Lbn: ImmedPtr[0] = fp_ceil(x); return;
Lbp: ImmedPtr[0] = fp_conj(x); return;
Lbq: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lmm: FP_TRACE_BYTECODE_ADD(cCos);
     goto TailCall_cCos;
Lca: ImmedPtr[0] = fp_cos(x); return;
Lcb: ByteCodePtr[0] = cDup;
     opcode = cInv;
Lmn: FP_TRACE_BYTECODE_ADD(cInv);
     goto TailCall_cInv;
Lcc: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinCos); return;
Lcd: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSqr);
     mData->mImmed.push_back(Value_t(1));
Lmo: mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cAdd);
Lmp: opcode = cSqrt;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cSqrt);
     goto TailCall_cSqrt;
Lce: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     FP_TRACE_BYTECODE_ADD(cCosh);
     goto TailCall_cCosh;
Lcf: ImmedPtr[0] = fp_cosh(x); return;
Lcg: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinhCosh); return;
Lch: ImmedPtr[0] = RadiansToDegrees(x); return;
Lci: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSec); goto Llq;
Lcj: mData->mByteCode.pop_back();
     AddFunctionOpcode(cTan); goto Llq;
Lck: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSin); goto Llq;
Lcl: mData->mImmed.push_back(Value_t());
     ByteCodePtr[0] = cImmed;
Lmq: AddFunctionOpcode(cMul);
     mData->mImmed.push_back(Value_t(1));
Lna: mData->mByteCode.push_back(cImmed);
Lnb: opcode = cAdd; goto Lme;
Lcm: mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     AddFunctionOpcode(cExp); goto Llq;
Lcn: mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     AddFunctionOpcode(cExp2); goto Llq;
Lco: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lfb;
Lcp: mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     AddFunctionOpcode(cPow); goto Llq;
Lcq: mData->mByteCode.pop_back();
     AddFunctionOpcode(cCos); goto Llq;
Lda: mData->mByteCode.pop_back();
     AddFunctionOpcode(cCsc); goto Llq;
Ldb: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cTan;
Lnc: FP_TRACE_BYTECODE_ADD(cTan);
     goto TailCall_cTan;
Ldc: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cTanh;
Lnd: FP_TRACE_BYTECODE_ADD(cTanh);
     goto TailCall_cTanh;
Ldd: mData->mByteCode.pop_back();
     AddFunctionOpcode(cCot); goto Llq;
Lde: ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lne: FP_TRACE_BYTECODE_ADD(cDiv);
     goto TailCall_cDiv;
Ldf: ImmedPtr[-1] = y/x; goto Lba;
Ldg: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Lnf: opcode = cDeg;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cDeg);
     goto TailCall_cDeg;
Ldh: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Lng: opcode = cRad;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cRad);
     goto TailCall_cRad;
Ldi: ImmedPtr[-1] = y/x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Llq;
Ldj: ImmedPtr[0] = Value_t(1)/x; goto Lfb;
Ldk: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cMul);
Lnh: FP_ReDefinePointers(); goto Lne;
Ldl: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed);
Lni: opcode = cRDiv;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cRDiv);
     goto TailCall_cRDiv;
Ldm: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(B); goto Lni;
Ldn: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lnj: FP_TRACE_BYTECODE_ADD(cEqual);
     goto TailCall_cEqual;
Ldo: ImmedPtr[-1] = fp_equal(y,x); goto Lba;
Ldp: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cExp);
     mData->mImmed.push_back(fp_exp(x)); goto Lmc;
Ldq: ImmedPtr[0] = fp_exp(x); return;
Lea: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cExp2);
     mData->mImmed.push_back(fp_exp2(x)); goto Lmc;
Leb: ImmedPtr[0] = fp_exp2(x); return;
Lec: mData->mImmed.push_back(fp_log(Value_t(2)));
     mData->mByteCode.push_back(cImmed);
Lnk: AddFunctionOpcode(cMul);
     opcode = cExp;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cExp);
     goto TailCall_cExp;
Led: mData->mByteCode.pop_back();
     AddFunctionOpcode(cCeil); goto Lml;
Lee: ImmedPtr[0] = fp_floor(x); return;
Lef: ImmedPtr[-1] = fp_less(x,y); goto Lba;
Leg: ImmedPtr[-1] = fp_lessOrEq(x,y); goto Lba;
Leh: mData->mImmed.push_back(Value_t());
Lnl: ByteCodePtr[0] = cImmed; goto Llq;
Lei: ImmedPtr[0] = fp_imag(x); return;
Lej: ImmedPtr[0] = fp_int(x); return;
Lek: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSec;
     FP_TRACE_BYTECODE_ADD(cSec);
     goto TailCall_cSec;
Lel: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSin;
Lnm: FP_TRACE_BYTECODE_ADD(cSin);
     goto TailCall_cSin;
Lem: mData->mByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     opcode = cPow;
Lnn: FP_ReDefinePointers();
Lno: FP_TRACE_BYTECODE_ADD(cPow);
     goto TailCall_cPow;
Len: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cCos; goto Lmm;
Leo: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cCsc;
     FP_TRACE_BYTECODE_ADD(cCsc);
     goto TailCall_cCsc;
Lep: mData->mByteCode.pop_back();
     AddFunctionOpcode(cRSqrt); return;
Leq: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lnp: opcode = cCot;
     FP_TRACE_BYTECODE_ADD(cCot);
     goto TailCall_cCot;
Lfa: ImmedPtr[0] = Value_t(1)/x; return;
Lfc: ImmedPtr[-1] = fp_less(y,x); goto Lba;
Lfd: ImmedPtr[-1] = fp_lessOrEq(y,x); goto Lba;
Lfe: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cLog);
     mData->mImmed.push_back(fp_log(x)); goto Lna;
Lff: ImmedPtr[0] = fp_log(x); return;
Lfg: mData->mImmed.push_back(fp_log10(fp_const_e<Value_t>())); goto Lnl;
Lfh: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cLog10);
     mData->mImmed.push_back(fp_log10(x)); goto Lna;
Lfi: ImmedPtr[0] = fp_log10(x); return;
Lfj: mData->mImmed.push_back(fp_log2(fp_const_e<Value_t>())); goto Lnl;
Lfk: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cLog2);
     mData->mImmed.push_back(fp_log2(x)); goto Lna;
Lfl: ImmedPtr[0] = fp_log2(x); return;
Lfm: ImmedPtr[-1] = fp_max(x,y); goto Lba;
Lfn: ImmedPtr[-1] = fp_min(x,y); goto Lba;
Lfo: ImmedPtr[-1] = fp_mod(y,x); goto Lba;
Lfp: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 3; goto Lnp;
Lfq: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cSqr;
Lnq: FP_TRACE_BYTECODE_ADD(cSqr);
     goto TailCall_cSqr;
Lga: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cDiv; goto Lne;
Lgb: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr); goto Lml;
Lgc: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSqr);
     AddFunctionOpcode(cMul); goto Lml;
Lgd: ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2;
     opcode = cPow; goto Lno;
Lge: ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     ByteCodePtr -= 2; goto Lmb;
Lgf: ImmedPtr[-1] = x;
Loa: mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lma;
Lgg: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();}
Lob: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Loc: AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
Lod: mData->mByteCode.push_back(cImmed); goto Lma;
Lgh: mData->mImmed.pop_back(); goto Lob;
Lgi: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(B); goto Loc;
Lgj: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Loc;
Lgk: ByteCodePtr[-1] = cImmed; goto Lbo;
Lgl: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lmb;
Lgm: mData->mImmed.pop_back();
Loe: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} return;
Lgn: ImmedPtr[0] = x+x; goto Lge;
Lgo: ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     mData->mImmed.push_back(y*x);
     mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cMul); goto Lnb;
Lgp: ImmedPtr[-1] = x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(y*x); goto Lna;
Lgq: ImmedPtr[0] = RadiansToDegrees(x); goto Lgl;
Lha: ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
Lof: AddFunctionOpcode(cMul);
Log: AddFunctionOpcode(B);
     opcode = cDiv; goto Lnh;
Lhb: ImmedPtr[0] = -x;
     ByteCodePtr[-3] = cImmed;
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lof;
Lhc: ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Log;
Lhd: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lma;
Lhe: mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     mData->mImmed.push_back(x+x); goto Lod;
Lhf: for(unsigned tmp=2; tmp-->0; ) {mData->mImmed.pop_back();} goto Loe;
Lhg: ImmedPtr[-1] = y*x; goto Loa;
Lhh: ImmedPtr[0] = -x; goto Lgl;
Lhi: ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
Loh: AddFunctionOpcode(cMul); goto Lni;
Lhj: ImmedPtr[0] = -x;
     ByteCodePtr[-2] = cImmed;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Loh;
Lhk: ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lni;
Lhl: ImmedPtr[0] = DegreesToRadians(x); goto Lgl;
Lhm: ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     mData->mImmed.pop_back();
     for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     mData->mImmed.push_back(y*x);
     mData->mByteCode.push_back(cImmed);
     AddFunctionOpcode(cMul); goto Lmk;
Lhn: ImmedPtr[-1] = y*x; goto Lba;
Lho: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lml;
Lhp: ByteCodePtr[0] = cDup;
     ImmedPtr -= 1;
     mData->mImmed.pop_back();
Loi: opcode = cAdd; goto Lmf;
Lhq: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lnf;
Lia: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lng;
Lib: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Lof;
Lic: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
Loj: AddFunctionOpcode(cSqr); goto Lma;
Lid: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Loh;
Lie: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A); goto Loh;
Lif: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();} goto Loj;
Lig: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
Lok: FP_TRACE_BYTECODE_ADD(cNEqual);
     goto TailCall_cNEqual;
Lih: ImmedPtr[-1] = fp_nequal(y,x); goto Lba;
Lii: ImmedPtr[0] = -x; goto Lco;
Lij: ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     opcode = cSin;
     FP_ReDefinePointers(); goto Lnm;
Lik: ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     opcode = cSinh;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cSinh);
     goto TailCall_cSinh;
Lil: ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     opcode = cTan;
     FP_ReDefinePointers(); goto Lnc;
Lim: ImmedPtr[0] = -x;
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cMul);
     opcode = cTanh;
     FP_ReDefinePointers(); goto Lnd;
Lin: ImmedPtr[0] = -x; return;
Lio: mData->mByteCode.pop_back();
     AddFunctionOpcode(cAbsNot); return;
Lip: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cNEqual; goto Lok;
Liq: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cLessOrEq;
     FP_TRACE_BYTECODE_ADD(cLessOrEq);
     goto TailCall_cLessOrEq;
Lja: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cLess;
     FP_TRACE_BYTECODE_ADD(cLess);
     goto TailCall_cLess;
Ljb: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cGreaterOrEq;
     FP_TRACE_BYTECODE_ADD(cGreaterOrEq);
     goto TailCall_cGreaterOrEq;
Ljc: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cGreater;
     FP_TRACE_BYTECODE_ADD(cGreater);
     goto TailCall_cGreater;
Ljd: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cEqual; goto Lnj;
Lje: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     FP_TRACE_BYTECODE_ADD(cNot);
     goto TailCall_cNot;
Ljf: ImmedPtr[0] = fp_not(x); return;
Ljg: ImmedPtr[-1] = fp_or(x,y); goto Lba;
Ljh: ImmedPtr[-1] = fp_polar(x,y); goto Lba;
Lji: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back(); goto Lnk;
Ljj: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cMul);
     opcode = cExp2;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cExp2);
     goto TailCall_cExp2;
Ljk: ImmedPtr[-1] = y*x;
     mData->mImmed.pop_back();
     for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();} goto Lnn;
Ljl: ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cMul); goto Lnn;
Ljm: ImmedPtr[0] = Value_t(); goto Lmq;
Ljn: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lmp;
Ljo: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     opcode = cCbrt;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cCbrt);
     goto TailCall_cCbrt;
Ljp: mData->mImmed.pop_back();
     mData->mByteCode.pop_back();
     AddFunctionOpcode(cCbrt);
Lol: opcode = cInv;
     FP_ReDefinePointers(); goto Lmn;
Ljq: mData->mImmed.pop_back(); goto Lep;
Lka: mData->mImmed.pop_back();
     mData->mByteCode.pop_back(); goto Lol;
Lkb: ImmedPtr[0] = x+x;
     ByteCodePtr[-1] = cImmed;
     mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lno;
Lkc: ImmedPtr[-1] = fp_pow(y,x); goto Lba;
Lkd: mData->mByteCode.pop_back();
     AddFunctionOpcode(cTanh); goto Lol;
Lke: ImmedPtr[0] = DegreesToRadians(x); goto Lco;
Lkf: ImmedPtr[0] = DegreesToRadians(x); return;
Lkg: ImmedPtr[0] = fp_real(x); return;
Lkh: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinCos); goto Lol;
Lki: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSin); goto Lml;
Lkj: ImmedPtr[0] = fp_sin(x); return;
Lkk: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSqr);
     mData->mImmed.push_back(Value_t(-1)); goto Lmo;
Lkl: mData->mByteCode.pop_back();
     AddFunctionOpcode(cSinh); goto Lml;
Lkm: ImmedPtr[0] = fp_sinh(x); return;
Lkn: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Lnq;
Lko: for(unsigned tmp=4; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
Lom: opcode = cHypot;
     FP_ReDefinePointers();
     FP_TRACE_BYTECODE_ADD(cHypot);
     goto TailCall_cHypot;
Lkp: for(unsigned tmp=5; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(B); goto Lom;
Lkq: mData->mByteCode.pop_back();
     ByteCodePtr -= 1;
     opcode = cAbs; goto Llp;
Lla: ImmedPtr[0] = fp_sqrt(x); return;
Llb: mData->mByteCode.pop_back();
     ByteCodePtr -= 1; goto Loi;
Llc: ImmedPtr[-1] = y-x; goto Lba;
Lld: ImmedPtr[0] = -x; goto Loi;
Lle: mData->mImmed.pop_back();
     for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cAdd);
     mData->mImmed.push_back(x);
     mData->mByteCode.push_back(cImmed); goto Lmh;
Llf: for(unsigned tmp=2; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(A);
     AddFunctionOpcode(cSub); goto Lmh;
Llg: mData->mByteCode.pop_back();
     AddFunctionOpcode(cTan); goto Lml;
Llh: ImmedPtr[0] = fp_tan(x); return;
Lli: mData->mByteCode.pop_back();
     AddFunctionOpcode(cTanh); goto Lml;
Llj: ImmedPtr[0] = fp_tanh(x); return;
Llk: ImmedPtr[0] = fp_trunc(x); return;
Lll: mData->mByteCode.push_back(cDup); return;
Llm: ByteCodePtr[0] = cDup; return;
Lln: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinCos);
Lon: AddFunctionOpcode(GetParamSwappedBinaryOpcode(C)); return;
Llo: for(unsigned tmp=3; tmp-->0; ) {mData->mByteCode.pop_back();}
     AddFunctionOpcode(cSinhCosh); goto Lon;
return;
// This list of dummy gotos is here to inhibit
// compiler warnings on unused labels
goto TailCall_cAcos;goto TailCall_cAcosh;goto TailCall_cAnd;
goto TailCall_cArg;goto TailCall_cAsin;goto TailCall_cAsinh;
goto TailCall_cAtan;goto TailCall_cAtan2;goto TailCall_cAtanh;
goto TailCall_cCeil;goto TailCall_cConj;goto TailCall_cFloor;
goto TailCall_cImag;goto TailCall_cInt;goto TailCall_cLog;
goto TailCall_cLog10;goto TailCall_cLog2;goto TailCall_cMax;
goto TailCall_cMin;goto TailCall_cMod;goto TailCall_cOr;
goto TailCall_cPolar;goto TailCall_cRDiv;goto TailCall_cRad;
goto TailCall_cReal;goto TailCall_cSec;goto TailCall_cSin;
goto TailCall_cSinh;goto TailCall_cSqrt;goto TailCall_cSub;
goto TailCall_cTan;goto TailCall_cTanh;goto TailCall_cTrunc;
#endif

#undef FP_ReDefinePointers
#undef FP_TRACE_BYTECODE_OPTIMIZATION
#undef FP_TRACE_OPCODENAME
