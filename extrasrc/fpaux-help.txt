Added tool util/build_fpaux, which rebuilds extrasrc/fpaux.hh using files in extrasrc/functions/*.hh .
Each of those files contains a single function or a constant, specialized for all types supported by fparser.

For example:
- func_abs.hh contains all specializations of fp_abs()
- const_log2.hh contains all specialializations of fp_const_log2()
- util_isinttype.hh contains all specializations of isIntType<>.

Additionally each file contains a list of dependencies, indicated like this:
"//$DEP: comp_less" indicates that this file depends on contents of comp_less.hh.

util/build_fpaux builds a dependency graph and mergeds the contents of all these individual files into extrasrc/fpaux.hh so that the proper order of dependencies is honored.

Rationale: extrasrc/fpaux.hh was getting messy.
It was hard to find where all stuff related to some particular function was located in.
Sometimes, they were scattered all around in the file, hiding behind various #ifs and others.
Change one thing, and you run into a problem where the definition of one function depends on another.
Now there is a method that automatically takes care of the dependencies.
Additionally, each function is placed clearly in a single file responsible for that job.

Adding new functions: Suppose we want to add function fp_gamma():
- Create new file, extra/functions/func_gamma.hh
- In that file, put all your specialized implementations of fp_gamma().
- If in doubt, look at an existing file for help. For example, func_asin.hh.
- Lastly, mark the dependencies: Say, if your implementation depends on fp_exp(), put //$DEP: func_exp in the beginning of the file. Mark all dependencies!
- Rebuild: Run "make extrasrc/fpaux.hh".
- If you get a circular dependency error from util/build_fpaux, you may need to resort to forward declarations. See func_pow.hh for example (includes a forward declaration for fp_pow_base).

Naming:
- func_*.hh: User-facing functions, called fp_something()
- help_*.hh: Internal functions, which are only used to implement user-facing functions
- comp_*.hh: Comparison functions returning bool rather than Value_t
- const_*.hh: fp_const_() functions
- test_*.hh: Value testing functions returning bool
- util_*.hh: Metaprogramming etc.

