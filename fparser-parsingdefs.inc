enum Terminals
{
    T_Zend, T_OrOp, T_AndOp, T_CompOp, T_Minus, T_Plus,
    T_TimesMulModOp, T_Bang, T_Pow, T_NumConst, T_If, T_Eval,
    T_PreFunc1, T_PreFunc2, T_PreFunc3, T_Identifier, T_LParens,
    T_RParens, T_Comma,
    NUM_TERMINALS
};
enum NonTerminals
{
    NT_Zaccept, NT_exp, NT_A1, NT_A2, NT_func_params_opt,
    NT_func_params,
    NUM_NONTERMINALS
};
static const char TerminalNames[NUM_TERMINALS][1+15] =
{
    "T_Zend", "T_OrOp", "T_AndOp", "T_CompOp", "T_Minus", "T_Plus",
    "T_TimesMulModOp", "T_Bang", "T_Pow", "T_NumConst", "T_If", "T_Eval",
    "T_PreFunc1", "T_PreFunc2", "T_PreFunc3", "T_Identifier", "T_LParens",
    "T_RParens", "T_Comma" 
};
static const char NonTerminalNames[NUM_NONTERMINALS][1+18] =
{
    "NT_Zaccept", "NT_exp", "NT_A1", "NT_A2", "NT_func_params_opt",
    "NT_func_params" 
};
static const struct BisonState
{
    char Actions[NUM_TERMINALS], Goto[NUM_NONTERMINALS];
} States[] =
{
  // state 0
  { {   0,  0,  0,  0,  1,  0,  0,  2,  0,  3,  4,  5,  6,  7,  8,  9, 10,  0,  0}, { 0,11,0,0,0,0} },
  { {   0,  0,  0,  0,  1,  0,  0,  2,  0,  3,  4,  5,  6,  7,  8,  9, 10,  0,  0}, { 0,12,0,0,0,0} },
  { {   0,  0,  0,  0,  1,  0,  0,  2,  0,  3,  4,  5,  6,  7,  8,  9, 10,  0,  0}, { 0,13,0,0,0,0} },
  { {  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, { 0,0,0,0,0,0} },
  { {   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 14,  0,  0}, { 0,0,0,0,0,0} },
  // state 5
  { {   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 15,  0,  0}, { 0,0,0,0,0,0} },
  { {   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 16,  0,  0}, { 0,0,0,0,0,0} },
  { {   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 17,  0,  0}, { 0,0,0,0,0,0} },
  { {   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 18,  0,  0}, { 0,0,0,0,0,0} },
  { { -10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10, 19,-10,-10}, { 0,0,0,0,0,0} },
  // state 10
  { {   0,  0,  0,  0,  1,  0,  0,  2,  0,  3,  4,  5,  6,  7,  8,  9, 10,  0,  0}, { 0,20,0,0,0,0} },
  { {  21, 22, 23, 24, 25, 26, 27,  0, 28,  0,  0,  0,  0,  0,  0, 29,  0,  0,  0}, { 0,0,0,0,0,0} },
  { { -18,-18,-18,-18,-18,-18,-18,-18, 28,-18,-18,-18,-18,-18,-18, 29,-18,-18,-18}, { 0,0,0,0,0,0} },
  { { -20,-20,-20,-20,-20,-20,-20,-20, 28,-20,-20,-20,-20,-20,-20, 29,-20,-20,-20}, { 0,0,0,0,0,0} },
  { {   0,  0,  0,  0,  1,  0,  0,  2,  0,  3,  4,  5,  6,  7,  8,  9, 10,  0,  0}, { 0,30,0,0,0,0} },
  // state 15
  { { -23,-23,-23,-23,  1,-23,-23,  2,-23,  3,  4,  5,  6,  7,  8,  9, 10,-23,-23}, { 0,31,0,0,32,33} },
  { { -23,-23,-23,-23,  1,-23,-23,  2,-23,  3,  4,  5,  6,  7,  8,  9, 10,-23,-23}, { 0,31,0,0,34,33} },
  { { -23,-23,-23,-23,  1,-23,-23,  2,-23,  3,  4,  5,  6,  7,  8,  9, 10,-23,-23}, { 0,31,0,0,35,33} },
  { { -23,-23,-23,-23,  1,-23,-23,  2,-23,  3,  4,  5,  6,  7,  8,  9, 10,-23,-23}, { 0,31,0,0,36,33} },
  { { -23,-23,-23,-23,  1,-23,-23,  2,-23,  3,  4,  5,  6,  7,  8,  9, 10,-23,-23}, { 0,31,0,0,37,33} },
  // state 20
  { {   0, 22, 23, 24, 25, 26, 27,  0, 28,  0,  0,  0,  0,  0,  0, 29,  0, 38,  0}, { 0,0,0,0,0,0} },
  { { 127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127}, { 0,0,0,0,0,0} },
  { {   0,  0,  0,  0,  1,  0,  0,  2,  0,  3,  4,  5,  6,  7,  8,  9, 10,  0,  0}, { 0,39,0,0,0,0} },
  { {   0,  0,  0,  0,  1,  0,  0,  2,  0,  3,  4,  5,  6,  7,  8,  9, 10,  0,  0}, { 0,40,0,0,0,0} },
  { {   0,  0,  0,  0,  1,  0,  0,  2,  0,  3,  4,  5,  6,  7,  8,  9, 10,  0,  0}, { 0,41,0,0,0,0} },
  // state 25
  { {   0,  0,  0,  0,  1,  0,  0,  2,  0,  3,  4,  5,  6,  7,  8,  9, 10,  0,  0}, { 0,42,0,0,0,0} },
  { {   0,  0,  0,  0,  1,  0,  0,  2,  0,  3,  4,  5,  6,  7,  8,  9, 10,  0,  0}, { 0,43,0,0,0,0} },
  { {   0,  0,  0,  0,  1,  0,  0,  2,  0,  3,  4,  5,  6,  7,  8,  9, 10,  0,  0}, { 0,44,0,0,0,0} },
  { {   0,  0,  0,  0,  1,  0,  0,  2,  0,  3,  4,  5,  6,  7,  8,  9, 10,  0,  0}, { 0,45,0,0,0,0} },
  { { -21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21}, { 0,0,0,0,0,0} },
  // state 30
  { {  -6, 22, 23, 24, 25, 26, 27, -6, 28, -6, -6, -6, -6, -6, -6, 29, -6, -6, -6}, { 0,0,46,0,0,0} },
  { { -25, 22, 23, 24, 25, 26, 27,-25, 28,-25,-25,-25,-25,-25,-25, 29,-25,-25,-25}, { 0,0,0,0,0,0} },
  { {   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 47,  0}, { 0,0,0,0,0,0} },
  { { -22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22, 48}, { 0,0,0,0,0,0} },
  { {   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 49,  0}, { 0,0,0,0,0,0} },
  // state 35
  { {   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 50,  0}, { 0,0,0,0,0,0} },
  { {   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 51,  0}, { 0,0,0,0,0,0} },
  { {   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 52,  0}, { 0,0,0,0,0,0} },
  { { -19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19}, { 0,0,0,0,0,0} },
  { { -14,-14, 23, 24, 25, 26, 27,-14, 28,-14,-14,-14,-14,-14,-14, 29,-14,-14,-14}, { 0,0,0,0,0,0} },
  // state 40
  { { -13,-13,-13, 24, 25, 26, 27,-13, 28,-13,-13,-13,-13,-13,-13, 29,-13,-13,-13}, { 0,0,0,0,0,0} },
  { { -15,-15,-15,-15, 25, 26, 27,-15, 28,-15,-15,-15,-15,-15,-15, 29,-15,-15,-15}, { 0,0,0,0,0,0} },
  { { -12,-12,-12,-12,-12,-12, 27,-12, 28,-12,-12,-12,-12,-12,-12, 29,-12,-12,-12}, { 0,0,0,0,0,0} },
  { { -11,-11,-11,-11,-11,-11, 27,-11, 28,-11,-11,-11,-11,-11,-11, 29,-11,-11,-11}, { 0,0,0,0,0,0} },
  { { -16,-16,-16,-16,-16,-16,-16,-16, 28,-16,-16,-16,-16,-16,-16, 29,-16,-16,-16}, { 0,0,0,0,0,0} },
  // state 45
  { { -17,-17,-17,-17,-17,-17,-17,-17, 28,-17,-17,-17,-17,-17,-17, 29,-17,-17,-17}, { 0,0,0,0,0,0} },
  { {   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 53}, { 0,0,0,0,0,0} },
  { {  -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5}, { 0,0,0,0,0,0} },
  { {   0,  0,  0,  0,  1,  0,  0,  2,  0,  3,  4,  5,  6,  7,  8,  9, 10,  0,  0}, { 0,54,0,0,0,0} },
  { {  -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2}, { 0,0,0,0,0,0} },
  // state 50
  { {  -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3}, { 0,0,0,0,0,0} },
  { {  -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4}, { 0,0,0,0,0,0} },
  { {  -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9}, { 0,0,0,0,0,0} },
  { {   0,  0,  0,  0,  1,  0,  0,  2,  0,  3,  4,  5,  6,  7,  8,  9, 10,  0,  0}, { 0,55,0,0,0,0} },
  { { -24, 22, 23, 24, 25, 26, 27,-24, 28,-24,-24,-24,-24,-24,-24, 29,-24,-24,-24}, { 0,0,0,0,0,0} },
  // state 55
  { {  -7, 22, 23, 24, 25, 26, 27, -7, 28, -7, -7, -7, -7, -7, -7, 29, -7, -7, -7}, { 0,0,0,56,0,0} },
  { {   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 57}, { 0,0,0,0,0,0} },
  { {   0,  0,  0,  0,  1,  0,  0,  2,  0,  3,  4,  5,  6,  7,  8,  9, 10,  0,  0}, { 0,58,0,0,0,0} },
  { {   0, 22, 23, 24, 25, 26, 27,  0, 28,  0,  0,  0,  0,  0,  0, 29,  0, 59,  0}, { 0,0,0,0,0,0} },
  { {  -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8}, { 0,0,0,0,0,0} },
};
static const struct BisonReduce
{
  int          n_reduce:8;
  NonTerminals produced_nonterminal:8;
} BisonGrammar[] =
{
  {  2, NT_Zaccept        }, /* Zaccept: exp Zend */
  {  1, NT_exp            }, /* exp: NumConst */
  {  4, NT_exp            }, /*    | PreFunc1 LParens func_params_opt RParens */
  {  4, NT_exp            }, /*    | PreFunc2 LParens func_params_opt RParens */
  {  4, NT_exp            }, /*    | PreFunc3 LParens func_params_opt RParens */
  {  4, NT_exp            }, /*    | Eval LParens func_params_opt RParens */
  {  0, NT_A1             }, /* A1: (* empty *) */
  {  0, NT_A2             }, /* A2: (* empty *) */
  { 10, NT_exp            }, /* exp: If LParens exp A1 Comma exp A2 Comma exp RParens */
  {  4, NT_exp            }, /*    | Identifier LParens func_params_opt RParens */
  {  1, NT_exp            }, /*    | Identifier */
  {  3, NT_exp            }, /*    | exp Plus exp */
  {  3, NT_exp            }, /*    | exp Minus exp */
  {  3, NT_exp            }, /*    | exp AndOp exp */
  {  3, NT_exp            }, /*    | exp OrOp exp */
  {  3, NT_exp            }, /*    | exp CompOp exp */
  {  3, NT_exp            }, /*    | exp TimesMulModOp exp */
  {  3, NT_exp            }, /*    | exp Pow exp */
  {  2, NT_exp            }, /*    | Minus exp */
  {  3, NT_exp            }, /*    | LParens exp RParens */
  {  2, NT_exp            }, /*    | Bang exp */
  {  2, NT_exp            }, /*    | exp Identifier */
  {  1, NT_func_params_opt}, /* func_params_opt: func_params */
  {  0, NT_func_params_opt}, /*                | (* empty *) */
  {  3, NT_func_params    }, /* func_params: func_params Comma exp */
  {  1, NT_func_params    }, /*            | exp */
};
