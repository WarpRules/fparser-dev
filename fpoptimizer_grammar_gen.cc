#define YY_FPoptimizerGrammarParser_h_included
#define YY_USE_CLASS

/*  A Bison++ parser, made from fpoptimizer_grammar_gen.y  */

 /* with Bison++ version bison++ Version 1.21.9-1, adapted from GNU bison by coetmeur@icdc.fr
Maintained by Magnus Ekdahl <magnus@debian.org>
  */

#define YY_USE_CLASS

#line 1 "/usr/share/bison++/bison.cc"
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Bob Corbett and Richard Stallman

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 1, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

   As a special exception, when this file is copied by Bison++ into a
   Bison++ output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison, and has been in Bison++ since 1.21.9.

*/

/* HEADER SECTION */
#if defined( _MSDOS ) || defined(MSDOS) || defined(__MSDOS__)
 #define __MSDOS_AND_ALIKE
#endif

#if defined(_WINDOWS) && defined(_MSC_VER)
 #define __HAVE_NO_ALLOCA
 #define __MSDOS_AND_ALIKE
#endif

#ifndef alloca
 #if defined( __GNUC__)
  #define alloca __builtin_alloca

 #elif (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc)  || defined (__sgi)
  #include <alloca.h>

 #elif defined (__MSDOS_AND_ALIKE)
  #include <malloc.h>
  #ifndef __TURBOC__
   /* MS C runtime lib */
   #define alloca _alloca
  #endif

 #elif defined(_AIX)
  /* pragma must be put before any C/C++ instruction !! */
  #pragma alloca
  #include <malloc.h>

 #elif defined(__hpux)
  #ifdef __cplusplus
   extern "C" {
     void *alloca (unsigned int);
   };
  #else /* not __cplusplus */
   void *alloca ();
  #endif /* not __cplusplus */

 #endif /* not _AIX  not MSDOS, or __TURBOC__ or _AIX, not sparc.  */
#endif /* alloca not defined.  */

#ifdef c_plusplus
 #ifndef __cplusplus
  #define __cplusplus
 #endif
#endif

#ifdef __cplusplus
 #ifndef YY_USE_CLASS
/*#warning "For C++ its recomended to use bison++, otherwise classes won't be generated"*/
 #endif
#else
 #ifndef __STDC__
  #define const
 #endif
 #ifdef YY_USE_CLASS
  #error "This is a C++ header generated by bison++, please use a C++ compiler!"
 #endif
#endif

#include <stdio.h>
#define YYBISON 1

 #line 88 "/usr/share/bison++/bison.cc"
#line 1 "fpoptimizer_grammar_gen.y"

#define YYDEBUG 1

#include "fpconfig.hh"
#include "fparser.hh"
#include "fptypes.hh"

#include "fpoptimizer_grammar.hh"
#include "fpoptimizer_consts.hh"

#include <cstdio>
#include <cctype>
#include <cstdlib>
#include <sstream>
#include <iostream>
#include <map>
#include <algorithm>

/* crc32 */
#include <stdint.h>
typedef uint_least32_t crc32_t;
namespace crc32 {
    enum { startvalue = 0xFFFFFFFFUL };

    /* This code constructs the CRC32 table at compile-time,
     * avoiding the need for a huge explicitly written table of magical numbers. */
    static const uint_least32_t poly = 0xEDB88320UL;
    template<uint_fast32_t crc> // One byte of a CRC32 (eight bits):
    struct b8
    {
        enum { b1 = (crc & 1) ? (poly ^ (crc >> 1)) : (crc >> 1),
               b2 = (b1  & 1) ? (poly ^ (b1  >> 1)) : (b1  >> 1),
               b3 = (b2  & 1) ? (poly ^ (b2  >> 1)) : (b2  >> 1),
               b4 = (b3  & 1) ? (poly ^ (b3  >> 1)) : (b3  >> 1),
               b5 = (b4  & 1) ? (poly ^ (b4  >> 1)) : (b4  >> 1),
               b6 = (b5  & 1) ? (poly ^ (b5  >> 1)) : (b5  >> 1),
               b7 = (b6  & 1) ? (poly ^ (b6  >> 1)) : (b6  >> 1),
               res= (b7  & 1) ? (poly ^ (b7  >> 1)) : (b7  >> 1) };
    };
    // Four values of the table
    #define B4(n) b8<n>::res,b8<n+1>::res,b8<n+2>::res,b8<n+3>::res
    // Sixteen values of the table
    #define R(n) B4(n),B4(n+4),B4(n+8),B4(n+12)
    // The whole table, index by steps of 16
    static const uint_least32_t table[256] =
    { R(0x00),R(0x10),R(0x20),R(0x30), R(0x40),R(0x50),R(0x60),R(0x70),
      R(0x80),R(0x90),R(0xA0),R(0xB0), R(0xC0),R(0xD0),R(0xE0),R(0xF0) };
    #undef R
    #undef B4
    uint_fast32_t update(uint_fast32_t crc, unsigned/* char */b) // __attribute__((pure))
    {
        return ((crc >> 8) /* & 0x00FFFFFF*/) ^ table[/*(unsigned char)*/(crc^b)&0xFF];
    }
    crc32_t calc_upd(crc32_t c, const unsigned char* buf, size_t size)
    {
        uint_fast32_t value = c;
        for(unsigned long p=0; p<size; ++p) value = update(value, buf[p]);
        return value;
    }
    crc32_t calc(const unsigned char* buf, size_t size)
    {
        return calc_upd(startvalue, buf, size);
    }
}


/*********/
using namespace FPoptimizer_Grammar;
using namespace FUNCTIONPARSERTYPES;

#define YY_FPoptimizerGrammarParser_MEMBERS \
    Grammar grammar; \
    virtual ~YY_FPoptimizerGrammarParser_CLASS() { }

class GrammarDumper
{
private:
    std::string GenName(const char* prefix)
    {
        static unsigned counter = 0;
        char Buf[512];
        sprintf(Buf, "%s%u", prefix,++counter);
        return Buf;
    }
private:
    std::map<std::string, size_t>    n_index;
    std::map<double,      size_t>    c_index;
    std::map<crc32_t,     size_t>    p_index;
    std::map<crc32_t,     size_t>    m_index;
    std::map<crc32_t,     size_t>    f_index;

    std::vector<std::string>         nlist;
    std::vector<double>              clist;
    std::vector<ParamSpec_Const>     plist;
    std::vector<MatchedParams_Const> mlist;
    std::vector<FunctionType_Const>  flist;
    std::vector<RuleType_Const>      rlist;
    std::vector<Grammar_Const>       glist;
public:
    GrammarDumper():
        n_index(), c_index(), p_index(), m_index(), f_index(),
        nlist(),clist(),plist(),mlist(),flist(),rlist(),glist()
    {
    }

    std::string Dump(OpcodeType o)
    {
        switch(OPCODE(o))
        {
            case cAbs: return "cAbs";
            case cAcos: return "cAcos";
#ifndef FP_NO_ASINH
            case cAcosh: return "cAcosh";
#endif
            case cAsin: return "cAsin";
#ifndef FP_NO_ASINH
            case cAsinh: return "cAsinh";
#endif
            case cAtan: return "cAtan";
            case cAtan2: return "cAtan2";
#ifndef FP_NO_ASINH
            case cAtanh: return "cAtanh";
#endif
            case cCeil: return "cCeil";
            case cCos: return "cCos";
            case cCosh: return "cCosh";
            case cCot: return "cCot";
            case cCsc: return "cCsc";
#ifndef FP_DISABLE_EVAL
            case cEval: return "cEval";
#endif
            case cExp: return "cExp";
            case cFloor: return "cFloor";
            case cIf: return "cIf";
            case cInt: return "cInt";
            case cLog: return "cLog";
            case cLog2: return "cLog2";
            case cLog10: return "cLog10";
            case cMax: return "cMax";
            case cMin: return "cMin";
            case cPow: return "cPow";
            case cSec: return "cSec";
            case cSin: return "cSin";
            case cSinh: return "cSinh";
            case cSqrt: return "cSqrt";
            case cTan: return "cTan";
            case cTanh: return "cTanh";
            case cImmed: return "cImmed";
            case cJump: return "cJump";
            case cNeg: return "cNeg";
            case cAdd: return "cAdd";
            case cSub: return "cSub";
            case cMul: return "cMul";
            case cDiv: return "cDiv";
            case cMod: return "cMod";
            case cEqual: return "cEqual";
            case cNEqual: return "cNEqual";
            case cLess: return "cLess";
            case cLessOrEq: return "cLessOrEq";
            case cGreater: return "cGreater";
            case cGreaterOrEq: return "cGreaterOrEq";
            case cNot: return "cNot";
            case cAnd: return "cAnd";
            case cOr: return "cOr";
            case cDeg: return "cDeg";
            case cRad: return "cRad";
            case cFCall: return "cFCall";
            case cPCall: return "cPCall";
#ifdef FP_SUPPORT_OPTIMIZER
            case cVar: return "cVar";
            case cDup: return "cDup";
            case cInv: return "cInv";
            case cFetch: return "cFetch";
            case cPopNMov: return "cPopNMov";
            case cSqr: return "cSqr";
            case cRDiv: return "cRDiv";
            case cRSub: return "cRSub";
            case cNotNot: return "cNotNot";
#endif
            case cNop: return "cNop";
            case VarBegin: return "VarBegin";
        }
        switch( ParamSpec::SpecialOpcode(o) )
        {
            case ParamSpec::NumConstant:   return "ParamSpec::NumConstant  ";
            case ParamSpec::ImmedHolder:   return "ParamSpec::ImmedHolder  ";
            case ParamSpec::NamedHolder:   return "ParamSpec::NamedHolder  ";
            case ParamSpec::RestHolder:    return "ParamSpec::RestHolder   ";
            case ParamSpec::Function:      return "ParamSpec::Function     ";
          //case ParamSpec::GroupFunction: return "ParamSpec::GroupFunction";
        }
        std::stringstream tmp;
        tmp << o;
        return tmp.str();
    }
    std::string PDumpFix(const ParamSpec& p, const std::string& s)
    {
        std::string res = s;
        if(p.Negated)
            res = "(" + res + ")->SetNegated()";
        if(p.MinimumRepeat != 1 || p.AnyRepetition)
        {
            std::stringstream tmp;
            tmp << "->SetRepeat(" << p.MinimumRepeat
                << ", " << (p.AnyRepetition ? "true" : "false")
                << ")";
            res = "(" + res + ")" + tmp.str();
        }
        return res;
    }

    size_t Dump(const std::string& n)
    {
        std::map<std::string, size_t>::const_iterator i = n_index.find(n);
        if(i != n_index.end()) return i->second;
        nlist.push_back(n);
        return n_index[n] = nlist.size()-1;
    }
    size_t Dump(double v)
    {
        std::map<double, size_t>::const_iterator i = c_index.find(v);
        if(i != c_index.end()) return i->second;
        clist.push_back(v);
        return c_index[v] = clist.size()-1;
    }

    void Dump(const std::vector<ParamSpec*>& params,
              size_t& index,
              size_t& count)
    {
        count = params.size();
        index = plist.size();
        std::vector<crc32_t> crc32list;
        for(size_t a=0; a<params.size(); ++a)
        {
            size_t pos = Dump(*params[a]);
            crc32list.push_back(crc32::calc(
                (const unsigned char*)&plist[pos],
                                sizeof(plist[pos])));
        }
        size_t candidate_begin = 0;
        bool fail = false;
        for(size_t a=0; a<count; ++a)
        {
            std::map<crc32_t, size_t>::const_iterator ppos = p_index.find(crc32list[a]);
            if(ppos == p_index.end())
            {
                /*if(a > 0 && (candidate_begin + (a-1)) == index-a)
                {
                    // REMOVED: This never seems to happen, so we can't
                    //          test it. Remove it rather than leave in
                    //          potentially buggy code.
                    //
                    // If we were inserting "abc" and the sequence
                    // just happened to be ending as "ab", undo
                    // our inserted "abc" (it would be "ababc"),
                    // and instead, insert the remainder only,
                    // so it becomes "abc".
                    fprintf(stderr, "len=%u, appending at %u\n", (unsigned)count, (unsigned)a);
                    plist.resize(index);
                    index = candidate_begin;
                    for(; a < count; ++a)
                    {
                        size_t pos = Dump(*params[a]);
                        p_index[crc32list[a]] = index + a;
                    }
                    return;
                }*/
                p_index[crc32list[a]] = index + a;
                fail = true;
            }
            else if(a == 0)
                candidate_begin = ppos->second;
            else if(ppos->second != candidate_begin + a)
                fail = true;
        }
        if(!fail)
        {
            plist.resize(index);
            index = candidate_begin;
        }
        return;
    }

    size_t Dump(const ParamSpec& p)
    {
        ParamSpec_Const  pitem;
        pitem.negated        = p.Negated;
        pitem.transformation = p.Transformation;
        pitem.minrepeat      = p.MinimumRepeat;
        pitem.anyrepeat      = p.AnyRepetition;
        pitem.opcode         = p.Opcode;
        switch(p.Opcode)
        {
            case ParamSpec::NumConstant:
            {
                pitem.index = Dump(p.ConstantValue);
                pitem.count = 0;
                break;
            }
            case ParamSpec::NamedHolder:
            case ParamSpec::ImmedHolder:
            case ParamSpec::RestHolder:
            {
                pitem.index = p.Index;
                pitem.count = 0;
                break;
            }
            case ParamSpec::Function:
            {
                pitem.index = Dump(*p.Func);
                pitem.count = 0;
                break;
            }
            default:
            {
                size_t i, c;
                Dump(p.Params, i, c);
                pitem.index = i;
                pitem.count = c;
                break;
            }
        }
        plist.push_back(pitem);
        return plist.size()-1;
    }
    size_t Dump(const MatchedParams& m)
    {
        MatchedParams_Const mitem;
        mitem.type  = m.Type;
        size_t i, c;
        Dump(m.Params, i, c);
        mitem.index = i;
        mitem.count = c;

        crc32_t crc = crc32::calc((const unsigned char*)&mitem, sizeof(mitem));
        std::map<crc32_t, size_t>::const_iterator mi = m_index.find(crc);
        if(mi != m_index.end())
            return mi->second;
        m_index[crc] = mlist.size();

        mlist.push_back(mitem);
        return mlist.size()-1;
    }
    size_t Dump(const FunctionType& f)
    {
        FunctionType_Const fitem;
        fitem.opcode = f.Opcode;
        fitem.index  = Dump(f.Params);

        crc32_t crc = crc32::calc((const unsigned char*)&fitem, sizeof(fitem));
        std::map<crc32_t, size_t>::const_iterator fi = f_index.find(crc);
        if(fi != f_index.end())
            return fi->second;
        f_index[crc] = flist.size();

        flist.push_back(fitem);
        return flist.size()-1;
    }
    size_t Dump(const Rule& r)
    {
        RuleType_Const ritem;
        ritem.type        = r.Type;
        ritem.input_index = Dump(r.Input);
        ritem.repl_index  = Dump(r.Replacement);
        rlist.push_back(ritem);
        return rlist.size()-1;
    }
    size_t Dump(const Grammar& g)
    {
        Grammar_Const gitem;
        gitem.index = rlist.size();
        for(size_t a=0; a<g.rules.size(); ++a)
            Dump(g.rules[a]);
        gitem.count = g.rules.size();
        glist.push_back(gitem);
        return glist.size()-1;
    }

    void Flush()
    {
        std::cout <<
            "namespace\n"
            "{\n"
            "    const double clist[] =\n"
            "    {\n";
        for(size_t a=0; a<clist.size(); ++a)
        {
            std::cout <<
            "        ";
            std::cout.precision(50);
            if(clist[a]+2-2 != clist[a] || clist[a]+1 == clist[a])
                std::cout << "0.0 / 0.0";
            else
                std::cout << clist[a];
            std::cout << ", /* " << a << " */\n";
        }
        std::cout <<
            "    };\n"
            "\n"
            "    const ParamSpec_Const plist[] =\n"
            "    {\n";
        for(size_t a=0; a<plist.size(); ++a)
        {
            std::cout <<
            "        {" << (plist[a].negated ? "true " : "false")
                        << ", "
                        << (plist[a].transformation == ParamSpec::None    ? "ParamSpec::None  "
                         :  plist[a].transformation == ParamSpec::Negate  ? "ParamSpec::Negate"
                         :/*plist[a].transformation == ParamSpec::Invert?*/ "ParamSpec::Invert"
                           )
                        << ", "
                        << plist[a].minrepeat
                        << ", "
                        << (plist[a].anyrepeat ? "true " : "false")
                        << ", "
                        << Dump(plist[a].opcode)
                        << ", " << plist[a].count
                        << ", " << plist[a].index
                        << " }, /* " << a;
            if(plist[a].opcode == ParamSpec::NamedHolder)
                std::cout << ", \"" << nlist[plist[a].index] << "\"";
            std::cout << " */\n";
        }
        std::cout <<
            "    };\n"
            "\n"
            "    const MatchedParams_Const mlist[] =\n"
            "    {\n";
        for(size_t a=0; a<mlist.size(); ++a)
        {
            std::cout <<
            "        {" << (mlist[a].type == MatchedParams::PositionalParams ? "MatchedParams::PositionalParams"
                         :/*mlist[a].type == MatchedParams::AnyParams      ?*/ "MatchedParams::AnyParams       "
                           )
                        << ", " << mlist[a].count
                        << ", " << mlist[a].index
                        << " }, /* " << a << " */\n";
        }
        std::cout <<
            "    };\n"
            "\n"
            "    const FunctionType_Const flist[] =\n"
            "    {\n";
        for(size_t a=0; a<flist.size(); ++a)
        {
            std::cout <<
            "        {" << Dump(flist[a].opcode) << ", " << flist[a].index
                        << " }, /* " << a << " */\n";
        }
        std::cout <<
            "    };\n"
            "\n"
            "    const RuleType_Const rlist[] =\n"
            "    {\n";
        for(size_t a=0; a<rlist.size(); ++a)
        {
            std::cout <<
            "        {" << (rlist[a].type == Rule::ProduceNewTree  ? "Rule::ProduceNewTree"
                         :/*rlist[a].type == Rule::ReplaceParams ?*/ "Rule::ReplaceParams "
                           )
                        << ", " << rlist[a].input_index
                        << ", " << rlist[a].repl_index
                        << " }, /* " << a << " */\n";
        }
        std::cout <<
            "    };\n"
            "\n"
            "    const Grammar_Const glist[] =\n"
            "    {\n";
        for(size_t a=0; a<glist.size(); ++a)
        {
            std::cout <<
            "        {" << glist[a].index << ", " << glist[a].count
                        << " }, /* " << a << " */\n";
        }
        std::cout <<
            "    };\n"
            "\n"
            "    const GrammarPack pack =\n"
            "    {\n"
            "        clist, plist, mlist, flist, rlist, glist\n"
            "    };\n"
            "}\n";
    }
};

static GrammarDumper dumper;


#line 495 "fpoptimizer_grammar_gen.y"
typedef union {
    Rule*          r;
    FunctionType*  f;
    MatchedParams* p;
    ParamSpec*     a;

    double         num;
    std::string*   name;
    unsigned       index;
    OpcodeType     opcode;
} yy_FPoptimizerGrammarParser_stype;
#define YY_FPoptimizerGrammarParser_STYPE yy_FPoptimizerGrammarParser_stype

#line 88 "/usr/share/bison++/bison.cc"
/* %{ and %header{ and %union, during decl */
#define YY_FPoptimizerGrammarParser_BISON 1

#ifndef YY_FPoptimizerGrammarParser_COMPATIBILITY
 #ifndef YY_USE_CLASS
  #define  YY_FPoptimizerGrammarParser_COMPATIBILITY 1
 #else
  #define  YY_FPoptimizerGrammarParser_COMPATIBILITY 0
 #endif
#endif

#if YY_FPoptimizerGrammarParser_COMPATIBILITY != 0
 /* backward compatibility */
 #ifdef YYLTYPE
  #ifndef YY_FPoptimizerGrammarParser_LTYPE
   #define YY_FPoptimizerGrammarParser_LTYPE YYLTYPE
  #endif
 #endif
/* Testing alternative bison solution
   /#ifdef YYSTYPE*/
#ifndef YY_FPoptimizerGrammarParser_STYPE
   #define YY_FPoptimizerGrammarParser_STYPE YYSTYPE
#endif
/*#endif*/
 #ifdef YYDEBUG
  #ifndef YY_FPoptimizerGrammarParser_DEBUG
   #define  YY_FPoptimizerGrammarParser_DEBUG YYDEBUG
  #endif
 #endif

 /* use goto to be compatible */
 #ifndef YY_FPoptimizerGrammarParser_USE_GOTO
  #define YY_FPoptimizerGrammarParser_USE_GOTO 1
 #endif
#endif

/* use no goto to be clean in C++ */
#ifndef YY_FPoptimizerGrammarParser_USE_GOTO
 #define YY_FPoptimizerGrammarParser_USE_GOTO 0
#endif

#ifndef YY_FPoptimizerGrammarParser_PURE

 #line 130 "/usr/share/bison++/bison.cc"
#define YY_FPoptimizerGrammarParser_PURE 1

#line 130 "/usr/share/bison++/bison.cc"
/*  YY_FPoptimizerGrammarParser_PURE */
#endif

/* section apres lecture def, avant lecture grammaire S2 */

 #line 134 "/usr/share/bison++/bison.cc"

#line 134 "/usr/share/bison++/bison.cc"
/* prefix */
#ifndef YY_FPoptimizerGrammarParser_DEBUG

 #line 136 "/usr/share/bison++/bison.cc"

#line 136 "/usr/share/bison++/bison.cc"
/* YY_FPoptimizerGrammarParser_DEBUG */
#endif


#ifndef YY_FPoptimizerGrammarParser_LSP_NEEDED

 #line 141 "/usr/share/bison++/bison.cc"

#line 141 "/usr/share/bison++/bison.cc"
 /* YY_FPoptimizerGrammarParser_LSP_NEEDED*/
#endif



/* DEFAULT LTYPE*/
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
#ifndef YY_FPoptimizerGrammarParser_LTYPE
#ifndef BISON_YYLTYPE_ISDECLARED
#define BISON_YYLTYPE_ISDECLARED
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#endif
#define YY_FPoptimizerGrammarParser_LTYPE yyltype
#endif
#endif
/* DEFAULT STYPE*/
      /* We used to use `unsigned long' as YY_FPoptimizerGrammarParser_STYPE on MSDOS,
	 but it seems better to be consistent.
	 Most programs should declare their own type anyway.  */

#ifndef YY_FPoptimizerGrammarParser_STYPE
#define YY_FPoptimizerGrammarParser_STYPE int
#endif
/* DEFAULT MISCELANEOUS */
#ifndef YY_FPoptimizerGrammarParser_PARSE
#define YY_FPoptimizerGrammarParser_PARSE yyparse
#endif
#ifndef YY_FPoptimizerGrammarParser_LEX
#define YY_FPoptimizerGrammarParser_LEX yylex
#endif
#ifndef YY_FPoptimizerGrammarParser_LVAL
#define YY_FPoptimizerGrammarParser_LVAL yylval
#endif
#ifndef YY_FPoptimizerGrammarParser_LLOC
#define YY_FPoptimizerGrammarParser_LLOC yylloc
#endif
#ifndef YY_FPoptimizerGrammarParser_CHAR
#define YY_FPoptimizerGrammarParser_CHAR yychar
#endif
#ifndef YY_FPoptimizerGrammarParser_NERRS
#define YY_FPoptimizerGrammarParser_NERRS yynerrs
#endif
#ifndef YY_FPoptimizerGrammarParser_DEBUG_FLAG
#define YY_FPoptimizerGrammarParser_DEBUG_FLAG yydebug
#endif
#ifndef YY_FPoptimizerGrammarParser_ERROR
#define YY_FPoptimizerGrammarParser_ERROR yyerror
#endif

#ifndef YY_FPoptimizerGrammarParser_PARSE_PARAM
 #ifndef YY_USE_CLASS
  #ifdef YYPARSE_PARAM
   #define YY_FPoptimizerGrammarParser_PARSE_PARAM void* YYPARSE_PARAM
  #else
   #ifndef __STDC__
    #ifndef __cplusplus
     #define YY_FPoptimizerGrammarParser_PARSE_PARAM
    #endif
   #endif
  #endif
 #endif
 #ifndef YY_FPoptimizerGrammarParser_PARSE_PARAM
  #define YY_FPoptimizerGrammarParser_PARSE_PARAM void
 #endif
#endif

#if YY_FPoptimizerGrammarParser_COMPATIBILITY != 0
/* backward compatibility */
#ifdef YY_FPoptimizerGrammarParser_LTYPE
#ifndef YYLTYPE
#define YYLTYPE YY_FPoptimizerGrammarParser_LTYPE
#else
/* WARNING obsolete !!! user defined YYLTYPE not reported into generated header */
#endif
#endif

/* Removed due to bison compabilityproblems
/#ifndef YYSTYPE
/#define YYSTYPE YY_FPoptimizerGrammarParser_STYPE
/#else*/
/* WARNING obsolete !!! user defined YYSTYPE not reported into generated header */
/*#endif*/

#ifdef YY_FPoptimizerGrammarParser_PURE
#  ifndef YYPURE
#    define YYPURE YY_FPoptimizerGrammarParser_PURE
#  endif
#endif

#ifdef YY_FPoptimizerGrammarParser_DEBUG
#  ifndef YYDEBUG
#    define YYDEBUG YY_FPoptimizerGrammarParser_DEBUG
#  endif
#endif

#ifndef YY_FPoptimizerGrammarParser_ERROR_VERBOSE
 #ifdef YYERROR_VERBOSE
  #define YY_FPoptimizerGrammarParser_ERROR_VERBOSE YYERROR_VERBOSE
 #endif
#endif

#ifndef YY_FPoptimizerGrammarParser_LSP_NEEDED
#  ifdef YYLSP_NEEDED
#    define YY_FPoptimizerGrammarParser_LSP_NEEDED YYLSP_NEEDED
#  endif
#endif

#endif

#ifndef YY_USE_CLASS
/* TOKEN C */

 #line 263 "/usr/share/bison++/bison.cc"
#define	NUMERIC_CONSTANT	258
#define	PARAMETER_TOKEN	259
#define	PLACEHOLDER_TOKEN	260
#define	IMMED_TOKEN	261
#define	BUILTIN_FUNC_NAME	262
#define	OPCODE_NOTINV	263
#define	OPCODE_MAYBEINV	264
#define	GROUP_CONSTANT_OPERATOR	265
#define	UNARY_CONSTANT_OPERATOR	266
#define	NEWLINE	267
#define	SUBST_OP_COLON	268
#define	SUBST_OP_ARROW	269


#line 263 "/usr/share/bison++/bison.cc"
 /* #defines tokens */
#else
/* CLASS */
#ifndef YY_FPoptimizerGrammarParser_CLASS
#define YY_FPoptimizerGrammarParser_CLASS FPoptimizerGrammarParser
#endif
#ifndef YY_FPoptimizerGrammarParser_INHERIT
#define YY_FPoptimizerGrammarParser_INHERIT
#endif
#ifndef YY_FPoptimizerGrammarParser_MEMBERS
#define YY_FPoptimizerGrammarParser_MEMBERS
#endif
#ifndef YY_FPoptimizerGrammarParser_LEX_BODY
#define YY_FPoptimizerGrammarParser_LEX_BODY
#endif
#ifndef YY_FPoptimizerGrammarParser_ERROR_BODY
#define YY_FPoptimizerGrammarParser_ERROR_BODY
#endif
#ifndef YY_FPoptimizerGrammarParser_CONSTRUCTOR_PARAM
#define YY_FPoptimizerGrammarParser_CONSTRUCTOR_PARAM
#endif
#ifndef YY_FPoptimizerGrammarParser_CONSTRUCTOR_CODE
#define YY_FPoptimizerGrammarParser_CONSTRUCTOR_CODE
#endif
#ifndef YY_FPoptimizerGrammarParser_CONSTRUCTOR_INIT
#define YY_FPoptimizerGrammarParser_CONSTRUCTOR_INIT
#endif
/* choose between enum and const */
#ifndef YY_FPoptimizerGrammarParser_USE_CONST_TOKEN
#define YY_FPoptimizerGrammarParser_USE_CONST_TOKEN 0
/* yes enum is more compatible with flex,  */
/* so by default we use it */
#endif
#if YY_FPoptimizerGrammarParser_USE_CONST_TOKEN != 0
#ifndef YY_FPoptimizerGrammarParser_ENUM_TOKEN
#define YY_FPoptimizerGrammarParser_ENUM_TOKEN yy_FPoptimizerGrammarParser_enum_token
#endif
#endif

class YY_FPoptimizerGrammarParser_CLASS YY_FPoptimizerGrammarParser_INHERIT
{
public:
#if YY_FPoptimizerGrammarParser_USE_CONST_TOKEN != 0
/* static const int token ... */

 #line 307 "/usr/share/bison++/bison.cc"
static const int NUMERIC_CONSTANT;
static const int PARAMETER_TOKEN;
static const int PLACEHOLDER_TOKEN;
static const int IMMED_TOKEN;
static const int BUILTIN_FUNC_NAME;
static const int OPCODE_NOTINV;
static const int OPCODE_MAYBEINV;
static const int GROUP_CONSTANT_OPERATOR;
static const int UNARY_CONSTANT_OPERATOR;
static const int NEWLINE;
static const int SUBST_OP_COLON;
static const int SUBST_OP_ARROW;


#line 307 "/usr/share/bison++/bison.cc"
 /* decl const */
#else
enum YY_FPoptimizerGrammarParser_ENUM_TOKEN { YY_FPoptimizerGrammarParser_NULL_TOKEN=0

 #line 310 "/usr/share/bison++/bison.cc"
	,NUMERIC_CONSTANT=258
	,PARAMETER_TOKEN=259
	,PLACEHOLDER_TOKEN=260
	,IMMED_TOKEN=261
	,BUILTIN_FUNC_NAME=262
	,OPCODE_NOTINV=263
	,OPCODE_MAYBEINV=264
	,GROUP_CONSTANT_OPERATOR=265
	,UNARY_CONSTANT_OPERATOR=266
	,NEWLINE=267
	,SUBST_OP_COLON=268
	,SUBST_OP_ARROW=269


#line 310 "/usr/share/bison++/bison.cc"
 /* enum token */
     }; /* end of enum declaration */
#endif
public:
 int YY_FPoptimizerGrammarParser_PARSE (YY_FPoptimizerGrammarParser_PARSE_PARAM);
 virtual void YY_FPoptimizerGrammarParser_ERROR(char *msg) YY_FPoptimizerGrammarParser_ERROR_BODY;
#ifdef YY_FPoptimizerGrammarParser_PURE
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
 virtual int  YY_FPoptimizerGrammarParser_LEX (YY_FPoptimizerGrammarParser_STYPE *YY_FPoptimizerGrammarParser_LVAL,YY_FPoptimizerGrammarParser_LTYPE *YY_FPoptimizerGrammarParser_LLOC) YY_FPoptimizerGrammarParser_LEX_BODY;
#else
 virtual int  YY_FPoptimizerGrammarParser_LEX (YY_FPoptimizerGrammarParser_STYPE *YY_FPoptimizerGrammarParser_LVAL) YY_FPoptimizerGrammarParser_LEX_BODY;
#endif
#else
 virtual int YY_FPoptimizerGrammarParser_LEX() YY_FPoptimizerGrammarParser_LEX_BODY;
 YY_FPoptimizerGrammarParser_STYPE YY_FPoptimizerGrammarParser_LVAL;
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
 YY_FPoptimizerGrammarParser_LTYPE YY_FPoptimizerGrammarParser_LLOC;
#endif
 int   YY_FPoptimizerGrammarParser_NERRS;
 int    YY_FPoptimizerGrammarParser_CHAR;
#endif
#if YY_FPoptimizerGrammarParser_DEBUG != 0
 int YY_FPoptimizerGrammarParser_DEBUG_FLAG;   /*  nonzero means print parse trace     */
#endif
public:
 YY_FPoptimizerGrammarParser_CLASS(YY_FPoptimizerGrammarParser_CONSTRUCTOR_PARAM);
public:
 YY_FPoptimizerGrammarParser_MEMBERS
};
/* other declare folow */
#if YY_FPoptimizerGrammarParser_USE_CONST_TOKEN != 0

 #line 341 "/usr/share/bison++/bison.cc"
const int YY_FPoptimizerGrammarParser_CLASS::NUMERIC_CONSTANT=258;
const int YY_FPoptimizerGrammarParser_CLASS::PARAMETER_TOKEN=259;
const int YY_FPoptimizerGrammarParser_CLASS::PLACEHOLDER_TOKEN=260;
const int YY_FPoptimizerGrammarParser_CLASS::IMMED_TOKEN=261;
const int YY_FPoptimizerGrammarParser_CLASS::BUILTIN_FUNC_NAME=262;
const int YY_FPoptimizerGrammarParser_CLASS::OPCODE_NOTINV=263;
const int YY_FPoptimizerGrammarParser_CLASS::OPCODE_MAYBEINV=264;
const int YY_FPoptimizerGrammarParser_CLASS::GROUP_CONSTANT_OPERATOR=265;
const int YY_FPoptimizerGrammarParser_CLASS::UNARY_CONSTANT_OPERATOR=266;
const int YY_FPoptimizerGrammarParser_CLASS::NEWLINE=267;
const int YY_FPoptimizerGrammarParser_CLASS::SUBST_OP_COLON=268;
const int YY_FPoptimizerGrammarParser_CLASS::SUBST_OP_ARROW=269;


#line 341 "/usr/share/bison++/bison.cc"
 /* const YY_FPoptimizerGrammarParser_CLASS::token */
#endif
/*apres const  */
YY_FPoptimizerGrammarParser_CLASS::YY_FPoptimizerGrammarParser_CLASS(YY_FPoptimizerGrammarParser_CONSTRUCTOR_PARAM) YY_FPoptimizerGrammarParser_CONSTRUCTOR_INIT
{
#if YY_FPoptimizerGrammarParser_DEBUG != 0
YY_FPoptimizerGrammarParser_DEBUG_FLAG=0;
#endif
YY_FPoptimizerGrammarParser_CONSTRUCTOR_CODE;
}
#endif

 #line 352 "/usr/share/bison++/bison.cc"


#define	YYFINAL		54
#define	YYFLAG		-32768
#define	YYNTBASE	22

#define YYTRANSLATE(x) ((unsigned)(x) <= 269 ? yytranslate[x] : 33)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,    20,
    21,    19,    18,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    15,     2,    16,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,    17,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14
};

#if YY_FPoptimizerGrammarParser_DEBUG != 0
static const short yyprhs[] = {     0,
     0,     3,     6,     7,    12,    17,    22,    27,    29,    31,
    34,    37,    41,    43,    46,    47,    50,    52,    55,    56,
    58,    61,    64,    66,    68,    70,    74,    79,    82,    87
};

static const short yyrhs[] = {    22,
    23,     0,    22,    12,     0,     0,    24,    14,    32,    12,
     0,    24,    14,    24,    12,     0,    26,    13,    28,    12,
     0,    25,    13,    30,    12,     0,    25,     0,    26,     0,
     8,    27,     0,     9,    27,     0,    15,    28,    16,     0,
    28,     0,    28,    29,     0,     0,    17,    31,     0,    31,
     0,    30,    31,     0,     0,    32,     0,    32,    18,     0,
    32,    19,     0,     3,     0,     6,     0,     5,     0,    20,
    24,    21,     0,    10,    20,    30,    21,     0,    11,    32,
     0,     7,    20,    30,    21,     0,     4,     0
};

#endif

#if (YY_FPoptimizerGrammarParser_DEBUG != 0) || defined(YY_FPoptimizerGrammarParser_ERROR_VERBOSE)
static const short yyrline[] = { 0,
   527,   533,   534,   537,   545,   554,   562,   572,   574,   577,
   586,   595,   601,   608,   614,   619,   625,   631,   637,   643,
   645,   652,   661,   666,   670,   674,   678,   683,   692,   697
};

static const char * const yytname[] = {   "$","error","$illegal.","NUMERIC_CONSTANT",
"PARAMETER_TOKEN","PLACEHOLDER_TOKEN","IMMED_TOKEN","BUILTIN_FUNC_NAME","OPCODE_NOTINV",
"OPCODE_MAYBEINV","GROUP_CONSTANT_OPERATOR","UNARY_CONSTANT_OPERATOR","NEWLINE",
"SUBST_OP_COLON","SUBST_OP_ARROW","'['","']'","'~'","'+'","'*'","'('","')'",
"grammar","substitution","function","function_notinv","function_maybeinv","paramsmatchingspec",
"param_maybeinv_list","maybeinv_param","paramlist","param","paramtoken",""
};
#endif

static const short yyr1[] = {     0,
    22,    22,    22,    23,    23,    23,    23,    24,    24,    25,
    26,    27,    27,    28,    28,    29,    29,    30,    30,    31,
    31,    31,    32,    32,    32,    32,    32,    32,    32,    32
};

static const short yyr2[] = {     0,
     2,     2,     0,     4,     4,     4,     4,     1,     1,     2,
     2,     3,     1,     2,     0,     2,     1,     2,     0,     1,
     2,     2,     1,     1,     1,     3,     4,     2,     4,     1
};

static const short yydefact[] = {     3,
     0,    15,    15,     2,     1,     0,     8,     9,    15,    10,
    13,    11,     0,    19,    15,     0,    23,    30,    25,    24,
     0,     0,     0,     0,     0,    14,    17,    20,     0,     8,
     9,     0,     0,     0,    12,    19,    19,    28,    16,     0,
    21,    22,     5,     4,     7,    18,     6,     0,     0,    26,
    29,    27,     0,     0
};

static const short yydefgoto[] = {     1,
     5,     6,    30,    31,    10,    11,    26,    33,    27,    28
};

static const short yypact[] = {-32768,
   120,    28,    28,-32768,-32768,    30,    37,    41,-32768,-32768,
    78,-32768,    31,-32768,-32768,    42,-32768,-32768,-32768,-32768,
    35,    36,   107,   107,    18,-32768,-32768,    10,    45,-32768,
-32768,    48,    96,    60,-32768,-32768,-32768,-32768,-32768,    40,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,     0,    12,-32768,
-32768,-32768,    68,-32768
};

static const short yypgoto[] = {-32768,
-32768,   -12,    72,    73,    66,    -1,-32768,    -6,   -24,   -11
};


#define	YYLAST		132


static const short yytable[] = {    39,
    29,    32,    17,    18,    19,    20,    21,    16,    46,    22,
    23,    38,    40,    34,    17,    18,    19,    20,    21,    25,
    51,    22,    23,    46,    46,     2,     3,    41,    42,    48,
    49,    25,    52,    17,    18,    19,    20,    21,     2,     3,
    22,    23,     9,    13,    17,    18,    19,    20,    21,    14,
    25,    22,    23,    15,    36,    37,    43,    35,    24,    44,
    50,    25,    17,    18,    19,    20,    21,    54,    12,    22,
    23,    47,     7,     8,     0,     0,    24,     0,     0,    25,
    17,    18,    19,    20,    21,     0,     0,    22,    23,     0,
     0,     0,     0,     0,    24,     0,     0,    25,    17,    18,
    19,    20,    21,     0,     0,    22,    23,    45,     0,    17,
    18,    19,    20,    21,     0,    25,    22,    23,     0,    53,
     0,     0,     0,     0,     0,     0,    25,     2,     3,     0,
     0,     4
};

static const short yycheck[] = {    24,
    13,    13,     3,     4,     5,     6,     7,     9,    33,    10,
    11,    23,    25,    15,     3,     4,     5,     6,     7,    20,
    21,    10,    11,    48,    49,     8,     9,    18,    19,    36,
    37,    20,    21,     3,     4,     5,     6,     7,     8,     9,
    10,    11,    15,    14,     3,     4,     5,     6,     7,    13,
    20,    10,    11,    13,    20,    20,    12,    16,    17,    12,
    21,    20,     3,     4,     5,     6,     7,     0,     3,    10,
    11,    12,     1,     1,    -1,    -1,    17,    -1,    -1,    20,
     3,     4,     5,     6,     7,    -1,    -1,    10,    11,    -1,
    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,     3,     4,
     5,     6,     7,    -1,    -1,    10,    11,    12,    -1,     3,
     4,     5,     6,     7,    -1,    20,    10,    11,    -1,     0,
    -1,    -1,    -1,    -1,    -1,    -1,    20,     8,     9,    -1,
    -1,    12
};

#line 352 "/usr/share/bison++/bison.cc"
 /* fattrs + tables */

/* parser code folow  */


/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: dollar marks section change
   the next  is replaced by the list of actions, each action
   as one case of the switch.  */

#if YY_FPoptimizerGrammarParser_USE_GOTO != 0
/*
 SUPRESSION OF GOTO : on some C++ compiler (sun c++)
  the goto is strictly forbidden if any constructor/destructor
  is used in the whole function (very stupid isn't it ?)
 so goto are to be replaced with a 'while/switch/case construct'
 here are the macro to keep some apparent compatibility
*/
#define YYGOTO(lb) {yy_gotostate=lb;continue;}
#define YYBEGINGOTO  enum yy_labels yy_gotostate=yygotostart; \
                     for(;;) switch(yy_gotostate) { case yygotostart: {
#define YYLABEL(lb) } case lb: {
#define YYENDGOTO } }
#define YYBEGINDECLARELABEL enum yy_labels {yygotostart
#define YYDECLARELABEL(lb) ,lb
#define YYENDDECLARELABEL  };
#else
/* macro to keep goto */
#define YYGOTO(lb) goto lb
#define YYBEGINGOTO
#define YYLABEL(lb) lb:
#define YYENDGOTO
#define YYBEGINDECLARELABEL
#define YYDECLARELABEL(lb)
#define YYENDDECLARELABEL
#endif
/* LABEL DECLARATION */
YYBEGINDECLARELABEL
  YYDECLARELABEL(yynewstate)
  YYDECLARELABEL(yybackup)
/* YYDECLARELABEL(yyresume) */
  YYDECLARELABEL(yydefault)
  YYDECLARELABEL(yyreduce)
  YYDECLARELABEL(yyerrlab)   /* here on detecting error */
  YYDECLARELABEL(yyerrlab1)   /* here on error raised explicitly by an action */
  YYDECLARELABEL(yyerrdefault)  /* current state does not do anything special for the error token. */
  YYDECLARELABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */
  YYDECLARELABEL(yyerrhandle)
YYENDDECLARELABEL
/* ALLOCA SIMULATION */
/* __HAVE_NO_ALLOCA */
#ifdef __HAVE_NO_ALLOCA
int __alloca_free_ptr(char *ptr,char *ref)
{if(ptr!=ref) free(ptr);
 return 0;}

#define __ALLOCA_alloca(size) malloc(size)
#define __ALLOCA_free(ptr,ref) __alloca_free_ptr((char *)ptr,(char *)ref)

#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		    __ALLOCA_free(yyls,yylsa)+\
		   (num)); } while(0)
#else
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		   (num)); } while(0)
#endif
#else
#define __ALLOCA_return(num) do { return(num); } while(0)
#define __ALLOCA_alloca(size) alloca(size)
#define __ALLOCA_free(ptr,ref)
#endif

/* ENDALLOCA SIMULATION */

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (YY_FPoptimizerGrammarParser_CHAR = YYEMPTY)
#define YYEMPTY         -2
#define YYEOF           0
#define YYACCEPT        __ALLOCA_return(0)
#define YYABORT         __ALLOCA_return(1)
#define YYERROR         YYGOTO(yyerrlab1)
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL          YYGOTO(yyerrlab)
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do                                                              \
  if (YY_FPoptimizerGrammarParser_CHAR == YYEMPTY && yylen == 1)                               \
    { YY_FPoptimizerGrammarParser_CHAR = (token), YY_FPoptimizerGrammarParser_LVAL = (value);                 \
      yychar1 = YYTRANSLATE (YY_FPoptimizerGrammarParser_CHAR);                                \
      YYPOPSTACK;                                               \
      YYGOTO(yybackup);                                            \
    }                                                           \
  else                                                          \
    { YY_FPoptimizerGrammarParser_ERROR ("syntax error: cannot back up"); YYERROR; }   \
while (0)

#define YYTERROR        1
#define YYERRCODE       256

#ifndef YY_FPoptimizerGrammarParser_PURE
/* UNPURE */
#define YYLEX           YY_FPoptimizerGrammarParser_LEX()
#ifndef YY_USE_CLASS
/* If nonreentrant, and not class , generate the variables here */
int     YY_FPoptimizerGrammarParser_CHAR;                      /*  the lookahead symbol        */
YY_FPoptimizerGrammarParser_STYPE      YY_FPoptimizerGrammarParser_LVAL;              /*  the semantic value of the */
				/*  lookahead symbol    */
int YY_FPoptimizerGrammarParser_NERRS;                 /*  number of parse errors so far */
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
YY_FPoptimizerGrammarParser_LTYPE YY_FPoptimizerGrammarParser_LLOC;   /*  location data for the lookahead     */
			/*  symbol                              */
#endif
#endif


#else
/* PURE */
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
#define YYLEX           YY_FPoptimizerGrammarParser_LEX(&YY_FPoptimizerGrammarParser_LVAL, &YY_FPoptimizerGrammarParser_LLOC)
#else
#define YYLEX           YY_FPoptimizerGrammarParser_LEX(&YY_FPoptimizerGrammarParser_LVAL)
#endif
#endif
#ifndef YY_USE_CLASS
#if YY_FPoptimizerGrammarParser_DEBUG != 0
int YY_FPoptimizerGrammarParser_DEBUG_FLAG;                    /*  nonzero means print parse trace     */
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif
#endif



/*  YYINITDEPTH indicates the initial size of the parser's stacks       */

#ifndef YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif


#if __GNUC__ > 1                /* GNU C and GNU C++ define this.  */
#define __yy_bcopy(FROM,TO,COUNT)       __builtin_memcpy(TO,FROM,COUNT)
#else                           /* not GNU C or C++ */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */

#ifdef __cplusplus
static void __yy_bcopy (char *from, char *to, int count)
#else
#ifdef __STDC__
static void __yy_bcopy (char *from, char *to, int count)
#else
static void __yy_bcopy (from, to, count)
     char *from;
     char *to;
     int count;
#endif
#endif
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}
#endif


int
#ifdef YY_USE_CLASS
 YY_FPoptimizerGrammarParser_CLASS::
#endif
     YY_FPoptimizerGrammarParser_PARSE(YY_FPoptimizerGrammarParser_PARSE_PARAM)
#ifndef __STDC__
#ifndef __cplusplus
#ifndef YY_USE_CLASS
/* parameter definition without protypes */
YY_FPoptimizerGrammarParser_PARSE_PARAM_DEF
#endif
#endif
#endif
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YY_FPoptimizerGrammarParser_STYPE *yyvsp;
  int yyerrstatus;      /*  number of tokens to shift before error messages enabled */
  int yychar1=0;          /*  lookahead token as an internal (translated) token number */

  short yyssa[YYINITDEPTH];     /*  the state stack                     */
  YY_FPoptimizerGrammarParser_STYPE yyvsa[YYINITDEPTH];        /*  the semantic value stack            */

  short *yyss = yyssa;          /*  refer to the stacks thru separate pointers */
  YY_FPoptimizerGrammarParser_STYPE *yyvs = yyvsa;     /*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
  YY_FPoptimizerGrammarParser_LTYPE yylsa[YYINITDEPTH];        /*  the location stack                  */
  YY_FPoptimizerGrammarParser_LTYPE *yyls = yylsa;
  YY_FPoptimizerGrammarParser_LTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YY_FPoptimizerGrammarParser_PURE
  int YY_FPoptimizerGrammarParser_CHAR;
  YY_FPoptimizerGrammarParser_STYPE YY_FPoptimizerGrammarParser_LVAL;
  int YY_FPoptimizerGrammarParser_NERRS;
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
  YY_FPoptimizerGrammarParser_LTYPE YY_FPoptimizerGrammarParser_LLOC;
#endif
#endif

  YY_FPoptimizerGrammarParser_STYPE yyval;             /*  the variable used to return         */
				/*  semantic values from the action     */
				/*  routines                            */

  int yylen;
/* start loop, in which YYGOTO may be used. */
YYBEGINGOTO

#if YY_FPoptimizerGrammarParser_DEBUG != 0
  if (YY_FPoptimizerGrammarParser_DEBUG_FLAG)
    fprintf(stderr, "Starting parse\n");
#endif
  yystate = 0;
  yyerrstatus = 0;
  YY_FPoptimizerGrammarParser_NERRS = 0;
  YY_FPoptimizerGrammarParser_CHAR = YYEMPTY;          /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
YYLABEL(yynewstate)

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YY_FPoptimizerGrammarParser_STYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
      YY_FPoptimizerGrammarParser_LTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  YY_FPoptimizerGrammarParser_ERROR("parser stack overflow");
	  __ALLOCA_return(2);
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) __ALLOCA_alloca (yystacksize * sizeof (*yyssp));
      __yy_bcopy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      __ALLOCA_free(yyss1,yyssa);
      yyvs = (YY_FPoptimizerGrammarParser_STYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yyvsp));
      __yy_bcopy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
      __ALLOCA_free(yyvs1,yyvsa);
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
      yyls = (YY_FPoptimizerGrammarParser_LTYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yylsp));
      __yy_bcopy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
      __ALLOCA_free(yyls1,yylsa);
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YY_FPoptimizerGrammarParser_DEBUG != 0
      if (YY_FPoptimizerGrammarParser_DEBUG_FLAG)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YY_FPoptimizerGrammarParser_DEBUG != 0
  if (YY_FPoptimizerGrammarParser_DEBUG_FLAG)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  YYGOTO(yybackup);
YYLABEL(yybackup)

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* YYLABEL(yyresume) */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yydefault);

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (YY_FPoptimizerGrammarParser_CHAR == YYEMPTY)
    {
#if YY_FPoptimizerGrammarParser_DEBUG != 0
      if (YY_FPoptimizerGrammarParser_DEBUG_FLAG)
	fprintf(stderr, "Reading a token: ");
#endif
      YY_FPoptimizerGrammarParser_CHAR = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (YY_FPoptimizerGrammarParser_CHAR <= 0)           /* This means end of input. */
    {
      yychar1 = 0;
      YY_FPoptimizerGrammarParser_CHAR = YYEOF;                /* Don't call YYLEX any more */

#if YY_FPoptimizerGrammarParser_DEBUG != 0
      if (YY_FPoptimizerGrammarParser_DEBUG_FLAG)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(YY_FPoptimizerGrammarParser_CHAR);

#if YY_FPoptimizerGrammarParser_DEBUG != 0
      if (YY_FPoptimizerGrammarParser_DEBUG_FLAG)
	{
	  fprintf (stderr, "Next token is %d (%s", YY_FPoptimizerGrammarParser_CHAR, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, YY_FPoptimizerGrammarParser_CHAR, YY_FPoptimizerGrammarParser_LVAL);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    YYGOTO(yydefault);

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrlab);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrlab);

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YY_FPoptimizerGrammarParser_DEBUG != 0
  if (YY_FPoptimizerGrammarParser_DEBUG_FLAG)
    fprintf(stderr, "Shifting token %d (%s), ", YY_FPoptimizerGrammarParser_CHAR, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (YY_FPoptimizerGrammarParser_CHAR != YYEOF)
    YY_FPoptimizerGrammarParser_CHAR = YYEMPTY;

  *++yyvsp = YY_FPoptimizerGrammarParser_LVAL;
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
  *++yylsp = YY_FPoptimizerGrammarParser_LLOC;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  YYGOTO(yynewstate);

/* Do the default action for the current state.  */
YYLABEL(yydefault)

  yyn = yydefact[yystate];
  if (yyn == 0)
    YYGOTO(yyerrlab);

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
YYLABEL(yyreduce)
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YY_FPoptimizerGrammarParser_DEBUG != 0
  if (YY_FPoptimizerGrammarParser_DEBUG_FLAG)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


 #line 839 "/usr/share/bison++/bison.cc"

  switch (yyn) {

case 1:
#line 529 "fpoptimizer_grammar_gen.y"
{
        this->grammar.AddRule(*yyvsp[0].r);
        delete yyvsp[0].r;
      ;
    break;}
case 4:
#line 540 "fpoptimizer_grammar_gen.y"
{
        yyval.r = new Rule(Rule::ProduceNewTree, *yyvsp[-3].f, yyvsp[-1].a);
        delete yyvsp[-3].f;
      ;
    break;}
case 5:
#line 548 "fpoptimizer_grammar_gen.y"
{
        yyval.r = new Rule(Rule::ProduceNewTree, *yyvsp[-3].f, new ParamSpec(yyvsp[-1].f));
        //std::cout << GrammarDumper().Dump(*new ParamSpec($3)) << "\n";
        delete yyvsp[-3].f;
      ;
    break;}
case 6:
#line 556 "fpoptimizer_grammar_gen.y"
{
        yyval.r = new Rule(Rule::ReplaceParams, *yyvsp[-3].f, *yyvsp[-1].p);
        delete yyvsp[-3].f;
        delete yyvsp[-1].p;
      ;
    break;}
case 7:
#line 564 "fpoptimizer_grammar_gen.y"
{
        yyval.r = new Rule(Rule::ReplaceParams, *yyvsp[-3].f, *yyvsp[-1].p);
        delete yyvsp[-3].f;
        delete yyvsp[-1].p;
      ;
    break;}
case 10:
#line 580 "fpoptimizer_grammar_gen.y"
{
         yyval.f = new FunctionType(yyvsp[-1].opcode, *yyvsp[0].p);
         delete yyvsp[0].p;
       ;
    break;}
case 11:
#line 589 "fpoptimizer_grammar_gen.y"
{
         yyval.f = new FunctionType(yyvsp[-1].opcode, *yyvsp[0].p);
         delete yyvsp[0].p;
       ;
    break;}
case 12:
#line 597 "fpoptimizer_grammar_gen.y"
{
          yyval.p = yyvsp[-1].p;
          yyval.p->SetType(MatchedParams::PositionalParams);
        ;
    break;}
case 13:
#line 602 "fpoptimizer_grammar_gen.y"
{
          yyval.p = yyvsp[0].p;
          yyval.p->SetType(MatchedParams::AnyParams);
        ;
    break;}
case 14:
#line 610 "fpoptimizer_grammar_gen.y"
{
          yyval.p = yyvsp[-1].p;
          yyval.p->AddParam(yyvsp[0].a);
        ;
    break;}
case 15:
#line 615 "fpoptimizer_grammar_gen.y"
{
          yyval.p = new MatchedParams;
        ;
    break;}
case 16:
#line 621 "fpoptimizer_grammar_gen.y"
{
         yyval.a = yyvsp[0].a;
         yyval.a->Negated = true;
       ;
    break;}
case 17:
#line 626 "fpoptimizer_grammar_gen.y"
{
         yyval.a = yyvsp[0].a;
       ;
    break;}
case 18:
#line 633 "fpoptimizer_grammar_gen.y"
{
          yyval.p = yyvsp[-1].p;
          yyval.p->AddParam(yyvsp[0].a);
        ;
    break;}
case 19:
#line 638 "fpoptimizer_grammar_gen.y"
{
          yyval.p = new MatchedParams;
        ;
    break;}
case 21:
#line 647 "fpoptimizer_grammar_gen.y"
{
         yyval.a = yyvsp[-1].a;
         yyval.a->MinimumRepeat = 2;
         yyval.a->AnyRepetition = true;
       ;
    break;}
case 22:
#line 654 "fpoptimizer_grammar_gen.y"
{
         yyval.a = yyvsp[-1].a;
         yyval.a->MinimumRepeat = 1;
         yyval.a->AnyRepetition = true;
       ;
    break;}
case 23:
#line 663 "fpoptimizer_grammar_gen.y"
{
         yyval.a = new ParamSpec(yyvsp[0].num);
       ;
    break;}
case 24:
#line 667 "fpoptimizer_grammar_gen.y"
{
         yyval.a = new ParamSpec(yyvsp[0].index, ParamSpec::ImmedHolderTag());
       ;
    break;}
case 25:
#line 671 "fpoptimizer_grammar_gen.y"
{
         yyval.a = new ParamSpec(yyvsp[0].index, ParamSpec::RestHolderTag());
       ;
    break;}
case 26:
#line 675 "fpoptimizer_grammar_gen.y"
{
         yyval.a = new ParamSpec(yyvsp[-1].f);
       ;
    break;}
case 27:
#line 679 "fpoptimizer_grammar_gen.y"
{
         yyval.a = new ParamSpec(yyvsp[-3].opcode, yyvsp[-1].p->GetParams());
         delete yyvsp[-1].p;
       ;
    break;}
case 28:
#line 684 "fpoptimizer_grammar_gen.y"
{
         yyval.a = yyvsp[0].a;
         switch(yyvsp[-1].opcode)
         {
           case cNeg: yyval.a->Transformation = ParamSpec::Negate; break;
           case cInv: yyval.a->Transformation = ParamSpec::Invert; break;
         }
       ;
    break;}
case 29:
#line 693 "fpoptimizer_grammar_gen.y"
{
         yyval.a = new ParamSpec(yyvsp[-3].opcode, yyvsp[-1].p->GetParams());
         delete yyvsp[-1].p;
       ;
    break;}
case 30:
#line 698 "fpoptimizer_grammar_gen.y"
{
         unsigned nameindex = dumper.Dump(*yyvsp[0].name);
         yyval.a = new ParamSpec(nameindex, ParamSpec::NamedHolderTag());
         delete yyvsp[0].name;
       ;
    break;}
}

#line 839 "/usr/share/bison++/bison.cc"
   /* the action file gets copied in in place of this dollarsign  */
  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
  yylsp -= yylen;
#endif

#if YY_FPoptimizerGrammarParser_DEBUG != 0
  if (YY_FPoptimizerGrammarParser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = YY_FPoptimizerGrammarParser_LLOC.first_line;
      yylsp->first_column = YY_FPoptimizerGrammarParser_LLOC.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  YYGOTO(yynewstate);

YYLABEL(yyerrlab)   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++YY_FPoptimizerGrammarParser_NERRS;

#ifdef YY_FPoptimizerGrammarParser_ERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      YY_FPoptimizerGrammarParser_ERROR(msg);
	      free(msg);
	    }
	  else
	    YY_FPoptimizerGrammarParser_ERROR ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YY_FPoptimizerGrammarParser_ERROR_VERBOSE */
	YY_FPoptimizerGrammarParser_ERROR("parse error");
    }

  YYGOTO(yyerrlab1);
YYLABEL(yyerrlab1)   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (YY_FPoptimizerGrammarParser_CHAR == YYEOF)
	YYABORT;

#if YY_FPoptimizerGrammarParser_DEBUG != 0
      if (YY_FPoptimizerGrammarParser_DEBUG_FLAG)
	fprintf(stderr, "Discarding token %d (%s).\n", YY_FPoptimizerGrammarParser_CHAR, yytname[yychar1]);
#endif

      YY_FPoptimizerGrammarParser_CHAR = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;              /* Each real token shifted decrements this */

  YYGOTO(yyerrhandle);

YYLABEL(yyerrdefault)  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) YYGOTO(yydefault);
#endif

YYLABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
  yylsp--;
#endif

#if YY_FPoptimizerGrammarParser_DEBUG != 0
  if (YY_FPoptimizerGrammarParser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

YYLABEL(yyerrhandle)

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yyerrdefault);

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    YYGOTO(yyerrdefault);

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrpop);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrpop);

  if (yyn == YYFINAL)
    YYACCEPT;

#if YY_FPoptimizerGrammarParser_DEBUG != 0
  if (YY_FPoptimizerGrammarParser_DEBUG_FLAG)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = YY_FPoptimizerGrammarParser_LVAL;
#ifdef YY_FPoptimizerGrammarParser_LSP_NEEDED
  *++yylsp = YY_FPoptimizerGrammarParser_LLOC;
#endif

  yystate = yyn;
  YYGOTO(yynewstate);
/* end loop, in which YYGOTO may be used. */
  YYENDGOTO
}

/* END */

 #line 1038 "/usr/share/bison++/bison.cc"
#line 705 "fpoptimizer_grammar_gen.y"


void FPoptimizerGrammarParser::yyerror(char* msg)
{
    fprintf(stderr, "%s\n", msg);
    for(;;)
    {
        int c = std::fgetc(stdin);
        if(c == EOF) break;
        std::fputc(c, stderr);
    }
}

int FPoptimizerGrammarParser::yylex(yy_FPoptimizerGrammarParser_stype* lval)
{
    int c = std::fgetc(stdin);
    switch(c)
    {
        case EOF: break;
        case '#':
            while(c != EOF && c != '\n') c = std::fgetc(stdin);
            return NEWLINE;
        case '\n':
        {
            c = std::fgetc(stdin);
            std::ungetc(c, stdin);
            if(c == '[')
                return EOF;
            return NEWLINE;
        }
        case '+':
        {
            c = std::fgetc(stdin);
            std::ungetc(c, stdin);
            if(c == '(') { lval->opcode = cAdd; return GROUP_CONSTANT_OPERATOR; }
            return '+';
        }
        case '*':
        {
            c = std::fgetc(stdin);
            std::ungetc(c, stdin);
            if(c == '(') { lval->opcode = cMul; return GROUP_CONSTANT_OPERATOR; }
            return '*';
        }

        case '~':
        case '[':
        case ']':
        case '(':
        case ')':
            return c;
        case ' ':
        case '\t':
        case '\v':
        case '\r':
            return yylex(lval); // Counts as tail recursion, I hope
        case ':':
            return SUBST_OP_COLON;
        case '-':
        {
            int c2 = std::fgetc(stdin);
            if(c2 == '>')
                return SUBST_OP_ARROW;
            std::ungetc(c2, stdin);
            lval->opcode = cNeg;
            return UNARY_CONSTANT_OPERATOR;
        }
        case '/':
        {
            lval->opcode = cInv;
            return UNARY_CONSTANT_OPERATOR;
        }
        case '%': { lval->index = 0; return IMMED_TOKEN; }
        case '&': { lval->index = 1; return IMMED_TOKEN; }
        case '<':
        {
            lval->index  = 0;
            for(;;)
            {
                c = std::fgetc(stdin);
                if(c < '0' || c > '9') { std::ungetc(c, stdin); break; }
                lval->index = lval->index * 10 + (c-'0');
            }
            c = std::fgetc(stdin);
            if(c != '>') std::ungetc(c, stdin);
            return PLACEHOLDER_TOKEN;
        }
        case '0': case '1': case '2': case '3': case '4':
        case '5': case '6': case '7': case '8': case '9':
        {
            std::string NumBuf;
            NumBuf += (char)c;
            bool had_comma = false;
            for(;;)
            {
                c = std::fgetc(stdin);
                if(c >= '0' && c <= '9')  { NumBuf += (char)c; continue; }
                if(c == '.' && !had_comma){ had_comma = true; NumBuf += (char)c; continue; }
                std::ungetc(c, stdin);
                break;
            }
            lval->num = std::strtod(NumBuf.c_str(), 0);
            return NUMERIC_CONSTANT;
        }
        case 'A': case 'B': case 'C': case 'D': case 'E': case 'F':
        case 'G': case 'H': case 'I': case 'J': case 'K': case 'L':
        case 'M': case 'N': case 'O': case 'P': case 'Q': case 'R':
        case 'S': case 'T': case 'U': case 'V': case 'W': case 'X':
        case 'Y': case 'Z': case '_':
        case 'a': case 'b': case 'c': case 'd': case 'e': case 'f':
        case 'g': case 'h': case 'i': case 'j': case 'k': case 'l':
        case 'm': case 'n': case 'o': case 'p': case 'q': case 'r':
        case 's': case 't': case 'u': case 'v': case 'w': case 'x':
        case 'y': case 'z':
        {
            std::string IdBuf;
            IdBuf += (char)c;
            for(;;)
            {
                c = std::fgetc(stdin);
                if((c >= '0' && c <= '9')
                || c == '_'
                || (c >= 'a' && c <= 'z')
                || (c >= 'A' && c <= 'Z')) { IdBuf += (char)c; continue; }
                std::ungetc(c, stdin);
                break;
            }

            /* TODO: figure out if this is a named constant,
                     an opcode, or a parse-time function name,
                     or just an identifier
             */
            if(IdBuf == "CONSTANT_E") { lval->num = CONSTANT_E; return NUMERIC_CONSTANT; }
            if(IdBuf == "CONSTANT_RD") { lval->num = CONSTANT_RD; return NUMERIC_CONSTANT; }
            if(IdBuf == "CONSTANT_DR") { lval->num = CONSTANT_DR; return NUMERIC_CONSTANT; }
            if(IdBuf == "CONSTANT_PI") { lval->num = CONSTANT_PI; return NUMERIC_CONSTANT; }
            if(IdBuf == "CONSTANT_L2I") { lval->num = CONSTANT_L2I; return NUMERIC_CONSTANT; }
            if(IdBuf == "CONSTANT_L10I") { lval->num = CONSTANT_L10I; return NUMERIC_CONSTANT; }
            if(IdBuf == "CONSTANT_L2") { lval->num = CONSTANT_L2; return NUMERIC_CONSTANT; }
            if(IdBuf == "CONSTANT_L10") { lval->num = CONSTANT_L10; return NUMERIC_CONSTANT; }
            if(IdBuf == "NaN")
            {
                /* We generate a NaN. Anyone know a better way? */
                lval->num = 0; lval->num /= 0.0; return NUMERIC_CONSTANT;
            }

            if(IdBuf == "cAdd") { lval->opcode = cAdd; return OPCODE_MAYBEINV; }
            if(IdBuf == "cAnd") { lval->opcode = cAnd; return OPCODE_MAYBEINV; }
            if(IdBuf == "cMul") { lval->opcode = cMul; return OPCODE_MAYBEINV; }
            if(IdBuf == "cOr")  { lval->opcode = cOr; return OPCODE_MAYBEINV; }

            if(IdBuf == "cNeg") { lval->opcode = cNeg; return OPCODE_NOTINV; }
            if(IdBuf == "cSub") { lval->opcode = cSub; return OPCODE_NOTINV; }
            if(IdBuf == "cDiv") { lval->opcode = cDiv; return OPCODE_NOTINV; }
            if(IdBuf == "cMod") { lval->opcode = cMod; return OPCODE_NOTINV; }
            if(IdBuf == "cEqual") { lval->opcode = cEqual; return OPCODE_NOTINV; }
            if(IdBuf == "cNEqual") { lval->opcode = cNEqual; return OPCODE_NOTINV; }
            if(IdBuf == "cLess") { lval->opcode = cLess; return OPCODE_NOTINV; }
            if(IdBuf == "cLessOrEq") { lval->opcode = cLessOrEq; return OPCODE_NOTINV; }
            if(IdBuf == "cGreater") { lval->opcode = cGreater; return OPCODE_NOTINV; }
            if(IdBuf == "cGreaterOrEq") { lval->opcode = cGreaterOrEq; return OPCODE_NOTINV; }
            if(IdBuf == "cNot") { lval->opcode = cNot; return OPCODE_NOTINV; }
            if(IdBuf == "cNotNot") { lval->opcode = cNotNot; return OPCODE_NOTINV; }
            if(IdBuf == "cDeg")  { lval->opcode = cDeg; return OPCODE_NOTINV; }
            if(IdBuf == "cRad")  { lval->opcode = cRad; return OPCODE_NOTINV; }
            if(IdBuf == "cInv")  { lval->opcode = cInv; return OPCODE_NOTINV; }
            if(IdBuf == "cSqr")  { lval->opcode = cSqr; return OPCODE_NOTINV; }
            if(IdBuf == "cRDiv") { lval->opcode = cRDiv; return OPCODE_NOTINV; }
            if(IdBuf == "cRSub") { lval->opcode = cRSub; return OPCODE_NOTINV; }

            if(IdBuf[0] == 'c' && std::isupper(IdBuf[1]))
            {
                // This has a chance of being an opcode token
                std::string opcodetoken = IdBuf.substr(1);
                opcodetoken[0] = std::tolower(opcodetoken[0]);
                NamePtr nameptr(opcodetoken.c_str(), opcodetoken.size());
                const FuncDefinition* func = findFunction(nameptr);
                if(func)
                {
                    lval->opcode = func->opcode;
                    return OPCODE_NOTINV;
                }
                fprintf(stderr,
                    "Warning: Unrecognized opcode '%s' interpreted as cNop\n",
                        IdBuf.c_str());
                lval->opcode = cNop;
                return OPCODE_NOTINV;
            }
            // If it is typed entirely in capitals, it has a chance of being
            // a group token
            if(true)
            {
                std::string grouptoken = IdBuf;
                for(size_t a=0; a<grouptoken.size(); ++a)
                {
                    if(std::islower(grouptoken[a])) goto NotAGroupToken;
                    grouptoken[a] = std::tolower(grouptoken[a]);
                }
                if(1) // scope
                {
                    NamePtr nameptr(grouptoken.c_str(), grouptoken.size());
                    const FuncDefinition* func = findFunction(nameptr);
                    if(func)
                    {
                        lval->opcode = func->opcode;
                        return BUILTIN_FUNC_NAME;
                    }
                    if(IdBuf == "MOD")
                    {
                        lval->opcode = cMod;
                        return BUILTIN_FUNC_NAME;
                    }

                    fprintf(stderr, "Warning: Unrecognized opcode '%s' interpreted as cNop\n",
                        IdBuf.c_str());
                    lval->opcode = cNop;
                    return BUILTIN_FUNC_NAME;
                }
            NotAGroupToken:;
            }
            // Anything else is an identifier
            lval->name = new std::string(IdBuf);
            // fprintf(stderr, "'%s' interpreted as PARAM\n", IdBuf.c_str());
            return PARAMETER_TOKEN;
        }
        default:
        {
            fprintf(stderr, "Ignoring unidentifier character '%c'\n", c);
            return yylex(lval); // tail recursion
        }
    }
    return EOF;
}

int main()
{
    Grammar Grammar_Entry;
    Grammar Grammar_Intermediate;
    Grammar Grammar_Final;

    std::string sectionname;

    for(;;)
    {
        FPoptimizerGrammarParser x;
        x.yyparse();

        std::sort(x.grammar.rules.begin(),
                  x.grammar.rules.end());

        if(sectionname == "ENTRY")
            Grammar_Entry = x.grammar;
        else if(sectionname == "INTERMEDIATE")
            Grammar_Intermediate = x.grammar;
        else if(sectionname == "FINAL")
            Grammar_Final = x.grammar;
        else if(!sectionname.empty())
            fprintf(stderr, "Warning: Ignored rules in unknown section '%s'\n",
                sectionname.c_str());

        int c = std::fgetc(stdin);
        if(c != '[') break;

        sectionname.clear();
        for(;;)
        {
            c = std::fgetc(stdin);
            if(c == ']' || c == EOF) break;
            sectionname += (char)c;
        }
        fprintf(stderr, "Parsing [%s]\n",
            sectionname.c_str());
    }

    std::cout <<
        "/* This file is automatically generated. Do not edit... */\n"
        "#include \"fpoptimizer_grammar.hh\"\n"
        "#include \"fpconfig.hh\"\n"
        "#include \"fptypes.hh\"\n"
        "\n"
        "using namespace FPoptimizer_Grammar;\n"
        "using namespace FUNCTIONPARSERTYPES;\n"
        "\n"
        "Grammar Grammar_Entry, Grammar_Intermediate, Grammar_Final;\n"
        "\n";

    size_t e = dumper.Dump(Grammar_Entry);
    size_t i = dumper.Dump(Grammar_Intermediate);
    size_t f = dumper.Dump(Grammar_Final);

    dumper.Flush();

    std::cout <<
        "\n"
        "void FPoptimizer_Grammar_Init()\n"
        "{\n"
        "    Grammar_Entry.Read(pack,        " << e << ");\n"
        "    Grammar_Intermediate.Read(pack, " << i << ");\n"
        "    Grammar_Final.Read(pack,        " << f << ");\n"
        "}\n";

    return 0;
}
