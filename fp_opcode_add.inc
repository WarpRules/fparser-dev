/* Function Parser for C++ v3.3.2   

   Note: This file contains generated code and is thus not
   intended to be to be modified by hand. It was generated by
   fpoptimizer/bytecoderules_parser which is available in the
   development package.

   Note: You don't need to add this file to your project. It's
   enough for it to be in the same directory as fparser.cc. This
   file is internally #included by fparser.cc.
*/

#define FP_TRACE_BYTECODE_OPTIMIZATION(from,to)
//#define FP_TRACE_BYTECODE_OPTIMIZATION(from,to) std::cout << "Changing \"" from "\"\n    into \"" to "\"\n"
inline void FunctionParser::AddFunctionOpcode(unsigned opcode)
{
  unsigned* ByteCodePtr;
  double*   ImmedPtr;
#ifdef _GLIBCXX_DEBUG
  /* Shut up glibc warnings */
  #define FP_ReDefinePointers() \
    ByteCodePtr = !data->ByteCode.empty() ? &data->ByteCode[0] + data->ByteCode.size() - 1 : 0; \
    ImmedPtr    = !data->Immed.empty()    ? &data->Immed[0]    + data->Immed.size()    - 1 : 0;
#else
  /* Trust me, I know what I am doing */
  #define FP_ReDefinePointers() \
    ByteCodePtr = &data->ByteCode[data->ByteCode.size() - 1]; \
    ImmedPtr    = &data->Immed   [data->Immed.size()    - 1];
#endif
  FP_ReDefinePointers();
  double x;
  double y;
  unsigned A;
  switch(opcode)
  {
  TailCall_cPow:
    case cPow:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          if(!isEvenInteger(x*2.0))
          {
            switch(ByteCodePtr[-1])
            {
              case cSqr:
                FP_TRACE_BYTECODE_OPTIMIZATION("cSqr x[!isEvenInteger(x*2.0)] cPow", "cAbs [x*2.0] cPow");
                /* opcode = cPow; */ // redundant, matches cPow @ 0
                goto Laa;
            }
          }
          if(IsIntegerConst(x))
          {
            switch(ByteCodePtr[-1])
            {
              case cPow:
                switch(ByteCodePtr[-2])
                {
                  case cImmed:
                    y = ImmedPtr[-1];
                    if(!IsIntegerConst(y))
                    {
                      FP_TRACE_BYTECODE_OPTIMIZATION("y[!IsIntegerConst(y)] cPow x[IsIntegerConst(x)] cPow", "[y*x] cPow");
                      /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                      /* ByteCodePtr[-1] = cPow; */ // redundant, matches cPow @ 2
                      goto Lab;
                    }
                    break;
                }
                FP_TRACE_BYTECODE_OPTIMIZATION("cPow x[IsIntegerConst(x)] cPow", "[x] cMul cPow");
                /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                /* opcode = cPow; */ // redundant, matches cPow @ 0
                goto Lac;
              case cExp:
                FP_TRACE_BYTECODE_OPTIMIZATION("cExp x[IsIntegerConst(x)] cPow", "[x] cMul cExp");
                /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                goto Lad;
              case cExp2:
                FP_TRACE_BYTECODE_OPTIMIZATION("cExp2 x[IsIntegerConst(x)] cPow", "[x] cMul cExp2");
                /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                goto Lae;
            }
          }
          if(isEvenInteger(x))
          {
            switch(ByteCodePtr[-1])
            {
              case cAbs:
                FP_TRACE_BYTECODE_OPTIMIZATION("cAbs x[isEvenInteger(x)] cPow", "[x] cPow");
                /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                /* opcode = cPow; */ // redundant, matches cPow @ 0
                goto Laf;
              case cMul:
                switch(ByteCodePtr[-2])
                {
                  case cAbs:
                    FP_TRACE_BYTECODE_OPTIMIZATION("cAbs cMul x[isEvenInteger(x)] cPow", "cMul [x] cPow");
                    /* opcode = cPow; */ // redundant, matches cPow @ 0
                    goto Lag;
                }
                break;
            }
          }
          if(x==0.5)
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x==0.5] cPow", "cSqrt");
            goto Lah;
          }
          if(x==-0.5)
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x==-0.5] cPow", "cRSqrt");
            goto Lai;
          }
          if(x==-1.0)
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x==-1.0] cPow", "cInv");
            goto Laj;
          }
          FP_TRACE_BYTECODE_OPTIMIZATION("x cPow", "[DO_POWI]");
          if(TryCompilePowi(x))
            return;
          break;
      }
      break;
      goto TailCall_cPow; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cSqrt:
    case cSqrt:
      switch(ByteCodePtr[0])
      {
        case cSqr:
          FP_TRACE_BYTECODE_OPTIMIZATION("cSqr cSqrt", "cAbs");
          goto Lak;
        case cImmed:
          x = ImmedPtr[0];
          if(x>=0.0)
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x>=0.0] cSqrt", "[sqrt(x)]");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Lal;
          }
          break;
      }
      break;
      goto TailCall_cSqrt; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cAbs:
    case cAbs:
      switch(ByteCodePtr[0])
      {
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cAbs", "cAbs");
          /* opcode = cAbs; */ // redundant, matches cAbs @ 0
          goto Lam;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cAbs", "[fabs(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lan;
        default:
          A = ByteCodePtr[0];
          if(IsNeverNegativeValueOpcode(A))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("A[IsNeverNegativeValueOpcode(A)] cAbs", "A");
            /* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
            return;
          }
      }
      break;
      goto TailCall_cAbs; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cAcos:
    case cAcos:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cAcos", "[acos(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lba;
      }
      break;
      goto TailCall_cAcos; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cAcosh:
    case cAcosh:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          if(x>=-1.0&&x<=1.0)
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x>=-1.0&&x<=1.0] cAcosh", "[fp_acosh(x)]");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Lbb;
          }
          break;
      }
      break;
      goto TailCall_cAcosh; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cAsinh:
    case cAsinh:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          if(x>=-1.0&&x<=1.0)
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x>=-1.0&&x<=1.0] cAsinh", "[fp_asinh(x)]");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Lbc;
          }
          break;
      }
      break;
      goto TailCall_cAsinh; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cAtan:
    case cAtan:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cAtan", "[atan(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lbd;
      }
      break;
      goto TailCall_cAtan; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cAtanh:
    case cAtanh:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cAtanh", "[fp_atanh(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lbe;
      }
      break;
      goto TailCall_cAtanh; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cCeil:
    case cCeil:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cCeil", "[ceil(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lbf;
        default:
          A = ByteCodePtr[0];
          if(IsAlwaysIntegerOpcode(A))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("A[IsAlwaysIntegerOpcode(A)] cCeil", "A");
            /* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
            return;
          }
      }
      break;
      goto TailCall_cCeil; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cCos:
    case cCos:
      switch(ByteCodePtr[0])
      {
        case cAcos:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAcos cCos", "");
          goto Lbg;
        case cAbs:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAbs cCos", "cCos");
          /* opcode = cCos; */ // redundant, matches cCos @ 0
          goto Lbh;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cCos", "cCos");
          /* opcode = cCos; */ // redundant, matches cCos @ 0
          goto Lbh;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cCos", "[cos(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lbi;
      }
      break;
      goto TailCall_cCos; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cCosh:
    case cCosh:
      switch(ByteCodePtr[0])
      {
        case cAcosh:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAcosh cCosh", "");
          goto Lbg;
        case cAbs:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAbs cCosh", "cCosh");
          /* opcode = cCosh; */ // redundant, matches cCosh @ 0
          goto Lbj;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cCosh", "cCosh");
          /* opcode = cCosh; */ // redundant, matches cCosh @ 0
          goto Lbj;
        case cAsinh:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAsinh cCosh", "cSqr [1.0] cAdd cSqrt");
          goto Lbk;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cCosh", "[cosh(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lbl;
      }
      break;
      goto TailCall_cCosh; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cExp:
    case cExp:
      switch(ByteCodePtr[0])
      {
        case cLog:
          FP_TRACE_BYTECODE_OPTIMIZATION("cLog cExp", "");
          goto Lbg;
        case cAdd:
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              x = ImmedPtr[0];
              FP_TRACE_BYTECODE_OPTIMIZATION("x cAdd cExp", "cExp [exp(x)] cMul");
              goto Lbm;
          }
          break;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cExp", "[exp(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lbn;
      }
      break;
      goto TailCall_cExp; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cExp2:
    case cExp2:
      switch(ByteCodePtr[0])
      {
        case cLog2:
          FP_TRACE_BYTECODE_OPTIMIZATION("cLog2 cExp2", "");
          goto Lbg;
        case cAdd:
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              x = ImmedPtr[0];
              FP_TRACE_BYTECODE_OPTIMIZATION("x cAdd cExp2", "cExp2 [fp_exp2(x)] cMul");
              goto Lca;
          }
          break;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cExp2", "[fp_exp2(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lcb;
      }
      break;
      goto TailCall_cExp2; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cFloor:
    case cFloor:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cFloor", "[floor(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lcc;
        default:
          A = ByteCodePtr[0];
          if(IsAlwaysIntegerOpcode(A))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("A[IsAlwaysIntegerOpcode(A)] cFloor", "A");
            /* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
            return;
          }
      }
      break;
      goto TailCall_cFloor; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cInt:
    case cInt:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cInt", "[fp_int(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lcd;
        default:
          A = ByteCodePtr[0];
          if(IsAlwaysIntegerOpcode(A))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("A[IsAlwaysIntegerOpcode(A)] cInt", "A");
            /* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
            return;
          }
      }
      break;
      goto TailCall_cInt; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cLog:
    case cLog:
      switch(ByteCodePtr[0])
      {
        case cSqr:
          FP_TRACE_BYTECODE_OPTIMIZATION("cSqr cLog", "cAbs cLog cDup cAdd");
          goto Lce;
        case cExp:
          FP_TRACE_BYTECODE_OPTIMIZATION("cExp cLog", "");
          goto Lbg;
        case cImmed:
          x = ImmedPtr[0];
          if(x>=0.0)
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x>=0.0] cLog", "[log(x)]");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Lcf;
          }
          break;
      }
      break;
      goto TailCall_cLog; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cLog10:
    case cLog10:
      switch(ByteCodePtr[0])
      {
        case cSqr:
          FP_TRACE_BYTECODE_OPTIMIZATION("cSqr cLog10", "cAbs cLog10 cDup cAdd");
          goto Lcg;
        case cImmed:
          x = ImmedPtr[0];
          if(x>=0.0)
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x>=0.0] cLog10", "[fp_log10(x)]");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Lch;
          }
          break;
      }
      break;
      goto TailCall_cLog10; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cLog2:
    case cLog2:
      switch(ByteCodePtr[0])
      {
        case cSqr:
          FP_TRACE_BYTECODE_OPTIMIZATION("cSqr cLog2", "cAbs cLog2 cDup cAdd");
          goto Lci;
        case cExp2:
          FP_TRACE_BYTECODE_OPTIMIZATION("cExp2 cLog2", "");
          goto Lbg;
        case cImmed:
          x = ImmedPtr[0];
          if(x>=0.0)
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x>=0.0] cLog2", "[fp_log2(x)]");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Lcj;
          }
          break;
      }
      break;
      goto TailCall_cLog2; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cSin:
    case cSin:
      switch(ByteCodePtr[0])
      {
        case cAsin:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAsin cSin", "");
          goto Lbg;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cSin", "cSin cNeg");
          goto Lck;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cSin", "[sin(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lcl;
      }
      break;
      goto TailCall_cSin; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cSinh:
    case cSinh:
      switch(ByteCodePtr[0])
      {
        case cAsinh:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAsinh cSinh", "");
          goto Lbg;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cSinh", "cSinh cNeg");
          goto Lcm;
        case cAcosh:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAcosh cSinh", "cSqr [-1.0] cAdd cSqrt");
          goto Lcn;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cSinh", "[sinh(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lda;
      }
      break;
      goto TailCall_cSinh; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cTan:
    case cTan:
      switch(ByteCodePtr[0])
      {
        case cAtan:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAtan cTan", "");
          goto Lbg;
        case cAtan2:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAtan2 cTan", "cDiv");
          goto Ldb;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cTan", "cTan cNeg");
          goto Ldc;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cTan", "[tan(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Ldd;
      }
      break;
      goto TailCall_cTan; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cTanh:
    case cTanh:
      switch(ByteCodePtr[0])
      {
        case cAtanh:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAtanh cTanh", "");
          goto Lbg;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cTanh", "cTanh cNeg");
          goto Lde;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cTanh", "[tanh(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Ldf;
      }
      break;
      goto TailCall_cTanh; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cTrunc:
    case cTrunc:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cTrunc", "[trunc(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Ldg;
        default:
          A = ByteCodePtr[0];
          if(IsAlwaysIntegerOpcode(A))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("A[IsAlwaysIntegerOpcode(A)] cTrunc", "A");
            /* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
            return;
          }
      }
      break;
      goto TailCall_cTrunc; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cDeg:
    case cDeg:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cDeg", "[RadiansToDegrees(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Ldh;
      }
      break;
      goto TailCall_cDeg; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cRad:
    case cRad:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cRad", "[DegreesToRadians(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Ldi;
      }
      break;
      goto TailCall_cRad; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cNeg:
    case cNeg:
      switch(ByteCodePtr[0])
      {
        case cMul:
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              x = ImmedPtr[0];
              FP_TRACE_BYTECODE_OPTIMIZATION("x cMul cNeg", "[-x] cMul");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
              /* ByteCodePtr[0] = cMul; */ // redundant, matches cMul @ 1
              goto Ldj;
          }
          break;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cNeg", "");
          goto Lbg;
        case cFloor:
          FP_TRACE_BYTECODE_OPTIMIZATION("cFloor cNeg", "cNeg cCeil");
          goto Ldk;
        case cCeil:
          FP_TRACE_BYTECODE_OPTIMIZATION("cCeil cNeg", "cNeg cFloor");
          goto Ldl;
        case cSin:
          switch(ByteCodePtr[-1])
          {
            case cMul:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  x = ImmedPtr[0];
                  FP_TRACE_BYTECODE_OPTIMIZATION("x cMul cSin cNeg", "[-x] cMul cSin");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
                  /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                  /* ByteCodePtr[0] = cSin; */ // redundant, matches cSin @ 1
                  goto Ldj;
              }
              break;
          }
          break;
        case cSinh:
          switch(ByteCodePtr[-1])
          {
            case cMul:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  x = ImmedPtr[0];
                  FP_TRACE_BYTECODE_OPTIMIZATION("x cMul cSinh cNeg", "[-x] cMul cSinh");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
                  /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                  /* ByteCodePtr[0] = cSinh; */ // redundant, matches cSinh @ 1
                  goto Ldj;
              }
              break;
          }
          break;
        case cTan:
          switch(ByteCodePtr[-1])
          {
            case cMul:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  x = ImmedPtr[0];
                  FP_TRACE_BYTECODE_OPTIMIZATION("x cMul cTan cNeg", "[-x] cMul cTan");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
                  /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                  /* ByteCodePtr[0] = cTan; */ // redundant, matches cTan @ 1
                  goto Ldj;
              }
              break;
          }
          break;
        case cTanh:
          switch(ByteCodePtr[-1])
          {
            case cMul:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  x = ImmedPtr[0];
                  FP_TRACE_BYTECODE_OPTIMIZATION("x cMul cTanh cNeg", "[-x] cMul cTanh");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
                  /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                  /* ByteCodePtr[0] = cTanh; */ // redundant, matches cTanh @ 1
                  goto Ldj;
              }
              break;
          }
          break;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cNeg", "[-x]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Ldj;
      }
      break;
      goto TailCall_cNeg; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cInv:
    case cInv:
      switch(ByteCodePtr[0])
      {
        case cInv:
          FP_TRACE_BYTECODE_OPTIMIZATION("cInv cInv", "");
          goto Lbg;
        case cPow:
          FP_TRACE_BYTECODE_OPTIMIZATION("cPow cInv", "cNeg cPow");
          goto Ldm;
        case cSin:
          FP_TRACE_BYTECODE_OPTIMIZATION("cSin cInv", "cCsc");
          goto Ldn;
        case cCos:
          FP_TRACE_BYTECODE_OPTIMIZATION("cCos cInv", "cSec");
          goto Lea;
        case cTan:
          FP_TRACE_BYTECODE_OPTIMIZATION("cTan cInv", "cCot");
          goto Leb;
        case cCsc:
          FP_TRACE_BYTECODE_OPTIMIZATION("cCsc cInv", "cSin");
          goto Lec;
        case cSec:
          FP_TRACE_BYTECODE_OPTIMIZATION("cSec cInv", "cCos");
          goto Led;
        case cCot:
          FP_TRACE_BYTECODE_OPTIMIZATION("cCot cInv", "cTan");
          goto Lee;
        case cImmed:
          x = ImmedPtr[0];
          if(x!=0.0)
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x!=0.0] cInv", "[1.0/x]");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Lef;
          }
          break;
      }
      break;
      goto TailCall_cInv; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cMul:
    case cMul:
      switch(ByteCodePtr[0])
      {
        case cInv:
          FP_TRACE_BYTECODE_OPTIMIZATION("cInv cMul", "cDiv");
          goto Ldb;
        case cPow:
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              x = ImmedPtr[0];
              if(x<0)
              {
                FP_TRACE_BYTECODE_OPTIMIZATION("x[x<0] cPow cMul", "[-x] cPow cDiv");
                /* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
                /* ByteCodePtr[0] = cPow; */ // redundant, matches cPow @ 1
                goto Leg;
              }
              break;
          }
          break;
        case cImmed:
          x = ImmedPtr[0];
          if(x==0.0)
          {
            switch(ByteCodePtr[-1])
            {
              case cImmed: break;
              default:
                A = ByteCodePtr[-1];
                if(A >= VarBegin)
                {
                  FP_TRACE_BYTECODE_OPTIMIZATION("A[A >= VarBegin] x[x==0.0] cMul", "[x]");
                  /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                  goto Leh;
                }
            }
          }
          switch(ByteCodePtr[-1])
          {
            case cNeg:
              FP_TRACE_BYTECODE_OPTIMIZATION("cNeg x cMul", "[-x] cMul");
              /* opcode = cMul; */ // redundant, matches cMul @ 0
              goto Lei;
            case cMul:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  FP_TRACE_BYTECODE_OPTIMIZATION("y cMul x cMul", "[y*x] cMul");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                  goto Lab;
              }
              break;
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cMul", "[y*x]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lab;
          }
          if(x==1.0)
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x==1.0] cMul", "");
            goto Lej;
          }
          if(x==2.0)
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x==2.0] cMul", "cDup cAdd");
            goto Lek;
          }
          if(x==-1.0)
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x==-1.0] cMul", "cNeg");
            goto Lel;
          }
          break;
        default:
          A = ByteCodePtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("A cMul", "[DO_MAYBE_SQR]");
          if(A >= VarBegin)
          {
            if(A == ByteCodePtr[-1])
              { ByteCodePtr[0] = cSqr; return; }
            if(ByteCodePtr[-1] == cMul && A == ByteCodePtr[-2])
              { ByteCodePtr[0] = cMul; ByteCodePtr[-1] = cSqr; return; }
          }
      }
      break;
      goto TailCall_cMul; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cDiv:
    case cDiv:
      switch(ByteCodePtr[0])
      {
        case cInv:
          FP_TRACE_BYTECODE_OPTIMIZATION("cInv cDiv", "cMul");
          goto Lem;
        case cExp:
          switch(ByteCodePtr[-1])
          {
            case cMul:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  x = ImmedPtr[0];
                  FP_TRACE_BYTECODE_OPTIMIZATION("x cMul cExp cDiv", "[-x] cMul cExp cMul");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
                  /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                  /* ByteCodePtr[0] = cExp; */ // redundant, matches cExp @ 1
                  goto Len;
              }
              break;
          }
          break;
        case cExp2:
          switch(ByteCodePtr[-1])
          {
            case cMul:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  x = ImmedPtr[0];
                  FP_TRACE_BYTECODE_OPTIMIZATION("x cMul cExp2 cDiv", "[-x] cMul cExp2 cMul");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
                  /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                  /* ByteCodePtr[0] = cExp2; */ // redundant, matches cExp2 @ 1
                  goto Len;
              }
              break;
          }
          break;
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cNeg:
              FP_TRACE_BYTECODE_OPTIMIZATION("cNeg x cDiv", "[-x] cDiv");
              /* opcode = cDiv; */ // redundant, matches cDiv @ 0
              goto Lfa;
          }
          if(x==1.0)
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x==1.0] cDiv", "");
            goto Lej;
          }
          if(x!=0.0)
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x!=0.0] cDiv", "[1.0/x] cMul");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Lfb;
          }
          break;
      }
      break;
      goto TailCall_cDiv; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cMod:
    case cMod:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          if(x!=0.0)
          {
            switch(ByteCodePtr[-1])
            {
              case cImmed:
                y = ImmedPtr[-1];
                FP_TRACE_BYTECODE_OPTIMIZATION("y x[x!=0.0] cMod", "[fmod(y,x)]");
                /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
                goto Lfc;
            }
          }
          break;
      }
      break;
      goto TailCall_cMod; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cAdd:
    case cAdd:
      switch(ByteCodePtr[0])
      {
        case cDup:
          switch(ByteCodePtr[-1])
          {
            case cAdd:
              switch(ByteCodePtr[-2])
              {
                case cDup:
                  FP_TRACE_BYTECODE_OPTIMIZATION("cDup cAdd cDup cAdd", "[4] cMul");
                  goto Lfd;
              }
              break;
          }
          break;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cAdd", "cSub");
          goto Lfe;
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cAdd:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  FP_TRACE_BYTECODE_OPTIMIZATION("y cAdd x cAdd", "[y+x] cAdd");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cAdd; */ // redundant, matches cAdd @ 2
                  goto Lff;
              }
              break;
            case cSub:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  FP_TRACE_BYTECODE_OPTIMIZATION("y cSub x cAdd", "[y-x] cSub");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cSub; */ // redundant, matches cSub @ 2
                  goto Lfg;
              }
              break;
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cAdd", "[y+x]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lff;
          }
          if(x==0.0)
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x==0.0] cAdd", "");
            goto Lej;
          }
          break;
      }
      break;
      goto TailCall_cAdd; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cSub:
    case cSub:
      switch(ByteCodePtr[0])
      {
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cSub", "cAdd");
          goto Lfh;
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cSub:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  FP_TRACE_BYTECODE_OPTIMIZATION("y cSub x cSub", "[y+x] cSub");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cSub; */ // redundant, matches cSub @ 2
                  goto Lff;
              }
              break;
            case cAdd:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  FP_TRACE_BYTECODE_OPTIMIZATION("y cAdd x cSub", "[y-x] cAdd");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cAdd; */ // redundant, matches cAdd @ 2
                  goto Lfg;
              }
              break;
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cSub", "[y-x]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lfg;
          }
          if(x==0.0)
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x==0.0] cSub", "");
            goto Lej;
          }
          break;
      }
      break;
      goto TailCall_cSub; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cMin:
    case cMin:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cMin", "[Min(x,y)]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lfi;
          }
          break;
      }
      break;
      goto TailCall_cMin; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cMax:
    case cMax:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cMax", "[Max(x,y)]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lfj;
          }
          break;
      }
      break;
      goto TailCall_cMax; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cAtan2:
    case cAtan2:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cAtan2", "[atan2(y,x)]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lfk;
          }
          break;
      }
      break;
      goto TailCall_cAtan2; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cNot:
    case cNot:
      switch(ByteCodePtr[0])
      {
        case cLess:
          FP_TRACE_BYTECODE_OPTIMIZATION("cLess cNot", "cGreaterOrEq");
          goto Lfl;
        case cLessOrEq:
          FP_TRACE_BYTECODE_OPTIMIZATION("cLessOrEq cNot", "cGreater");
          goto Lfm;
        case cGreater:
          FP_TRACE_BYTECODE_OPTIMIZATION("cGreater cNot", "cLessOrEq");
          goto Lfn;
        case cGreaterOrEq:
          FP_TRACE_BYTECODE_OPTIMIZATION("cGreaterOrEq cNot", "cLess");
          goto Lga;
        case cEqual:
          FP_TRACE_BYTECODE_OPTIMIZATION("cEqual cNot", "cNEqual");
          goto Lgb;
        case cNEqual:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNEqual cNot", "cEqual");
          goto Lgc;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cNot", "cNot");
          /* opcode = cNot; */ // redundant, matches cNot @ 0
          goto Lgd;
        case cAbs:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAbs cNot", "cNot");
          /* opcode = cNot; */ // redundant, matches cNot @ 0
          goto Lgd;
        case cNot:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNot cNot", "cNotNot");
          goto Lge;
        case cNotNot:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNotNot cNot", "cNot");
          /* opcode = cNot; */ // redundant, matches cNot @ 0
          goto Lgd;
        case cAbsNotNot:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAbsNotNot cNot", "cAbsNot");
          goto Lgf;
        case cAbsNot:
          switch(ByteCodePtr[-1])
          {
            case cImmed: break;
            default:
              A = ByteCodePtr[-1];
              if(IsLogicalOpcode(A))
              {
                FP_TRACE_BYTECODE_OPTIMIZATION("A[IsLogicalOpcode(A)] cAbsNot cNot", "A");
                /* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
                goto Lbg;
              }
              FP_TRACE_BYTECODE_OPTIMIZATION("A cAbsNot cNot", "A cAbsNotNot");
              /* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
              goto Lgg;
          }
          break;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cNot", "[!truthValue(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lgh;
        default:
          A = ByteCodePtr[0];
          if(IsNeverNegativeValueOpcode(A))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("A[IsNeverNegativeValueOpcode(A)] cNot", "A cAbsNot");
            /* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
            goto Lgi;
          }
      }
      break;
      goto TailCall_cNot; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cRPow:
    case cRPow:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          if(x>0.0)
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x>0.0] cRPow", "[log(x)] cMul cExp");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Lgj;
          }
          break;
      }
      break;
      goto TailCall_cRPow; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cLess:
    case cLess:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          if(x!=0.0)
          {
            switch(ByteCodePtr[-1])
            {
              case cAbs:
                FP_TRACE_BYTECODE_OPTIMIZATION("cAbs x[x!=0.0] cLess", "[0.5/x] cMul cNot");
                goto Lgk;
            }
          }
          if(x==0)
          {
            switch(ByteCodePtr[-1])
            {
              case cImmed: break;
              default:
                A = ByteCodePtr[-1];
                if(IsNeverNegativeValueOpcode(A))
                {
                  FP_TRACE_BYTECODE_OPTIMIZATION("A[IsNeverNegativeValueOpcode(A)] x[x==0] cLess", "A [x] cMul");
                  /* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
                  /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                  /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
                  goto Lgl;
                }
            }
          }
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cLess", "[y <  (x-EpsilonOrZero)]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lgm;
          }
          break;
      }
      break;
      goto TailCall_cLess; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cLessOrEq:
    case cLessOrEq:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cLessOrEq", "[y <= (x+EpsilonOrZero)]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lgn;
          }
          break;
      }
      break;
      goto TailCall_cLessOrEq; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cGreater:
    case cGreater:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cGreater", "[(y-EpsilonOrZero) >  x]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lha;
          }
          break;
      }
      break;
      goto TailCall_cGreater; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cGreaterOrEq:
    case cGreaterOrEq:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          if(x!=0.0)
          {
            switch(ByteCodePtr[-1])
            {
              case cAbs:
                FP_TRACE_BYTECODE_OPTIMIZATION("cAbs x[x!=0.0] cGreaterOrEq", "[0.5/x] cMul cNotNot");
                goto Lhb;
            }
          }
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cGreaterOrEq", "[(y+EpsilonOrZero) >= x]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lhc;
          }
          break;
      }
      break;
      goto TailCall_cGreaterOrEq; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cEqual:
    case cEqual:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cEqual", "[fabs(y-x) <= EpsilonOrZero]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lhd;
          }
          break;
      }
      break;
      goto TailCall_cEqual; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cNEqual:
    case cNEqual:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cNEqual", "[fabs(y-x) >= EpsilonOrZero]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lhe;
          }
          break;
      }
      break;
      goto TailCall_cNEqual; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cAnd:
    case cAnd:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cAnd", "[truthValue(x)&&truthValue(y)]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lhf;
          }
          break;
      }
      break;
      goto TailCall_cAnd; /* Dummy gotos to inhibit gcc warnings */
  TailCall_cOr:
    case cOr:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cOr", "[truthValue(x)||truthValue(y)]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lhg;
          }
          break;
      }
      break;
      goto TailCall_cOr; /* Dummy gotos to inhibit gcc warnings */
  }
  goto Lhh;
Laa: data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     data->Immed.push_back(x*2.0);
Lhi: data->ByteCode.push_back(cImmed);
Lhj: FP_ReDefinePointers();
Lhk: goto TailCall_cPow;
Lab: ImmedPtr[-1] = y*x;
Lej: data->Immed.pop_back();
Lbg: data->ByteCode.pop_back(); return;
Lac: ByteCodePtr[-1] = cImmed;
     data->ByteCode.pop_back();
     AddFunctionOpcode(cMul); goto Lhj;
Lad: ByteCodePtr[-1] = cImmed;
     data->ByteCode.pop_back();
Lhl: AddFunctionOpcode(cMul);
     opcode = cExp;
     FP_ReDefinePointers();
     goto TailCall_cExp;
Lae: ByteCodePtr[-1] = cImmed;
     data->ByteCode.pop_back();
     AddFunctionOpcode(cMul);
     opcode = cExp2;
     FP_ReDefinePointers();
     goto TailCall_cExp2;
Laf: ByteCodePtr[-1] = cImmed;
     ByteCodePtr -= 1;
     data->ByteCode.pop_back(); goto Lhk;
Lag: data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cMul);
     data->Immed.push_back(x); goto Lhi;
Lah: data->Immed.pop_back();
     data->ByteCode.pop_back();
Lhm: opcode = cSqrt;
     FP_ReDefinePointers();
     goto TailCall_cSqrt;
Lai: ByteCodePtr[0] = cRSqrt;
     data->Immed.pop_back(); return;
Laj: data->Immed.pop_back();
     data->ByteCode.pop_back();
     opcode = cInv;
     FP_ReDefinePointers();
     goto TailCall_cInv;
Lak: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cAbs;
Lhn: goto TailCall_cAbs;
Lal: ImmedPtr[0] = sqrt(x); return;
Lam: ByteCodePtr -= 1;
     data->ByteCode.pop_back(); goto Lhn;
Lan: ImmedPtr[0] = fabs(x); return;
Lba: ImmedPtr[0] = acos(x); return;
Lbb: ImmedPtr[0] = fp_acosh(x); return;
Lbc: ImmedPtr[0] = fp_asinh(x); return;
Lbd: ImmedPtr[0] = atan(x); return;
Lbe: ImmedPtr[0] = fp_atanh(x); return;
Lbf: ImmedPtr[0] = ceil(x); return;
Lbh: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
Lia: goto TailCall_cCos;
Lbi: ImmedPtr[0] = cos(x); return;
Lbj: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     goto TailCall_cCosh;
Lbk: ByteCodePtr[0] = cSqr;
     data->Immed.push_back(1.0);
Lib: data->ByteCode.push_back(cImmed);
     AddFunctionOpcode(cAdd); goto Lhm;
Lbl: ImmedPtr[0] = cosh(x); return;
Lbm: data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cExp);
     data->Immed.push_back(exp(x));
Lic: data->ByteCode.push_back(cImmed);
Lid: opcode = cMul;
     FP_ReDefinePointers();
Lie: goto TailCall_cMul;
Lbn: ImmedPtr[0] = exp(x); return;
Lca: data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cExp2);
     data->Immed.push_back(fp_exp2(x)); goto Lic;
Lcb: ImmedPtr[0] = fp_exp2(x); return;
Lcc: ImmedPtr[0] = floor(x); return;
Lcd: ImmedPtr[0] = fp_int(x); return;
Lce: data->ByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     AddFunctionOpcode(cLog);
Lif: data->ByteCode.push_back(cDup);
     opcode = cAdd;
     FP_ReDefinePointers();
Lig: goto TailCall_cAdd;
Lcf: ImmedPtr[0] = log(x); return;
Lcg: data->ByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     AddFunctionOpcode(cLog10); goto Lif;
Lch: ImmedPtr[0] = fp_log10(x); return;
Lci: data->ByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     AddFunctionOpcode(cLog2); goto Lif;
Lcj: ImmedPtr[0] = fp_log2(x); return;
Lck: data->ByteCode.pop_back();
     AddFunctionOpcode(cSin);
Lih: opcode = cNeg;
     FP_ReDefinePointers();
     goto TailCall_cNeg;
Lcl: ImmedPtr[0] = sin(x); return;
Lcm: data->ByteCode.pop_back();
     AddFunctionOpcode(cSinh); goto Lih;
Lcn: ByteCodePtr[0] = cSqr;
     data->Immed.push_back(-1.0); goto Lib;
Lda: ImmedPtr[0] = sinh(x); return;
Ldb: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
Lii: opcode = cDiv;
Lij: goto TailCall_cDiv;
Ldc: data->ByteCode.pop_back();
     AddFunctionOpcode(cTan); goto Lih;
Ldd: ImmedPtr[0] = tan(x); return;
Lde: data->ByteCode.pop_back();
     AddFunctionOpcode(cTanh); goto Lih;
Ldf: ImmedPtr[0] = tanh(x); return;
Ldg: ImmedPtr[0] = trunc(x); return;
Ldh: ImmedPtr[0] = RadiansToDegrees(x); return;
Ldi: ImmedPtr[0] = DegreesToRadians(x); return;
Ldj: ImmedPtr[0] = -x; return;
Ldk: data->ByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     opcode = cCeil;
     FP_ReDefinePointers();
     goto TailCall_cCeil;
Ldl: data->ByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     opcode = cFloor;
     FP_ReDefinePointers();
     goto TailCall_cFloor;
Ldm: data->ByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     opcode = cPow; goto Lhj;
Ldn: ByteCodePtr[0] = cCsc; return;
Lea: ByteCodePtr[0] = cSec; return;
Leb: ByteCodePtr[0] = cCot; return;
Lec: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cSin;
     goto TailCall_cSin;
Led: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cCos; goto Lia;
Lee: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cTan;
     goto TailCall_cTan;
Lef: ImmedPtr[0] = 1.0/x; return;
Leg: ImmedPtr[0] = -x; goto Lii;
Leh: ByteCodePtr[-1] = cImmed; goto Lbg;
Lei: ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     ByteCodePtr -= 1;
     data->ByteCode.pop_back(); goto Lie;
Lek: ByteCodePtr[0] = cDup;
     ImmedPtr -= 1;
     data->Immed.pop_back();
Lik: opcode = cAdd; goto Lig;
Lel: data->Immed.pop_back();
     data->ByteCode.pop_back(); goto Lih;
Lem: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
Lgl: opcode = cMul; goto Lie;
Len: ImmedPtr[0] = -x; goto Lgl;
Lfa: ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     ByteCodePtr -= 1;
     data->ByteCode.pop_back(); goto Lij;
Lfb: ImmedPtr[0] = 1.0/x; goto Lgl;
Lfc: ImmedPtr[-1] = fmod(y,x); goto Lej;
Lfd: data->Immed.push_back(4);
     ByteCodePtr[-2] = cImmed;
     ByteCodePtr -= 2;
     data->ByteCode.pop_back();
     data->ByteCode.pop_back(); goto Lid;
Lfe: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cSub;
     goto TailCall_cSub;
Lff: ImmedPtr[-1] = y+x; goto Lej;
Lfg: ImmedPtr[-1] = y-x; goto Lej;
Lfh: ByteCodePtr -= 1;
     data->ByteCode.pop_back(); goto Lik;
Lfi: ImmedPtr[-1] = Min(x,y); goto Lej;
Lfj: ImmedPtr[-1] = Max(x,y); goto Lej;
Lfk: ImmedPtr[-1] = atan2(y,x); goto Lej;
Lfl: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cGreaterOrEq;
     goto TailCall_cGreaterOrEq;
Lfm: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cGreater;
     goto TailCall_cGreater;
Lfn: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cLessOrEq;
     goto TailCall_cLessOrEq;
Lga: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cLess;
     goto TailCall_cLess;
Lgb: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cNEqual;
     goto TailCall_cNEqual;
Lgc: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cEqual;
     goto TailCall_cEqual;
Lgd: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
Lil: goto TailCall_cNot;
Lge: ByteCodePtr[0] = cNotNot; return;
Lgf: ByteCodePtr[0] = cAbsNot; return;
Lgg: ByteCodePtr[0] = cAbsNotNot; return;
Lgh: ImmedPtr[0] = !truthValue(x); return;
Lgi: data->ByteCode.push_back(cAbsNot); return;
Lgj: ImmedPtr[0] = log(x); goto Lhl;
Lgk: ImmedPtr[0] = 0.5/x;
     ByteCodePtr[-1] = cImmed;
     data->ByteCode.pop_back();
     AddFunctionOpcode(cMul);
     opcode = cNot;
     FP_ReDefinePointers(); goto Lil;
Lgm: ImmedPtr[-1] = y <  (x-EpsilonOrZero); goto Lej;
Lgn: ImmedPtr[-1] = y <= (x+EpsilonOrZero); goto Lej;
Lha: ImmedPtr[-1] = (y-EpsilonOrZero) >  x; goto Lej;
Lhb: ImmedPtr[0] = 0.5/x;
     ByteCodePtr[-1] = cImmed;
     data->ByteCode.pop_back();
     AddFunctionOpcode(cMul);
     data->ByteCode.push_back(cNotNot); return;
Lhc: ImmedPtr[-1] = (y+EpsilonOrZero) >= x; goto Lej;
Lhd: ImmedPtr[-1] = fabs(y-x) <= EpsilonOrZero; goto Lej;
Lhe: ImmedPtr[-1] = fabs(y-x) >= EpsilonOrZero; goto Lej;
Lhf: ImmedPtr[-1] = truthValue(x)&&truthValue(y); goto Lej;
Lhg: ImmedPtr[-1] = truthValue(x)||truthValue(y); goto Lej;
Lhh: data->ByteCode.push_back(opcode); return;
#undef FP_ReDefinePointers
}
