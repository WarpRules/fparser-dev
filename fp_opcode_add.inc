/* Function Parser for C++ v4.0.3   

   Note: This file contains generated code and is thus not
   intended to be to be modified by hand. It was generated by
   fpoptimizer/bytecoderules_parser which is available in the
   development package.

   Note: You don't need to add this file to your project. It's
   enough for it to be in the same directory as fparser.cc. This
   file is internally #included by fparser.cc.
*/

#define FP_TRACE_OPCODENAME(op) \
    (op < VarBegin \
        ? FP_GetOpcodeName(OPCODE(op)) \
        : findName(data->namePtrs,op,NameData<Value_t>::VARIABLE))
#define FP_TRACE_BYTECODE_OPTIMIZATION(srcline,from,to,with) \
    /*std::cout << "Changing \"" from "\"\t(line " #srcline ")\n" \
                   "    into \"" to "\"\n" with*/

  unsigned* ByteCodePtr;
  Value_t*   ImmedPtr;

  #define FP_ReDefinePointers() \
    ByteCodePtr = !data->ByteCode.empty() ? &data->ByteCode[0] + data->ByteCode.size() - 1 : 0; \
    ImmedPtr    = !data->Immed.empty()    ? &data->Immed[0]    + data->Immed.size()    - 1 : 0;
  FP_ReDefinePointers();

#if(!FP_FLOAT_VERSION)
	Value_t x;
	unsigned A;
	Value_t y;
	unsigned B;
	unsigned C;
	unsigned D;
	switch(opcode)
	{
	TailCall_cAbs:
	case cAbs:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(197,"cNeg cAbs", "cAbs", "");
			/* opcode = cAbs; */ // redundant, matches cAbs @ 0
			goto Laa;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(40,
				"x cAbs",
				"[fp_abs(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lab;
		default:
			A = ByteCodePtr[0];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(258,
					"A[IsNeverNegativeValueOpcode(A)] cAbs",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cAdd:
	case cAdd:
		switch(ByteCodePtr[0])
		{
		case cDup:
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(147,"cDup cAdd cDup cAdd", "[Value_t(4)] cMul", "");
					goto Lac;
				}
				break;
			case cMul:
				if(ByteCodePtr[-2] == cAdd)
				{
					if(ByteCodePtr[-3] == cDup)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(148,"cDup cAdd cMul cDup cAdd", "cMul [Value_t(4)] cMul", "");
						goto Lad;
					}
				}
				break;
			}
			break;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(150,
						"cDup x cMul cAdd",
						"[x+Value_t(1)] cMul",
						"    with x = " << x << "\n");
					goto Lae;
				}
			}
			break;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(204,"cNeg cAdd", "cSub", "");
			goto Laf;
		case cImmed:
			x = ImmedPtr[0];
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(141,
						"y cAdd x cAdd",
						"[y+x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cAdd; */ // redundant, matches cAdd @ 0
					goto Lag;
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(76,
					"y x cAdd",
					"[y+x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lah;
			}
			if(x==Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(75,
					"x[x==Value_t(0)] cAdd",
					"",
					"    with x = " << x << "\n");
				goto Lai;
			}
			break;
		}
		goto Default0;
	TailCall_cAnd:
	case cAnd:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(130,
					"y x cAnd",
					"[fp_and(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Laj;
			}
		}
		goto Default0;
	TailCall_cDiv:
	case cDiv:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(120,"cDup cDiv", "[Value_t(0)] cMul [Value_t(1)] cAdd", "");
			goto Lak;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(138,
						"cNeg x[x!=Value_t(0)] cDiv",
						"[-x] cDiv",
						"    with x = " << x << "\n");
					/* opcode = cDiv; */ // redundant, matches cDiv @ 0
					goto Lal;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(73,
						"y x[x!=Value_t(0)] cDiv",
						"[y/x]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Lam;
				}
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(72,
					"x[x==Value_t(1)] cDiv",
					"",
					"    with x = " << x << "\n");
				goto Lai;
			}
			break;
		}
		goto Default0;
	TailCall_cEqual:
	case cEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				A = ByteCodePtr[-1];
				if(IsLogicalOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(286,
						"A[IsLogicalOpcode(A)] x[x==Value_t(1)] cEqual",
						"A",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					goto Lai;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(128,
					"y x cEqual",
					"[fp_equal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lan;
			}
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(216,
						"cAbs x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Lao;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(218,
						"cSqr x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Lao;
				}
				FP_TRACE_BYTECODE_OPTIMIZATION(276,
					"x[x==Value_t(0)] cEqual",
					"cNot",
					"    with x = " << x << "\n");
				goto Lap;
			}
		}
		goto Default0;
	TailCall_cGreater:
	case cGreater:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(278,
						"cAbs x[x==Value_t(0)] cGreater",
						"cNotNot",
						"    with x = " << x << "\n");
					goto Lba;
				default:
					A = ByteCodePtr[-1];
					if(IsNeverNegativeValueOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(282,
							"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(0)] cGreater",
							"A cNotNot",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lbb;
					}
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(126,
					"y x cGreater",
					"[fp_less(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbc;
			}
		}
		goto Default0;
	TailCall_cGreaterOrEq:
	case cGreaterOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(279,
						"cAbs x[x==Value_t(1)] cGreaterOrEq",
						"cNotNot",
						"    with x = " << x << "\n");
					goto Lba;
				default:
					A = ByteCodePtr[-1];
					if(IsNeverNegativeValueOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(283,
							"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(1)] cGreaterOrEq",
							"A cNotNot",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lbb;
					}
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(127,
					"y x cGreaterOrEq",
					"[fp_lessOrEq(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbd;
			}
		}
		goto Default0;
	TailCall_cInv:
	case cInv:
		switch(ByteCodePtr[0])
		{
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(198,"cInv cInv", "", "");
			goto Lbe;
		case cSqrt:
			FP_TRACE_BYTECODE_OPTIMIZATION(67,"cSqrt cInv", "cRSqrt", "");
			goto Lbf;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(69,
					"x[x!=Value_t(0)] cInv",
					"[Value_t(1)/x]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lbg;
			}
			break;
		}
		goto Default0;
	TailCall_cLess:
	case cLess:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(280,
						"cAbs x[x==Value_t(1)] cLess",
						"cNot",
						"    with x = " << x << "\n");
					goto Lbh;
				default:
					A = ByteCodePtr[-1];
					if(IsNeverNegativeValueOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(284,
							"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(1)] cLess",
							"A cNot",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lap;
					}
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(124,
					"y x cLess",
					"[fp_less(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbi;
			}
		}
		goto Default0;
	TailCall_cLessOrEq:
	case cLessOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(281,
						"cAbs x[x==Value_t(0)] cLessOrEq",
						"cNot",
						"    with x = " << x << "\n");
					goto Lbh;
				default:
					A = ByteCodePtr[-1];
					if(IsNeverNegativeValueOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(285,
							"A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(0)] cLessOrEq",
							"A cNot",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
						goto Lap;
					}
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(125,
					"y x cLessOrEq",
					"[fp_lessOrEq(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbj;
			}
		}
		goto Default0;
	TailCall_cMax:
	case cMax:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(110,"cDup cMax", "", "");
			goto Lbe;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(82,
					"y x cMax",
					"[fp_max(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbk;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(A>=VarBegin)
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(112,
							"B[B==A] cDup A[A>=VarBegin] cMax",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Lbe;
					}
					break;
				case cMax:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(114,
							"B[B==A] cMax A[A>=VarBegin] cMax",
							"B cMax",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMax; */ // redundant, matches cMax @ 2
						goto Lbe;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cMin:
	case cMin:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(109,"cDup cMin", "", "");
			goto Lbe;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(81,
					"y x cMin",
					"[fp_min(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lbl;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(A>=VarBegin)
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(111,
							"B[B==A] cDup A[A>=VarBegin] cMin",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Lbe;
					}
					break;
				case cMin:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(113,
							"B[B==A] cMin A[A>=VarBegin] cMin",
							"B cMin",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMin; */ // redundant, matches cMin @ 2
						goto Lbe;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cMod:
	case cMod:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x!=Value_t(0))
			{
				if(ByteCodePtr[-1] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(74,
						"y x[x!=Value_t(0)] cMod",
						"[fp_mod(y,x)]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Lbm;
				}
			}
		}
		goto Default0;
	TailCall_cMul:
	case cMul:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[0];
				A = ByteCodePtr[-2];
				if(A>=VarBegin)
				{
					if(ByteCodePtr[-3] == cImmed)
					{
						x = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(245,
							"x A[A>=VarBegin] y cAdd cMul",
							"[x] A cMul [y*x] cAdd",
							"    with y = " << y
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches x @ 4
						goto Lbn;
					}
				}
			}
			goto Default1;
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(352,"cDup cMul", "cSqr", "");
			goto Lbo;
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(203,"cInv cMul", "cDiv", "");
			goto Lbp;
		case cNeg:
			A = ByteCodePtr[-1];
			if(A>=VarBegin)
			{
				switch(ByteCodePtr[-2])
				{
				case cMul:
					B = ByteCodePtr[-3];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(344,
							"B[B==A] cMul A[A>=VarBegin] cNeg cMul",
							"B cSqr cMul cNeg",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
						goto Lca;
					}
					goto Default2;
				default: Default2:;
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(338,
							"B[B==A] A[A>=VarBegin] cNeg cMul",
							"B cSqr cNeg",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lcb;
					}
				}
			}
			goto Default1;
		case cPow:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(151,
						"cDup x cPow cMul",
						"[x+Value_t(1)] cPow",
						"    with x = " << x << "\n");
					goto Lcc;
				}
			}
			goto Default1;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					A = ByteCodePtr[-2];
					if(A>=VarBegin)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(94,
							"A[A>=VarBegin] cMul x[x==Value_t(0)] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lcd;
					}
					goto Default3;
				default: Default3:;
					A = ByteCodePtr[-1];
					if(IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						switch(ByteCodePtr[-2])
						{
						case cImmed:
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(93,
								"y A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t(0)] cMul",
								"[x] cMul",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lce;
						default:
							B = ByteCodePtr[-2];
							if(IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								switch(ByteCodePtr[-3])
								{
								case cImmed:
									y = ImmedPtr[-1];
									FP_TRACE_BYTECODE_OPTIMIZATION(97,
										"y B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t(0)] cMul",
										"A [x] cMul",
										"    with x = " << x
										    << ", A = " << FP_TRACE_OPCODENAME(A)
										    << ", B = " << FP_TRACE_OPCODENAME(B)
										    << ", y = " << y
										    << "\n");
									/* opcode = cMul; */ // redundant, matches cMul @ 0
									goto Lcf;
								default:
									C = ByteCodePtr[-3];
									if(C>=VarBegin)
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(95,
											"C[C>=VarBegin] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t(0)] cMul",
											"A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lcg;
									}
									if(IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(96,
											"C[IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t(0)] cMul",
											"B A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lch;
									}
								}
							}
							if(B>=VarBegin)
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(91,
									"B[B>=VarBegin] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t(0)] cMul",
									"[x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lcd;
							}
							if(IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(92,
									"B[IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t(0)] cMul",
									"A [x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lci;
							}
						}
					}
					if(A>=VarBegin)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(89,
							"A[A>=VarBegin] x[x==Value_t(0)] cMul",
							"[x]",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						goto Lcj;
					}
					if(IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(90,
							"A[IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t(0)] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lck;
					}
				}
			}
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				switch(ByteCodePtr[-2])
				{
				case cDup:
					FP_TRACE_BYTECODE_OPTIMIZATION(155,
						"cDup cAdd x cMul",
						"[x+x] cMul",
						"    with x = " << x << "\n");
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Lcl;
				case cMul:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(A>=VarBegin)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(243,
								"A[A>=VarBegin] y cMul cAdd x cMul",
								"[x] cMul A [y*x] cMul cAdd",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lcm;
						}
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(242,
						"y cAdd x cMul",
						"[x] cMul [y*x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lcn;
				}
				break;
			case cMul:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cDup)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(157,
							"cDup cAdd cMul x cMul",
							"cMul [x+x] cMul",
							"    with x = " << x << "\n");
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lco;
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					if(y*x==Value_t(1))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(145,
							"y[y*x==Value_t(1)] cMul x cMul",
							"",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Lcp;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(146,
						"y cMul x cMul",
						"[y*x] cMul",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Lda;
				}
				break;
			case cNeg:
				FP_TRACE_BYTECODE_OPTIMIZATION(135,
					"cNeg x cMul",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Ldb;
			case cSub:
				if(ByteCodePtr[-2] == cMul)
				{
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(A>=VarBegin)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(244,
								"A[A>=VarBegin] y cMul cSub x cMul",
								"[x] cMul A [y*x] cMul cSub",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Ldc;
						}
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(71,
					"y x cMul",
					"[y*x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldd;
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(70,
					"x[x==Value_t(1)] cMul",
					"",
					"    with x = " << x << "\n");
				goto Lai;
			}
			if(x==Value_t(2))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(100,
					"x[x==Value_t(2)] cMul",
					"cDup cAdd",
					"    with x = " << x << "\n");
				goto Lde;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(137,
					"x[x==Value_t(-1)] cMul",
					"cNeg",
					"    with x = " << x << "\n");
				goto Ldf;
			}
			break;
		default: Default1:;
			A = ByteCodePtr[0];
			if(A>=VarBegin)
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					switch(ByteCodePtr[-2])
					{
					case cNeg:
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(341,
								"B[B==A] cNeg cMul A[A>=VarBegin] cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lca;
						}
						goto Default4;
					default: Default4:;
						B = ByteCodePtr[-2];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(332,
								"B[B==A] cMul A[A>=VarBegin] cMul",
								"B cSqr cMul",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Ldg;
						}
					}
					goto Default5;
				case cNeg:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(335,
							"B[B==A] cNeg A[A>=VarBegin] cMul",
							"B cSqr cNeg",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lcb;
					}
					goto Default5;
				default: Default5:;
					B = ByteCodePtr[-1];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(329,
							"B[B==A] A[A>=VarBegin] cMul",
							"B cSqr",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-1] = B; */ // redundant, matches B @ 2
						goto Lbo;
					}
				}
			}
			if(IsUnaryOpcode(A))
			{
				B = ByteCodePtr[-1];
				if(B>=VarBegin&&data->ByteCode.size()>1)
				{
					if(ByteCodePtr[-2] == cMul)
					{
						C = ByteCodePtr[-3];
						if(C==A)
						{
							D = ByteCodePtr[-4];
							if(D==B)
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(351,
									"D[D==B] C[C==A] cMul B[B>=VarBegin&&data->ByteCode.size()>1] A[IsUnaryOpcode(A)] cMul",
									"D C cSqr cMul",
									"    with A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << ", C = " << FP_TRACE_OPCODENAME(C)
									    << ", D = " << FP_TRACE_OPCODENAME(D)
									    << "\n");
								/* ByteCodePtr[-4] = D; */ // redundant, matches D @ 5
								/* ByteCodePtr[-3] = C; */ // redundant, matches C @ 4
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Ldh;
							}
						}
					}
				}
			}
		}
		goto Default0;
	TailCall_cNEqual:
	case cNEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				A = ByteCodePtr[-1];
				if(IsLogicalOpcode(A))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(287,
						"A[IsLogicalOpcode(A)] x[x==Value_t(1)] cNEqual",
						"A cNot",
						"    with x = " << x
						    << ", A = " << FP_TRACE_OPCODENAME(A)
						    << "\n");
					/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
					goto Lap;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(129,
					"y x cNEqual",
					"[fp_nequal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldi;
			}
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(217,
						"cAbs x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Ldj;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(219,
						"cSqr x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Ldj;
				}
				FP_TRACE_BYTECODE_OPTIMIZATION(277,
					"x[x==Value_t(0)] cNEqual",
					"cNotNot",
					"    with x = " << x << "\n");
				goto Lbb;
			}
		}
		goto Default0;
	TailCall_cNeg:
	case cNeg:
		switch(ByteCodePtr[0])
		{
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(136,
					"x cMul cNeg",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Ldk;
			}
			break;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(199,"cNeg cNeg", "", "");
			goto Lbe;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(68,
				"x cNeg",
				"[-x]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Ldl;
		}
		goto Default0;
	TailCall_cNot:
	case cNot:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(249,"cAbs cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Ldm;
		case cAbsNot:
			A = ByteCodePtr[-1];
			if(IsLogicalOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(254,
					"A[IsLogicalOpcode(A)] cAbsNot cNot",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Lbe;
			}
			if(A!=cImmed)
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(255,
					"A[A!=cImmed] cAbsNot cNot",
					"A cAbsNotNot",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Ldn;
			}
			goto Default6;
		case cAbsNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(252,"cAbsNotNot cNot", "cAbsNot", "");
			goto Ldo;
		case cEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(213,"cEqual cNot", "cNEqual", "");
			goto Ldp;
		case cGreater:
			FP_TRACE_BYTECODE_OPTIMIZATION(211,"cGreater cNot", "cLessOrEq", "");
			goto Lea;
		case cGreaterOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(212,"cGreaterOrEq cNot", "cLess", "");
			goto Leb;
		case cLess:
			FP_TRACE_BYTECODE_OPTIMIZATION(209,"cLess cNot", "cGreaterOrEq", "");
			goto Lec;
		case cLessOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(210,"cLessOrEq cNot", "cGreater", "");
			goto Led;
		case cNEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(214,"cNEqual cNot", "cEqual", "");
			goto Lee;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(248,"cNeg cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Ldm;
		case cNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(250,"cNot cNot", "cNotNot", "");
			goto Lef;
		case cNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(251,"cNotNot cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Ldm;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(85,
				"x cNot",
				"[fp_not(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Leg;
		default: Default6:;
			A = ByteCodePtr[0];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(256,
					"A[IsNeverNegativeValueOpcode(A)] cNot",
					"A cAbsNot",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				goto Leh;
			}
		}
		goto Default0;
	TailCall_cOr:
	case cOr:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(131,
					"y x cOr",
					"[fp_or(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lei;
			}
		}
		goto Default0;
	TailCall_cSqr:
	case cSqr:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(347,"cAbs cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Lej;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(346,"cNeg cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Lej;
		}
		goto Default0;
	TailCall_cSub:
	case cSub:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(152,"cDup cSub", "[Value_t(0)] cMul", "");
			goto Lek;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(205,"cNeg cSub", "cAdd", "");
			goto Lel;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(77,
					"x[x==Value_t(0)] cSub",
					"",
					"    with x = " << x << "\n");
				goto Lai;
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(78,
					"y x cSub",
					"[y-x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lem;
			}
			FP_TRACE_BYTECODE_OPTIMIZATION(168,
				"x cSub",
				"[-x] cAdd",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Len;
		}
		goto Default0;
	default: Default0:;
		A = opcode;
		if(IsComparisonOpcode(A))
		{
			if(ByteCodePtr[0] == cImmed)
			{
				x = ImmedPtr[0];
				switch(ByteCodePtr[-1])
				{
				case cAdd:
					if(ByteCodePtr[-2] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(221,
							"y cAdd x A[IsComparisonOpcode(A)]",
							"[x-y] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
						goto Leo;
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(222,
						"cNeg x A[IsComparisonOpcode(A)]",
						"[-x] {OppositeComparisonOpcode(A)}",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", x = " << x
						    << "\n");
					goto Lep;
				}
			}
		}
		if(A>=VarBegin&&data->ByteCode.size()>0)
		{
			B = ByteCodePtr[0];
			if(B==A)
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(349,
					"B[B==A] A[A>=VarBegin&&data->ByteCode.size()>0]",
					"B cDup",
					"    with A = " << FP_TRACE_OPCODENAME(A)
					    << ", B = " << FP_TRACE_OPCODENAME(B)
					    << "\n");
				/* ByteCodePtr[0] = B; */ // redundant, matches B @ 1
				goto Lfa;
			}
		}
		if(IsUnaryOpcode(A))
		{
			B = ByteCodePtr[0];
			if(B>=VarBegin&&data->ByteCode.size()>1)
			{
				C = ByteCodePtr[-1];
				if(C==A)
				{
					D = ByteCodePtr[-2];
					if(D==B)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(350,
							"D[D==B] C[C==A] B[B>=VarBegin&&data->ByteCode.size()>1] A[IsUnaryOpcode(A)]",
							"D C cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", C = " << FP_TRACE_OPCODENAME(C)
							    << ", D = " << FP_TRACE_OPCODENAME(D)
							    << "\n");
						/* ByteCodePtr[-2] = D; */ // redundant, matches D @ 3
						/* ByteCodePtr[-1] = C; */ // redundant, matches C @ 2
						goto Lfb;
					}
				}
			}
		}
	}
	goto Lfc;
Laa: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     goto TailCall_cAbs;
Lab: ImmedPtr[0] = fp_abs(x); return;
Lac: data->Immed.push_back(Value_t(4));
     ByteCodePtr[-2] = cImmed;
     ByteCodePtr -= 2;
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
Lfd: opcode = cMul;
Lfe: FP_ReDefinePointers();
Lff: goto TailCall_cMul;
Lad: data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cMul);
     data->Immed.push_back(Value_t(4));
     data->ByteCode.push_back(cImmed); goto Lfd;
Lae: ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     ByteCodePtr -= 2;
     data->ByteCode.pop_back();
Lfg: data->ByteCode.pop_back();
     opcode = cMul; goto Lff;
Laf: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cSub;
Lfh: goto TailCall_cSub;
Lag: ImmedPtr[-1] = y+x;
     data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
Lfi: FP_ReDefinePointers();
Lfj: goto TailCall_cAdd;
Lah: ImmedPtr[-1] = y+x;
Lai: data->Immed.pop_back();
Lbe: data->ByteCode.pop_back(); return;
Laj: ImmedPtr[-1] = fp_and(x,y); goto Lai;
Lak: data->Immed.push_back(Value_t(0));
     ByteCodePtr[0] = cImmed;
     AddFunctionOpcode(cMul);
     data->Immed.push_back(Value_t(1));
Lfk: data->ByteCode.push_back(cImmed);
Lfl: opcode = cAdd; goto Lfi;
Lal: ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     ByteCodePtr -= 1;
     data->ByteCode.pop_back();
Lfm: goto TailCall_cDiv;
Lam: ImmedPtr[-1] = y/x; goto Lai;
Lan: ImmedPtr[-1] = fp_equal(y,x); goto Lai;
Lao: ByteCodePtr[-1] = cImmed;
     ByteCodePtr -= 1;
     data->ByteCode.pop_back();
Lfn: goto TailCall_cEqual;
Lap: data->Immed.pop_back();
Lfo: data->ByteCode.pop_back();
     opcode = cNot;
     FP_ReDefinePointers();
Lfp: goto TailCall_cNot;
Lba: data->Immed.pop_back();
     data->ByteCode.pop_back();
Lef: data->ByteCode.pop_back();
     AddFunctionOpcode(cNotNot); return;
Lbb: data->Immed.pop_back(); goto Lef;
Lbc: ImmedPtr[-1] = fp_less(x,y); goto Lai;
Lbd: ImmedPtr[-1] = fp_lessOrEq(x,y); goto Lai;
Lbf: data->ByteCode.pop_back();
     AddFunctionOpcode(cRSqrt); return;
Lbg: ImmedPtr[0] = Value_t(1)/x; return;
Lbh: data->Immed.pop_back();
     data->ByteCode.pop_back(); goto Lfo;
Lbi: ImmedPtr[-1] = fp_less(y,x); goto Lai;
Lbj: ImmedPtr[-1] = fp_lessOrEq(y,x); goto Lai;
Lbk: ImmedPtr[-1] = fp_max(x,y); goto Lai;
Lbl: ImmedPtr[-1] = fp_min(x,y); goto Lai;
Lbm: ImmedPtr[-1] = fp_mod(y,x); goto Lai;
Lbn: ImmedPtr[-1] = x;
     data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(A);
Lga: AddFunctionOpcode(cMul);
     data->Immed.push_back(y*x); goto Lfk;
Lbo: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cSqr;
Lgb: goto TailCall_cSqr;
Lbp: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cDiv; goto Lfm;
Lca: data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cSqr);
     AddFunctionOpcode(cMul);
Lgc: opcode = cNeg;
     FP_ReDefinePointers();
     goto TailCall_cNeg;
Lcb: data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cSqr); goto Lgc;
Lcc: ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cPow); return;
Lcd: ByteCodePtr[-2] = cImmed;
     ByteCodePtr -= 2;
     data->ByteCode.pop_back();
Lgd: data->ByteCode.pop_back(); goto Lff;
Lce: ImmedPtr[-1] = x;
Lge: data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back(); goto Lfe;
Lcf: data->Immed.pop_back();
Lcg: data->Immed.pop_back();
     data->ByteCode.pop_back();
Lgf: data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
Lgg: AddFunctionOpcode(A);
     data->Immed.push_back(x);
Lgh: data->ByteCode.push_back(cImmed); goto Lfe;
Lch: data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(B); goto Lgg;
Lci: data->Immed.pop_back(); goto Lgf;
Lcj: ByteCodePtr[-1] = cImmed; goto Lbe;
Lck: ByteCodePtr[-1] = cImmed;
     ByteCodePtr -= 1; goto Lgd;
Lcl: ImmedPtr[0] = x+x; goto Lcd;
Lcm: ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     data->Immed.push_back(y*x);
     data->ByteCode.push_back(cImmed);
     AddFunctionOpcode(cMul); goto Lfl;
Lcn: ImmedPtr[-1] = x;
     data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back(); goto Lga;
Lco: data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cMul);
     data->Immed.push_back(x+x); goto Lgh;
Lcp: data->Immed.pop_back();
     data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back(); goto Lbe;
Lda: ImmedPtr[-1] = y*x; goto Lge;
Ldb: ImmedPtr[0] = -x; goto Lck;
Ldc: ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     data->Immed.push_back(y*x);
     data->ByteCode.push_back(cImmed);
     AddFunctionOpcode(cMul);
     opcode = cSub;
     FP_ReDefinePointers(); goto Lfh;
Ldd: ImmedPtr[-1] = y*x; goto Lai;
Lde: ByteCodePtr[0] = cDup;
     ImmedPtr -= 1;
     data->Immed.pop_back();
Lgi: opcode = cAdd; goto Lfj;
Ldf: data->Immed.pop_back();
     data->ByteCode.pop_back(); goto Lgc;
Ldg: data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cSqr); goto Lfe;
Ldh: data->ByteCode.pop_back(); goto Ldg;
Ldi: ImmedPtr[-1] = fp_nequal(y,x); goto Lai;
Ldj: ByteCodePtr[-1] = cImmed;
     ByteCodePtr -= 1;
     data->ByteCode.pop_back();
Lgj: goto TailCall_cNEqual;
Ldk: ImmedPtr[0] = -x;
     ByteCodePtr -= 1; goto Lfg;
Ldl: ImmedPtr[0] = -x; return;
Ldm: ByteCodePtr -= 1;
     data->ByteCode.pop_back(); goto Lfp;
Ldn: data->ByteCode.pop_back();
     AddFunctionOpcode(cAbsNotNot); return;
Ldo: data->ByteCode.pop_back();
Leh: AddFunctionOpcode(cAbsNot); return;
Ldp: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cNEqual; goto Lgj;
Lea: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cLessOrEq;
     goto TailCall_cLessOrEq;
Leb: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cLess;
     goto TailCall_cLess;
Lec: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cGreaterOrEq;
     goto TailCall_cGreaterOrEq;
Led: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cGreater;
     goto TailCall_cGreater;
Lee: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cEqual; goto Lfn;
Leg: ImmedPtr[0] = fp_not(x); return;
Lei: ImmedPtr[-1] = fp_or(x,y); goto Lai;
Lej: ByteCodePtr -= 1;
     data->ByteCode.pop_back(); goto Lgb;
Lek: data->Immed.push_back(Value_t(0));
     ByteCodePtr[0] = cImmed; goto Lfd;
Lel: ByteCodePtr -= 1;
     data->ByteCode.pop_back(); goto Lgi;
Lem: ImmedPtr[-1] = y-x; goto Lai;
Len: ImmedPtr[0] = -x; goto Lgi;
Leo: ImmedPtr[-1] = x-y;
     data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(A); return;
Lep: ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     data->ByteCode.pop_back();
     AddFunctionOpcode(OppositeComparisonOpcode(A)); return;
Lfa: data->ByteCode.push_back(cDup); return;
Lfb: ByteCodePtr[0] = cDup; return;
Lfc: data->ByteCode.push_back(opcode); return;
return;
// This list of dummy gotos is here to inhibit
// compiler warnings on unused labels
goto TailCall_cAnd;goto TailCall_cInv;goto TailCall_cMax;
goto TailCall_cMin;goto TailCall_cMod;goto TailCall_cNeg;
goto TailCall_cOr;goto TailCall_cSub;
#endif

#if(FP_FLOAT_VERSION)
	Value_t x;
	unsigned A;
	Value_t y;
	unsigned B;
	unsigned C;
	unsigned D;
	switch(opcode)
	{
	TailCall_cAbs:
	case cAbs:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(197,"cNeg cAbs", "cAbs", "");
			/* opcode = cAbs; */ // redundant, matches cAbs @ 0
			goto Laa;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(40,
				"x cAbs",
				"[fp_abs(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lab;
		default:
			A = ByteCodePtr[0];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(258,
					"A[IsNeverNegativeValueOpcode(A)] cAbs",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cAcos:
	case cAcos:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x>=Value_t(-1)&&x<=Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(44,
					"x[x>=Value_t(-1)&&x<=Value_t(1)] cAcos",
					"[fp_acos(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lac;
			}
		}
		goto Default0;
	TailCall_cAcosh:
	case cAcosh:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x>=Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(41,
					"x[x>=Value_t(1)] cAcosh",
					"[fp_acosh(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lad;
			}
		}
		goto Default0;
	TailCall_cAdd:
	case cAdd:
		switch(ByteCodePtr[0])
		{
		case cDup:
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(147,"cDup cAdd cDup cAdd", "[Value_t(4)] cMul", "");
					goto Lae;
				}
				break;
			case cMul:
				if(ByteCodePtr[-2] == cAdd)
				{
					if(ByteCodePtr[-3] == cDup)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(148,"cDup cAdd cMul cDup cAdd", "cMul [Value_t(4)] cMul", "");
						goto Laf;
					}
				}
				break;
			}
			break;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(150,
						"cDup x cMul cAdd",
						"[x+Value_t(1)] cMul",
						"    with x = " << x << "\n");
					goto Lag;
				}
			}
			break;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(204,"cNeg cAdd", "cSub", "");
			goto Lah;
		case cImmed:
			x = ImmedPtr[0];
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(141,
						"y cAdd x cAdd",
						"[y+x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cAdd; */ // redundant, matches cAdd @ 0
					goto Lai;
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(76,
					"y x cAdd",
					"[y+x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Laj;
			}
			if(x==Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(75,
					"x[x==Value_t(0)] cAdd",
					"",
					"    with x = " << x << "\n");
				goto Lak;
			}
			break;
		}
		goto Default0;
	TailCall_cAnd:
	case cAnd:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(130,
					"y x cAnd",
					"[fp_and(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lal;
			}
		}
		goto Default0;
	TailCall_cAsin:
	case cAsin:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x>=Value_t(-1)&&x<=Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(45,
					"x[x>=Value_t(-1)&&x<=Value_t(1)] cAsin",
					"[fp_asin(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lam;
			}
		}
		goto Default0;
	TailCall_cAsinh:
	case cAsinh:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(42,
				"x cAsinh",
				"[fp_asinh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lan;
		}
		goto Default0;
	TailCall_cAtan:
	case cAtan:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(46,
				"x cAtan",
				"[fp_atan(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lao;
		}
		goto Default0;
	TailCall_cAtan2:
	case cAtan2:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(83,
					"y x cAtan2",
					"[fp_atan2(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lap;
			}
		}
		goto Default0;
	TailCall_cAtanh:
	case cAtanh:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x>Value_t(-1)&&x<Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(43,
					"x[x>Value_t(-1)&&x<Value_t(1)] cAtanh",
					"[fp_atanh(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lba;
			}
		}
		goto Default0;
	TailCall_cCbrt:
	case cCbrt:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(47,
				"x cCbrt",
				"[fp_cbrt(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbb;
		}
		goto Default0;
	TailCall_cCeil:
	case cCeil:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(267,"cNeg cCeil", "cFloor cNeg", "");
			goto Lbc;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(48,
				"x cCeil",
				"[fp_ceil(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbd;
		default:
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(261,
					"A[IsAlwaysIntegerOpcode(A)] cCeil",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cCos:
	case cCos:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(295,"cAbs cCos", "cCos", "");
			/* opcode = cCos; */ // redundant, matches cCos @ 0
			goto Lbe;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(297,"cNeg cCos", "cCos", "");
			/* opcode = cCos; */ // redundant, matches cCos @ 0
			goto Lbe;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(49,
				"x cCos",
				"[fp_cos(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbf;
		}
		goto Default0;
	TailCall_cCosh:
	case cCosh:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(296,"cAbs cCosh", "cCosh", "");
			/* opcode = cCosh; */ // redundant, matches cCosh @ 0
			goto Lbg;
		case cAcosh:
			FP_TRACE_BYTECODE_OPTIMIZATION(193,"cAcosh cCosh", "", "");
			goto Lbh;
		case cAsinh:
			FP_TRACE_BYTECODE_OPTIMIZATION(309,"cAsinh cCosh", "[DO_STACKPLUS1] cSqr [Value_t(1)] cAdd cSqrt", "");
			incStackPtr();
			--StackPtr;
			goto Lbi;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(298,"cNeg cCosh", "cCosh", "");
			/* opcode = cCosh; */ // redundant, matches cCosh @ 0
			goto Lbg;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(50,
				"x cCosh",
				"[fp_cosh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbj;
		}
		goto Default0;
	TailCall_cDeg:
	case cDeg:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(65,
				"x cDeg",
				"[RadiansToDegrees(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lbk;
		}
		goto Default0;
	TailCall_cDiv:
	case cDiv:
		switch(ByteCodePtr[0])
		{
		case cCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(312,"cCos cDiv", "cSec cMul", "");
			goto Lbl;
		case cCot:
			FP_TRACE_BYTECODE_OPTIMIZATION(316,"cCot cDiv", "cTan cMul", "");
			goto Lbm;
		case cCsc:
			FP_TRACE_BYTECODE_OPTIMIZATION(314,"cCsc cDiv", "cSin cMul", "");
			goto Lbn;
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(120,"cDup cDiv", "[Value_t(0)] cMul [Value_t(1)] cAdd", "");
			goto Lbo;
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(273,"cExp cDiv", "cNeg cExp cMul", "");
			goto Lbp;
		case cExp2:
			FP_TRACE_BYTECODE_OPTIMIZATION(274,"cExp2 cDiv", "cNeg cExp2 cMul", "");
			goto Lca;
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(202,"cInv cDiv", "cMul", "");
			goto Lcb;
		case cPow:
			FP_TRACE_BYTECODE_OPTIMIZATION(272,"cPow cDiv", "cNeg cPow cMul", "");
			goto Lcc;
		case cSec:
			FP_TRACE_BYTECODE_OPTIMIZATION(315,"cSec cDiv", "cCos cMul", "");
			goto Lcd;
		case cSin:
			FP_TRACE_BYTECODE_OPTIMIZATION(311,"cSin cDiv", "cCsc cMul", "");
			goto Lce;
		case cTan:
			FP_TRACE_BYTECODE_OPTIMIZATION(313,"cTan cDiv", "cCot cMul", "");
			goto Lcf;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(72,
					"x[x==Value_t(1)] cDiv",
					"",
					"    with x = " << x << "\n");
				goto Lak;
			}
			if(x!=Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					if(ByteCodePtr[-2] == cImmed)
					{
						y = ImmedPtr[-1];
						if((y/x)==GetRadiansToDegreesFactor<Value_t>())
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(159,
								"y[(y/x)==GetRadiansToDegreesFactor<Value_t>()] cMul x[x!=Value_t(0)] cDiv",
								"cDeg",
								"    with x = " << x
								    << ", y = " << y
								    << "\n");
							goto Lcg;
						}
						if((y/x)==GetDegreesToRadiansFactor<Value_t>())
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(160,
								"y[(y/x)==GetDegreesToRadiansFactor<Value_t>()] cMul x[x!=Value_t(0)] cDiv",
								"cRad",
								"    with x = " << x
								    << ", y = " << y
								    << "\n");
							goto Lch;
						}
						FP_TRACE_BYTECODE_OPTIMIZATION(161,
							"y cMul x[x!=Value_t(0)] cDiv",
							"[y/x] cMul",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
						goto Lci;
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(138,
						"cNeg x[x!=Value_t(0)] cDiv",
						"[-x] cDiv",
						"    with x = " << x << "\n");
					/* opcode = cDiv; */ // redundant, matches cDiv @ 0
					goto Lcj;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(73,
						"y x[x!=Value_t(0)] cDiv",
						"[y/x]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Lck;
				}
				FP_TRACE_BYTECODE_OPTIMIZATION(163,
					"x[x!=Value_t(0)] cDiv",
					"[Value_t(1)/x] cMul",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lcl;
			}
			break;
		}
		goto Default0;
	TailCall_cEqual:
	case cEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(216,
						"cAbs x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Lcm;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(218,
						"cSqr x[x==Value_t(0)] cEqual",
						"[x] cEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cEqual; */ // redundant, matches cEqual @ 0
					goto Lcm;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(128,
					"y x cEqual",
					"[fp_equal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lcn;
			}
		}
		goto Default0;
	TailCall_cExp:
	case cExp:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(269,
					"x cAdd cExp",
					"cExp [fp_exp(x)] cMul",
					"    with x = " << x << "\n");
				goto Lco;
			}
			break;
		case cLog:
			A = ByteCodePtr[-1];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(183,
					"A[IsNeverNegativeValueOpcode(A)] cLog cExp",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Lbh;
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(51,
				"x cExp",
				"[fp_exp(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lcp;
		}
		goto Default0;
	TailCall_cExp2:
	case cExp2:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(270,
					"x cAdd cExp2",
					"cExp2 [fp_exp2(x)] cMul",
					"    with x = " << x << "\n");
				goto Lda;
			}
			break;
		case cLog2:
			A = ByteCodePtr[-1];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(184,
					"A[IsNeverNegativeValueOpcode(A)] cLog2 cExp2",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Lbh;
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(52,
				"x cExp2",
				"[fp_exp2(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Ldb;
		}
		FP_TRACE_BYTECODE_OPTIMIZATION(355,"cExp2", "[DO_STACKPLUS1] [fp_log(Value_t(2))] cMul cExp", "");
		incStackPtr();
		--StackPtr;
		goto Ldc;
	TailCall_cFloor:
	case cFloor:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(266,"cNeg cFloor", "cCeil cNeg", "");
			goto Ldd;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(53,
				"x cFloor",
				"[fp_floor(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lde;
		default:
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(260,
					"A[IsAlwaysIntegerOpcode(A)] cFloor",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cGreater:
	case cGreater:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(126,
					"y x cGreater",
					"[fp_less(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldf;
			}
		}
		goto Default0;
	TailCall_cGreaterOrEq:
	case cGreaterOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x!=Value_t(0))
			{
				if(ByteCodePtr[-1] == cAbs)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(290,
						"cAbs x[x!=Value_t(0)] cGreaterOrEq",
						"[Value_t(0.5)/x] cMul cNotNot",
						"    with x = " << x << "\n");
					goto Ldg;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(127,
					"y x cGreaterOrEq",
					"[fp_lessOrEq(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Ldh;
			}
		}
		goto Default0;
	TailCall_cInt:
	case cInt:
		switch(ByteCodePtr[0])
		{
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(54,
				"x cInt",
				"[fp_int(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Ldi;
		default:
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(262,
					"A[IsAlwaysIntegerOpcode(A)] cInt",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	TailCall_cInv:
	case cInv:
		switch(ByteCodePtr[0])
		{
		case cCos:
			FP_TRACE_BYTECODE_OPTIMIZATION(318,"cCos cInv", "cSec", "");
			goto Ldj;
		case cCot:
			FP_TRACE_BYTECODE_OPTIMIZATION(322,"cCot cInv", "cTan", "");
			goto Ldk;
		case cCsc:
			FP_TRACE_BYTECODE_OPTIMIZATION(320,"cCsc cInv", "cSin", "");
			goto Ldl;
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(198,"cInv cInv", "", "");
			goto Lbh;
		case cPow:
			FP_TRACE_BYTECODE_OPTIMIZATION(200,"cPow cInv", "cNeg cPow", "");
			goto Ldm;
		case cSec:
			FP_TRACE_BYTECODE_OPTIMIZATION(321,"cSec cInv", "cCos", "");
			goto Ldn;
		case cSin:
			FP_TRACE_BYTECODE_OPTIMIZATION(317,"cSin cInv", "cCsc", "");
			goto Ldo;
		case cSqrt:
			FP_TRACE_BYTECODE_OPTIMIZATION(67,"cSqrt cInv", "cRSqrt", "");
			goto Ldp;
		case cTan:
			FP_TRACE_BYTECODE_OPTIMIZATION(319,"cTan cInv", "cCot", "");
			goto Lea;
		case cImmed:
			x = ImmedPtr[0];
			if(x!=Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(69,
					"x[x!=Value_t(0)] cInv",
					"[Value_t(1)/x]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Leb;
			}
			break;
		}
		goto Default0;
	TailCall_cLess:
	case cLess:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x!=Value_t(0))
			{
				if(ByteCodePtr[-1] == cAbs)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(289,
						"cAbs x[x!=Value_t(0)] cLess",
						"[Value_t(0.5)/x] cMul cNot",
						"    with x = " << x << "\n");
					goto Lec;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(124,
					"y x cLess",
					"[fp_less(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Led;
			}
		}
		goto Default0;
	TailCall_cLessOrEq:
	case cLessOrEq:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(125,
					"y x cLessOrEq",
					"[fp_lessOrEq(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lee;
			}
		}
		goto Default0;
	TailCall_cLog:
	case cLog:
		switch(ByteCodePtr[0])
		{
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(186,"cExp cLog", "", "");
			goto Lbh;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(x>Value_t(0))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(367,
						"x[x>Value_t(0)] cMul cLog",
						"cLog [fp_log(x)] cAdd",
						"    with x = " << x << "\n");
					goto Lef;
				}
			}
			break;
		case cSqr:
			FP_TRACE_BYTECODE_OPTIMIZATION(103,"cSqr cLog", "cAbs cLog cDup cAdd", "");
			goto Leg;
		case cImmed:
			x = ImmedPtr[0];
			if(x>Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(55,
					"x[x>Value_t(0)] cLog",
					"[fp_log(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Leh;
			}
			break;
		}
		goto Default0;
	TailCall_cLog10:
	case cLog10:
		switch(ByteCodePtr[0])
		{
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(357,"cExp cLog10", "[DO_STACKPLUS1] [fp_log10(const_e<Value_t>())] cMul", "");
			incStackPtr();
			--StackPtr;
			goto Lei;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(x>Value_t(0))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(368,
						"x[x>Value_t(0)] cMul cLog10",
						"cLog10 [fp_log10(x)] cAdd",
						"    with x = " << x << "\n");
					goto Lej;
				}
			}
			break;
		case cSqr:
			FP_TRACE_BYTECODE_OPTIMIZATION(105,"cSqr cLog10", "cAbs cLog10 cDup cAdd", "");
			goto Lek;
		case cImmed:
			x = ImmedPtr[0];
			if(x>Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(56,
					"x[x>Value_t(0)] cLog10",
					"[fp_log10(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lel;
			}
			break;
		}
		goto Default0;
	TailCall_cLog2:
	case cLog2:
		switch(ByteCodePtr[0])
		{
		case cExp:
			FP_TRACE_BYTECODE_OPTIMIZATION(356,"cExp cLog2", "[DO_STACKPLUS1] [fp_log2(const_e<Value_t>())] cMul", "");
			incStackPtr();
			--StackPtr;
			goto Lem;
		case cExp2:
			FP_TRACE_BYTECODE_OPTIMIZATION(187,"cExp2 cLog2", "", "");
			goto Lbh;
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(x>Value_t(0))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(366,
						"x[x>Value_t(0)] cMul cLog2",
						"cLog2 [fp_log2(x)] cAdd",
						"    with x = " << x << "\n");
					goto Len;
				}
			}
			break;
		case cSqr:
			FP_TRACE_BYTECODE_OPTIMIZATION(104,"cSqr cLog2", "cAbs cLog2 cDup cAdd", "");
			goto Leo;
		case cImmed:
			x = ImmedPtr[0];
			if(x>Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(57,
					"x[x>Value_t(0)] cLog2",
					"[fp_log2(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lep;
			}
			break;
		}
		goto Default0;
	TailCall_cMax:
	case cMax:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(110,"cDup cMax", "", "");
			goto Lbh;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(82,
					"y x cMax",
					"[fp_max(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lfa;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(A>=VarBegin)
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(112,
							"B[B==A] cDup A[A>=VarBegin] cMax",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Lbh;
					}
					break;
				case cMax:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(114,
							"B[B==A] cMax A[A>=VarBegin] cMax",
							"B cMax",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMax; */ // redundant, matches cMax @ 2
						goto Lbh;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cMin:
	case cMin:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(109,"cDup cMin", "", "");
			goto Lbh;
		case cImmed:
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(81,
					"y x cMin",
					"[fp_min(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lfb;
			}
			break;
		default:
			A = ByteCodePtr[0];
			if(A>=VarBegin)
			{
				switch(ByteCodePtr[-1])
				{
				case cDup:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(111,
							"B[B==A] cDup A[A>=VarBegin] cMin",
							"B cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cDup; */ // redundant, matches cDup @ 2
						goto Lbh;
					}
					break;
				case cMin:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(113,
							"B[B==A] cMin A[A>=VarBegin] cMin",
							"B cMin",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						/* ByteCodePtr[-1] = cMin; */ // redundant, matches cMin @ 2
						goto Lbh;
					}
					break;
				}
			}
		}
		goto Default0;
	TailCall_cMod:
	case cMod:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x!=Value_t(0))
			{
				if(ByteCodePtr[-1] == cImmed)
				{
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(74,
						"y x[x!=Value_t(0)] cMod",
						"[fp_mod(y,x)]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Lfc;
				}
			}
		}
		goto Default0;
	TailCall_cMul:
	case cMul:
		switch(ByteCodePtr[0])
		{
		case cAdd:
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[0];
				A = ByteCodePtr[-2];
				if(A>=VarBegin)
				{
					if(ByteCodePtr[-3] == cImmed)
					{
						x = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(245,
							"x A[A>=VarBegin] y cAdd cMul",
							"[x] A cMul [y*x] cAdd",
							"    with y = " << y
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						/* ByteCodePtr[-3] = cImmed; */ // redundant, matches x @ 4
						goto Lfd;
					}
				}
			}
			goto Default1;
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(352,"cDup cMul", "cSqr", "");
			goto Lfe;
		case cInv:
			FP_TRACE_BYTECODE_OPTIMIZATION(203,"cInv cMul", "cDiv", "");
			goto Lff;
		case cNeg:
			A = ByteCodePtr[-1];
			if(A>=VarBegin)
			{
				switch(ByteCodePtr[-2])
				{
				case cMul:
					B = ByteCodePtr[-3];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(344,
							"B[B==A] cMul A[A>=VarBegin] cNeg cMul",
							"B cSqr cMul cNeg",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
						goto Lfg;
					}
					goto Default2;
				default: Default2:;
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(338,
							"B[B==A] A[A>=VarBegin] cNeg cMul",
							"B cSqr cNeg",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lfh;
					}
				}
			}
			goto Default1;
		case cPow:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				if(ByteCodePtr[-2] == cDup)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(151,
						"cDup x cPow cMul",
						"[x+Value_t(1)] cPow",
						"    with x = " << x << "\n");
					goto Lfi;
				}
			}
			goto Default1;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					A = ByteCodePtr[-2];
					if(A>=VarBegin)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(94,
							"A[A>=VarBegin] cMul x[x==Value_t(0)] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lfj;
					}
					goto Default3;
				default: Default3:;
					A = ByteCodePtr[-1];
					if(IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						switch(ByteCodePtr[-2])
						{
						case cImmed:
							y = ImmedPtr[-1];
							FP_TRACE_BYTECODE_OPTIMIZATION(93,
								"y A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t(0)] cMul",
								"[x] cMul",
								"    with x = " << x
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lfk;
						default:
							B = ByteCodePtr[-2];
							if(IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								switch(ByteCodePtr[-3])
								{
								case cImmed:
									y = ImmedPtr[-1];
									FP_TRACE_BYTECODE_OPTIMIZATION(97,
										"y B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t(0)] cMul",
										"A [x] cMul",
										"    with x = " << x
										    << ", A = " << FP_TRACE_OPCODENAME(A)
										    << ", B = " << FP_TRACE_OPCODENAME(B)
										    << ", y = " << y
										    << "\n");
									/* opcode = cMul; */ // redundant, matches cMul @ 0
									goto Lfl;
								default:
									C = ByteCodePtr[-3];
									if(C>=VarBegin)
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(95,
											"C[C>=VarBegin] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t(0)] cMul",
											"A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lfm;
									}
									if(IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C))
									{
										FP_TRACE_BYTECODE_OPTIMIZATION(96,
											"C[IsUnaryOpcode(C)&&!HasInvalidRangesOpcode(C)] B[IsBinaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t(0)] cMul",
											"B A [x] cMul",
											"    with x = " << x
											    << ", A = " << FP_TRACE_OPCODENAME(A)
											    << ", B = " << FP_TRACE_OPCODENAME(B)
											    << ", C = " << FP_TRACE_OPCODENAME(C)
											    << "\n");
										/* opcode = cMul; */ // redundant, matches cMul @ 0
										goto Lfn;
									}
								}
							}
							if(B>=VarBegin)
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(91,
									"B[B>=VarBegin] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t(0)] cMul",
									"[x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lfj;
							}
							if(IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(92,
									"B[IsUnaryOpcode(B)&&!HasInvalidRangesOpcode(B)] A[IsBinaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t(0)] cMul",
									"A [x] cMul",
									"    with x = " << x
									    << ", A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << "\n");
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lfo;
							}
						}
					}
					if(A>=VarBegin)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(89,
							"A[A>=VarBegin] x[x==Value_t(0)] cMul",
							"[x]",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						goto Lfp;
					}
					if(IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(90,
							"A[IsUnaryOpcode(A)&&!HasInvalidRangesOpcode(A)] x[x==Value_t(0)] cMul",
							"[x] cMul",
							"    with x = " << x
							    << ", A = " << FP_TRACE_OPCODENAME(A)
							    << "\n");
						/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lga;
					}
				}
			}
			switch(ByteCodePtr[-1])
			{
			case cAdd:
				switch(ByteCodePtr[-2])
				{
				case cDup:
					if(x+x==Value_t(1))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(154,
							"cDup[x+x==Value_t(1)] cAdd x cMul",
							"",
							"    with x = " << x << "\n");
						goto Lgb;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(155,
						"cDup cAdd x cMul",
						"[x+x] cMul",
						"    with x = " << x << "\n");
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Lgc;
				case cMul:
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(A>=VarBegin)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(243,
								"A[A>=VarBegin] y cMul cAdd x cMul",
								"[x] cMul A [y*x] cMul cAdd",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lgd;
						}
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					FP_TRACE_BYTECODE_OPTIMIZATION(242,
						"y cAdd x cMul",
						"[x] cMul [y*x] cAdd",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					goto Lge;
				}
				break;
			case cDeg:
				FP_TRACE_BYTECODE_OPTIMIZATION(106,
					"cDeg x cMul",
					"[RadiansToDegrees(x)] cMul",
					"    with x = " << x << "\n");
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Lgf;
			case cMul:
				switch(ByteCodePtr[-2])
				{
				case cAdd:
					if(ByteCodePtr[-3] == cDup)
					{
						if(x+x==Value_t(1))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(156,
								"cDup[x+x==Value_t(1)] cAdd cMul x cMul",
								"cMul",
								"    with x = " << x << "\n");
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lgg;
						}
						FP_TRACE_BYTECODE_OPTIMIZATION(157,
							"cDup cAdd cMul x cMul",
							"cMul [x+x] cMul",
							"    with x = " << x << "\n");
						/* opcode = cMul; */ // redundant, matches cMul @ 0
						goto Lgh;
					}
					break;
				case cImmed:
					y = ImmedPtr[-1];
					if((y*x)==GetRadiansToDegreesFactor<Value_t>())
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(143,
							"y[(y*x)==GetRadiansToDegreesFactor<Value_t>()] cMul x cMul",
							"cDeg",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Lcg;
					}
					if((y*x)==GetDegreesToRadiansFactor<Value_t>())
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(144,
							"y[(y*x)==GetDegreesToRadiansFactor<Value_t>()] cMul x cMul",
							"cRad",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Lch;
					}
					if(y*x==Value_t(1))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(145,
							"y[y*x==Value_t(1)] cMul x cMul",
							"",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						goto Lgi;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(146,
						"y cMul x cMul",
						"[y*x] cMul",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cMul; */ // redundant, matches cMul @ 0
					goto Lgj;
				}
				break;
			case cNeg:
				FP_TRACE_BYTECODE_OPTIMIZATION(135,
					"cNeg x cMul",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Lgk;
			case cRad:
				FP_TRACE_BYTECODE_OPTIMIZATION(107,
					"cRad x cMul",
					"[DegreesToRadians(x)] cMul",
					"    with x = " << x << "\n");
				/* opcode = cMul; */ // redundant, matches cMul @ 0
				goto Lgl;
			case cSub:
				if(ByteCodePtr[-2] == cMul)
				{
					if(ByteCodePtr[-3] == cImmed)
					{
						y = ImmedPtr[-1];
						A = ByteCodePtr[-4];
						if(A>=VarBegin)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(244,
								"A[A>=VarBegin] y cMul cSub x cMul",
								"[x] cMul A [y*x] cMul cSub",
								"    with x = " << x
								    << ", y = " << y
								    << ", A = " << FP_TRACE_OPCODENAME(A)
								    << "\n");
							goto Lgm;
						}
					}
				}
				break;
			case cImmed:
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(71,
					"y x cMul",
					"[y*x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lgn;
			}
			if(x==Value_t(1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(70,
					"x[x==Value_t(1)] cMul",
					"",
					"    with x = " << x << "\n");
				goto Lak;
			}
			if(x==Value_t(2))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(100,
					"x[x==Value_t(2)] cMul",
					"cDup cAdd",
					"    with x = " << x << "\n");
				goto Lgo;
			}
			if(x==GetRadiansToDegreesFactor<Value_t>())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(101,
					"x[x==GetRadiansToDegreesFactor<Value_t>()] cMul",
					"cDeg",
					"    with x = " << x << "\n");
				goto Lgp;
			}
			if(x==GetDegreesToRadiansFactor<Value_t>())
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(102,
					"x[x==GetDegreesToRadiansFactor<Value_t>()] cMul",
					"cRad",
					"    with x = " << x << "\n");
				goto Lha;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(137,
					"x[x==Value_t(-1)] cMul",
					"cNeg",
					"    with x = " << x << "\n");
				goto Lhb;
			}
			break;
		default: Default1:;
			A = ByteCodePtr[0];
			if(A>=VarBegin)
			{
				switch(ByteCodePtr[-1])
				{
				case cMul:
					switch(ByteCodePtr[-2])
					{
					case cNeg:
						B = ByteCodePtr[-3];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(341,
								"B[B==A] cNeg cMul A[A>=VarBegin] cMul",
								"B cSqr cMul cNeg",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-3] = B; */ // redundant, matches B @ 4
							goto Lfg;
						}
						goto Default4;
					default: Default4:;
						B = ByteCodePtr[-2];
						if(B==A)
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(332,
								"B[B==A] cMul A[A>=VarBegin] cMul",
								"B cSqr cMul",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", B = " << FP_TRACE_OPCODENAME(B)
								    << "\n");
							/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
							/* opcode = cMul; */ // redundant, matches cMul @ 0
							goto Lhc;
						}
					}
					goto Default5;
				case cNeg:
					B = ByteCodePtr[-2];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(335,
							"B[B==A] cNeg A[A>=VarBegin] cMul",
							"B cSqr cNeg",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lfh;
					}
					goto Default5;
				default: Default5:;
					B = ByteCodePtr[-1];
					if(B==A)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(329,
							"B[B==A] A[A>=VarBegin] cMul",
							"B cSqr",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-1] = B; */ // redundant, matches B @ 2
						goto Lfe;
					}
				}
			}
			if(IsUnaryOpcode(A))
			{
				B = ByteCodePtr[-1];
				if(B>=VarBegin&&data->ByteCode.size()>1)
				{
					if(ByteCodePtr[-2] == cMul)
					{
						C = ByteCodePtr[-3];
						if(C==A)
						{
							D = ByteCodePtr[-4];
							if(D==B)
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(351,
									"D[D==B] C[C==A] cMul B[B>=VarBegin&&data->ByteCode.size()>1] A[IsUnaryOpcode(A)] cMul",
									"D C cSqr cMul",
									"    with A = " << FP_TRACE_OPCODENAME(A)
									    << ", B = " << FP_TRACE_OPCODENAME(B)
									    << ", C = " << FP_TRACE_OPCODENAME(C)
									    << ", D = " << FP_TRACE_OPCODENAME(D)
									    << "\n");
								/* ByteCodePtr[-4] = D; */ // redundant, matches D @ 5
								/* ByteCodePtr[-3] = C; */ // redundant, matches C @ 4
								/* opcode = cMul; */ // redundant, matches cMul @ 0
								goto Lhd;
							}
						}
					}
				}
			}
		}
		goto Default0;
	TailCall_cNEqual:
	case cNEqual:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(217,
						"cAbs x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Lhe;
				case cSqr:
					FP_TRACE_BYTECODE_OPTIMIZATION(219,
						"cSqr x[x==Value_t(0)] cNEqual",
						"[x] cNEqual",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
					goto Lhe;
				}
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(129,
					"y x cNEqual",
					"[fp_nequal(y,x)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lhf;
			}
		}
		goto Default0;
	TailCall_cNeg:
	case cNeg:
		switch(ByteCodePtr[0])
		{
		case cMul:
			if(ByteCodePtr[-1] == cImmed)
			{
				x = ImmedPtr[0];
				FP_TRACE_BYTECODE_OPTIMIZATION(136,
					"x cMul cNeg",
					"[-x] cMul",
					"    with x = " << x << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
				goto Lhg;
			}
			break;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(199,"cNeg cNeg", "", "");
			goto Lbh;
		case cSin:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(303,
						"x cMul cSin cNeg",
						"[-x] cMul cSin",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Lhh;
				}
			}
			break;
		case cSinh:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(304,
						"x cMul cSinh cNeg",
						"[-x] cMul cSinh",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Lhi;
				}
			}
			break;
		case cTan:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(305,
						"x cMul cTan cNeg",
						"[-x] cMul cTan",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Lhj;
				}
			}
			break;
		case cTanh:
			if(ByteCodePtr[-1] == cMul)
			{
				if(ByteCodePtr[-2] == cImmed)
				{
					x = ImmedPtr[0];
					FP_TRACE_BYTECODE_OPTIMIZATION(306,
						"x cMul cTanh cNeg",
						"[-x] cMul cTanh",
						"    with x = " << x << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
					goto Lhk;
				}
			}
			break;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(68,
				"x cNeg",
				"[-x]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lhl;
		}
		goto Default0;
	TailCall_cNot:
	case cNot:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(249,"cAbs cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Lhm;
		case cAbsNot:
			A = ByteCodePtr[-1];
			if(IsLogicalOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(254,
					"A[IsLogicalOpcode(A)] cAbsNot cNot",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Lbh;
			}
			if(A!=cImmed)
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(255,
					"A[A!=cImmed] cAbsNot cNot",
					"A cAbsNotNot",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Lhn;
			}
			goto Default6;
		case cAbsNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(252,"cAbsNotNot cNot", "cAbsNot", "");
			goto Lho;
		case cEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(213,"cEqual cNot", "cNEqual", "");
			goto Lhp;
		case cGreater:
			FP_TRACE_BYTECODE_OPTIMIZATION(211,"cGreater cNot", "cLessOrEq", "");
			goto Lia;
		case cGreaterOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(212,"cGreaterOrEq cNot", "cLess", "");
			goto Lib;
		case cLess:
			FP_TRACE_BYTECODE_OPTIMIZATION(209,"cLess cNot", "cGreaterOrEq", "");
			goto Lic;
		case cLessOrEq:
			FP_TRACE_BYTECODE_OPTIMIZATION(210,"cLessOrEq cNot", "cGreater", "");
			goto Lid;
		case cNEqual:
			FP_TRACE_BYTECODE_OPTIMIZATION(214,"cNEqual cNot", "cEqual", "");
			goto Lie;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(248,"cNeg cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Lhm;
		case cNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(250,"cNot cNot", "cNotNot", "");
			goto Lif;
		case cNotNot:
			FP_TRACE_BYTECODE_OPTIMIZATION(251,"cNotNot cNot", "cNot", "");
			/* opcode = cNot; */ // redundant, matches cNot @ 0
			goto Lhm;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(85,
				"x cNot",
				"[fp_not(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lig;
		default: Default6:;
			A = ByteCodePtr[0];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(256,
					"A[IsNeverNegativeValueOpcode(A)] cNot",
					"A cAbsNot",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				goto Lih;
			}
		}
		goto Default0;
	TailCall_cOr:
	case cOr:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(131,
					"y x cOr",
					"[fp_or(x,y)]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lii;
			}
		}
		goto Default0;
	TailCall_cPow:
	case cPow:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			if(!isEvenInteger(x+x))
			{
				if(ByteCodePtr[-1] == cSqr)
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(14,
						"cSqr x[!isEvenInteger(x+x)] cPow",
						"cAbs [x+x] cPow",
						"    with x = " << x << "\n");
					/* opcode = cPow; */ // redundant, matches cPow @ 0
					goto Lij;
				}
			}
			if(IsIntegerConst(x))
			{
				switch(ByteCodePtr[-1])
				{
				case cExp:
					FP_TRACE_BYTECODE_OPTIMIZATION(35,
						"cExp x[IsIntegerConst(x)] cPow",
						"[x] cMul cExp",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					goto Lik;
				case cExp2:
					FP_TRACE_BYTECODE_OPTIMIZATION(36,
						"cExp2 x[IsIntegerConst(x)] cPow",
						"[x] cMul cExp2",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					goto Lil;
				case cPow:
					if(ByteCodePtr[-2] == cImmed)
					{
						y = ImmedPtr[-1];
						if(!IsIntegerConst(y))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(34,
								"y[!IsIntegerConst(y)] cPow x[IsIntegerConst(x)] cPow",
								"[y*x] cPow",
								"    with x = " << x
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							/* opcode = cPow; */ // redundant, matches cPow @ 0
							goto Lim;
						}
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(37,
						"cPow x[IsIntegerConst(x)] cPow",
						"[x] cMul cPow",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cPow; */ // redundant, matches cPow @ 0
					goto Lin;
				}
			}
			if(isEvenInteger(x))
			{
				switch(ByteCodePtr[-1])
				{
				case cAbs:
					FP_TRACE_BYTECODE_OPTIMIZATION(292,
						"cAbs x[isEvenInteger(x)] cPow",
						"[x] cPow",
						"    with x = " << x << "\n");
					/* ImmedPtr[0] = x; */ // redundant, matches x @ 1
					/* opcode = cPow; */ // redundant, matches cPow @ 0
					goto Lio;
				case cMul:
					if(ByteCodePtr[-2] == cAbs)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(293,
							"cAbs cMul x[isEvenInteger(x)] cPow",
							"cMul [x] cPow",
							"    with x = " << x << "\n");
						/* opcode = cPow; */ // redundant, matches cPow @ 0
						goto Lip;
					}
					break;
				}
			}
			if(x==Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(122,
					"x[x==Value_t(0)] cPow",
					"[Value_t(0)] cMul [Value_t(1)] cAdd",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lja;
			}
			if(x==Value_t(0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(175,
					"x[x==Value_t(0.5)] cPow",
					"cSqrt",
					"    with x = " << x << "\n");
				goto Ljb;
			}
			if(x==Value_t(1)/Value_t(3))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(176,
					"x[x==Value_t(1)/Value_t(3)] cPow",
					"cCbrt",
					"    with x = " << x << "\n");
				goto Ljc;
			}
			if(x==Value_t(1)/Value_t(-3))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(177,
					"x[x==Value_t(1)/Value_t(-3)] cPow",
					"cCbrt cInv",
					"    with x = " << x << "\n");
				goto Ljd;
			}
			if(x==Value_t(-0.5))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(178,
					"x[x==Value_t(-0.5)] cPow",
					"cRSqrt",
					"    with x = " << x << "\n");
				goto Lje;
			}
			if(x==Value_t(-1))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(179,
					"x[x==Value_t(-1)] cPow",
					"cInv",
					"    with x = " << x << "\n");
				goto Ljf;
			}
			switch(ByteCodePtr[-1])
			{
			case cPow:
				if(ByteCodePtr[-2] == cImmed)
				{
					y = ImmedPtr[-1];
					if(isEvenInteger(y)&&!isEvenInteger(x*y))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(13,
							"y[isEvenInteger(y)&&!isEvenInteger(x*y)] cPow x cPow",
							"cAbs [y*x] cPow",
							"    with x = " << x
							    << ", y = " << y
							    << "\n");
						/* opcode = cPow; */ // redundant, matches cPow @ 0
						goto Ljg;
					}
					FP_TRACE_BYTECODE_OPTIMIZATION(173,
						"y cPow x cPow",
						"[y*x] cPow",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
					/* opcode = cPow; */ // redundant, matches cPow @ 0
					goto Lim;
				}
				break;
			case cSqr:
				FP_TRACE_BYTECODE_OPTIMIZATION(38,
					"cSqr x cPow",
					"[x+x] cPow",
					"    with x = " << x << "\n");
				/* opcode = cPow; */ // redundant, matches cPow @ 0
				goto Ljh;
			case cImmed:
				y = ImmedPtr[-1];
				if(y!=Value_t(0)||x>=Value_t(0))
				{
					FP_TRACE_BYTECODE_OPTIMIZATION(84,
						"y[y!=Value_t(0)||x>=Value_t(0)] x cPow",
						"[fp_pow(y,x)]",
						"    with x = " << x
						    << ", y = " << y
						    << "\n");
					/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
					goto Lji;
				}
				break;
			}
			FP_TRACE_BYTECODE_OPTIMIZATION(326,
				"x cPow",
				"[DO_POWI]",
				"    with x = " << x << "\n");
			if(TryCompilePowi(x))
			  return;
		}
		goto Default0;
	TailCall_cRad:
	case cRad:
		if(ByteCodePtr[0] == cImmed)
		{
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(66,
				"x cRad",
				"[DegreesToRadians(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Ljj;
		}
		goto Default0;
	TailCall_cSin:
	case cSin:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(299,"cNeg cSin", "cSin cNeg", "");
			goto Ljk;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(58,
				"x cSin",
				"[fp_sin(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Ljl;
		}
		goto Default0;
	TailCall_cSinh:
	case cSinh:
		switch(ByteCodePtr[0])
		{
		case cAcosh:
			FP_TRACE_BYTECODE_OPTIMIZATION(308,"cAcosh cSinh", "[DO_STACKPLUS1] cSqr [Value_t(-1)] cAdd cSqrt", "");
			incStackPtr();
			--StackPtr;
			goto Ljm;
		case cAsinh:
			FP_TRACE_BYTECODE_OPTIMIZATION(192,"cAsinh cSinh", "", "");
			goto Lbh;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(300,"cNeg cSinh", "cSinh cNeg", "");
			goto Ljn;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(59,
				"x cSinh",
				"[fp_sinh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Ljo;
		}
		goto Default0;
	TailCall_cSqr:
	case cSqr:
		switch(ByteCodePtr[0])
		{
		case cAbs:
			FP_TRACE_BYTECODE_OPTIMIZATION(347,"cAbs cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Ljp;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(346,"cNeg cSqr", "cSqr", "");
			/* opcode = cSqr; */ // redundant, matches cSqr @ 0
			goto Ljp;
		case cSqrt:
			A = ByteCodePtr[-1];
			if(IsNeverNegativeValueOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(181,
					"A[IsNeverNegativeValueOpcode(A)] cSqrt cSqr",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
				goto Lbh;
			}
			break;
		}
		goto Default0;
	TailCall_cSqrt:
	case cSqrt:
		switch(ByteCodePtr[0])
		{
		case cSqr:
			FP_TRACE_BYTECODE_OPTIMIZATION(15,"cSqr cSqrt", "cAbs", "");
			goto Lka;
		case cImmed:
			x = ImmedPtr[0];
			if(x>=Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(60,
					"x[x>=Value_t(0)] cSqrt",
					"[fp_sqrt(x)]",
					"    with x = " << x << "\n");
				/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
				goto Lkb;
			}
			break;
		}
		goto Default0;
	TailCall_cSub:
	case cSub:
		switch(ByteCodePtr[0])
		{
		case cDup:
			FP_TRACE_BYTECODE_OPTIMIZATION(152,"cDup cSub", "[Value_t(0)] cMul", "");
			goto Lkc;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(205,"cNeg cSub", "cAdd", "");
			goto Lkd;
		case cImmed:
			x = ImmedPtr[0];
			if(x==Value_t(0))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(77,
					"x[x==Value_t(0)] cSub",
					"",
					"    with x = " << x << "\n");
				goto Lak;
			}
			if(ByteCodePtr[-1] == cImmed)
			{
				y = ImmedPtr[-1];
				FP_TRACE_BYTECODE_OPTIMIZATION(78,
					"y x cSub",
					"[y-x]",
					"    with x = " << x
					    << ", y = " << y
					    << "\n");
				/* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
				goto Lke;
			}
			FP_TRACE_BYTECODE_OPTIMIZATION(168,
				"x cSub",
				"[-x] cAdd",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lkf;
		}
		goto Default0;
	TailCall_cTan:
	case cTan:
		switch(ByteCodePtr[0])
		{
		case cAtan2:
			FP_TRACE_BYTECODE_OPTIMIZATION(196,"cAtan2 cTan", "cDiv", "");
			goto Lff;
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(301,"cNeg cTan", "cTan cNeg", "");
			goto Lkg;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(62,
				"x cTan",
				"[fp_tan(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lkh;
		}
		goto Default0;
	TailCall_cTanh:
	case cTanh:
		switch(ByteCodePtr[0])
		{
		case cNeg:
			FP_TRACE_BYTECODE_OPTIMIZATION(302,"cNeg cTanh", "cTanh cNeg", "");
			goto Lki;
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(63,
				"x cTanh",
				"[fp_tanh(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lkj;
		}
		goto Default0;
	TailCall_cTrunc:
	case cTrunc:
		switch(ByteCodePtr[0])
		{
		case cImmed:
			x = ImmedPtr[0];
			FP_TRACE_BYTECODE_OPTIMIZATION(64,
				"x cTrunc",
				"[fp_trunc(x)]",
				"    with x = " << x << "\n");
			/* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
			goto Lkk;
		default:
			A = ByteCodePtr[0];
			if(IsAlwaysIntegerOpcode(A))
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(259,
					"A[IsAlwaysIntegerOpcode(A)] cTrunc",
					"A",
					"    with A = " << FP_TRACE_OPCODENAME(A) << "\n");
				/* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
				return;
			}
		}
		goto Default0;
	default: Default0:;
		A = opcode;
		if(IsComparisonOpcode(A))
		{
			if(ByteCodePtr[0] == cImmed)
			{
				x = ImmedPtr[0];
				switch(ByteCodePtr[-1])
				{
				case cAdd:
					if(ByteCodePtr[-2] == cImmed)
					{
						y = ImmedPtr[-1];
						FP_TRACE_BYTECODE_OPTIMIZATION(221,
							"y cAdd x A[IsComparisonOpcode(A)]",
							"[x-y] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << ", y = " << y
							    << "\n");
						/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
						goto Lkl;
					}
					break;
				case cAtan:
					if(fp_abs(x)<const_pi<Value_t>()*Value_t(0.5))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(237,
							"cAtan[fp_abs(x)<const_pi<Value_t>()*Value_t(0.5)] x A[IsComparisonOpcode(A)]",
							"[fp_tan(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Lkm;
					}
					break;
				case cExp:
					if(x>Value_t(0))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(227,
							"cExp[x>Value_t(0)] x A[IsComparisonOpcode(A)]",
							"[fp_log(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Lkn;
					}
					break;
				case cExp2:
					if(x>Value_t(0))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(228,
							"cExp2[x>Value_t(0)] x A[IsComparisonOpcode(A)]",
							"[fp_log2(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Lko;
					}
					break;
				case cLog:
					B = ByteCodePtr[-2];
					if(IsNeverNegativeValueOpcode(B))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(230,
							"B[IsNeverNegativeValueOpcode(B)] cLog x A[IsComparisonOpcode(A)]",
							"B [fp_exp(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lkp;
					}
					break;
				case cLog10:
					B = ByteCodePtr[-2];
					if(IsNeverNegativeValueOpcode(B))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(232,
							"B[IsNeverNegativeValueOpcode(B)] cLog10 x A[IsComparisonOpcode(A)]",
							"B [fp_pow(Value_t(10),x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Lla;
					}
					break;
				case cLog2:
					B = ByteCodePtr[-2];
					if(IsNeverNegativeValueOpcode(B))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(231,
							"B[IsNeverNegativeValueOpcode(B)] cLog2 x A[IsComparisonOpcode(A)]",
							"B [fp_exp2(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << "\n");
						/* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
						goto Llb;
					}
					break;
				case cMul:
					if(ByteCodePtr[-2] == cImmed)
					{
						y = ImmedPtr[-1];
						if(y>Value_t(0))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(223,
								"y[y>Value_t(0)] cMul x A[IsComparisonOpcode(A)]",
								"[x/y] A",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", x = " << x
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							goto Llc;
						}
						if(y<Value_t(0))
						{
							FP_TRACE_BYTECODE_OPTIMIZATION(224,
								"y[y<Value_t(0)] cMul x A[IsComparisonOpcode(A)]",
								"[x/y] {OppositeComparisonOpcode(A)}",
								"    with A = " << FP_TRACE_OPCODENAME(A)
								    << ", x = " << x
								    << ", y = " << y
								    << "\n");
							/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
							goto Lld;
						}
					}
					break;
				case cNeg:
					FP_TRACE_BYTECODE_OPTIMIZATION(222,
						"cNeg x A[IsComparisonOpcode(A)]",
						"[-x] {OppositeComparisonOpcode(A)}",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", x = " << x
						    << "\n");
					goto Lle;
				case cPow:
					if(x>Value_t(0))
					{
						if(ByteCodePtr[-2] == cImmed)
						{
							y = ImmedPtr[-1];
							if(y>Value_t(0))
							{
								FP_TRACE_BYTECODE_OPTIMIZATION(225,
									"y[y>Value_t(0)] cPow[x>Value_t(0)] x A[IsComparisonOpcode(A)]",
									"[fp_pow(x,1/y)] A",
									"    with A = " << FP_TRACE_OPCODENAME(A)
									    << ", x = " << x
									    << ", y = " << y
									    << "\n");
								/* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
								goto Llf;
							}
						}
					}
					break;
				case cSinh:
					FP_TRACE_BYTECODE_OPTIMIZATION(238,
						"cSinh x A[IsComparisonOpcode(A)]",
						"[fp_asinh(x)] A",
						"    with A = " << FP_TRACE_OPCODENAME(A)
						    << ", x = " << x
						    << "\n");
					goto Llg;
				case cSqr:
					if(x>Value_t(0))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(226,
							"cSqr[x>Value_t(0)] x A[IsComparisonOpcode(A)]",
							"cAbs [fp_sqrt(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Llh;
					}
					break;
				case cTanh:
					if(fp_abs(x)<Value_t(1))
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(239,
							"cTanh[fp_abs(x)<Value_t(1)] x A[IsComparisonOpcode(A)]",
							"[fp_atanh(x)] A",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", x = " << x
							    << "\n");
						goto Lli;
					}
					break;
				}
			}
		}
		if(A>=VarBegin&&data->ByteCode.size()>0)
		{
			B = ByteCodePtr[0];
			if(B==A)
			{
				FP_TRACE_BYTECODE_OPTIMIZATION(349,
					"B[B==A] A[A>=VarBegin&&data->ByteCode.size()>0]",
					"B cDup",
					"    with A = " << FP_TRACE_OPCODENAME(A)
					    << ", B = " << FP_TRACE_OPCODENAME(B)
					    << "\n");
				/* ByteCodePtr[0] = B; */ // redundant, matches B @ 1
				goto Llj;
			}
		}
		if(IsUnaryOpcode(A))
		{
			B = ByteCodePtr[0];
			if(B>=VarBegin&&data->ByteCode.size()>1)
			{
				C = ByteCodePtr[-1];
				if(C==A)
				{
					D = ByteCodePtr[-2];
					if(D==B)
					{
						FP_TRACE_BYTECODE_OPTIMIZATION(350,
							"D[D==B] C[C==A] B[B>=VarBegin&&data->ByteCode.size()>1] A[IsUnaryOpcode(A)]",
							"D C cDup",
							"    with A = " << FP_TRACE_OPCODENAME(A)
							    << ", B = " << FP_TRACE_OPCODENAME(B)
							    << ", C = " << FP_TRACE_OPCODENAME(C)
							    << ", D = " << FP_TRACE_OPCODENAME(D)
							    << "\n");
						/* ByteCodePtr[-2] = D; */ // redundant, matches D @ 3
						/* ByteCodePtr[-1] = C; */ // redundant, matches C @ 2
						goto Llk;
					}
				}
			}
		}
	}
	goto Lll;
Laa: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
Llm: goto TailCall_cAbs;
Lab: ImmedPtr[0] = fp_abs(x); return;
Lac: ImmedPtr[0] = fp_acos(x); return;
Lad: ImmedPtr[0] = fp_acosh(x); return;
Lae: data->Immed.push_back(Value_t(4));
     ByteCodePtr[-2] = cImmed;
     ByteCodePtr -= 2;
Lln: data->ByteCode.pop_back();
     data->ByteCode.pop_back();
Llo: opcode = cMul;
Llp: FP_ReDefinePointers();
Lma: goto TailCall_cMul;
Laf: data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cMul);
     data->Immed.push_back(Value_t(4));
Lmb: data->ByteCode.push_back(cImmed); goto Llo;
Lag: ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     ByteCodePtr -= 2;
     data->ByteCode.pop_back();
Lmc: data->ByteCode.pop_back();
Lmd: opcode = cMul; goto Lma;
Lah: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cSub;
Lme: goto TailCall_cSub;
Lai: ImmedPtr[-1] = y+x;
     data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
Lmf: FP_ReDefinePointers();
Lmg: goto TailCall_cAdd;
Laj: ImmedPtr[-1] = y+x;
Lak: data->Immed.pop_back();
Lbh: data->ByteCode.pop_back(); return;
Lal: ImmedPtr[-1] = fp_and(x,y); goto Lak;
Lam: ImmedPtr[0] = fp_asin(x); return;
Lan: ImmedPtr[0] = fp_asinh(x); return;
Lao: ImmedPtr[0] = fp_atan(x); return;
Lap: ImmedPtr[-1] = fp_atan2(y,x); goto Lak;
Lba: ImmedPtr[0] = fp_atanh(x); return;
Lbb: ImmedPtr[0] = fp_cbrt(x); return;
Lbc: data->ByteCode.pop_back();
     AddFunctionOpcode(cFloor);
Lmh: opcode = cNeg;
     FP_ReDefinePointers();
     goto TailCall_cNeg;
Lbd: ImmedPtr[0] = fp_ceil(x); return;
Lbe: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
Lmi: goto TailCall_cCos;
Lbf: ImmedPtr[0] = fp_cos(x); return;
Lbg: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     goto TailCall_cCosh;
Lbi: data->ByteCode.pop_back();
     AddFunctionOpcode(cSqr);
     data->Immed.push_back(Value_t(1));
Lmj: data->ByteCode.push_back(cImmed);
     AddFunctionOpcode(cAdd);
Lmk: opcode = cSqrt;
     FP_ReDefinePointers();
     goto TailCall_cSqrt;
Lbj: ImmedPtr[0] = fp_cosh(x); return;
Lbk: ImmedPtr[0] = RadiansToDegrees(x); return;
Lbl: data->ByteCode.pop_back();
     AddFunctionOpcode(cSec); goto Llo;
Lbm: data->ByteCode.pop_back();
     AddFunctionOpcode(cTan); goto Llo;
Lbn: data->ByteCode.pop_back();
     AddFunctionOpcode(cSin); goto Llo;
Lbo: data->Immed.push_back(Value_t(0));
     ByteCodePtr[0] = cImmed;
Lml: AddFunctionOpcode(cMul);
     data->Immed.push_back(Value_t(1));
Lmm: data->ByteCode.push_back(cImmed);
Lmn: opcode = cAdd; goto Lmf;
Lbp: data->ByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     AddFunctionOpcode(cExp); goto Llo;
Lca: data->ByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     AddFunctionOpcode(cExp2); goto Llo;
Lcb: ByteCodePtr -= 1; goto Lmc;
Lcc: data->ByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     AddFunctionOpcode(cPow); goto Llo;
Lcd: data->ByteCode.pop_back();
     AddFunctionOpcode(cCos); goto Llo;
Lce: data->ByteCode.pop_back();
     AddFunctionOpcode(cCsc); goto Llo;
Lcf: data->ByteCode.pop_back();
     AddFunctionOpcode(cCot); goto Llo;
Lcg: data->Immed.pop_back();
     data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
Lmo: data->ByteCode.pop_back();
     opcode = cDeg;
     FP_ReDefinePointers();
     goto TailCall_cDeg;
Lch: data->Immed.pop_back();
     data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
Lmp: data->ByteCode.pop_back();
     opcode = cRad;
     FP_ReDefinePointers();
     goto TailCall_cRad;
Lci: ImmedPtr[-1] = y/x;
     data->Immed.pop_back(); goto Lln;
Lcj: ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     ByteCodePtr -= 1;
     data->ByteCode.pop_back();
Lna: goto TailCall_cDiv;
Lck: ImmedPtr[-1] = y/x; goto Lak;
Lcl: ImmedPtr[0] = Value_t(1)/x; goto Lmd;
Lcm: ByteCodePtr[-1] = cImmed;
     ByteCodePtr -= 1;
     data->ByteCode.pop_back();
Lnb: goto TailCall_cEqual;
Lcn: ImmedPtr[-1] = fp_equal(y,x); goto Lak;
Lco: data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cExp);
     data->Immed.push_back(fp_exp(x)); goto Lmb;
Lcp: ImmedPtr[0] = fp_exp(x); return;
Lda: data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cExp2);
     data->Immed.push_back(fp_exp2(x)); goto Lmb;
Ldb: ImmedPtr[0] = fp_exp2(x); return;
Ldc: data->Immed.push_back(fp_log(Value_t(2)));
     data->ByteCode.push_back(cImmed);
Lnc: AddFunctionOpcode(cMul);
     opcode = cExp;
     FP_ReDefinePointers();
     goto TailCall_cExp;
Ldd: data->ByteCode.pop_back();
     AddFunctionOpcode(cCeil); goto Lmh;
Lde: ImmedPtr[0] = fp_floor(x); return;
Ldf: ImmedPtr[-1] = fp_less(x,y); goto Lak;
Ldg: ImmedPtr[0] = Value_t(0.5)/x;
     ByteCodePtr[-1] = cImmed;
     data->ByteCode.pop_back();
     AddFunctionOpcode(cMul);
Lnd: AddFunctionOpcode(cNotNot); return;
Ldh: ImmedPtr[-1] = fp_lessOrEq(x,y); goto Lak;
Ldi: ImmedPtr[0] = fp_int(x); return;
Ldj: data->ByteCode.pop_back();
     AddFunctionOpcode(cSec); return;
Ldk: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cTan;
Lne: goto TailCall_cTan;
Ldl: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cSin;
Lnf: goto TailCall_cSin;
Ldm: data->ByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     opcode = cPow;
Lng: FP_ReDefinePointers();
Lnh: goto TailCall_cPow;
Ldn: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cCos; goto Lmi;
Ldo: data->ByteCode.pop_back();
     AddFunctionOpcode(cCsc); return;
Ldp: data->ByteCode.pop_back();
     AddFunctionOpcode(cRSqrt); return;
Lea: data->ByteCode.pop_back();
     AddFunctionOpcode(cCot); return;
Leb: ImmedPtr[0] = Value_t(1)/x; return;
Lec: ImmedPtr[0] = Value_t(0.5)/x;
     ByteCodePtr[-1] = cImmed;
     data->ByteCode.pop_back();
     AddFunctionOpcode(cMul);
     opcode = cNot;
     FP_ReDefinePointers();
Lni: goto TailCall_cNot;
Led: ImmedPtr[-1] = fp_less(y,x); goto Lak;
Lee: ImmedPtr[-1] = fp_lessOrEq(y,x); goto Lak;
Lef: data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cLog);
     data->Immed.push_back(fp_log(x)); goto Lmm;
Leg: data->ByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     AddFunctionOpcode(cLog);
Lnj: data->ByteCode.push_back(cDup); goto Lmn;
Leh: ImmedPtr[0] = fp_log(x); return;
Lei: data->Immed.push_back(fp_log10(const_e<Value_t>()));
Lnk: ByteCodePtr[0] = cImmed; goto Llo;
Lej: data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cLog10);
     data->Immed.push_back(fp_log10(x)); goto Lmm;
Lek: data->ByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     AddFunctionOpcode(cLog10); goto Lnj;
Lel: ImmedPtr[0] = fp_log10(x); return;
Lem: data->Immed.push_back(fp_log2(const_e<Value_t>())); goto Lnk;
Len: data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cLog2);
     data->Immed.push_back(fp_log2(x)); goto Lmm;
Leo: data->ByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     AddFunctionOpcode(cLog2); goto Lnj;
Lep: ImmedPtr[0] = fp_log2(x); return;
Lfa: ImmedPtr[-1] = fp_max(x,y); goto Lak;
Lfb: ImmedPtr[-1] = fp_min(x,y); goto Lak;
Lfc: ImmedPtr[-1] = fp_mod(y,x); goto Lak;
Lfd: ImmedPtr[-1] = x;
     data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(A);
Lnl: AddFunctionOpcode(cMul);
     data->Immed.push_back(y*x); goto Lmm;
Lfe: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cSqr;
Lnm: goto TailCall_cSqr;
Lff: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cDiv; goto Lna;
Lfg: data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cSqr);
     AddFunctionOpcode(cMul); goto Lmh;
Lfh: data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cSqr); goto Lmh;
Lfi: ImmedPtr[0] = x+Value_t(1);
     ByteCodePtr[-2] = cImmed;
     ByteCodePtr -= 2;
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     opcode = cPow; goto Lnh;
Lfj: ByteCodePtr[-2] = cImmed;
     ByteCodePtr -= 2;
     data->ByteCode.pop_back();
Lnn: data->ByteCode.pop_back(); goto Lma;
Lfk: ImmedPtr[-1] = x;
Lno: data->Immed.pop_back();
Lnp: data->ByteCode.pop_back();
     data->ByteCode.pop_back(); goto Llp;
Lfl: data->Immed.pop_back();
Lfm: data->Immed.pop_back();
     data->ByteCode.pop_back();
Loa: data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
Lob: AddFunctionOpcode(A);
     data->Immed.push_back(x);
Loc: data->ByteCode.push_back(cImmed); goto Llp;
Lfn: data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(B); goto Lob;
Lfo: data->Immed.pop_back(); goto Loa;
Lfp: ByteCodePtr[-1] = cImmed; goto Lbh;
Lga: ByteCodePtr[-1] = cImmed;
     ByteCodePtr -= 1; goto Lnn;
Lgb: data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back(); goto Lbh;
Lgc: ImmedPtr[0] = x+x; goto Lfj;
Lgd: ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     data->Immed.push_back(y*x);
     data->ByteCode.push_back(cImmed);
     AddFunctionOpcode(cMul); goto Lmn;
Lge: ImmedPtr[-1] = x;
     data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back(); goto Lnl;
Lgf: ImmedPtr[0] = RadiansToDegrees(x); goto Lga;
Lgg: data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back(); goto Lnp;
Lgh: data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cMul);
     data->Immed.push_back(x+x); goto Loc;
Lgi: data->Immed.pop_back(); goto Lgb;
Lgj: ImmedPtr[-1] = y*x; goto Lno;
Lgk: ImmedPtr[0] = -x; goto Lga;
Lgl: ImmedPtr[0] = DegreesToRadians(x); goto Lga;
Lgm: ImmedPtr[-1] = x;
     ByteCodePtr[-4] = cImmed;
     data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cMul);
     AddFunctionOpcode(A);
     data->Immed.push_back(y*x);
     data->ByteCode.push_back(cImmed);
     AddFunctionOpcode(cMul);
     opcode = cSub;
     FP_ReDefinePointers(); goto Lme;
Lgn: ImmedPtr[-1] = y*x; goto Lak;
Lgo: ByteCodePtr[0] = cDup;
     ImmedPtr -= 1;
     data->Immed.pop_back();
Lod: opcode = cAdd; goto Lmg;
Lgp: data->Immed.pop_back(); goto Lmo;
Lha: data->Immed.pop_back(); goto Lmp;
Lhb: data->Immed.pop_back();
     data->ByteCode.pop_back(); goto Lmh;
Lhc: data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cSqr); goto Llp;
Lhd: data->ByteCode.pop_back(); goto Lhc;
Lhe: ByteCodePtr[-1] = cImmed;
     ByteCodePtr -= 1;
     data->ByteCode.pop_back();
Loe: goto TailCall_cNEqual;
Lhf: ImmedPtr[-1] = fp_nequal(y,x); goto Lak;
Lhg: ImmedPtr[0] = -x; goto Lcb;
Lhh: ImmedPtr[0] = -x;
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cMul);
     opcode = cSin;
     FP_ReDefinePointers(); goto Lnf;
Lhi: ImmedPtr[0] = -x;
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cMul);
     opcode = cSinh;
     FP_ReDefinePointers();
     goto TailCall_cSinh;
Lhj: ImmedPtr[0] = -x;
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cMul);
     opcode = cTan;
     FP_ReDefinePointers(); goto Lne;
Lhk: ImmedPtr[0] = -x;
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cMul);
     opcode = cTanh;
     FP_ReDefinePointers();
     goto TailCall_cTanh;
Lhl: ImmedPtr[0] = -x; return;
Lhm: ByteCodePtr -= 1;
     data->ByteCode.pop_back(); goto Lni;
Lhn: data->ByteCode.pop_back();
     AddFunctionOpcode(cAbsNotNot); return;
Lho: data->ByteCode.pop_back();
Lih: AddFunctionOpcode(cAbsNot); return;
Lhp: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cNEqual; goto Loe;
Lia: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cLessOrEq;
     goto TailCall_cLessOrEq;
Lib: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cLess;
     goto TailCall_cLess;
Lic: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cGreaterOrEq;
     goto TailCall_cGreaterOrEq;
Lid: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cGreater;
     goto TailCall_cGreater;
Lie: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cEqual; goto Lnb;
Lif: data->ByteCode.pop_back(); goto Lnd;
Lig: ImmedPtr[0] = fp_not(x); return;
Lii: ImmedPtr[-1] = fp_or(x,y); goto Lak;
Lij: data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     data->Immed.push_back(x+x);
Lof: data->ByteCode.push_back(cImmed); goto Lng;
Lik: ByteCodePtr[-1] = cImmed;
     data->ByteCode.pop_back(); goto Lnc;
Lil: ByteCodePtr[-1] = cImmed;
     data->ByteCode.pop_back();
     AddFunctionOpcode(cMul);
     opcode = cExp2;
     FP_ReDefinePointers();
     goto TailCall_cExp2;
Lim: ImmedPtr[-1] = y*x;
     data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back(); goto Lng;
Lin: ByteCodePtr[-1] = cImmed;
     data->ByteCode.pop_back();
     AddFunctionOpcode(cMul); goto Lng;
Lio: ByteCodePtr[-1] = cImmed;
     ByteCodePtr -= 1;
     data->ByteCode.pop_back(); goto Lnh;
Lip: data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cMul);
     data->Immed.push_back(x); goto Lof;
Lja: ImmedPtr[0] = Value_t(0); goto Lml;
Ljb: data->Immed.pop_back();
     data->ByteCode.pop_back(); goto Lmk;
Ljc: data->Immed.pop_back();
     data->ByteCode.pop_back();
     opcode = cCbrt;
     FP_ReDefinePointers();
     goto TailCall_cCbrt;
Ljd: data->Immed.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cCbrt);
Log: opcode = cInv;
     FP_ReDefinePointers();
     goto TailCall_cInv;
Lje: data->Immed.pop_back(); goto Ldp;
Ljf: data->Immed.pop_back();
     data->ByteCode.pop_back(); goto Log;
Ljg: data->Immed.pop_back();
     data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     data->Immed.push_back(y*x); goto Lof;
Ljh: ImmedPtr[0] = x+x; goto Lio;
Lji: ImmedPtr[-1] = fp_pow(y,x); goto Lak;
Ljj: ImmedPtr[0] = DegreesToRadians(x); return;
Ljk: data->ByteCode.pop_back();
     AddFunctionOpcode(cSin); goto Lmh;
Ljl: ImmedPtr[0] = fp_sin(x); return;
Ljm: data->ByteCode.pop_back();
     AddFunctionOpcode(cSqr);
     data->Immed.push_back(Value_t(-1)); goto Lmj;
Ljn: data->ByteCode.pop_back();
     AddFunctionOpcode(cSinh); goto Lmh;
Ljo: ImmedPtr[0] = fp_sinh(x); return;
Ljp: ByteCodePtr -= 1;
     data->ByteCode.pop_back(); goto Lnm;
Lka: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cAbs; goto Llm;
Lkb: ImmedPtr[0] = fp_sqrt(x); return;
Lkc: data->Immed.push_back(Value_t(0)); goto Lnk;
Lkd: ByteCodePtr -= 1;
     data->ByteCode.pop_back(); goto Lod;
Lke: ImmedPtr[-1] = y-x; goto Lak;
Lkf: ImmedPtr[0] = -x; goto Lod;
Lkg: data->ByteCode.pop_back();
     AddFunctionOpcode(cTan); goto Lmh;
Lkh: ImmedPtr[0] = fp_tan(x); return;
Lki: data->ByteCode.pop_back();
     AddFunctionOpcode(cTanh); goto Lmh;
Lkj: ImmedPtr[0] = fp_tanh(x); return;
Lkk: ImmedPtr[0] = fp_trunc(x); return;
Lkl: ImmedPtr[-1] = x-y;
Loh: data->Immed.pop_back();
     data->ByteCode.pop_back();
Loi: data->ByteCode.pop_back();
Loj: AddFunctionOpcode(A); return;
Lkm: ImmedPtr[0] = fp_tan(x);
Lok: ByteCodePtr[-1] = cImmed; goto Loi;
Lkn: ImmedPtr[0] = fp_log(x); goto Lok;
Lko: ImmedPtr[0] = fp_log2(x); goto Lok;
Lkp: ImmedPtr[0] = fp_exp(x); goto Lok;
Lla: ImmedPtr[0] = fp_pow(Value_t(10),x); goto Lok;
Llb: ImmedPtr[0] = fp_exp2(x); goto Lok;
Llc: ImmedPtr[-1] = x/y; goto Loh;
Lld: ImmedPtr[-1] = x/y;
     data->Immed.pop_back();
     data->ByteCode.pop_back();
Lol: data->ByteCode.pop_back();
     AddFunctionOpcode(OppositeComparisonOpcode(A)); return;
Lle: ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed; goto Lol;
Llf: ImmedPtr[-1] = fp_pow(x,1/y); goto Loh;
Llg: ImmedPtr[0] = fp_asinh(x); goto Lok;
Llh: data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     data->Immed.push_back(fp_sqrt(x));
     data->ByteCode.push_back(cImmed); goto Loj;
Lli: ImmedPtr[0] = fp_atanh(x); goto Lok;
Llj: data->ByteCode.push_back(cDup); return;
Llk: ByteCodePtr[0] = cDup; return;
Lll: data->ByteCode.push_back(opcode); return;
return;
// This list of dummy gotos is here to inhibit
// compiler warnings on unused labels
goto TailCall_cAcos;goto TailCall_cAcosh;goto TailCall_cAnd;
goto TailCall_cAsin;goto TailCall_cAsinh;goto TailCall_cAtan;
goto TailCall_cAtan2;goto TailCall_cAtanh;goto TailCall_cCeil;
goto TailCall_cFloor;goto TailCall_cInt;goto TailCall_cLog;
goto TailCall_cLog10;goto TailCall_cLog2;goto TailCall_cMax;
goto TailCall_cMin;goto TailCall_cMod;goto TailCall_cOr;
goto TailCall_cRad;goto TailCall_cSin;goto TailCall_cSinh;
goto TailCall_cSqrt;goto TailCall_cSub;goto TailCall_cTan;
goto TailCall_cTanh;goto TailCall_cTrunc;
#endif

#undef FP_ReDefinePointers
#undef FP_TRACE_BYTECODE_OPTIMIZATION
#undef FP_TRACE_OPCODENAME
