/* Function Parser for C++ v3.3.2   

   Note: This file contains generated code and is thus not
   intended to be to be modified by hand. It was generated by
   fpoptimizer/bytecoderules_parser which is available in the
   development package.

   Note: You don't need to add this file to your project. It's
   enough for it to be in the same directory as fparser.cc. This
   file is internally #included by fparser.cc.
*/

#define FP_TRACE_BYTECODE_OPTIMIZATION(from,to)
//#define FP_TRACE_BYTECODE_OPTIMIZATION(from,to) std::cout << "Changing \"" from "\"\n    into \"" to "\"\n"
  unsigned* ByteCodePtr;
  Value_t*   ImmedPtr;
#ifdef _GLIBCXX_DEBUG
  /* Shut up glibc warnings */
  #define FP_ReDefinePointers() \
    ByteCodePtr = !data->ByteCode.empty() ? &data->ByteCode[0] + data->ByteCode.size() - 1 : 0; \
    ImmedPtr    = !data->Immed.empty()    ? &data->Immed[0]    + data->Immed.size()    - 1 : 0;
#else
  /* Trust me, I know what I am doing */
  #define FP_ReDefinePointers() \
    ByteCodePtr = &data->ByteCode[data->ByteCode.size() - 1]; \
    ImmedPtr    = &data->Immed   [data->Immed.size()    - 1];
#endif
  FP_ReDefinePointers();
  Value_t x;
  Value_t y;
  unsigned A;
  switch(opcode)
  {
  TailCall_cPow:
    case cPow:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          if(!isEvenInteger(x*Value_t(2)))
          {
            switch(ByteCodePtr[-1])
            {
              case cSqr:
                FP_TRACE_BYTECODE_OPTIMIZATION("cSqr x[!isEvenInteger(x*Value_t(2))] cPow", "cAbs [x*Value_t(2)] cPow");
                /* opcode = cPow; */ // redundant, matches cPow @ 0
                goto Laa;
            }
          }
          if(IsIntegerConst(x))
          {
            switch(ByteCodePtr[-1])
            {
              case cPow:
                switch(ByteCodePtr[-2])
                {
                  case cImmed:
                    y = ImmedPtr[-1];
                    if(!IsIntegerConst(y))
                    {
                      FP_TRACE_BYTECODE_OPTIMIZATION("y[!IsIntegerConst(y)] cPow x[IsIntegerConst(x)] cPow", "[y*x] cPow");
                      /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                      /* ByteCodePtr[-1] = cPow; */ // redundant, matches cPow @ 2
                      goto Lab;
                    }
                    break;
                }
                FP_TRACE_BYTECODE_OPTIMIZATION("cPow x[IsIntegerConst(x)] cPow", "[x] cMul cPow");
                /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                /* opcode = cPow; */ // redundant, matches cPow @ 0
                goto Lac;
#if(!FP_INT_VERSION)
              case cExp:
#if(!FP_INT_VERSION)
                FP_TRACE_BYTECODE_OPTIMIZATION("cExp x[IsIntegerConst(x)] cPow", "[x] cMul cExp");
                /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                goto Lad;
#endif
                break;
#endif
#if(!FP_INT_VERSION)
              case cExp2:
#if(!FP_INT_VERSION)
                FP_TRACE_BYTECODE_OPTIMIZATION("cExp2 x[IsIntegerConst(x)] cPow", "[x] cMul cExp2");
                /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                goto Lae;
#endif
                break;
#endif
            }
          }
          if(isEvenInteger(x))
          {
            switch(ByteCodePtr[-1])
            {
              case cAbs:
                FP_TRACE_BYTECODE_OPTIMIZATION("cAbs x[isEvenInteger(x)] cPow", "[x] cPow");
                /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                /* opcode = cPow; */ // redundant, matches cPow @ 0
                goto Laf;
              case cMul:
                switch(ByteCodePtr[-2])
                {
                  case cAbs:
                    FP_TRACE_BYTECODE_OPTIMIZATION("cAbs cMul x[isEvenInteger(x)] cPow", "cMul [x] cPow");
                    /* opcode = cPow; */ // redundant, matches cPow @ 0
                    goto Lag;
                }
                break;
            }
          }
#if(!FP_INT_VERSION)
          if(x==Value_t(0.5))
          {
#if(!FP_INT_VERSION)
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x==Value_t(0.5)] cPow", "cSqrt");
            goto Lah;
#endif
          }
#endif
#if(!FP_INT_VERSION)
          if(x==Value_t(1)/Value_t(3))
          {
#if(!FP_INT_VERSION)
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x==Value_t(1)/Value_t(3)] cPow", "cCbrt");
            goto Lai;
#endif
          }
#endif
#if(!FP_INT_VERSION)
          if(x==Value_t(1)/Value_t(-3))
          {
#if(!FP_INT_VERSION)
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x==Value_t(1)/Value_t(-3)] cPow", "cCbrt cInv");
            goto Laj;
#endif
          }
#endif
#if(!FP_INT_VERSION)
          if(x==Value_t(-0.5))
          {
#if(!FP_INT_VERSION)
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x==Value_t(-0.5)] cPow", "cRSqrt");
            goto Lak;
#endif
          }
#endif
          if(x==Value_t(-1))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x==Value_t(-1)] cPow", "cInv");
            goto Lal;
          }
          switch(ByteCodePtr[-1])
          {
            case cPow:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  if(isEvenInteger(y)&&!isEvenInteger(x*y))
                  {
                    FP_TRACE_BYTECODE_OPTIMIZATION("y[isEvenInteger(y)&&!isEvenInteger(x*y)] cPow x cPow", "cAbs [y*x] cPow");
                    /* opcode = cPow; */ // redundant, matches cPow @ 0
                    goto Lam;
                  }
                  FP_TRACE_BYTECODE_OPTIMIZATION("y cPow x cPow", "[y*x] cPow");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cPow; */ // redundant, matches cPow @ 2
                  goto Lab;
              }
              break;
            case cSqr:
              FP_TRACE_BYTECODE_OPTIMIZATION("cSqr x cPow", "[x*Value_t(2)] cPow");
              /* opcode = cPow; */ // redundant, matches cPow @ 0
              goto Lan;
            case cImmed:
              y = ImmedPtr[-1];
              if( y!=Value_t(0) || x>=Value_t(0))
              {
                FP_TRACE_BYTECODE_OPTIMIZATION("y[ y!=Value_t(0) || x>=Value_t(0)] x cPow", "[fp_pow(y,x)]");
                /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
                goto Lba;
              }
              break;
          }
          FP_TRACE_BYTECODE_OPTIMIZATION("x cPow", "[DO_POWI]");
          if(TryCompilePowi(x))
            return;
          break;
      }
      break;
  TailCall_cSqrt:
#if(!FP_INT_VERSION)
    case cSqrt:
#if(!FP_INT_VERSION)
      switch(ByteCodePtr[0])
      {
#if(!FP_INT_VERSION)
        case cSqr:
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("cSqr cSqrt", "cAbs");
          goto Lbb;
#endif
          break;
#endif
        case cImmed:
          x = ImmedPtr[0];
#if(!FP_INT_VERSION)
          if(x>=Value_t(0))
          {
#if(!FP_INT_VERSION)
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x>=Value_t(0)] cSqrt", "[fp_sqrt(x)]");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Lbc;
#endif
          }
#endif
          break;
      }
#endif
      break;
#endif
  TailCall_cAbs:
    case cAbs:
      switch(ByteCodePtr[0])
      {
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cAbs", "cAbs");
          /* opcode = cAbs; */ // redundant, matches cAbs @ 0
          goto Lbd;
        case cImmed:
          x = ImmedPtr[0];
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("x cAbs", "[fp_abs(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lbe;
#endif
          break;
        default:
          A = ByteCodePtr[0];
          if(IsNeverNegativeValueOpcode(A))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("A[IsNeverNegativeValueOpcode(A)] cAbs", "A");
            /* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
            return;
          }
      }
      break;
  TailCall_cAcos:
#if(!FP_INT_VERSION)
    case cAcos:
#if(!FP_INT_VERSION)
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("x cAcos", "[fp_acos(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lbf;
#endif
          break;
      }
#endif
      break;
#endif
  TailCall_cAcosh:
#if(!FP_INT_VERSION)
    case cAcosh:
#if(!FP_INT_VERSION)
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
#if(!FP_INT_VERSION)
          if(x>=Value_t(-1)&&x<=Value_t(1))
          {
#if(!FP_INT_VERSION)
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x>=Value_t(-1)&&x<=Value_t(1)] cAcosh", "[fp_acosh(x)]");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Lbg;
#endif
          }
#endif
          break;
      }
#endif
      break;
#endif
  TailCall_cAsinh:
#if(!FP_INT_VERSION)
    case cAsinh:
#if(!FP_INT_VERSION)
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
#if(!FP_INT_VERSION)
          if(x>=Value_t(-1)&&x<=Value_t(1))
          {
#if(!FP_INT_VERSION)
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x>=Value_t(-1)&&x<=Value_t(1)] cAsinh", "[fp_asinh(x)]");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Lbh;
#endif
          }
#endif
          break;
      }
#endif
      break;
#endif
  TailCall_cAtan:
#if(!FP_INT_VERSION)
    case cAtan:
#if(!FP_INT_VERSION)
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("x cAtan", "[fp_atan(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lbi;
#endif
          break;
      }
#endif
      break;
#endif
  TailCall_cAtanh:
#if(!FP_INT_VERSION)
    case cAtanh:
#if(!FP_INT_VERSION)
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("x cAtanh", "[fp_atanh(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lbj;
#endif
          break;
      }
#endif
      break;
#endif
  TailCall_cCbrt:
#if(!FP_INT_VERSION)
    case cCbrt:
#if(!FP_INT_VERSION)
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("x cCbrt", "[fp_cbrt(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lbk;
#endif
          break;
      }
#endif
      break;
#endif
  TailCall_cCeil:
#if(!FP_INT_VERSION)
    case cCeil:
#if(!FP_INT_VERSION)
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("x cCeil", "[fp_ceil(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lbl;
#endif
          break;
        default:
          A = ByteCodePtr[0];
#if(!FP_INT_VERSION)
          if(IsAlwaysIntegerOpcode(A))
          {
#if(!FP_INT_VERSION)
            FP_TRACE_BYTECODE_OPTIMIZATION("A[IsAlwaysIntegerOpcode(A)] cCeil", "A");
            /* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
            return;
#endif
          }
#endif
      }
#endif
      break;
#endif
  TailCall_cCos:
#if(!FP_INT_VERSION)
    case cCos:
#if(!FP_INT_VERSION)
      switch(ByteCodePtr[0])
      {
#if(!FP_INT_VERSION)
        case cAcos:
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("cAcos cCos", "");
          goto Lbm;
#endif
          break;
#endif
#if(!FP_INT_VERSION)
        case cAbs:
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("cAbs cCos", "cCos");
          /* opcode = cCos; */ // redundant, matches cCos @ 0
          goto Lbn;
#endif
          break;
#endif
#if(!FP_INT_VERSION)
        case cNeg:
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cCos", "cCos");
          /* opcode = cCos; */ // redundant, matches cCos @ 0
          goto Lbn;
#endif
          break;
#endif
        case cImmed:
          x = ImmedPtr[0];
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("x cCos", "[fp_cos(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lca;
#endif
          break;
      }
#endif
      break;
#endif
  TailCall_cCosh:
#if(!FP_INT_VERSION)
    case cCosh:
#if(!FP_INT_VERSION)
      switch(ByteCodePtr[0])
      {
#if(!FP_INT_VERSION)
        case cAcosh:
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("cAcosh cCosh", "");
          goto Lbm;
#endif
          break;
#endif
#if(!FP_INT_VERSION)
        case cAbs:
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("cAbs cCosh", "cCosh");
          /* opcode = cCosh; */ // redundant, matches cCosh @ 0
          goto Lcb;
#endif
          break;
#endif
#if(!FP_INT_VERSION)
        case cNeg:
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cCosh", "cCosh");
          /* opcode = cCosh; */ // redundant, matches cCosh @ 0
          goto Lcb;
#endif
          break;
#endif
#if(!FP_INT_VERSION)
        case cAsinh:
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("cAsinh cCosh", "cSqr [Value_t(1)] cAdd cSqrt");
          goto Lcc;
#endif
          break;
#endif
        case cImmed:
          x = ImmedPtr[0];
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("x cCosh", "[fp_cosh(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lcd;
#endif
          break;
      }
#endif
      break;
#endif
  TailCall_cExp:
#if(!FP_INT_VERSION)
    case cExp:
#if(!FP_INT_VERSION)
      switch(ByteCodePtr[0])
      {
#if(!FP_INT_VERSION)
        case cLog:
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("cLog cExp", "");
          goto Lbm;
#endif
          break;
#endif
#if(!FP_INT_VERSION)
        case cAdd:
#if(!FP_INT_VERSION)
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              x = ImmedPtr[0];
#if(!FP_INT_VERSION)
              FP_TRACE_BYTECODE_OPTIMIZATION("x cAdd cExp", "cExp [fp_exp(x)] cMul");
              goto Lce;
#endif
              break;
          }
#endif
          break;
#endif
        case cImmed:
          x = ImmedPtr[0];
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("x cExp", "[fp_exp(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lcf;
#endif
          break;
      }
#endif
      break;
#endif
  TailCall_cExp2:
#if(!FP_INT_VERSION)
    case cExp2:
#if(!FP_INT_VERSION)
      switch(ByteCodePtr[0])
      {
#if(!FP_INT_VERSION)
        case cLog2:
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("cLog2 cExp2", "");
          goto Lbm;
#endif
          break;
#endif
#if(!FP_INT_VERSION)
        case cAdd:
#if(!FP_INT_VERSION)
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              x = ImmedPtr[0];
#if(!FP_INT_VERSION)
              FP_TRACE_BYTECODE_OPTIMIZATION("x cAdd cExp2", "cExp2 [fp_exp2(x)] cMul");
              goto Lcg;
#endif
              break;
          }
#endif
          break;
#endif
        case cImmed:
          x = ImmedPtr[0];
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("x cExp2", "[fp_exp2(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lch;
#endif
          break;
      }
#endif
      break;
#endif
  TailCall_cFloor:
#if(!FP_INT_VERSION)
    case cFloor:
#if(!FP_INT_VERSION)
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("x cFloor", "[fp_floor(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lci;
#endif
          break;
        default:
          A = ByteCodePtr[0];
#if(!FP_INT_VERSION)
          if(IsAlwaysIntegerOpcode(A))
          {
#if(!FP_INT_VERSION)
            FP_TRACE_BYTECODE_OPTIMIZATION("A[IsAlwaysIntegerOpcode(A)] cFloor", "A");
            /* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
            return;
#endif
          }
#endif
      }
#endif
      break;
#endif
  TailCall_cInt:
#if(!FP_INT_VERSION)
    case cInt:
#if(!FP_INT_VERSION)
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("x cInt", "[fp_int(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lcj;
#endif
          break;
        default:
          A = ByteCodePtr[0];
#if(!FP_INT_VERSION)
          if(IsAlwaysIntegerOpcode(A))
          {
#if(!FP_INT_VERSION)
            FP_TRACE_BYTECODE_OPTIMIZATION("A[IsAlwaysIntegerOpcode(A)] cInt", "A");
            /* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
            return;
#endif
          }
#endif
      }
#endif
      break;
#endif
  TailCall_cLog:
#if(!FP_INT_VERSION)
    case cLog:
#if(!FP_INT_VERSION)
      switch(ByteCodePtr[0])
      {
#if(!FP_INT_VERSION)
        case cSqr:
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("cSqr cLog", "cAbs cLog cDup cAdd");
          goto Lck;
#endif
          break;
#endif
#if(!FP_INT_VERSION)
        case cExp:
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("cExp cLog", "");
          goto Lbm;
#endif
          break;
#endif
        case cImmed:
          x = ImmedPtr[0];
#if(!FP_INT_VERSION)
          if(x>=Value_t(0))
          {
#if(!FP_INT_VERSION)
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x>=Value_t(0)] cLog", "[fp_log(x)]");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Lcl;
#endif
          }
#endif
          break;
      }
#endif
      break;
#endif
  TailCall_cLog10:
#if(!FP_INT_VERSION)
    case cLog10:
#if(!FP_INT_VERSION)
      switch(ByteCodePtr[0])
      {
#if(!FP_INT_VERSION)
        case cSqr:
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("cSqr cLog10", "cAbs cLog10 cDup cAdd");
          goto Lcm;
#endif
          break;
#endif
        case cImmed:
          x = ImmedPtr[0];
#if(!FP_INT_VERSION)
          if(x>=Value_t(0))
          {
#if(!FP_INT_VERSION)
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x>=Value_t(0)] cLog10", "[fp_log10(x)]");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Lcn;
#endif
          }
#endif
          break;
      }
#endif
      break;
#endif
  TailCall_cLog2:
#if(!FP_INT_VERSION)
    case cLog2:
#if(!FP_INT_VERSION)
      switch(ByteCodePtr[0])
      {
#if(!FP_INT_VERSION)
        case cSqr:
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("cSqr cLog2", "cAbs cLog2 cDup cAdd");
          goto Lda;
#endif
          break;
#endif
#if(!FP_INT_VERSION)
        case cExp2:
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("cExp2 cLog2", "");
          goto Lbm;
#endif
          break;
#endif
        case cImmed:
          x = ImmedPtr[0];
#if(!FP_INT_VERSION)
          if(x>=Value_t(0))
          {
#if(!FP_INT_VERSION)
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x>=Value_t(0)] cLog2", "[fp_log2(x)]");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Ldb;
#endif
          }
#endif
          break;
      }
#endif
      break;
#endif
  TailCall_cSin:
#if(!FP_INT_VERSION)
    case cSin:
#if(!FP_INT_VERSION)
      switch(ByteCodePtr[0])
      {
#if(!FP_INT_VERSION)
        case cAsin:
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("cAsin cSin", "");
          goto Lbm;
#endif
          break;
#endif
#if(!FP_INT_VERSION)
        case cNeg:
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cSin", "cSin cNeg");
          goto Ldc;
#endif
          break;
#endif
        case cImmed:
          x = ImmedPtr[0];
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("x cSin", "[fp_sin(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Ldd;
#endif
          break;
      }
#endif
      break;
#endif
  TailCall_cSinh:
#if(!FP_INT_VERSION)
    case cSinh:
#if(!FP_INT_VERSION)
      switch(ByteCodePtr[0])
      {
#if(!FP_INT_VERSION)
        case cAsinh:
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("cAsinh cSinh", "");
          goto Lbm;
#endif
          break;
#endif
#if(!FP_INT_VERSION)
        case cNeg:
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cSinh", "cSinh cNeg");
          goto Lde;
#endif
          break;
#endif
#if(!FP_INT_VERSION)
        case cAcosh:
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("cAcosh cSinh", "cSqr [Value_t(-1)] cAdd cSqrt");
          goto Ldf;
#endif
          break;
#endif
        case cImmed:
          x = ImmedPtr[0];
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("x cSinh", "[fp_sinh(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Ldg;
#endif
          break;
      }
#endif
      break;
#endif
  TailCall_cTan:
#if(!FP_INT_VERSION)
    case cTan:
#if(!FP_INT_VERSION)
      switch(ByteCodePtr[0])
      {
#if(!FP_INT_VERSION)
        case cAtan:
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("cAtan cTan", "");
          goto Lbm;
#endif
          break;
#endif
#if(!FP_INT_VERSION)
        case cAtan2:
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("cAtan2 cTan", "cDiv");
          goto Ldh;
#endif
          break;
#endif
#if(!FP_INT_VERSION)
        case cNeg:
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cTan", "cTan cNeg");
          goto Ldi;
#endif
          break;
#endif
        case cImmed:
          x = ImmedPtr[0];
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("x cTan", "[fp_tan(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Ldj;
#endif
          break;
      }
#endif
      break;
#endif
  TailCall_cTanh:
#if(!FP_INT_VERSION)
    case cTanh:
#if(!FP_INT_VERSION)
      switch(ByteCodePtr[0])
      {
#if(!FP_INT_VERSION)
        case cAtanh:
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("cAtanh cTanh", "");
          goto Lbm;
#endif
          break;
#endif
#if(!FP_INT_VERSION)
        case cNeg:
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cTanh", "cTanh cNeg");
          goto Ldk;
#endif
          break;
#endif
        case cImmed:
          x = ImmedPtr[0];
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("x cTanh", "[fp_tanh(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Ldl;
#endif
          break;
      }
#endif
      break;
#endif
  TailCall_cTrunc:
#if(!FP_INT_VERSION)
    case cTrunc:
#if(!FP_INT_VERSION)
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("x cTrunc", "[fp_trunc(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Ldm;
#endif
          break;
        default:
          A = ByteCodePtr[0];
#if(!FP_INT_VERSION)
          if(IsAlwaysIntegerOpcode(A))
          {
#if(!FP_INT_VERSION)
            FP_TRACE_BYTECODE_OPTIMIZATION("A[IsAlwaysIntegerOpcode(A)] cTrunc", "A");
            /* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
            return;
#endif
          }
#endif
      }
#endif
      break;
#endif
  TailCall_cDeg:
#if(!FP_INT_VERSION)
    case cDeg:
#if(!FP_INT_VERSION)
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("x cDeg", "[RadiansToDegrees(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Ldn;
#endif
          break;
      }
#endif
      break;
#endif
  TailCall_cRad:
#if(!FP_INT_VERSION)
    case cRad:
#if(!FP_INT_VERSION)
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("x cRad", "[DegreesToRadians(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lea;
#endif
          break;
      }
#endif
      break;
#endif
  TailCall_cNeg:
    case cNeg:
      switch(ByteCodePtr[0])
      {
        case cMul:
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              x = ImmedPtr[0];
              FP_TRACE_BYTECODE_OPTIMIZATION("x cMul cNeg", "[-x] cMul");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
              /* ByteCodePtr[0] = cMul; */ // redundant, matches cMul @ 1
              goto Leb;
          }
          break;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cNeg", "");
          goto Lbm;
#if(!FP_INT_VERSION)
        case cFloor:
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("cFloor cNeg", "cNeg cCeil");
          goto Lec;
#endif
          break;
#endif
#if(!FP_INT_VERSION)
        case cCeil:
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("cCeil cNeg", "cNeg cFloor");
          goto Led;
#endif
          break;
#endif
#if(!FP_INT_VERSION)
        case cSin:
#if(!FP_INT_VERSION)
          switch(ByteCodePtr[-1])
          {
#if(!FP_INT_VERSION)
            case cMul:
#if(!FP_INT_VERSION)
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  x = ImmedPtr[0];
#if(!FP_INT_VERSION)
                  FP_TRACE_BYTECODE_OPTIMIZATION("x cMul cSin cNeg", "[-x] cMul cSin");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
                  /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                  /* ByteCodePtr[0] = cSin; */ // redundant, matches cSin @ 1
                  goto Leb;
#endif
                  break;
              }
#endif
              break;
#endif
          }
#endif
          break;
#endif
#if(!FP_INT_VERSION)
        case cSinh:
#if(!FP_INT_VERSION)
          switch(ByteCodePtr[-1])
          {
#if(!FP_INT_VERSION)
            case cMul:
#if(!FP_INT_VERSION)
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  x = ImmedPtr[0];
#if(!FP_INT_VERSION)
                  FP_TRACE_BYTECODE_OPTIMIZATION("x cMul cSinh cNeg", "[-x] cMul cSinh");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
                  /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                  /* ByteCodePtr[0] = cSinh; */ // redundant, matches cSinh @ 1
                  goto Leb;
#endif
                  break;
              }
#endif
              break;
#endif
          }
#endif
          break;
#endif
#if(!FP_INT_VERSION)
        case cTan:
#if(!FP_INT_VERSION)
          switch(ByteCodePtr[-1])
          {
#if(!FP_INT_VERSION)
            case cMul:
#if(!FP_INT_VERSION)
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  x = ImmedPtr[0];
#if(!FP_INT_VERSION)
                  FP_TRACE_BYTECODE_OPTIMIZATION("x cMul cTan cNeg", "[-x] cMul cTan");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
                  /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                  /* ByteCodePtr[0] = cTan; */ // redundant, matches cTan @ 1
                  goto Leb;
#endif
                  break;
              }
#endif
              break;
#endif
          }
#endif
          break;
#endif
#if(!FP_INT_VERSION)
        case cTanh:
#if(!FP_INT_VERSION)
          switch(ByteCodePtr[-1])
          {
#if(!FP_INT_VERSION)
            case cMul:
#if(!FP_INT_VERSION)
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  x = ImmedPtr[0];
#if(!FP_INT_VERSION)
                  FP_TRACE_BYTECODE_OPTIMIZATION("x cMul cTanh cNeg", "[-x] cMul cTanh");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
                  /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                  /* ByteCodePtr[0] = cTanh; */ // redundant, matches cTanh @ 1
                  goto Leb;
#endif
                  break;
              }
#endif
              break;
#endif
          }
#endif
          break;
#endif
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cNeg", "[-x]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Leb;
      }
      break;
  TailCall_cInv:
    case cInv:
      switch(ByteCodePtr[0])
      {
        case cInv:
          FP_TRACE_BYTECODE_OPTIMIZATION("cInv cInv", "");
          goto Lbm;
        case cPow:
          FP_TRACE_BYTECODE_OPTIMIZATION("cPow cInv", "cNeg cPow");
          goto Lee;
#if(!FP_INT_VERSION)
        case cSin:
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("cSin cInv", "cCsc");
          goto Lef;
#endif
          break;
#endif
#if(!FP_INT_VERSION)
        case cCos:
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("cCos cInv", "cSec");
          goto Leg;
#endif
          break;
#endif
#if(!FP_INT_VERSION)
        case cTan:
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("cTan cInv", "cCot");
          goto Leh;
#endif
          break;
#endif
#if(!FP_INT_VERSION)
        case cCsc:
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("cCsc cInv", "cSin");
          goto Lei;
#endif
          break;
#endif
#if(!FP_INT_VERSION)
        case cSec:
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("cSec cInv", "cCos");
          goto Lej;
#endif
          break;
#endif
#if(!FP_INT_VERSION)
        case cCot:
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("cCot cInv", "cTan");
          goto Lek;
#endif
          break;
#endif
        case cImmed:
          x = ImmedPtr[0];
          if(x!=Value_t(0))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x!=Value_t(0)] cInv", "[Value_t(1)/x]");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Lel;
          }
          break;
      }
      break;
  TailCall_cMul:
    case cMul:
      switch(ByteCodePtr[0])
      {
        case cInv:
          FP_TRACE_BYTECODE_OPTIMIZATION("cInv cMul", "cDiv");
          goto Ldh;
        case cPow:
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              x = ImmedPtr[0];
              if(x<0)
              {
                FP_TRACE_BYTECODE_OPTIMIZATION("x[x<0] cPow cMul", "[-x] cPow cDiv");
                /* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
                /* ByteCodePtr[0] = cPow; */ // redundant, matches cPow @ 1
                goto Lem;
              }
              break;
          }
          break;
        case cImmed:
          x = ImmedPtr[0];
          if(x==Value_t(0))
          {
            switch(ByteCodePtr[-1])
            {
              case cImmed: break;
              default:
                A = ByteCodePtr[-1];
                if(A >= VarBegin)
                {
                  FP_TRACE_BYTECODE_OPTIMIZATION("A[A >= VarBegin] x[x==Value_t(0)] cMul", "[x]");
                  /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                  goto Len;
                }
            }
          }
          switch(ByteCodePtr[-1])
          {
            case cNeg:
              FP_TRACE_BYTECODE_OPTIMIZATION("cNeg x cMul", "[-x] cMul");
              /* opcode = cMul; */ // redundant, matches cMul @ 0
              goto Lfa;
            case cMul:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  FP_TRACE_BYTECODE_OPTIMIZATION("y cMul x cMul", "[y*x] cMul");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                  goto Lab;
              }
              break;
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cMul", "[y*x]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lab;
          }
          if(x==Value_t(1))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x==Value_t(1)] cMul", "");
            goto Lfb;
          }
          if(x==Value_t(2))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x==Value_t(2)] cMul", "cDup cAdd");
            goto Lfc;
          }
          if(x==Value_t(-1))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x==Value_t(-1)] cMul", "cNeg");
            goto Lfd;
          }
          break;
        default:
          A = ByteCodePtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("A cMul", "[DO_MAYBE_SQR]");
          if(A >= VarBegin)
          {
            if(A == ByteCodePtr[-1])
              { ByteCodePtr[0] = cSqr; return; }
            if(ByteCodePtr[-1] == cMul && A == ByteCodePtr[-2])
              { ByteCodePtr[0] = cMul; ByteCodePtr[-1] = cSqr; return; }
          }
      }
      break;
  TailCall_cDiv:
    case cDiv:
      switch(ByteCodePtr[0])
      {
#if(!FP_INT_VERSION)
        case cInv:
#if(!FP_INT_VERSION)
          FP_TRACE_BYTECODE_OPTIMIZATION("cInv cDiv", "cMul");
          goto Lfe;
#endif
          break;
#endif
#if(!FP_INT_VERSION)
        case cExp:
#if(!FP_INT_VERSION)
          switch(ByteCodePtr[-1])
          {
#if(!FP_INT_VERSION)
            case cMul:
#if(!FP_INT_VERSION)
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  x = ImmedPtr[0];
#if(!FP_INT_VERSION)
                  FP_TRACE_BYTECODE_OPTIMIZATION("x cMul cExp cDiv", "[-x] cMul cExp cMul");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
                  /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                  /* ByteCodePtr[0] = cExp; */ // redundant, matches cExp @ 1
                  goto Lff;
#endif
                  break;
              }
#endif
              break;
#endif
          }
#endif
          break;
#endif
#if(!FP_INT_VERSION)
        case cExp2:
#if(!FP_INT_VERSION)
          switch(ByteCodePtr[-1])
          {
#if(!FP_INT_VERSION)
            case cMul:
#if(!FP_INT_VERSION)
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  x = ImmedPtr[0];
#if(!FP_INT_VERSION)
                  FP_TRACE_BYTECODE_OPTIMIZATION("x cMul cExp2 cDiv", "[-x] cMul cExp2 cMul");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
                  /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                  /* ByteCodePtr[0] = cExp2; */ // redundant, matches cExp2 @ 1
                  goto Lff;
#endif
                  break;
              }
#endif
              break;
#endif
          }
#endif
          break;
#endif
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cNeg:
              FP_TRACE_BYTECODE_OPTIMIZATION("cNeg x cDiv", "[-x] cDiv");
              /* opcode = cDiv; */ // redundant, matches cDiv @ 0
              goto Lfg;
          }
          if(x==Value_t(1))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x==Value_t(1)] cDiv", "");
            goto Lfb;
          }
#if(!FP_INT_VERSION)
          if(x!=Value_t(0))
          {
#if(!FP_INT_VERSION)
            switch(ByteCodePtr[-1])
            {
              case cMul:
                switch(ByteCodePtr[-2])
                {
                  case cImmed:
                    y = ImmedPtr[-1];
                    FP_TRACE_BYTECODE_OPTIMIZATION("y cMul x[x!=Value_t(0)] cDiv", "[y*x] cMul");
                    /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                    /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                    goto Lab;
                }
                break;
              case cImmed:
                y = ImmedPtr[-1];
                FP_TRACE_BYTECODE_OPTIMIZATION("y x[x!=Value_t(0)] cDiv", "[y/x]");
                /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
                goto Lfh;
            }
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x!=Value_t(0)] cDiv", "[Value_t(1)/x] cMul");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Lfi;
#endif
          }
#endif
          break;
      }
      break;
  TailCall_cMod:
    case cMod:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          if(x!=Value_t(0))
          {
            switch(ByteCodePtr[-1])
            {
              case cImmed:
                y = ImmedPtr[-1];
                FP_TRACE_BYTECODE_OPTIMIZATION("y x[x!=Value_t(0)] cMod", "[fp_mod(y,x)]");
                /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
                goto Lfj;
            }
          }
          break;
      }
      break;
  TailCall_cAdd:
    case cAdd:
      switch(ByteCodePtr[0])
      {
        case cDup:
          switch(ByteCodePtr[-1])
          {
            case cAdd:
              switch(ByteCodePtr[-2])
              {
                case cDup:
                  FP_TRACE_BYTECODE_OPTIMIZATION("cDup cAdd cDup cAdd", "[4] cMul");
                  goto Lfk;
              }
              break;
          }
          break;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cAdd", "cSub");
          goto Lfl;
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cAdd:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  FP_TRACE_BYTECODE_OPTIMIZATION("y cAdd x cAdd", "[y+x] cAdd");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cAdd; */ // redundant, matches cAdd @ 2
                  goto Lfm;
              }
              break;
            case cSub:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  FP_TRACE_BYTECODE_OPTIMIZATION("y cSub x cAdd", "[y-x] cSub");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cSub; */ // redundant, matches cSub @ 2
                  goto Lfn;
              }
              break;
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cAdd", "[y+x]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lfm;
          }
          if(x==Value_t(0))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x==Value_t(0)] cAdd", "");
            goto Lfb;
          }
          break;
      }
      break;
  TailCall_cSub:
    case cSub:
      switch(ByteCodePtr[0])
      {
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cSub", "cAdd");
          goto Lga;
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cSub:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  FP_TRACE_BYTECODE_OPTIMIZATION("y cSub x cSub", "[y+x] cSub");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cSub; */ // redundant, matches cSub @ 2
                  goto Lfm;
              }
              break;
            case cAdd:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  FP_TRACE_BYTECODE_OPTIMIZATION("y cAdd x cSub", "[y-x] cAdd");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cAdd; */ // redundant, matches cAdd @ 2
                  goto Lfn;
              }
              break;
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cSub", "[y-x]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lfn;
          }
          if(x==Value_t(0))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x==Value_t(0)] cSub", "");
            goto Lfb;
          }
          break;
      }
      break;
  TailCall_cMin:
    case cMin:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cMin", "[Min(x,y)]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lgb;
          }
          break;
      }
      break;
  TailCall_cMax:
    case cMax:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cMax", "[Max(x,y)]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lgc;
          }
          break;
      }
      break;
  TailCall_cAtan2:
#if(!FP_INT_VERSION)
    case cAtan2:
#if(!FP_INT_VERSION)
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
#if(!FP_INT_VERSION)
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
#if(!FP_INT_VERSION)
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cAtan2", "[fp_atan2(y,x)]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lgd;
#endif
              break;
          }
#endif
          break;
      }
#endif
      break;
#endif
  TailCall_cNot:
    case cNot:
      switch(ByteCodePtr[0])
      {
        case cLess:
          FP_TRACE_BYTECODE_OPTIMIZATION("cLess cNot", "cGreaterOrEq");
          goto Lge;
        case cLessOrEq:
          FP_TRACE_BYTECODE_OPTIMIZATION("cLessOrEq cNot", "cGreater");
          goto Lgf;
        case cGreater:
          FP_TRACE_BYTECODE_OPTIMIZATION("cGreater cNot", "cLessOrEq");
          goto Lgg;
        case cGreaterOrEq:
          FP_TRACE_BYTECODE_OPTIMIZATION("cGreaterOrEq cNot", "cLess");
          goto Lgh;
        case cEqual:
          FP_TRACE_BYTECODE_OPTIMIZATION("cEqual cNot", "cNEqual");
          goto Lgi;
        case cNEqual:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNEqual cNot", "cEqual");
          goto Lgj;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cNot", "cNot");
          /* opcode = cNot; */ // redundant, matches cNot @ 0
          goto Lgk;
        case cAbs:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAbs cNot", "cNot");
          /* opcode = cNot; */ // redundant, matches cNot @ 0
          goto Lgk;
        case cNot:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNot cNot", "cNotNot");
          goto Lgl;
        case cNotNot:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNotNot cNot", "cNot");
          /* opcode = cNot; */ // redundant, matches cNot @ 0
          goto Lgk;
        case cAbsNotNot:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAbsNotNot cNot", "cAbsNot");
          goto Lgm;
        case cAbsNot:
          switch(ByteCodePtr[-1])
          {
            case cImmed: break;
            default:
              A = ByteCodePtr[-1];
              if(IsLogicalOpcode(A))
              {
                FP_TRACE_BYTECODE_OPTIMIZATION("A[IsLogicalOpcode(A)] cAbsNot cNot", "A");
                /* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
                goto Lbm;
              }
              FP_TRACE_BYTECODE_OPTIMIZATION("A cAbsNot cNot", "A cAbsNotNot");
              /* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
              goto Lgn;
          }
          break;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cNot", "[!truthValue(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lha;
        default:
          A = ByteCodePtr[0];
          if(IsNeverNegativeValueOpcode(A))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("A[IsNeverNegativeValueOpcode(A)] cNot", "A cAbsNot");
            /* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
            goto Lhb;
          }
      }
      break;
  TailCall_cLess:
    case cLess:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
#if(!FP_INT_VERSION)
          if(x!=Value_t(0))
          {
#if(!FP_INT_VERSION)
            switch(ByteCodePtr[-1])
            {
#if(!FP_INT_VERSION)
              case cAbs:
#if(!FP_INT_VERSION)
                FP_TRACE_BYTECODE_OPTIMIZATION("cAbs x[x!=Value_t(0)] cLess", "[Value_t(0.5)/x] cMul cNot");
                goto Lhc;
#endif
                break;
#endif
            }
#endif
          }
#endif
          if(x==Value_t(0))
          {
            switch(ByteCodePtr[-1])
            {
              case cImmed: break;
              default:
                A = ByteCodePtr[-1];
                if(IsNeverNegativeValueOpcode(A))
                {
                  FP_TRACE_BYTECODE_OPTIMIZATION("A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(0)] cLess", "A [x] cMul");
                  /* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
                  /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                  /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
                  goto Lhd;
                }
            }
          }
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cLess", "[fp_less(y,x)]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lhe;
          }
          break;
      }
      break;
  TailCall_cLessOrEq:
    case cLessOrEq:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cLessOrEq", "[fp_lessOrEq(y,x)]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lhf;
          }
          break;
      }
      break;
  TailCall_cGreater:
    case cGreater:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cGreater", "[fp_less(x,y)]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lhg;
          }
          break;
      }
      break;
  TailCall_cGreaterOrEq:
    case cGreaterOrEq:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
#if(!FP_INT_VERSION)
          if(x!=Value_t(0))
          {
#if(!FP_INT_VERSION)
            switch(ByteCodePtr[-1])
            {
#if(!FP_INT_VERSION)
              case cAbs:
#if(!FP_INT_VERSION)
                FP_TRACE_BYTECODE_OPTIMIZATION("cAbs x[x!=Value_t(0)] cGreaterOrEq", "[Value_t(0.5)/x] cMul cNotNot");
                goto Lhh;
#endif
                break;
#endif
            }
#endif
          }
#endif
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cGreaterOrEq", "[fp_lessOrEq(x,y)]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lhi;
          }
          break;
      }
      break;
  TailCall_cEqual:
    case cEqual:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cEqual", "[fp_equal(y,x)]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lhj;
          }
          break;
      }
      break;
  TailCall_cNEqual:
    case cNEqual:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cNEqual", "[fp_nequal(y,x)]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lhk;
          }
          break;
      }
      break;
  TailCall_cAnd:
    case cAnd:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cAnd", "[truthValue(x)&&truthValue(y)]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lhl;
          }
          break;
      }
      break;
  TailCall_cOr:
    case cOr:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cOr", "[truthValue(x)||truthValue(y)]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lhm;
          }
          break;
      }
      break;
  }
  goto Lhn;
Laa: data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     data->Immed.push_back(x*Value_t(2));
Lia: data->ByteCode.push_back(cImmed);
Lib: FP_ReDefinePointers();
Lic: goto TailCall_cPow;
Lab: ImmedPtr[-1] = y*x;
Lfb: data->Immed.pop_back();
Lbm: data->ByteCode.pop_back(); return;
Lac: ByteCodePtr[-1] = cImmed;
     data->ByteCode.pop_back();
     AddFunctionOpcode(cMul); goto Lib;
Lad: ByteCodePtr[-1] = cImmed;
     data->ByteCode.pop_back();
     AddFunctionOpcode(cMul);
     opcode = cExp;
     FP_ReDefinePointers();
     goto TailCall_cExp;
Lae: ByteCodePtr[-1] = cImmed;
     data->ByteCode.pop_back();
     AddFunctionOpcode(cMul);
     opcode = cExp2;
     FP_ReDefinePointers();
     goto TailCall_cExp2;
Laf: ByteCodePtr[-1] = cImmed;
     ByteCodePtr -= 1;
     data->ByteCode.pop_back(); goto Lic;
Lag: data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cMul);
     data->Immed.push_back(x); goto Lia;
Lah: data->Immed.pop_back();
     data->ByteCode.pop_back();
Lid: opcode = cSqrt;
     FP_ReDefinePointers();
     goto TailCall_cSqrt;
Lai: data->Immed.pop_back();
     data->ByteCode.pop_back();
     opcode = cCbrt;
     FP_ReDefinePointers();
     goto TailCall_cCbrt;
Laj: data->Immed.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cCbrt);
Lie: opcode = cInv;
     FP_ReDefinePointers();
     goto TailCall_cInv;
Lak: ByteCodePtr[0] = cRSqrt;
     data->Immed.pop_back(); return;
Lal: data->Immed.pop_back();
     data->ByteCode.pop_back(); goto Lie;
Lam: data->Immed.pop_back();
     data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     data->Immed.push_back(y*x); goto Lia;
Lan: ImmedPtr[0] = x*Value_t(2); goto Laf;
Lba: ImmedPtr[-1] = fp_pow(y,x); goto Lfb;
Lbb: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cAbs;
Lif: goto TailCall_cAbs;
Lbc: ImmedPtr[0] = fp_sqrt(x); return;
Lbd: ByteCodePtr -= 1;
     data->ByteCode.pop_back(); goto Lif;
Lbe: ImmedPtr[0] = fp_abs(x); return;
Lbf: ImmedPtr[0] = fp_acos(x); return;
Lbg: ImmedPtr[0] = fp_acosh(x); return;
Lbh: ImmedPtr[0] = fp_asinh(x); return;
Lbi: ImmedPtr[0] = fp_atan(x); return;
Lbj: ImmedPtr[0] = fp_atanh(x); return;
Lbk: ImmedPtr[0] = fp_cbrt(x); return;
Lbl: ImmedPtr[0] = fp_ceil(x); return;
Lbn: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
Lig: goto TailCall_cCos;
Lca: ImmedPtr[0] = fp_cos(x); return;
Lcb: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     goto TailCall_cCosh;
Lcc: ByteCodePtr[0] = cSqr;
     data->Immed.push_back(Value_t(1));
Lih: data->ByteCode.push_back(cImmed);
     AddFunctionOpcode(cAdd); goto Lid;
Lcd: ImmedPtr[0] = fp_cosh(x); return;
Lce: data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cExp);
     data->Immed.push_back(fp_exp(x));
Lii: data->ByteCode.push_back(cImmed);
Lij: opcode = cMul;
     FP_ReDefinePointers();
Lik: goto TailCall_cMul;
Lcf: ImmedPtr[0] = fp_exp(x); return;
Lcg: data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cExp2);
     data->Immed.push_back(fp_exp2(x)); goto Lii;
Lch: ImmedPtr[0] = fp_exp2(x); return;
Lci: ImmedPtr[0] = fp_floor(x); return;
Lcj: ImmedPtr[0] = fp_int(x); return;
Lck: data->ByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     AddFunctionOpcode(cLog);
Lil: data->ByteCode.push_back(cDup);
     opcode = cAdd;
     FP_ReDefinePointers();
Lim: goto TailCall_cAdd;
Lcl: ImmedPtr[0] = fp_log(x); return;
Lcm: data->ByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     AddFunctionOpcode(cLog10); goto Lil;
Lcn: ImmedPtr[0] = fp_log10(x); return;
Lda: data->ByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     AddFunctionOpcode(cLog2); goto Lil;
Ldb: ImmedPtr[0] = fp_log2(x); return;
Ldc: data->ByteCode.pop_back();
     AddFunctionOpcode(cSin);
Lin: opcode = cNeg;
     FP_ReDefinePointers();
     goto TailCall_cNeg;
Ldd: ImmedPtr[0] = fp_sin(x); return;
Lde: data->ByteCode.pop_back();
     AddFunctionOpcode(cSinh); goto Lin;
Ldf: ByteCodePtr[0] = cSqr;
     data->Immed.push_back(Value_t(-1)); goto Lih;
Ldg: ImmedPtr[0] = fp_sinh(x); return;
Ldh: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
Lja: opcode = cDiv;
Ljb: goto TailCall_cDiv;
Ldi: data->ByteCode.pop_back();
     AddFunctionOpcode(cTan); goto Lin;
Ldj: ImmedPtr[0] = fp_tan(x); return;
Ldk: data->ByteCode.pop_back();
     AddFunctionOpcode(cTanh); goto Lin;
Ldl: ImmedPtr[0] = fp_tanh(x); return;
Ldm: ImmedPtr[0] = fp_trunc(x); return;
Ldn: ImmedPtr[0] = RadiansToDegrees(x); return;
Lea: ImmedPtr[0] = DegreesToRadians(x); return;
Leb: ImmedPtr[0] = -x; return;
Lec: data->ByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     opcode = cCeil;
     FP_ReDefinePointers();
     goto TailCall_cCeil;
Led: data->ByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     opcode = cFloor;
     FP_ReDefinePointers();
     goto TailCall_cFloor;
Lee: data->ByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     opcode = cPow; goto Lib;
Lef: ByteCodePtr[0] = cCsc; return;
Leg: ByteCodePtr[0] = cSec; return;
Leh: ByteCodePtr[0] = cCot; return;
Lei: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cSin;
     goto TailCall_cSin;
Lej: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cCos; goto Lig;
Lek: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cTan;
     goto TailCall_cTan;
Lel: ImmedPtr[0] = Value_t(1)/x; return;
Lem: ImmedPtr[0] = -x; goto Lja;
Len: ByteCodePtr[-1] = cImmed; goto Lbm;
Lfa: ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     ByteCodePtr -= 1;
     data->ByteCode.pop_back(); goto Lik;
Lfc: ByteCodePtr[0] = cDup;
     ImmedPtr -= 1;
     data->Immed.pop_back();
Ljc: opcode = cAdd; goto Lim;
Lfd: data->Immed.pop_back();
     data->ByteCode.pop_back(); goto Lin;
Lfe: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
Lhd: opcode = cMul; goto Lik;
Lff: ImmedPtr[0] = -x; goto Lhd;
Lfg: ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     ByteCodePtr -= 1;
     data->ByteCode.pop_back(); goto Ljb;
Lfh: ImmedPtr[-1] = y/x; goto Lfb;
Lfi: ImmedPtr[0] = Value_t(1)/x; goto Lhd;
Lfj: ImmedPtr[-1] = fp_mod(y,x); goto Lfb;
Lfk: data->Immed.push_back(4);
     ByteCodePtr[-2] = cImmed;
     ByteCodePtr -= 2;
     data->ByteCode.pop_back();
     data->ByteCode.pop_back(); goto Lij;
Lfl: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cSub;
     goto TailCall_cSub;
Lfm: ImmedPtr[-1] = y+x; goto Lfb;
Lfn: ImmedPtr[-1] = y-x; goto Lfb;
Lga: ByteCodePtr -= 1;
     data->ByteCode.pop_back(); goto Ljc;
Lgb: ImmedPtr[-1] = Min(x,y); goto Lfb;
Lgc: ImmedPtr[-1] = Max(x,y); goto Lfb;
Lgd: ImmedPtr[-1] = fp_atan2(y,x); goto Lfb;
Lge: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cGreaterOrEq;
     goto TailCall_cGreaterOrEq;
Lgf: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cGreater;
     goto TailCall_cGreater;
Lgg: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cLessOrEq;
     goto TailCall_cLessOrEq;
Lgh: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cLess;
     goto TailCall_cLess;
Lgi: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cNEqual;
     goto TailCall_cNEqual;
Lgj: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cEqual;
     goto TailCall_cEqual;
Lgk: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
Ljd: goto TailCall_cNot;
Lgl: ByteCodePtr[0] = cNotNot; return;
Lgm: ByteCodePtr[0] = cAbsNot; return;
Lgn: ByteCodePtr[0] = cAbsNotNot; return;
Lha: ImmedPtr[0] = !truthValue(x); return;
Lhb: data->ByteCode.push_back(cAbsNot); return;
Lhc: ImmedPtr[0] = Value_t(0.5)/x;
     ByteCodePtr[-1] = cImmed;
     data->ByteCode.pop_back();
     AddFunctionOpcode(cMul);
     opcode = cNot;
     FP_ReDefinePointers(); goto Ljd;
Lhe: ImmedPtr[-1] = fp_less(y,x); goto Lfb;
Lhf: ImmedPtr[-1] = fp_lessOrEq(y,x); goto Lfb;
Lhg: ImmedPtr[-1] = fp_less(x,y); goto Lfb;
Lhh: ImmedPtr[0] = Value_t(0.5)/x;
     ByteCodePtr[-1] = cImmed;
     data->ByteCode.pop_back();
     AddFunctionOpcode(cMul);
     data->ByteCode.push_back(cNotNot); return;
Lhi: ImmedPtr[-1] = fp_lessOrEq(x,y); goto Lfb;
Lhj: ImmedPtr[-1] = fp_equal(y,x); goto Lfb;
Lhk: ImmedPtr[-1] = fp_nequal(y,x); goto Lfb;
Lhl: ImmedPtr[-1] = truthValue(x)&&truthValue(y); goto Lfb;
Lhm: ImmedPtr[-1] = truthValue(x)||truthValue(y); goto Lfb;
Lhn: data->ByteCode.push_back(opcode); return;
return;
// This list of dummy gotos is here to inhibit
// compiler warnings on possibly unused labels
goto TailCall_cPow;goto TailCall_cSqrt;goto TailCall_cAbs;
goto TailCall_cAcos;goto TailCall_cAcosh;goto TailCall_cAsinh;
goto TailCall_cAtan;goto TailCall_cAtanh;goto TailCall_cCbrt;
goto TailCall_cCeil;goto TailCall_cCos;goto TailCall_cCosh;
goto TailCall_cExp;goto TailCall_cExp2;goto TailCall_cFloor;
goto TailCall_cInt;goto TailCall_cLog;goto TailCall_cLog10;
goto TailCall_cLog2;goto TailCall_cSin;goto TailCall_cSinh;
goto TailCall_cTan;goto TailCall_cTanh;goto TailCall_cTrunc;
goto TailCall_cDeg;goto TailCall_cRad;goto TailCall_cNeg;
goto TailCall_cInv;goto TailCall_cMul;goto TailCall_cDiv;
goto TailCall_cMod;goto TailCall_cAdd;goto TailCall_cSub;
goto TailCall_cMin;goto TailCall_cMax;goto TailCall_cAtan2;
goto TailCall_cNot;goto TailCall_cLess;goto TailCall_cLessOrEq;
goto TailCall_cGreater;goto TailCall_cGreaterOrEq;goto TailCall_cEqual;
goto TailCall_cNEqual;goto TailCall_cAnd;goto TailCall_cOr;
goto Laa;goto Lia;goto Lib;
goto Lic;goto Lab;goto Lfb;
goto Lbm;goto Lac;goto Lad;
goto Lae;goto Laf;goto Lag;
goto Lah;goto Lid;goto Lai;
goto Laj;goto Lie;goto Lak;
goto Lal;goto Lam;goto Lan;
goto Lba;goto Lbb;goto Lif;
goto Lbc;goto Lbd;goto Lbe;
goto Lbf;goto Lbg;goto Lbh;
goto Lbi;goto Lbj;goto Lbk;
goto Lbl;goto Lbn;goto Lig;
goto Lca;goto Lcb;goto Lcc;
goto Lih;goto Lcd;goto Lce;
goto Lii;goto Lij;goto Lik;
goto Lcf;goto Lcg;goto Lch;
goto Lci;goto Lcj;goto Lck;
goto Lil;goto Lim;goto Lcl;
goto Lcm;goto Lcn;goto Lda;
goto Ldb;goto Ldc;goto Lin;
goto Ldd;goto Lde;goto Ldf;
goto Ldg;goto Ldh;goto Lja;
goto Ljb;goto Ldi;goto Ldj;
goto Ldk;goto Ldl;goto Ldm;
goto Ldn;goto Lea;goto Leb;
goto Lec;goto Led;goto Lee;
goto Lef;goto Leg;goto Leh;
goto Lei;goto Lej;goto Lek;
goto Lel;goto Lem;goto Len;
goto Lfa;goto Lfc;goto Ljc;
goto Lfd;goto Lfe;goto Lhd;
goto Lff;goto Lfg;goto Lfh;
goto Lfi;goto Lfj;goto Lfk;
goto Lfl;goto Lfm;goto Lfn;
goto Lga;goto Lgb;goto Lgc;
goto Lgd;goto Lge;goto Lgf;
goto Lgg;goto Lgh;goto Lgi;
goto Lgj;goto Lgk;goto Ljd;
goto Lgl;goto Lgm;goto Lgn;
goto Lha;goto Lhb;goto Lhc;
goto Lhe;goto Lhf;goto Lhg;
goto Lhh;goto Lhi;goto Lhj;
goto Lhk;goto Lhl;goto Lhm;
goto Lhn;
#undef FP_ReDefinePointers
#undef FP_TRACE_BYTECODE_OPTIMIZATION
