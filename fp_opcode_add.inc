/* Function Parser for C++ v4.0.2   

   Note: This file contains generated code and is thus not
   intended to be to be modified by hand. It was generated by
   fpoptimizer/bytecoderules_parser which is available in the
   development package.

   Note: You don't need to add this file to your project. It's
   enough for it to be in the same directory as fparser.cc. This
   file is internally #included by fparser.cc.
*/

#define FP_TRACE_BYTECODE_OPTIMIZATION(from,to,with) \
    /*std::cout << "Changing \"" from "\"\n" \
                   "    into \"" to "\"\n" with*/

  unsigned* ByteCodePtr;
  Value_t*   ImmedPtr;

  #define FP_ReDefinePointers() \
    ByteCodePtr = !data->ByteCode.empty() ? &data->ByteCode[0] + data->ByteCode.size() - 1 : 0; \
    ImmedPtr    = !data->Immed.empty()    ? &data->Immed[0]    + data->Immed.size()    - 1 : 0;
  FP_ReDefinePointers();

#if(!FP_FLOAT_VERSION)
  Value_t x;
  unsigned A;
  Value_t y;
  unsigned B;
  unsigned C;
  unsigned D;
  switch(opcode)
  {
  TailCall_cAbs:
    case cAbs:
      switch(ByteCodePtr[0])
      {
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cAbs", "cAbs", "");
          /* opcode = cAbs; */ // redundant, matches cAbs @ 0
          goto Laa;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cAbs",
            "[fp_abs(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lab;
        default:
          A = ByteCodePtr[0];
          if(IsNeverNegativeValueOpcode(A))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "A[IsNeverNegativeValueOpcode(A)] cAbs",
              "A",
              "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>") << "\n");
            /* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
            return;
          }
      }
      goto Default0;
  TailCall_cNeg:
    case cNeg:
      switch(ByteCodePtr[0])
      {
        case cMul:
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              x = ImmedPtr[0];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "x cMul cNeg",
                "[-x] cMul",
                "    with x = " << x << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
              /* ByteCodePtr[0] = cMul; */ // redundant, matches cMul @ 1
              goto Lac;
          }
          break;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cNeg", "", "");
          goto Lad;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cNeg",
            "[-x]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lac;
      }
      goto Default0;
  TailCall_cInv:
    case cInv:
      switch(ByteCodePtr[0])
      {
        case cInv:
          FP_TRACE_BYTECODE_OPTIMIZATION("cInv cInv", "", "");
          goto Lad;
        case cImmed:
          x = ImmedPtr[0];
          if(x!=Value_t(0))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x!=Value_t(0)] cInv",
              "[Value_t(1)/x]",
              "    with x = " << x << "\n");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Lae;
          }
          break;
      }
      goto Default0;
  TailCall_cMul:
    case cMul:
      switch(ByteCodePtr[0])
      {
        case cInv:
          FP_TRACE_BYTECODE_OPTIMIZATION("cInv cMul", "cDiv", "");
          goto Laf;
        case cDup:
          FP_TRACE_BYTECODE_OPTIMIZATION("cDup cMul", "cSqr", "");
          goto Lag;
        case cImmed:
          x = ImmedPtr[0];
          if(x==Value_t(0))
          {
            switch(ByteCodePtr[-1])
            {
              case cMul:
                switch(ByteCodePtr[-2])
                {
                  default:
                    A = ByteCodePtr[-2];
                    if(A>=VarBegin)
                    {
                      FP_TRACE_BYTECODE_OPTIMIZATION(
                        "A[A>=VarBegin] cMul x[x==Value_t(0)] cMul",
                        "A [x] cMul",
                        "    with x = " << x
                            << ", A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                            << "\n");
                      /* ByteCodePtr[-2] = A; */ // redundant, matches A @ 3
                      /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                      /* opcode = cMul; */ // redundant, matches cMul @ 0
                      goto Lah;
                    }
                }
                goto Default1;
              default: Default1:;
                A = ByteCodePtr[-1];
                if(A >= VarBegin)
                {
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "A[A >= VarBegin] x[x==Value_t(0)] cMul",
                    "[x]",
                    "    with x = " << x
                        << ", A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                        << "\n");
                  /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                  goto Lai;
                }
                if(A>=VarBegin)
                {
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "A[A>=VarBegin] x[x==Value_t(0)] cMul",
                    "[x]",
                    "    with x = " << x
                        << ", A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                        << "\n");
                  /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                  goto Lai;
                }
            }
          }
          switch(ByteCodePtr[-1])
          {
            case cNeg:
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "cNeg x cMul",
                "[-x] cMul",
                "    with x = " << x << "\n");
              /* opcode = cMul; */ // redundant, matches cMul @ 0
              goto Laj;
            case cMul:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  if(y*x==Value_t(1))
                  {
                    FP_TRACE_BYTECODE_OPTIMIZATION(
                      "y[y*x==Value_t(1)] cMul x cMul",
                      "",
                      "    with x = " << x
                          << ", y = " << y
                          << "\n");
                    goto Lak;
                  }
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "y cMul x cMul",
                    "[y*x] cMul",
                    "    with x = " << x
                        << ", y = " << y
                        << "\n");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                  goto Lal;
              }
              break;
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cMul",
                "[y*x]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lal;
          }
          if(x==Value_t(1))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x==Value_t(1)] cMul",
              "",
              "    with x = " << x << "\n");
            goto Lam;
          }
          if(x==Value_t(2))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x==Value_t(2)] cMul",
              "cDup cAdd",
              "    with x = " << x << "\n");
            goto Lan;
          }
          if(x==Value_t(-1))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x==Value_t(-1)] cMul",
              "cNeg",
              "    with x = " << x << "\n");
            goto Lba;
          }
          break;
        default:
          A = ByteCodePtr[0];
          if(A >= VarBegin)
          {
            switch(ByteCodePtr[-1])
            {
              case cMul:
                switch(ByteCodePtr[-2])
                {
                  default:
                    B = ByteCodePtr[-2];
                    if(B==A)
                    {
                      FP_TRACE_BYTECODE_OPTIMIZATION(
                        "B[B==A] cMul A[A >= VarBegin] cMul",
                        "B cSqr cMul",
                        "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                            << ", B = " << (B < VarBegin ? FP_GetOpcodeName(OPCODE(B)) : "<var>")
                            << "\n");
                      /* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
                      /* opcode = cMul; */ // redundant, matches cMul @ 0
                      goto Lbb;
                    }
                }
                goto Default2;
              default: Default2:;
                B = ByteCodePtr[-1];
                if(B==A)
                {
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "B[B==A] A[A >= VarBegin] cMul",
                    "B cSqr",
                    "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                        << ", B = " << (B < VarBegin ? FP_GetOpcodeName(OPCODE(B)) : "<var>")
                        << "\n");
                  /* ByteCodePtr[-1] = B; */ // redundant, matches B @ 2
                  goto Lag;
                }
            }
          }
      }
      goto Default0;
  TailCall_cDiv:
    case cDiv:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          if(x!=Value_t(0))
          {
            switch(ByteCodePtr[-1])
            {
              case cImmed:
                y = ImmedPtr[-1];
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "y x[x!=Value_t(0)] cDiv",
                  "[y/x]",
                  "    with x = " << x
                      << ", y = " << y
                      << "\n");
                /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
                goto Lbc;
            }
          }
          switch(ByteCodePtr[-1])
          {
            case cNeg:
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "cNeg x cDiv",
                "[-x] cDiv",
                "    with x = " << x << "\n");
              /* opcode = cDiv; */ // redundant, matches cDiv @ 0
              goto Lbd;
          }
          if(x==Value_t(1))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x==Value_t(1)] cDiv",
              "",
              "    with x = " << x << "\n");
            goto Lam;
          }
          break;
      }
      goto Default0;
  TailCall_cMod:
    case cMod:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          if(x!=Value_t(0))
          {
            switch(ByteCodePtr[-1])
            {
              case cImmed:
                y = ImmedPtr[-1];
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "y x[x!=Value_t(0)] cMod",
                  "[fp_mod(y,x)]",
                  "    with x = " << x
                      << ", y = " << y
                      << "\n");
                /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
                goto Lbe;
            }
          }
          break;
      }
      goto Default0;
  TailCall_cAdd:
    case cAdd:
      switch(ByteCodePtr[0])
      {
        case cDup:
          switch(ByteCodePtr[-1])
          {
            case cAdd:
              switch(ByteCodePtr[-2])
              {
                case cDup:
                  FP_TRACE_BYTECODE_OPTIMIZATION("cDup cAdd cDup cAdd", "[Value_t(4)] cMul", "");
                  goto Lbf;
              }
              break;
          }
          break;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cAdd", "cSub", "");
          goto Lbg;
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cAdd:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "y cAdd x cAdd",
                    "[y+x] cAdd",
                    "    with x = " << x
                        << ", y = " << y
                        << "\n");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cAdd; */ // redundant, matches cAdd @ 2
                  goto Lbh;
              }
              break;
            case cSub:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "y cSub x cAdd",
                    "[y-x] cSub",
                    "    with x = " << x
                        << ", y = " << y
                        << "\n");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cSub; */ // redundant, matches cSub @ 2
                  goto Lbi;
              }
              break;
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cAdd",
                "[y+x]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lbh;
          }
          if(x==Value_t(0))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x==Value_t(0)] cAdd",
              "",
              "    with x = " << x << "\n");
            goto Lam;
          }
          break;
      }
      goto Default0;
  TailCall_cSub:
    case cSub:
      switch(ByteCodePtr[0])
      {
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cSub", "cAdd", "");
          goto Lbj;
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cSub:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "y cSub x cSub",
                    "[y+x] cSub",
                    "    with x = " << x
                        << ", y = " << y
                        << "\n");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cSub; */ // redundant, matches cSub @ 2
                  goto Lbh;
              }
              break;
            case cAdd:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "y cAdd x cSub",
                    "[y-x] cAdd",
                    "    with x = " << x
                        << ", y = " << y
                        << "\n");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cAdd; */ // redundant, matches cAdd @ 2
                  goto Lbi;
              }
              break;
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cSub",
                "[y-x]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lbi;
          }
          if(x==Value_t(0))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x==Value_t(0)] cSub",
              "",
              "    with x = " << x << "\n");
            goto Lam;
          }
          break;
      }
      goto Default0;
  TailCall_cMin:
    case cMin:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cMin",
                "[Min(x,y)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lbk;
          }
          break;
      }
      goto Default0;
  TailCall_cMax:
    case cMax:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cMax",
                "[Max(x,y)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lbl;
          }
          break;
      }
      goto Default0;
  TailCall_cNot:
    case cNot:
      switch(ByteCodePtr[0])
      {
        case cLess:
          FP_TRACE_BYTECODE_OPTIMIZATION("cLess cNot", "cGreaterOrEq", "");
          goto Lbm;
        case cLessOrEq:
          FP_TRACE_BYTECODE_OPTIMIZATION("cLessOrEq cNot", "cGreater", "");
          goto Lbn;
        case cGreater:
          FP_TRACE_BYTECODE_OPTIMIZATION("cGreater cNot", "cLessOrEq", "");
          goto Lca;
        case cGreaterOrEq:
          FP_TRACE_BYTECODE_OPTIMIZATION("cGreaterOrEq cNot", "cLess", "");
          goto Lcb;
        case cEqual:
          FP_TRACE_BYTECODE_OPTIMIZATION("cEqual cNot", "cNEqual", "");
          goto Lcc;
        case cNEqual:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNEqual cNot", "cEqual", "");
          goto Lcd;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cNot", "cNot", "");
          /* opcode = cNot; */ // redundant, matches cNot @ 0
          goto Lce;
        case cAbs:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAbs cNot", "cNot", "");
          /* opcode = cNot; */ // redundant, matches cNot @ 0
          goto Lce;
        case cNot:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNot cNot", "cNotNot", "");
          goto Lcf;
        case cNotNot:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNotNot cNot", "cNot", "");
          /* opcode = cNot; */ // redundant, matches cNot @ 0
          goto Lce;
        case cAbsNotNot:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAbsNotNot cNot", "cAbsNot", "");
          goto Lcg;
        case cAbsNot:
          switch(ByteCodePtr[-1])
          {
            default:
              A = ByteCodePtr[-1];
              if(IsLogicalOpcode(A))
              {
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "A[IsLogicalOpcode(A)] cAbsNot cNot",
                  "A",
                  "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>") << "\n");
                /* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
                goto Lad;
              }
              if(A!=cImmed)
              {
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "A[A!=cImmed] cAbsNot cNot",
                  "A cAbsNotNot",
                  "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>") << "\n");
                /* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
                goto Lch;
              }
          }
          goto Default3;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cNot",
            "[!truthValue(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lci;
        default: Default3:;
          A = ByteCodePtr[0];
          if(IsNeverNegativeValueOpcode(A))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "A[IsNeverNegativeValueOpcode(A)] cNot",
              "A cAbsNot",
              "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>") << "\n");
            /* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
            goto Lcj;
          }
      }
      goto Default0;
  TailCall_cLess:
    case cLess:
      switch(ByteCodePtr[0])
      {
        case cAbs:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAbs[x==Value_t(1)] cLess", "cNot", "");
          goto Lck;
        case cImmed:
          x = ImmedPtr[0];
          if(x==Value_t(1))
          {
            switch(ByteCodePtr[-1])
            {
              default:
                A = ByteCodePtr[-1];
                if(IsNeverNegativeValueOpcode(A))
                {
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(1)] cLess",
                    "A cNot",
                    "    with x = " << x
                        << ", A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                        << "\n");
                  /* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
                  goto Lcl;
                }
            }
          }
          if(x==Value_t(0))
          {
            switch(ByteCodePtr[-1])
            {
              default:
                A = ByteCodePtr[-1];
                if(IsNeverNegativeValueOpcode(A))
                {
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(0)] cLess",
                    "A [x] cMul",
                    "    with x = " << x
                        << ", A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                        << "\n");
                  /* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
                  /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                  /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
                  goto Lcm;
                }
            }
          }
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cLess",
                "[fp_less(y,x)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lcn;
          }
          break;
      }
      goto Default0;
  TailCall_cLessOrEq:
    case cLessOrEq:
      switch(ByteCodePtr[0])
      {
        case cAbs:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAbs[x==Value_t(0)] cLessOrEq", "cNot", "");
          goto Lck;
        case cImmed:
          x = ImmedPtr[0];
          if(x==Value_t(0))
          {
            switch(ByteCodePtr[-1])
            {
              default:
                A = ByteCodePtr[-1];
                if(IsNeverNegativeValueOpcode(A))
                {
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(0)] cLessOrEq",
                    "A cNot",
                    "    with x = " << x
                        << ", A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                        << "\n");
                  /* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
                  goto Lcl;
                }
            }
          }
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cLessOrEq",
                "[fp_lessOrEq(y,x)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lda;
          }
          break;
      }
      goto Default0;
  TailCall_cGreater:
    case cGreater:
      switch(ByteCodePtr[0])
      {
        case cAbs:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAbs[x==Value_t(0)] cGreater", "cNotNot", "");
          goto Lcf;
        case cImmed:
          x = ImmedPtr[0];
          if(x==Value_t(0))
          {
            switch(ByteCodePtr[-1])
            {
              default:
                A = ByteCodePtr[-1];
                if(IsNeverNegativeValueOpcode(A))
                {
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(0)] cGreater",
                    "A cNotNot",
                    "    with x = " << x
                        << ", A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                        << "\n");
                  /* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
                  goto Ldb;
                }
            }
          }
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cGreater",
                "[fp_less(x,y)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Ldc;
          }
          break;
      }
      goto Default0;
  TailCall_cGreaterOrEq:
    case cGreaterOrEq:
      switch(ByteCodePtr[0])
      {
        case cAbs:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAbs[x==Value_t(1)] cGreaterOrEq", "cNotNot", "");
          goto Lcf;
        case cImmed:
          x = ImmedPtr[0];
          if(x==Value_t(1))
          {
            switch(ByteCodePtr[-1])
            {
              default:
                A = ByteCodePtr[-1];
                if(IsNeverNegativeValueOpcode(A))
                {
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(1)] cGreaterOrEq",
                    "A cNotNot",
                    "    with x = " << x
                        << ", A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                        << "\n");
                  /* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
                  goto Ldb;
                }
            }
          }
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cGreaterOrEq",
                "[fp_lessOrEq(x,y)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Ldd;
          }
          break;
      }
      goto Default0;
  TailCall_cEqual:
    case cEqual:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          if(x==Value_t(1))
          {
            switch(ByteCodePtr[-1])
            {
              default:
                A = ByteCodePtr[-1];
                if(IsLogicalOpcode(A))
                {
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "A[IsLogicalOpcode(A)] x[x==Value_t(1)] cEqual",
                    "A",
                    "    with x = " << x
                        << ", A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                        << "\n");
                  /* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
                  goto Lam;
                }
            }
          }
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cEqual",
                "[fp_equal(y,x)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lde;
          }
          if(x==Value_t(0))
          {
            switch(ByteCodePtr[-1])
            {
              case cAbs:
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "cAbs x[x==Value_t(0)] cEqual",
                  "[x] cEqual",
                  "    with x = " << x << "\n");
                /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                /* opcode = cEqual; */ // redundant, matches cEqual @ 0
                goto Ldf;
              case cSqr:
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "cSqr x[x==Value_t(0)] cEqual",
                  "[x] cEqual",
                  "    with x = " << x << "\n");
                /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                /* opcode = cEqual; */ // redundant, matches cEqual @ 0
                goto Ldf;
            }
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x==Value_t(0)] cEqual",
              "cNot",
              "    with x = " << x << "\n");
            goto Lcl;
          }
          break;
      }
      goto Default0;
  TailCall_cNEqual:
    case cNEqual:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          if(x==Value_t(1))
          {
            switch(ByteCodePtr[-1])
            {
              default:
                A = ByteCodePtr[-1];
                if(IsLogicalOpcode(A))
                {
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "A[IsLogicalOpcode(A)] x[x==Value_t(1)] cNEqual",
                    "A cNot",
                    "    with x = " << x
                        << ", A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                        << "\n");
                  /* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
                  goto Lcl;
                }
            }
          }
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cNEqual",
                "[fp_nequal(y,x)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Ldg;
          }
          if(x==Value_t(0))
          {
            switch(ByteCodePtr[-1])
            {
              case cAbs:
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "cAbs x[x==Value_t(0)] cNEqual",
                  "[x] cNEqual",
                  "    with x = " << x << "\n");
                /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                /* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
                goto Ldh;
              case cSqr:
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "cSqr x[x==Value_t(0)] cNEqual",
                  "[x] cNEqual",
                  "    with x = " << x << "\n");
                /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                /* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
                goto Ldh;
            }
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x==Value_t(0)] cNEqual",
              "cNotNot",
              "    with x = " << x << "\n");
            goto Ldb;
          }
          break;
      }
      goto Default0;
  TailCall_cAnd:
    case cAnd:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cAnd",
                "[truthValue(x)&&truthValue(y)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Ldi;
          }
          break;
      }
      goto Default0;
  TailCall_cOr:
    case cOr:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cOr",
                "[truthValue(x)||truthValue(y)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Ldj;
          }
          break;
      }
      goto Default0;
    default: Default0:;
      A = opcode;
      if(IsComparisonOpcode(A))
      {
        switch(ByteCodePtr[0])
        {
          case cImmed:
            x = ImmedPtr[0];
            switch(ByteCodePtr[-1])
            {
              case cAdd:
                switch(ByteCodePtr[-2])
                {
                  case cImmed:
                    y = ImmedPtr[-1];
                    FP_TRACE_BYTECODE_OPTIMIZATION(
                      "y cAdd x A[IsComparisonOpcode(A)]",
                      "[x-y] A",
                      "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                          << ", x = " << x
                          << ", y = " << y
                          << "\n");
                    /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                    goto Ldk;
                }
                break;
              case cSub:
                switch(ByteCodePtr[-2])
                {
                  case cImmed:
                    y = ImmedPtr[-1];
                    FP_TRACE_BYTECODE_OPTIMIZATION(
                      "y cSub x A[IsComparisonOpcode(A)]",
                      "[x+y] A",
                      "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                          << ", x = " << x
                          << ", y = " << y
                          << "\n");
                    /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                    goto Ldl;
                }
                break;
              case cNeg:
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "cNeg x A[IsComparisonOpcode(A)]",
                  "[-x] {OppositeComparisonOpcode(A)}",
                  "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                      << ", x = " << x
                      << "\n");
                goto Ldm;
            }
            break;
        }
      }
      if(A >= VarBegin)
      {
        switch(ByteCodePtr[0])
        {
          default:
            B = ByteCodePtr[0];
            if(B==A)
            {
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "B[B==A] A[A >= VarBegin]",
                "A cDup",
                "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                    << ", B = " << (B < VarBegin ? FP_GetOpcodeName(OPCODE(B)) : "<var>")
                    << "\n");
              goto Ldn;
            }
        }
      }
      if(IsUnaryOpcode(A))
      {
        switch(ByteCodePtr[0])
        {
          default:
            B = ByteCodePtr[0];
            if(B >= VarBegin)
            {
              switch(ByteCodePtr[-1])
              {
                default:
                  C = ByteCodePtr[-1];
                  if(C==A)
                  {
                    switch(ByteCodePtr[-2])
                    {
                      default:
                        D = ByteCodePtr[-2];
                        if(D==B)
                        {
                          FP_TRACE_BYTECODE_OPTIMIZATION(
                            "D[D==B] C[C==A] B[B >= VarBegin] A[IsUnaryOpcode(A)]",
                            "D C cDup",
                            "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                                << ", B = " << (B < VarBegin ? FP_GetOpcodeName(OPCODE(B)) : "<var>")
                                << ", C = " << (C < VarBegin ? FP_GetOpcodeName(OPCODE(C)) : "<var>")
                                << ", D = " << (D < VarBegin ? FP_GetOpcodeName(OPCODE(D)) : "<var>")
                                << "\n");
                          /* ByteCodePtr[-2] = D; */ // redundant, matches D @ 3
                          /* ByteCodePtr[-1] = C; */ // redundant, matches C @ 2
                          goto Lea;
                        }
                    }
                  }
              }
            }
        }
      }
  }
  goto Leb;
Laa: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     goto TailCall_cAbs;
Lab: ImmedPtr[0] = fp_abs(x); return;
Lac: ImmedPtr[0] = -x; return;
Lad: data->ByteCode.pop_back(); return;
Lae: ImmedPtr[0] = Value_t(1)/x; return;
Laf: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cDiv;
Lec: goto TailCall_cDiv;
Lag: data->ByteCode.pop_back();
     AddFunctionOpcode(cSqr); return;
Lah: ByteCodePtr[-1] = cImmed;
     ByteCodePtr -= 1;
     data->ByteCode.pop_back();
Led: goto TailCall_cMul;
Lai: ByteCodePtr[-1] = cImmed; goto Lad;
Laj: ImmedPtr[0] = -x; goto Lah;
Lak: data->Immed.pop_back();
     data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back(); goto Lad;
Lal: ImmedPtr[-1] = y*x;
Lam: data->Immed.pop_back(); goto Lad;
Lan: ByteCodePtr[0] = cDup;
     ImmedPtr -= 1;
     data->Immed.pop_back();
Lee: opcode = cAdd;
     goto TailCall_cAdd;
Lba: data->Immed.pop_back();
     data->ByteCode.pop_back();
     opcode = cNeg;
     FP_ReDefinePointers();
     goto TailCall_cNeg;
Lbb: data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cSqr);
Lef: FP_ReDefinePointers(); goto Led;
Lbc: ImmedPtr[-1] = y/x; goto Lam;
Lbd: ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     ByteCodePtr -= 1;
     data->ByteCode.pop_back(); goto Lec;
Lbe: ImmedPtr[-1] = fp_mod(y,x); goto Lam;
Lbf: data->Immed.push_back(Value_t(4));
     ByteCodePtr[-2] = cImmed;
     ByteCodePtr -= 2;
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     opcode = cMul; goto Lef;
Lbg: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cSub;
     goto TailCall_cSub;
Lbh: ImmedPtr[-1] = y+x; goto Lam;
Lbi: ImmedPtr[-1] = y-x; goto Lam;
Lbj: ByteCodePtr -= 1;
     data->ByteCode.pop_back(); goto Lee;
Lbk: ImmedPtr[-1] = Min(x,y); goto Lam;
Lbl: ImmedPtr[-1] = Max(x,y); goto Lam;
Lbm: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cGreaterOrEq;
     goto TailCall_cGreaterOrEq;
Lbn: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cGreater;
     goto TailCall_cGreater;
Lca: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cLessOrEq;
     goto TailCall_cLessOrEq;
Lcb: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cLess;
     goto TailCall_cLess;
Lcc: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cNEqual;
Leg: goto TailCall_cNEqual;
Lcd: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cEqual;
Leh: goto TailCall_cEqual;
Lce: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
Lei: goto TailCall_cNot;
Lcf: data->ByteCode.pop_back();
     AddFunctionOpcode(cNotNot); return;
Lcg: data->ByteCode.pop_back();
Lcj: AddFunctionOpcode(cAbsNot); return;
Lch: data->ByteCode.pop_back();
     AddFunctionOpcode(cAbsNotNot); return;
Lci: ImmedPtr[0] = !truthValue(x); return;
Lck: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cNot; goto Lei;
Lcl: data->Immed.pop_back();
     data->ByteCode.pop_back();
     opcode = cNot;
     FP_ReDefinePointers(); goto Lei;
Lcm: opcode = cMul; goto Led;
Lcn: ImmedPtr[-1] = fp_less(y,x); goto Lam;
Lda: ImmedPtr[-1] = fp_lessOrEq(y,x); goto Lam;
Ldb: data->Immed.pop_back(); goto Lcf;
Ldc: ImmedPtr[-1] = fp_less(x,y); goto Lam;
Ldd: ImmedPtr[-1] = fp_lessOrEq(x,y); goto Lam;
Lde: ImmedPtr[-1] = fp_equal(y,x); goto Lam;
Ldf: ByteCodePtr[-1] = cImmed;
     ByteCodePtr -= 1;
     data->ByteCode.pop_back(); goto Leh;
Ldg: ImmedPtr[-1] = fp_nequal(y,x); goto Lam;
Ldh: ByteCodePtr[-1] = cImmed;
     ByteCodePtr -= 1;
     data->ByteCode.pop_back(); goto Leg;
Ldi: ImmedPtr[-1] = truthValue(x)&&truthValue(y); goto Lam;
Ldj: ImmedPtr[-1] = truthValue(x)||truthValue(y); goto Lam;
Ldk: ImmedPtr[-1] = x-y;
Lej: data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(A); return;
Ldl: ImmedPtr[-1] = x+y; goto Lej;
Ldm: ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     data->ByteCode.pop_back();
     AddFunctionOpcode(OppositeComparisonOpcode(A)); return;
Ldn: data->ByteCode.pop_back();
     AddFunctionOpcode(A);
     data->ByteCode.push_back(cDup); return;
Lea: ByteCodePtr[0] = cDup; return;
Leb: data->ByteCode.push_back(opcode); return;
return;
// This list of dummy gotos is here to inhibit
// compiler warnings on unused labels
goto TailCall_cAnd;goto TailCall_cGreater;goto TailCall_cGreaterOrEq;
goto TailCall_cInv;goto TailCall_cLess;goto TailCall_cLessOrEq;
goto TailCall_cMax;goto TailCall_cMin;goto TailCall_cMod;
goto TailCall_cOr;goto TailCall_cSub;
#endif

#if(FP_FLOAT_VERSION)
  Value_t x;
  Value_t y;
  unsigned A;
  unsigned B;
  unsigned C;
  unsigned D;
  switch(opcode)
  {
  TailCall_cPow:
    case cPow:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          if(!isEvenInteger(x*Value_t(2)))
          {
            switch(ByteCodePtr[-1])
            {
              case cSqr:
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "cSqr x[!isEvenInteger(x*Value_t(2))] cPow",
                  "cAbs [x*Value_t(2)] cPow",
                  "    with x = " << x << "\n");
                /* opcode = cPow; */ // redundant, matches cPow @ 0
                goto Laa;
            }
          }
          if(IsIntegerConst(x))
          {
            switch(ByteCodePtr[-1])
            {
              case cPow:
                switch(ByteCodePtr[-2])
                {
                  case cImmed:
                    y = ImmedPtr[-1];
                    if(!IsIntegerConst(y))
                    {
                      FP_TRACE_BYTECODE_OPTIMIZATION(
                        "y[!IsIntegerConst(y)] cPow x[IsIntegerConst(x)] cPow",
                        "[y*x] cPow",
                        "    with x = " << x
                            << ", y = " << y
                            << "\n");
                      /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                      /* ByteCodePtr[-1] = cPow; */ // redundant, matches cPow @ 2
                      goto Lab;
                    }
                    break;
                }
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "cPow x[IsIntegerConst(x)] cPow",
                  "[x] cMul cPow",
                  "    with x = " << x << "\n");
                /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                /* opcode = cPow; */ // redundant, matches cPow @ 0
                goto Lac;
              case cExp:
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "cExp x[IsIntegerConst(x)] cPow",
                  "[x] cMul cExp",
                  "    with x = " << x << "\n");
                /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                goto Lad;
              case cExp2:
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "cExp2 x[IsIntegerConst(x)] cPow",
                  "[x] cMul cExp2",
                  "    with x = " << x << "\n");
                /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                goto Lae;
            }
          }
          if(isEvenInteger(x))
          {
            switch(ByteCodePtr[-1])
            {
              case cAbs:
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "cAbs x[isEvenInteger(x)] cPow",
                  "[x] cPow",
                  "    with x = " << x << "\n");
                /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                /* opcode = cPow; */ // redundant, matches cPow @ 0
                goto Laf;
              case cMul:
                switch(ByteCodePtr[-2])
                {
                  case cAbs:
                    FP_TRACE_BYTECODE_OPTIMIZATION(
                      "cAbs cMul x[isEvenInteger(x)] cPow",
                      "cMul [x] cPow",
                      "    with x = " << x << "\n");
                    /* opcode = cPow; */ // redundant, matches cPow @ 0
                    goto Lag;
                }
                break;
            }
          }
          if(x==Value_t(0.5))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x==Value_t(0.5)] cPow",
              "cSqrt",
              "    with x = " << x << "\n");
            goto Lah;
          }
          if(x==Value_t(1)/Value_t(3))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x==Value_t(1)/Value_t(3)] cPow",
              "cCbrt",
              "    with x = " << x << "\n");
            goto Lai;
          }
          if(x==Value_t(1)/Value_t(-3))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x==Value_t(1)/Value_t(-3)] cPow",
              "cCbrt cInv",
              "    with x = " << x << "\n");
            goto Laj;
          }
          if(x==Value_t(-0.5))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x==Value_t(-0.5)] cPow",
              "cRSqrt",
              "    with x = " << x << "\n");
            goto Lak;
          }
          if(x==Value_t(-1))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x==Value_t(-1)] cPow",
              "cInv",
              "    with x = " << x << "\n");
            goto Lal;
          }
          switch(ByteCodePtr[-1])
          {
            case cPow:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  if(isEvenInteger(y)&&!isEvenInteger(x*y))
                  {
                    FP_TRACE_BYTECODE_OPTIMIZATION(
                      "y[isEvenInteger(y)&&!isEvenInteger(x*y)] cPow x cPow",
                      "cAbs [y*x] cPow",
                      "    with x = " << x
                          << ", y = " << y
                          << "\n");
                    /* opcode = cPow; */ // redundant, matches cPow @ 0
                    goto Lam;
                  }
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "y cPow x cPow",
                    "[y*x] cPow",
                    "    with x = " << x
                        << ", y = " << y
                        << "\n");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cPow; */ // redundant, matches cPow @ 2
                  goto Lab;
              }
              break;
            case cSqr:
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "cSqr x cPow",
                "[x*Value_t(2)] cPow",
                "    with x = " << x << "\n");
              /* opcode = cPow; */ // redundant, matches cPow @ 0
              goto Lan;
            case cImmed:
              y = ImmedPtr[-1];
              if( y!=Value_t(0) || x>=Value_t(0))
              {
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "y[ y!=Value_t(0) || x>=Value_t(0)] x cPow",
                  "[fp_pow(y,x)]",
                  "    with x = " << x
                      << ", y = " << y
                      << "\n");
                /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
                goto Lba;
              }
              break;
          }
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cPow",
            "[DO_POWI]",
            "    with x = " << x << "\n");
          if(TryCompilePowi(x))
            return;
          break;
      }
      goto Default0;
  TailCall_cSqrt:
    case cSqrt:
      switch(ByteCodePtr[0])
      {
        case cSqr:
          FP_TRACE_BYTECODE_OPTIMIZATION("cSqr cSqrt", "cAbs", "");
          goto Lbb;
        case cImmed:
          x = ImmedPtr[0];
          if(x>=Value_t(0))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x>=Value_t(0)] cSqrt",
              "[fp_sqrt(x)]",
              "    with x = " << x << "\n");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Lbc;
          }
          break;
      }
      goto Default0;
  TailCall_cAbs:
    case cAbs:
      switch(ByteCodePtr[0])
      {
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cAbs", "cAbs", "");
          /* opcode = cAbs; */ // redundant, matches cAbs @ 0
          goto Lbd;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cAbs",
            "[fp_abs(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lbe;
        default:
          A = ByteCodePtr[0];
          if(IsNeverNegativeValueOpcode(A))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "A[IsNeverNegativeValueOpcode(A)] cAbs",
              "A",
              "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>") << "\n");
            /* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
            return;
          }
      }
      goto Default0;
  TailCall_cAcos:
    case cAcos:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cAcos",
            "[fp_acos(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lbf;
      }
      goto Default0;
  TailCall_cAcosh:
    case cAcosh:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          if(x>=Value_t(-1)&&x<=Value_t(1))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x>=Value_t(-1)&&x<=Value_t(1)] cAcosh",
              "[fp_acosh(x)]",
              "    with x = " << x << "\n");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Lbg;
          }
          break;
      }
      goto Default0;
  TailCall_cAsinh:
    case cAsinh:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          if(x>=Value_t(-1)&&x<=Value_t(1))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x>=Value_t(-1)&&x<=Value_t(1)] cAsinh",
              "[fp_asinh(x)]",
              "    with x = " << x << "\n");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Lbh;
          }
          break;
      }
      goto Default0;
  TailCall_cAtan:
    case cAtan:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cAtan",
            "[fp_atan(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lbi;
      }
      goto Default0;
  TailCall_cAtanh:
    case cAtanh:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cAtanh",
            "[fp_atanh(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lbj;
      }
      goto Default0;
  TailCall_cCbrt:
    case cCbrt:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cCbrt",
            "[fp_cbrt(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lbk;
      }
      goto Default0;
  TailCall_cCeil:
    case cCeil:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cCeil",
            "[fp_ceil(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lbl;
        default:
          A = ByteCodePtr[0];
          if(IsAlwaysIntegerOpcode(A))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "A[IsAlwaysIntegerOpcode(A)] cCeil",
              "A",
              "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>") << "\n");
            /* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
            return;
          }
      }
      goto Default0;
  TailCall_cCos:
    case cCos:
      switch(ByteCodePtr[0])
      {
        case cAcos:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAcos cCos", "", "");
          goto Lbm;
        case cAbs:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAbs cCos", "cCos", "");
          /* opcode = cCos; */ // redundant, matches cCos @ 0
          goto Lbn;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cCos", "cCos", "");
          /* opcode = cCos; */ // redundant, matches cCos @ 0
          goto Lbn;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cCos",
            "[fp_cos(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lca;
      }
      goto Default0;
  TailCall_cCosh:
    case cCosh:
      switch(ByteCodePtr[0])
      {
        case cAcosh:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAcosh cCosh", "", "");
          goto Lbm;
        case cAbs:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAbs cCosh", "cCosh", "");
          /* opcode = cCosh; */ // redundant, matches cCosh @ 0
          goto Lcb;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cCosh", "cCosh", "");
          /* opcode = cCosh; */ // redundant, matches cCosh @ 0
          goto Lcb;
        case cAsinh:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAsinh cCosh", "[DO_STACKPLUS1] cSqr [Value_t(1)] cAdd cSqrt", "");
          incStackPtr();
          --StackPtr;
          goto Lcc;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cCosh",
            "[fp_cosh(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lcd;
      }
      goto Default0;
  TailCall_cExp:
    case cExp:
      switch(ByteCodePtr[0])
      {
        case cLog:
          FP_TRACE_BYTECODE_OPTIMIZATION("cLog cExp", "", "");
          goto Lbm;
        case cAdd:
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              x = ImmedPtr[0];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "x cAdd cExp",
                "cExp [fp_exp(x)] cMul",
                "    with x = " << x << "\n");
              goto Lce;
          }
          break;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cExp",
            "[fp_exp(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lcf;
      }
      goto Default0;
  TailCall_cExp2:
    case cExp2:
      switch(ByteCodePtr[0])
      {
        case cLog2:
          FP_TRACE_BYTECODE_OPTIMIZATION("cLog2 cExp2", "", "");
          goto Lbm;
        case cAdd:
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              x = ImmedPtr[0];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "x cAdd cExp2",
                "cExp2 [fp_exp2(x)] cMul",
                "    with x = " << x << "\n");
              goto Lcg;
          }
          break;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cExp2",
            "[fp_exp2(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lch;
      }
      FP_TRACE_BYTECODE_OPTIMIZATION("cExp2", "[DO_STACKPLUS1] [fp_log(Value_t(2))] cMul cExp", "");
      incStackPtr();
      --StackPtr;
      goto Lci;
  TailCall_cFloor:
    case cFloor:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cFloor",
            "[fp_floor(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lcj;
        default:
          A = ByteCodePtr[0];
          if(IsAlwaysIntegerOpcode(A))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "A[IsAlwaysIntegerOpcode(A)] cFloor",
              "A",
              "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>") << "\n");
            /* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
            return;
          }
      }
      goto Default0;
  TailCall_cInt:
    case cInt:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cInt",
            "[fp_int(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lck;
        default:
          A = ByteCodePtr[0];
          if(IsAlwaysIntegerOpcode(A))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "A[IsAlwaysIntegerOpcode(A)] cInt",
              "A",
              "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>") << "\n");
            /* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
            return;
          }
      }
      goto Default0;
  TailCall_cLog:
    case cLog:
      switch(ByteCodePtr[0])
      {
        case cSqr:
          FP_TRACE_BYTECODE_OPTIMIZATION("cSqr cLog", "cAbs cLog cDup cAdd", "");
          goto Lcl;
        case cExp:
          FP_TRACE_BYTECODE_OPTIMIZATION("cExp cLog", "", "");
          goto Lbm;
        case cMul:
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              x = ImmedPtr[0];
              if(x>Value_t(0))
              {
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "x[x>Value_t(0)] cMul cLog",
                  "cLog [fp_log(x)] cAdd",
                  "    with x = " << x << "\n");
                goto Lcm;
              }
              break;
          }
          break;
        case cImmed:
          x = ImmedPtr[0];
          if(x>=Value_t(0))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x>=Value_t(0)] cLog",
              "[fp_log(x)]",
              "    with x = " << x << "\n");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Lcn;
          }
          break;
      }
      goto Default0;
  TailCall_cLog10:
    case cLog10:
      switch(ByteCodePtr[0])
      {
        case cSqr:
          FP_TRACE_BYTECODE_OPTIMIZATION("cSqr cLog10", "cAbs cLog10 cDup cAdd", "");
          goto Lda;
        case cExp:
          FP_TRACE_BYTECODE_OPTIMIZATION("cExp cLog10", "[DO_STACKPLUS1] [fp_log10(const_e<Value_t>())] cMul", "");
          incStackPtr();
          --StackPtr;
          goto Ldb;
        case cMul:
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              x = ImmedPtr[0];
              if(x>Value_t(0))
              {
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "x[x>Value_t(0)] cMul cLog10",
                  "cLog10 [fp_log10(x)] cAdd",
                  "    with x = " << x << "\n");
                goto Ldc;
              }
              break;
          }
          break;
        case cImmed:
          x = ImmedPtr[0];
          if(x>=Value_t(0))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x>=Value_t(0)] cLog10",
              "[fp_log10(x)]",
              "    with x = " << x << "\n");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Ldd;
          }
          break;
      }
      goto Default0;
  TailCall_cLog2:
    case cLog2:
      switch(ByteCodePtr[0])
      {
        case cSqr:
          FP_TRACE_BYTECODE_OPTIMIZATION("cSqr cLog2", "cAbs cLog2 cDup cAdd", "");
          goto Lde;
        case cExp2:
          FP_TRACE_BYTECODE_OPTIMIZATION("cExp2 cLog2", "", "");
          goto Lbm;
        case cExp:
          FP_TRACE_BYTECODE_OPTIMIZATION("cExp cLog2", "[DO_STACKPLUS1] [fp_log2(const_e<Value_t>())] cMul", "");
          incStackPtr();
          --StackPtr;
          goto Ldf;
        case cMul:
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              x = ImmedPtr[0];
              if(x>Value_t(0))
              {
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "x[x>Value_t(0)] cMul cLog2",
                  "cLog2 [fp_log2(x)] cAdd",
                  "    with x = " << x << "\n");
                goto Ldg;
              }
              break;
          }
          break;
        case cImmed:
          x = ImmedPtr[0];
          if(x>=Value_t(0))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x>=Value_t(0)] cLog2",
              "[fp_log2(x)]",
              "    with x = " << x << "\n");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Ldh;
          }
          break;
      }
      goto Default0;
  TailCall_cSin:
    case cSin:
      switch(ByteCodePtr[0])
      {
        case cAsin:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAsin cSin", "", "");
          goto Lbm;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cSin", "cSin cNeg", "");
          goto Ldi;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cSin",
            "[fp_sin(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Ldj;
      }
      goto Default0;
  TailCall_cSinh:
    case cSinh:
      switch(ByteCodePtr[0])
      {
        case cAsinh:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAsinh cSinh", "", "");
          goto Lbm;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cSinh", "cSinh cNeg", "");
          goto Ldk;
        case cAcosh:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAcosh cSinh", "[DO_STACKPLUS1] cSqr [Value_t(-1)] cAdd cSqrt", "");
          incStackPtr();
          --StackPtr;
          goto Ldl;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cSinh",
            "[fp_sinh(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Ldm;
      }
      goto Default0;
  TailCall_cTan:
    case cTan:
      switch(ByteCodePtr[0])
      {
        case cAtan:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAtan cTan", "", "");
          goto Lbm;
        case cAtan2:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAtan2 cTan", "cDiv", "");
          goto Ldn;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cTan", "cTan cNeg", "");
          goto Lea;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cTan",
            "[fp_tan(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Leb;
      }
      goto Default0;
  TailCall_cTanh:
    case cTanh:
      switch(ByteCodePtr[0])
      {
        case cAtanh:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAtanh cTanh", "", "");
          goto Lbm;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cTanh", "cTanh cNeg", "");
          goto Lec;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cTanh",
            "[fp_tanh(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Led;
      }
      goto Default0;
  TailCall_cTrunc:
    case cTrunc:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cTrunc",
            "[fp_trunc(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lee;
        default:
          A = ByteCodePtr[0];
          if(IsAlwaysIntegerOpcode(A))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "A[IsAlwaysIntegerOpcode(A)] cTrunc",
              "A",
              "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>") << "\n");
            /* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
            return;
          }
      }
      goto Default0;
  TailCall_cDeg:
    case cDeg:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cDeg",
            "[RadiansToDegrees(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lef;
      }
      goto Default0;
  TailCall_cRad:
    case cRad:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cRad",
            "[DegreesToRadians(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Leg;
      }
      goto Default0;
  TailCall_cNeg:
    case cNeg:
      switch(ByteCodePtr[0])
      {
        case cMul:
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              x = ImmedPtr[0];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "x cMul cNeg",
                "[-x] cMul",
                "    with x = " << x << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
              /* ByteCodePtr[0] = cMul; */ // redundant, matches cMul @ 1
              goto Leh;
          }
          break;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cNeg", "", "");
          goto Lbm;
        case cFloor:
          FP_TRACE_BYTECODE_OPTIMIZATION("cFloor cNeg", "cNeg cCeil", "");
          goto Lei;
        case cCeil:
          FP_TRACE_BYTECODE_OPTIMIZATION("cCeil cNeg", "cNeg cFloor", "");
          goto Lej;
        case cSin:
          switch(ByteCodePtr[-1])
          {
            case cMul:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  x = ImmedPtr[0];
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "x cMul cSin cNeg",
                    "[-x] cMul cSin",
                    "    with x = " << x << "\n");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
                  /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                  /* ByteCodePtr[0] = cSin; */ // redundant, matches cSin @ 1
                  goto Leh;
              }
              break;
          }
          break;
        case cSinh:
          switch(ByteCodePtr[-1])
          {
            case cMul:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  x = ImmedPtr[0];
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "x cMul cSinh cNeg",
                    "[-x] cMul cSinh",
                    "    with x = " << x << "\n");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
                  /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                  /* ByteCodePtr[0] = cSinh; */ // redundant, matches cSinh @ 1
                  goto Leh;
              }
              break;
          }
          break;
        case cTan:
          switch(ByteCodePtr[-1])
          {
            case cMul:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  x = ImmedPtr[0];
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "x cMul cTan cNeg",
                    "[-x] cMul cTan",
                    "    with x = " << x << "\n");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
                  /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                  /* ByteCodePtr[0] = cTan; */ // redundant, matches cTan @ 1
                  goto Leh;
              }
              break;
          }
          break;
        case cTanh:
          switch(ByteCodePtr[-1])
          {
            case cMul:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  x = ImmedPtr[0];
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "x cMul cTanh cNeg",
                    "[-x] cMul cTanh",
                    "    with x = " << x << "\n");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
                  /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                  /* ByteCodePtr[0] = cTanh; */ // redundant, matches cTanh @ 1
                  goto Leh;
              }
              break;
          }
          break;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cNeg",
            "[-x]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Leh;
      }
      goto Default0;
  TailCall_cInv:
    case cInv:
      switch(ByteCodePtr[0])
      {
        case cInv:
          FP_TRACE_BYTECODE_OPTIMIZATION("cInv cInv", "", "");
          goto Lbm;
        case cPow:
          FP_TRACE_BYTECODE_OPTIMIZATION("cPow cInv", "cNeg cPow", "");
          goto Lek;
        case cSin:
          FP_TRACE_BYTECODE_OPTIMIZATION("cSin cInv", "cCsc", "");
          goto Lel;
        case cCos:
          FP_TRACE_BYTECODE_OPTIMIZATION("cCos cInv", "cSec", "");
          goto Lem;
        case cTan:
          FP_TRACE_BYTECODE_OPTIMIZATION("cTan cInv", "cCot", "");
          goto Len;
        case cCsc:
          FP_TRACE_BYTECODE_OPTIMIZATION("cCsc cInv", "cSin", "");
          goto Lfa;
        case cSec:
          FP_TRACE_BYTECODE_OPTIMIZATION("cSec cInv", "cCos", "");
          goto Lfb;
        case cCot:
          FP_TRACE_BYTECODE_OPTIMIZATION("cCot cInv", "cTan", "");
          goto Lfc;
        case cImmed:
          x = ImmedPtr[0];
          if(x!=Value_t(0))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x!=Value_t(0)] cInv",
              "[Value_t(1)/x]",
              "    with x = " << x << "\n");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Lfd;
          }
          break;
      }
      goto Default0;
  TailCall_cMul:
    case cMul:
      switch(ByteCodePtr[0])
      {
        case cInv:
          FP_TRACE_BYTECODE_OPTIMIZATION("cInv cMul", "cDiv", "");
          goto Ldn;
        case cPow:
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              x = ImmedPtr[0];
              if(x<0)
              {
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "x[x<0] cPow cMul",
                  "[-x] cPow cDiv",
                  "    with x = " << x << "\n");
                /* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
                /* ByteCodePtr[0] = cPow; */ // redundant, matches cPow @ 1
                goto Lfe;
              }
              break;
          }
          goto Default1;
        case cDup:
          FP_TRACE_BYTECODE_OPTIMIZATION("cDup cMul", "cSqr", "");
          goto Lff;
        case cImmed:
          x = ImmedPtr[0];
          if(x==Value_t(0))
          {
            switch(ByteCodePtr[-1])
            {
              case cMul:
                switch(ByteCodePtr[-2])
                {
                  default:
                    A = ByteCodePtr[-2];
                    if(A>=VarBegin)
                    {
                      FP_TRACE_BYTECODE_OPTIMIZATION(
                        "A[A>=VarBegin] cMul x[x==Value_t(0)] cMul",
                        "A [x] cMul",
                        "    with x = " << x
                            << ", A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                            << "\n");
                      /* ByteCodePtr[-2] = A; */ // redundant, matches A @ 3
                      /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                      /* opcode = cMul; */ // redundant, matches cMul @ 0
                      goto Lfg;
                    }
                }
                goto Default2;
              default: Default2:;
                A = ByteCodePtr[-1];
                if(A >= VarBegin)
                {
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "A[A >= VarBegin] x[x==Value_t(0)] cMul",
                    "[x]",
                    "    with x = " << x
                        << ", A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                        << "\n");
                  /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                  goto Lfh;
                }
                if(A>=VarBegin)
                {
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "A[A>=VarBegin] x[x==Value_t(0)] cMul",
                    "[x]",
                    "    with x = " << x
                        << ", A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                        << "\n");
                  /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                  goto Lfh;
                }
            }
          }
          switch(ByteCodePtr[-1])
          {
            case cDeg:
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "cDeg x cMul",
                "[RadiansToDegrees(x)] cMul",
                "    with x = " << x << "\n");
              /* opcode = cMul; */ // redundant, matches cMul @ 0
              goto Lfi;
            case cRad:
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "cRad x cMul",
                "[DegreesToRadians(x)] cMul",
                "    with x = " << x << "\n");
              /* opcode = cMul; */ // redundant, matches cMul @ 0
              goto Lfj;
            case cNeg:
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "cNeg x cMul",
                "[-x] cMul",
                "    with x = " << x << "\n");
              /* opcode = cMul; */ // redundant, matches cMul @ 0
              goto Lfk;
            case cMul:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  if((y*x)==GetRadiansToDegreesFactor<Value_t>())
                  {
                    FP_TRACE_BYTECODE_OPTIMIZATION(
                      "y[(y*x)==GetRadiansToDegreesFactor<Value_t>()] cMul x cMul",
                      "cDeg",
                      "    with x = " << x
                          << ", y = " << y
                          << "\n");
                    goto Lfl;
                  }
                  if((y*x)==GetDegreesToRadiansFactor<Value_t>())
                  {
                    FP_TRACE_BYTECODE_OPTIMIZATION(
                      "y[(y*x)==GetDegreesToRadiansFactor<Value_t>()] cMul x cMul",
                      "cRad",
                      "    with x = " << x
                          << ", y = " << y
                          << "\n");
                    goto Lfm;
                  }
                  if(y*x==Value_t(1))
                  {
                    FP_TRACE_BYTECODE_OPTIMIZATION(
                      "y[y*x==Value_t(1)] cMul x cMul",
                      "",
                      "    with x = " << x
                          << ", y = " << y
                          << "\n");
                    goto Lfn;
                  }
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "y cMul x cMul",
                    "[y*x] cMul",
                    "    with x = " << x
                        << ", y = " << y
                        << "\n");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                  goto Lab;
              }
              break;
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cMul",
                "[y*x]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lab;
          }
          if(x==Value_t(1))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x==Value_t(1)] cMul",
              "",
              "    with x = " << x << "\n");
            goto Lga;
          }
          if(x==Value_t(2))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x==Value_t(2)] cMul",
              "cDup cAdd",
              "    with x = " << x << "\n");
            goto Lgb;
          }
          if(x==GetRadiansToDegreesFactor<Value_t>())
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x==GetRadiansToDegreesFactor<Value_t>()] cMul",
              "cDeg",
              "    with x = " << x << "\n");
            goto Lgc;
          }
          if(x==GetDegreesToRadiansFactor<Value_t>())
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x==GetDegreesToRadiansFactor<Value_t>()] cMul",
              "cRad",
              "    with x = " << x << "\n");
            goto Lgd;
          }
          if(x==Value_t(-1))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x==Value_t(-1)] cMul",
              "cNeg",
              "    with x = " << x << "\n");
            goto Lge;
          }
          break;
        default: Default1:;
          A = ByteCodePtr[0];
          if(A >= VarBegin)
          {
            switch(ByteCodePtr[-1])
            {
              case cMul:
                switch(ByteCodePtr[-2])
                {
                  default:
                    B = ByteCodePtr[-2];
                    if(B==A)
                    {
                      FP_TRACE_BYTECODE_OPTIMIZATION(
                        "B[B==A] cMul A[A >= VarBegin] cMul",
                        "B cSqr cMul",
                        "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                            << ", B = " << (B < VarBegin ? FP_GetOpcodeName(OPCODE(B)) : "<var>")
                            << "\n");
                      /* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
                      /* opcode = cMul; */ // redundant, matches cMul @ 0
                      goto Lgf;
                    }
                }
                goto Default3;
              default: Default3:;
                B = ByteCodePtr[-1];
                if(B==A)
                {
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "B[B==A] A[A >= VarBegin] cMul",
                    "B cSqr",
                    "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                        << ", B = " << (B < VarBegin ? FP_GetOpcodeName(OPCODE(B)) : "<var>")
                        << "\n");
                  /* ByteCodePtr[-1] = B; */ // redundant, matches B @ 2
                  goto Lff;
                }
            }
          }
      }
      goto Default0;
  TailCall_cDiv:
    case cDiv:
      switch(ByteCodePtr[0])
      {
        case cInv:
          FP_TRACE_BYTECODE_OPTIMIZATION("cInv cDiv", "cMul", "");
          goto Lgg;
        case cExp:
          switch(ByteCodePtr[-1])
          {
            case cMul:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  x = ImmedPtr[0];
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "x cMul cExp cDiv",
                    "[-x] cMul cExp cMul",
                    "    with x = " << x << "\n");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
                  /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                  /* ByteCodePtr[0] = cExp; */ // redundant, matches cExp @ 1
                  goto Lgh;
              }
              break;
          }
          break;
        case cExp2:
          switch(ByteCodePtr[-1])
          {
            case cMul:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  x = ImmedPtr[0];
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "x cMul cExp2 cDiv",
                    "[-x] cMul cExp2 cMul",
                    "    with x = " << x << "\n");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
                  /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                  /* ByteCodePtr[0] = cExp2; */ // redundant, matches cExp2 @ 1
                  goto Lgh;
              }
              break;
          }
          break;
        case cSin:
          FP_TRACE_BYTECODE_OPTIMIZATION("cSin cDiv", "cCsc cMul", "");
          goto Lgi;
        case cCos:
          FP_TRACE_BYTECODE_OPTIMIZATION("cCos cDiv", "cSec cMul", "");
          goto Lgj;
        case cTan:
          FP_TRACE_BYTECODE_OPTIMIZATION("cTan cDiv", "cCot cMul", "");
          goto Lgk;
        case cCsc:
          FP_TRACE_BYTECODE_OPTIMIZATION("cCsc cDiv", "cSin cMul", "");
          goto Lgl;
        case cSec:
          FP_TRACE_BYTECODE_OPTIMIZATION("cSec cDiv", "cCos cMul", "");
          goto Lgm;
        case cCot:
          FP_TRACE_BYTECODE_OPTIMIZATION("cCot cDiv", "cTan cMul", "");
          goto Lgn;
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cNeg:
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "cNeg x cDiv",
                "[-x] cDiv",
                "    with x = " << x << "\n");
              /* opcode = cDiv; */ // redundant, matches cDiv @ 0
              goto Lha;
          }
          if(x==Value_t(1))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x==Value_t(1)] cDiv",
              "",
              "    with x = " << x << "\n");
            goto Lga;
          }
          if(x!=Value_t(0))
          {
            switch(ByteCodePtr[-1])
            {
              case cMul:
                switch(ByteCodePtr[-2])
                {
                  case cImmed:
                    y = ImmedPtr[-1];
                    if((y/x)==GetRadiansToDegreesFactor<Value_t>())
                    {
                      FP_TRACE_BYTECODE_OPTIMIZATION(
                        "y[(y/x)==GetRadiansToDegreesFactor<Value_t>()] cMul x[x!=Value_t(0)] cDiv",
                        "cDeg",
                        "    with x = " << x
                            << ", y = " << y
                            << "\n");
                      goto Lfl;
                    }
                    if((y/x)==GetDegreesToRadiansFactor<Value_t>())
                    {
                      FP_TRACE_BYTECODE_OPTIMIZATION(
                        "y[(y/x)==GetDegreesToRadiansFactor<Value_t>()] cMul x[x!=Value_t(0)] cDiv",
                        "cRad",
                        "    with x = " << x
                            << ", y = " << y
                            << "\n");
                      goto Lfm;
                    }
                    FP_TRACE_BYTECODE_OPTIMIZATION(
                      "y cMul x[x!=Value_t(0)] cDiv",
                      "[y/x] cMul",
                      "    with x = " << x
                          << ", y = " << y
                          << "\n");
                    /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                    /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                    goto Lhb;
                }
                break;
              case cImmed:
                y = ImmedPtr[-1];
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "y x[x!=Value_t(0)] cDiv",
                  "[y/x]",
                  "    with x = " << x
                      << ", y = " << y
                      << "\n");
                /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
                goto Lhb;
            }
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x!=Value_t(0)] cDiv",
              "[Value_t(1)/x] cMul",
              "    with x = " << x << "\n");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Lhc;
          }
          break;
      }
      goto Default0;
  TailCall_cMod:
    case cMod:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          if(x!=Value_t(0))
          {
            switch(ByteCodePtr[-1])
            {
              case cImmed:
                y = ImmedPtr[-1];
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "y x[x!=Value_t(0)] cMod",
                  "[fp_mod(y,x)]",
                  "    with x = " << x
                      << ", y = " << y
                      << "\n");
                /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
                goto Lhd;
            }
          }
          break;
      }
      goto Default0;
  TailCall_cAdd:
    case cAdd:
      switch(ByteCodePtr[0])
      {
        case cDup:
          switch(ByteCodePtr[-1])
          {
            case cAdd:
              switch(ByteCodePtr[-2])
              {
                case cDup:
                  FP_TRACE_BYTECODE_OPTIMIZATION("cDup cAdd cDup cAdd", "[Value_t(4)] cMul", "");
                  goto Lhe;
              }
              break;
          }
          break;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cAdd", "cSub", "");
          goto Lhf;
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cAdd:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "y cAdd x cAdd",
                    "[y+x] cAdd",
                    "    with x = " << x
                        << ", y = " << y
                        << "\n");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cAdd; */ // redundant, matches cAdd @ 2
                  goto Lhg;
              }
              break;
            case cSub:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "y cSub x cAdd",
                    "[y-x] cSub",
                    "    with x = " << x
                        << ", y = " << y
                        << "\n");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cSub; */ // redundant, matches cSub @ 2
                  goto Lhh;
              }
              break;
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cAdd",
                "[y+x]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lhg;
          }
          if(x==Value_t(0))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x==Value_t(0)] cAdd",
              "",
              "    with x = " << x << "\n");
            goto Lga;
          }
          break;
      }
      goto Default0;
  TailCall_cSub:
    case cSub:
      switch(ByteCodePtr[0])
      {
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cSub", "cAdd", "");
          goto Lhi;
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cSub:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "y cSub x cSub",
                    "[y+x] cSub",
                    "    with x = " << x
                        << ", y = " << y
                        << "\n");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cSub; */ // redundant, matches cSub @ 2
                  goto Lhg;
              }
              break;
            case cAdd:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "y cAdd x cSub",
                    "[y-x] cAdd",
                    "    with x = " << x
                        << ", y = " << y
                        << "\n");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cAdd; */ // redundant, matches cAdd @ 2
                  goto Lhh;
              }
              break;
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cSub",
                "[y-x]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lhh;
          }
          if(x==Value_t(0))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x==Value_t(0)] cSub",
              "",
              "    with x = " << x << "\n");
            goto Lga;
          }
          break;
      }
      goto Default0;
  TailCall_cMin:
    case cMin:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cMin",
                "[Min(x,y)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lhj;
          }
          break;
      }
      goto Default0;
  TailCall_cMax:
    case cMax:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cMax",
                "[Max(x,y)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lhk;
          }
          break;
      }
      goto Default0;
  TailCall_cAtan2:
    case cAtan2:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cAtan2",
                "[fp_atan2(y,x)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lhl;
          }
          break;
      }
      goto Default0;
  TailCall_cNot:
    case cNot:
      switch(ByteCodePtr[0])
      {
        case cLess:
          FP_TRACE_BYTECODE_OPTIMIZATION("cLess cNot", "cGreaterOrEq", "");
          goto Lhm;
        case cLessOrEq:
          FP_TRACE_BYTECODE_OPTIMIZATION("cLessOrEq cNot", "cGreater", "");
          goto Lhn;
        case cGreater:
          FP_TRACE_BYTECODE_OPTIMIZATION("cGreater cNot", "cLessOrEq", "");
          goto Lia;
        case cGreaterOrEq:
          FP_TRACE_BYTECODE_OPTIMIZATION("cGreaterOrEq cNot", "cLess", "");
          goto Lib;
        case cEqual:
          FP_TRACE_BYTECODE_OPTIMIZATION("cEqual cNot", "cNEqual", "");
          goto Lic;
        case cNEqual:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNEqual cNot", "cEqual", "");
          goto Lid;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cNot", "cNot", "");
          /* opcode = cNot; */ // redundant, matches cNot @ 0
          goto Lie;
        case cAbs:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAbs cNot", "cNot", "");
          /* opcode = cNot; */ // redundant, matches cNot @ 0
          goto Lie;
        case cNot:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNot cNot", "cNotNot", "");
          goto Lif;
        case cNotNot:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNotNot cNot", "cNot", "");
          /* opcode = cNot; */ // redundant, matches cNot @ 0
          goto Lie;
        case cAbsNotNot:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAbsNotNot cNot", "cAbsNot", "");
          goto Lig;
        case cAbsNot:
          switch(ByteCodePtr[-1])
          {
            default:
              A = ByteCodePtr[-1];
              if(IsLogicalOpcode(A))
              {
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "A[IsLogicalOpcode(A)] cAbsNot cNot",
                  "A",
                  "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>") << "\n");
                /* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
                goto Lbm;
              }
              if(A!=cImmed)
              {
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "A[A!=cImmed] cAbsNot cNot",
                  "A cAbsNotNot",
                  "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>") << "\n");
                /* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
                goto Lih;
              }
          }
          goto Default4;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cNot",
            "[!truthValue(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lii;
        default: Default4:;
          A = ByteCodePtr[0];
          if(IsNeverNegativeValueOpcode(A))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "A[IsNeverNegativeValueOpcode(A)] cNot",
              "A cAbsNot",
              "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>") << "\n");
            /* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
            goto Lij;
          }
      }
      goto Default0;
  TailCall_cLess:
    case cLess:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          if(x!=Value_t(0))
          {
            switch(ByteCodePtr[-1])
            {
              case cAbs:
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "cAbs x[x!=Value_t(0)] cLess",
                  "[Value_t(0.5)/x] cMul cNot",
                  "    with x = " << x << "\n");
                goto Lik;
            }
          }
          if(x==Value_t(0))
          {
            switch(ByteCodePtr[-1])
            {
              default:
                A = ByteCodePtr[-1];
                if(IsNeverNegativeValueOpcode(A))
                {
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(0)] cLess",
                    "A [x] cMul",
                    "    with x = " << x
                        << ", A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                        << "\n");
                  /* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
                  /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                  /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
                  goto Lil;
                }
            }
          }
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cLess",
                "[fp_less(y,x)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lim;
          }
          break;
      }
      goto Default0;
  TailCall_cLessOrEq:
    case cLessOrEq:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cLessOrEq",
                "[fp_lessOrEq(y,x)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lin;
          }
          break;
      }
      goto Default0;
  TailCall_cGreater:
    case cGreater:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cGreater",
                "[fp_less(x,y)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lja;
          }
          break;
      }
      goto Default0;
  TailCall_cGreaterOrEq:
    case cGreaterOrEq:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          if(x!=Value_t(0))
          {
            switch(ByteCodePtr[-1])
            {
              case cAbs:
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "cAbs x[x!=Value_t(0)] cGreaterOrEq",
                  "[Value_t(0.5)/x] cMul cNotNot",
                  "    with x = " << x << "\n");
                goto Ljb;
            }
          }
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cGreaterOrEq",
                "[fp_lessOrEq(x,y)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Ljc;
          }
          break;
      }
      goto Default0;
  TailCall_cEqual:
    case cEqual:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          if(x==Value_t(0))
          {
            switch(ByteCodePtr[-1])
            {
              case cAbs:
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "cAbs x[x==Value_t(0)] cEqual",
                  "[x] cEqual",
                  "    with x = " << x << "\n");
                /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                /* opcode = cEqual; */ // redundant, matches cEqual @ 0
                goto Ljd;
              case cSqr:
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "cSqr x[x==Value_t(0)] cEqual",
                  "[x] cEqual",
                  "    with x = " << x << "\n");
                /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                /* opcode = cEqual; */ // redundant, matches cEqual @ 0
                goto Ljd;
            }
          }
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cEqual",
                "[fp_equal(y,x)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lje;
          }
          break;
      }
      goto Default0;
  TailCall_cNEqual:
    case cNEqual:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          if(x==Value_t(0))
          {
            switch(ByteCodePtr[-1])
            {
              case cAbs:
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "cAbs x[x==Value_t(0)] cNEqual",
                  "[x] cNEqual",
                  "    with x = " << x << "\n");
                /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                /* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
                goto Ljf;
              case cSqr:
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "cSqr x[x==Value_t(0)] cNEqual",
                  "[x] cNEqual",
                  "    with x = " << x << "\n");
                /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                /* opcode = cNEqual; */ // redundant, matches cNEqual @ 0
                goto Ljf;
            }
          }
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cNEqual",
                "[fp_nequal(y,x)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Ljg;
          }
          break;
      }
      goto Default0;
  TailCall_cAnd:
    case cAnd:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cAnd",
                "[truthValue(x)&&truthValue(y)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Ljh;
          }
          break;
      }
      goto Default0;
  TailCall_cOr:
    case cOr:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cOr",
                "[truthValue(x)||truthValue(y)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lji;
          }
          break;
      }
      goto Default0;
    default: Default0:;
      A = opcode;
      if(IsComparisonOpcode(A))
      {
        switch(ByteCodePtr[0])
        {
          case cImmed:
            x = ImmedPtr[0];
            if(x>Value_t(0))
            {
              switch(ByteCodePtr[-1])
              {
                case cPow:
                  switch(ByteCodePtr[-2])
                  {
                    case cImmed:
                      y = ImmedPtr[-1];
                      if(y>Value_t(0))
                      {
                        FP_TRACE_BYTECODE_OPTIMIZATION(
                          "y[y>Value_t(0)] cPow x[x>Value_t(0)] A[IsComparisonOpcode(A)]",
                          "[fp_pow(x,1/y)] A",
                          "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                              << ", x = " << x
                              << ", y = " << y
                              << "\n");
                        /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                        goto Ljj;
                      }
                      break;
                  }
                  break;
                case cSqr:
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "cSqr x[x>Value_t(0)] A[IsComparisonOpcode(A)]",
                    "cAbs [fp_sqrt(x)] A",
                    "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                        << ", x = " << x
                        << "\n");
                  goto Ljk;
              }
            }
            switch(ByteCodePtr[-1])
            {
              case cAdd:
                switch(ByteCodePtr[-2])
                {
                  case cImmed:
                    y = ImmedPtr[-1];
                    FP_TRACE_BYTECODE_OPTIMIZATION(
                      "y cAdd x A[IsComparisonOpcode(A)]",
                      "[x-y] A",
                      "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                          << ", x = " << x
                          << ", y = " << y
                          << "\n");
                    /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                    goto Ljl;
                }
                break;
              case cSub:
                switch(ByteCodePtr[-2])
                {
                  case cImmed:
                    y = ImmedPtr[-1];
                    FP_TRACE_BYTECODE_OPTIMIZATION(
                      "y cSub x A[IsComparisonOpcode(A)]",
                      "[x+y] A",
                      "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                          << ", x = " << x
                          << ", y = " << y
                          << "\n");
                    /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                    goto Ljm;
                }
                break;
              case cNeg:
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "cNeg x A[IsComparisonOpcode(A)]",
                  "[-x] {OppositeComparisonOpcode(A)}",
                  "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                      << ", x = " << x
                      << "\n");
                goto Ljn;
              case cMul:
                switch(ByteCodePtr[-2])
                {
                  case cImmed:
                    y = ImmedPtr[-1];
                    if(y>Value_t(0))
                    {
                      FP_TRACE_BYTECODE_OPTIMIZATION(
                        "y[y>Value_t(0)] cMul x A[IsComparisonOpcode(A)]",
                        "[x/y] A",
                        "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                            << ", x = " << x
                            << ", y = " << y
                            << "\n");
                      /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                      goto Lka;
                    }
                    if(y<Value_t(0))
                    {
                      FP_TRACE_BYTECODE_OPTIMIZATION(
                        "y[y<Value_t(0)] cMul x A[IsComparisonOpcode(A)]",
                        "[x/y] {OppositeComparisonOpcode(A)}",
                        "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                            << ", x = " << x
                            << ", y = " << y
                            << "\n");
                      /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                      goto Lkb;
                    }
                    break;
                }
                break;
              case cDiv:
                switch(ByteCodePtr[-2])
                {
                  case cImmed:
                    y = ImmedPtr[-1];
                    if(y>=Value_t(0))
                    {
                      FP_TRACE_BYTECODE_OPTIMIZATION(
                        "y[y>=Value_t(0)] cDiv x A[IsComparisonOpcode(A)]",
                        "[x*y] A",
                        "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                            << ", x = " << x
                            << ", y = " << y
                            << "\n");
                      /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                      goto Lkc;
                    }
                    if(y<Value_t(0))
                    {
                      FP_TRACE_BYTECODE_OPTIMIZATION(
                        "y[y<Value_t(0)] cDiv x A[IsComparisonOpcode(A)]",
                        "[x*y] {OppositeComparisonOpcode(A)}",
                        "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                            << ", x = " << x
                            << ", y = " << y
                            << "\n");
                      /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                      goto Lkd;
                    }
                    break;
                }
                break;
            }
            break;
        }
      }
      if(A >= VarBegin)
      {
        switch(ByteCodePtr[0])
        {
          default:
            B = ByteCodePtr[0];
            if(B==A)
            {
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "B[B==A] A[A >= VarBegin]",
                "A cDup",
                "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                    << ", B = " << (B < VarBegin ? FP_GetOpcodeName(OPCODE(B)) : "<var>")
                    << "\n");
              goto Lke;
            }
        }
      }
      if(IsUnaryOpcode(A))
      {
        switch(ByteCodePtr[0])
        {
          default:
            B = ByteCodePtr[0];
            if(B >= VarBegin)
            {
              switch(ByteCodePtr[-1])
              {
                default:
                  C = ByteCodePtr[-1];
                  if(C==A)
                  {
                    switch(ByteCodePtr[-2])
                    {
                      default:
                        D = ByteCodePtr[-2];
                        if(D==B)
                        {
                          FP_TRACE_BYTECODE_OPTIMIZATION(
                            "D[D==B] C[C==A] B[B >= VarBegin] A[IsUnaryOpcode(A)]",
                            "D C cDup",
                            "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                                << ", B = " << (B < VarBegin ? FP_GetOpcodeName(OPCODE(B)) : "<var>")
                                << ", C = " << (C < VarBegin ? FP_GetOpcodeName(OPCODE(C)) : "<var>")
                                << ", D = " << (D < VarBegin ? FP_GetOpcodeName(OPCODE(D)) : "<var>")
                                << "\n");
                          /* ByteCodePtr[-2] = D; */ // redundant, matches D @ 3
                          /* ByteCodePtr[-1] = C; */ // redundant, matches C @ 2
                          goto Lkf;
                        }
                    }
                  }
              }
            }
        }
      }
  }
  goto Lkg;
Laa: data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     data->Immed.push_back(x*Value_t(2));
Lkh: data->ByteCode.push_back(cImmed);
Lki: FP_ReDefinePointers();
Lkj: goto TailCall_cPow;
Lab: ImmedPtr[-1] = y*x;
Lga: data->Immed.pop_back();
Lbm: data->ByteCode.pop_back(); return;
Lac: ByteCodePtr[-1] = cImmed;
     data->ByteCode.pop_back();
     AddFunctionOpcode(cMul); goto Lki;
Lad: ByteCodePtr[-1] = cImmed;
     data->ByteCode.pop_back();
Lkk: AddFunctionOpcode(cMul);
     opcode = cExp;
     FP_ReDefinePointers();
     goto TailCall_cExp;
Lae: ByteCodePtr[-1] = cImmed;
     data->ByteCode.pop_back();
     AddFunctionOpcode(cMul);
     opcode = cExp2;
     FP_ReDefinePointers();
     goto TailCall_cExp2;
Laf: ByteCodePtr[-1] = cImmed;
     ByteCodePtr -= 1;
     data->ByteCode.pop_back(); goto Lkj;
Lag: data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cMul);
     data->Immed.push_back(x); goto Lkh;
Lah: data->Immed.pop_back();
     data->ByteCode.pop_back();
Lkl: opcode = cSqrt;
     FP_ReDefinePointers();
     goto TailCall_cSqrt;
Lai: data->Immed.pop_back();
     data->ByteCode.pop_back();
     opcode = cCbrt;
     FP_ReDefinePointers();
     goto TailCall_cCbrt;
Laj: data->Immed.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cCbrt);
Lkm: opcode = cInv;
     FP_ReDefinePointers();
     goto TailCall_cInv;
Lak: data->Immed.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cRSqrt); return;
Lal: data->Immed.pop_back();
     data->ByteCode.pop_back(); goto Lkm;
Lam: data->Immed.pop_back();
     data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     data->Immed.push_back(y*x); goto Lkh;
Lan: ImmedPtr[0] = x*Value_t(2); goto Laf;
Lba: ImmedPtr[-1] = fp_pow(y,x); goto Lga;
Lbb: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cAbs;
Lkn: goto TailCall_cAbs;
Lbc: ImmedPtr[0] = fp_sqrt(x); return;
Lbd: ByteCodePtr -= 1;
     data->ByteCode.pop_back(); goto Lkn;
Lbe: ImmedPtr[0] = fp_abs(x); return;
Lbf: ImmedPtr[0] = fp_acos(x); return;
Lbg: ImmedPtr[0] = fp_acosh(x); return;
Lbh: ImmedPtr[0] = fp_asinh(x); return;
Lbi: ImmedPtr[0] = fp_atan(x); return;
Lbj: ImmedPtr[0] = fp_atanh(x); return;
Lbk: ImmedPtr[0] = fp_cbrt(x); return;
Lbl: ImmedPtr[0] = fp_ceil(x); return;
Lbn: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
Lla: goto TailCall_cCos;
Lca: ImmedPtr[0] = fp_cos(x); return;
Lcb: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     goto TailCall_cCosh;
Lcc: data->ByteCode.pop_back();
     AddFunctionOpcode(cSqr);
     data->Immed.push_back(Value_t(1));
Llb: data->ByteCode.push_back(cImmed);
     AddFunctionOpcode(cAdd); goto Lkl;
Lcd: ImmedPtr[0] = fp_cosh(x); return;
Lce: data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cExp);
     data->Immed.push_back(fp_exp(x));
Llc: data->ByteCode.push_back(cImmed);
Lld: opcode = cMul;
Lle: FP_ReDefinePointers();
Llf: goto TailCall_cMul;
Lcf: ImmedPtr[0] = fp_exp(x); return;
Lcg: data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cExp2);
     data->Immed.push_back(fp_exp2(x)); goto Llc;
Lch: ImmedPtr[0] = fp_exp2(x); return;
Lci: data->Immed.push_back(fp_log(Value_t(2)));
     data->ByteCode.push_back(cImmed); goto Lkk;
Lcj: ImmedPtr[0] = fp_floor(x); return;
Lck: ImmedPtr[0] = fp_int(x); return;
Lcl: data->ByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     AddFunctionOpcode(cLog);
Llg: data->ByteCode.push_back(cDup);
Llh: opcode = cAdd;
     FP_ReDefinePointers();
Lli: goto TailCall_cAdd;
Lcm: data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cLog);
     data->Immed.push_back(fp_log(x));
Llj: data->ByteCode.push_back(cImmed); goto Llh;
Lcn: ImmedPtr[0] = fp_log(x); return;
Lda: data->ByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     AddFunctionOpcode(cLog10); goto Llg;
Ldb: data->Immed.push_back(fp_log10(const_e<Value_t>()));
Llk: ByteCodePtr[0] = cImmed; goto Lld;
Ldc: data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cLog10);
     data->Immed.push_back(fp_log10(x)); goto Llj;
Ldd: ImmedPtr[0] = fp_log10(x); return;
Lde: data->ByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     AddFunctionOpcode(cLog2); goto Llg;
Ldf: data->Immed.push_back(fp_log2(const_e<Value_t>())); goto Llk;
Ldg: data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cLog2);
     data->Immed.push_back(fp_log2(x)); goto Llj;
Ldh: ImmedPtr[0] = fp_log2(x); return;
Ldi: data->ByteCode.pop_back();
     AddFunctionOpcode(cSin);
Lll: opcode = cNeg;
     FP_ReDefinePointers();
     goto TailCall_cNeg;
Ldj: ImmedPtr[0] = fp_sin(x); return;
Ldk: data->ByteCode.pop_back();
     AddFunctionOpcode(cSinh); goto Lll;
Ldl: data->ByteCode.pop_back();
     AddFunctionOpcode(cSqr);
     data->Immed.push_back(Value_t(-1)); goto Llb;
Ldm: ImmedPtr[0] = fp_sinh(x); return;
Ldn: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
Llm: opcode = cDiv;
Lln: goto TailCall_cDiv;
Lea: data->ByteCode.pop_back();
     AddFunctionOpcode(cTan); goto Lll;
Leb: ImmedPtr[0] = fp_tan(x); return;
Lec: data->ByteCode.pop_back();
     AddFunctionOpcode(cTanh); goto Lll;
Led: ImmedPtr[0] = fp_tanh(x); return;
Lee: ImmedPtr[0] = fp_trunc(x); return;
Lef: ImmedPtr[0] = RadiansToDegrees(x); return;
Leg: ImmedPtr[0] = DegreesToRadians(x); return;
Leh: ImmedPtr[0] = -x; return;
Lei: data->ByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     opcode = cCeil;
     FP_ReDefinePointers();
     goto TailCall_cCeil;
Lej: data->ByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     opcode = cFloor;
     FP_ReDefinePointers();
     goto TailCall_cFloor;
Lek: data->ByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     opcode = cPow; goto Lki;
Lel: data->ByteCode.pop_back();
     AddFunctionOpcode(cCsc); return;
Lem: data->ByteCode.pop_back();
     AddFunctionOpcode(cSec); return;
Len: data->ByteCode.pop_back();
     AddFunctionOpcode(cCot); return;
Lfa: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cSin;
     goto TailCall_cSin;
Lfb: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cCos; goto Lla;
Lfc: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cTan;
     goto TailCall_cTan;
Lfd: ImmedPtr[0] = Value_t(1)/x; return;
Lfe: ImmedPtr[0] = -x; goto Llm;
Lff: data->ByteCode.pop_back();
     AddFunctionOpcode(cSqr); return;
Lfg: ByteCodePtr[-1] = cImmed;
     ByteCodePtr -= 1;
     data->ByteCode.pop_back(); goto Llf;
Lfh: ByteCodePtr[-1] = cImmed; goto Lbm;
Lfi: ImmedPtr[0] = RadiansToDegrees(x); goto Lfg;
Lfj: ImmedPtr[0] = DegreesToRadians(x); goto Lfg;
Lfk: ImmedPtr[0] = -x; goto Lfg;
Lfl: data->Immed.pop_back();
     data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
Lma: data->ByteCode.pop_back();
     opcode = cDeg;
     FP_ReDefinePointers();
     goto TailCall_cDeg;
Lfm: data->Immed.pop_back();
     data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
Lmb: data->ByteCode.pop_back();
     opcode = cRad;
     FP_ReDefinePointers();
     goto TailCall_cRad;
Lfn: data->Immed.pop_back();
     data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back(); goto Lbm;
Lgb: ByteCodePtr[0] = cDup;
     ImmedPtr -= 1;
     data->Immed.pop_back();
Lmc: opcode = cAdd; goto Lli;
Lgc: data->Immed.pop_back(); goto Lma;
Lgd: data->Immed.pop_back(); goto Lmb;
Lge: data->Immed.pop_back();
     data->ByteCode.pop_back(); goto Lll;
Lgf: data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cSqr); goto Lle;
Lgg: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
Lil: opcode = cMul; goto Llf;
Lgh: ImmedPtr[0] = -x; goto Lil;
Lgi: data->ByteCode.pop_back();
     AddFunctionOpcode(cCsc); goto Lld;
Lgj: data->ByteCode.pop_back();
     AddFunctionOpcode(cSec); goto Lld;
Lgk: data->ByteCode.pop_back();
     AddFunctionOpcode(cCot); goto Lld;
Lgl: data->ByteCode.pop_back();
     AddFunctionOpcode(cSin); goto Lld;
Lgm: data->ByteCode.pop_back();
     AddFunctionOpcode(cCos); goto Lld;
Lgn: data->ByteCode.pop_back();
     AddFunctionOpcode(cTan); goto Lld;
Lha: ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     ByteCodePtr -= 1;
     data->ByteCode.pop_back(); goto Lln;
Lhb: ImmedPtr[-1] = y/x; goto Lga;
Lhc: ImmedPtr[0] = Value_t(1)/x; goto Lil;
Lhd: ImmedPtr[-1] = fp_mod(y,x); goto Lga;
Lhe: data->Immed.push_back(Value_t(4));
     ByteCodePtr[-2] = cImmed;
     ByteCodePtr -= 2;
     data->ByteCode.pop_back();
     data->ByteCode.pop_back(); goto Lld;
Lhf: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cSub;
     goto TailCall_cSub;
Lhg: ImmedPtr[-1] = y+x; goto Lga;
Lhh: ImmedPtr[-1] = y-x; goto Lga;
Lhi: ByteCodePtr -= 1;
     data->ByteCode.pop_back(); goto Lmc;
Lhj: ImmedPtr[-1] = Min(x,y); goto Lga;
Lhk: ImmedPtr[-1] = Max(x,y); goto Lga;
Lhl: ImmedPtr[-1] = fp_atan2(y,x); goto Lga;
Lhm: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cGreaterOrEq;
     goto TailCall_cGreaterOrEq;
Lhn: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cGreater;
     goto TailCall_cGreater;
Lia: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cLessOrEq;
     goto TailCall_cLessOrEq;
Lib: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cLess;
     goto TailCall_cLess;
Lic: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cNEqual;
Lmd: goto TailCall_cNEqual;
Lid: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cEqual;
Lme: goto TailCall_cEqual;
Lie: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
Lmf: goto TailCall_cNot;
Lif: data->ByteCode.pop_back();
Lmg: AddFunctionOpcode(cNotNot); return;
Lig: data->ByteCode.pop_back();
Lij: AddFunctionOpcode(cAbsNot); return;
Lih: data->ByteCode.pop_back();
     AddFunctionOpcode(cAbsNotNot); return;
Lii: ImmedPtr[0] = !truthValue(x); return;
Lik: ImmedPtr[0] = Value_t(0.5)/x;
     ByteCodePtr[-1] = cImmed;
     data->ByteCode.pop_back();
     AddFunctionOpcode(cMul);
     opcode = cNot;
     FP_ReDefinePointers(); goto Lmf;
Lim: ImmedPtr[-1] = fp_less(y,x); goto Lga;
Lin: ImmedPtr[-1] = fp_lessOrEq(y,x); goto Lga;
Lja: ImmedPtr[-1] = fp_less(x,y); goto Lga;
Ljb: ImmedPtr[0] = Value_t(0.5)/x;
     ByteCodePtr[-1] = cImmed;
     data->ByteCode.pop_back();
     AddFunctionOpcode(cMul); goto Lmg;
Ljc: ImmedPtr[-1] = fp_lessOrEq(x,y); goto Lga;
Ljd: ByteCodePtr[-1] = cImmed;
     ByteCodePtr -= 1;
     data->ByteCode.pop_back(); goto Lme;
Lje: ImmedPtr[-1] = fp_equal(y,x); goto Lga;
Ljf: ByteCodePtr[-1] = cImmed;
     ByteCodePtr -= 1;
     data->ByteCode.pop_back(); goto Lmd;
Ljg: ImmedPtr[-1] = fp_nequal(y,x); goto Lga;
Ljh: ImmedPtr[-1] = truthValue(x)&&truthValue(y); goto Lga;
Lji: ImmedPtr[-1] = truthValue(x)||truthValue(y); goto Lga;
Ljj: ImmedPtr[-1] = fp_pow(x,1/y);
Lmh: data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
Lmi: AddFunctionOpcode(A); return;
Ljk: data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     data->Immed.push_back(fp_sqrt(x));
     data->ByteCode.push_back(cImmed); goto Lmi;
Ljl: ImmedPtr[-1] = x-y; goto Lmh;
Ljm: ImmedPtr[-1] = x+y; goto Lmh;
Ljn: ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
Lmj: data->ByteCode.pop_back();
     AddFunctionOpcode(OppositeComparisonOpcode(A)); return;
Lka: ImmedPtr[-1] = x/y; goto Lmh;
Lkb: ImmedPtr[-1] = x/y;
Lmk: data->Immed.pop_back();
     data->ByteCode.pop_back(); goto Lmj;
Lkc: ImmedPtr[-1] = x*y; goto Lmh;
Lkd: ImmedPtr[-1] = x*y; goto Lmk;
Lke: data->ByteCode.pop_back();
     AddFunctionOpcode(A);
     data->ByteCode.push_back(cDup); return;
Lkf: ByteCodePtr[0] = cDup; return;
Lkg: data->ByteCode.push_back(opcode); return;
return;
// This list of dummy gotos is here to inhibit
// compiler warnings on unused labels
goto TailCall_cAcos;goto TailCall_cAcosh;goto TailCall_cAnd;
goto TailCall_cAsinh;goto TailCall_cAtan;goto TailCall_cAtan2;
goto TailCall_cAtanh;goto TailCall_cCbrt;goto TailCall_cExp2;
goto TailCall_cGreater;goto TailCall_cGreaterOrEq;goto TailCall_cInt;
goto TailCall_cInv;goto TailCall_cLess;goto TailCall_cLessOrEq;
goto TailCall_cLog;goto TailCall_cLog10;goto TailCall_cLog2;
goto TailCall_cMax;goto TailCall_cMin;goto TailCall_cMod;
goto TailCall_cOr;goto TailCall_cSinh;goto TailCall_cSub;
goto TailCall_cTanh;goto TailCall_cTrunc;
#endif

#undef FP_ReDefinePointers
#undef FP_TRACE_BYTECODE_OPTIMIZATION
