/* Function Parser for C++ v4.0.2   

   Note: This file contains generated code and is thus not
   intended to be to be modified by hand. It was generated by
   fpoptimizer/bytecoderules_parser which is available in the
   development package.

   Note: You don't need to add this file to your project. It's
   enough for it to be in the same directory as fparser.cc. This
   file is internally #included by fparser.cc.
*/

#define FP_TRACE_BYTECODE_OPTIMIZATION(from,to,with) \
    /*std::cout << "Changing \"" from "\"\n" \
                   "    into \"" to "\"\n" with*/

  unsigned* ByteCodePtr;
  Value_t*   ImmedPtr;

  #define FP_ReDefinePointers() \
    ByteCodePtr = !data->ByteCode.empty() ? &data->ByteCode[0] + data->ByteCode.size() - 1 : 0; \
    ImmedPtr    = !data->Immed.empty()    ? &data->Immed[0]    + data->Immed.size()    - 1 : 0;
  FP_ReDefinePointers();

#if(!FP_FLOAT_VERSION)
  Value_t x;
  unsigned A;
  Value_t y;
  unsigned B;
  unsigned C;
  unsigned D;
  switch(opcode)
  {
  TailCall_cAbs:
    case cAbs:
      switch(ByteCodePtr[0])
      {
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cAbs", "cAbs", "");
          /* opcode = cAbs; */ // redundant, matches cAbs @ 0
          goto Laa;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cAbs",
            "[fp_abs(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lab;
        default:
          A = ByteCodePtr[0];
          if(IsNeverNegativeValueOpcode(A))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "A[IsNeverNegativeValueOpcode(A)] cAbs",
              "A",
              "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>") << "\n");
            /* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
            return;
          }
      }
      goto Default0;
  TailCall_cNeg:
    case cNeg:
      switch(ByteCodePtr[0])
      {
        case cMul:
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              x = ImmedPtr[0];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "x cMul cNeg",
                "[-x] cMul",
                "    with x = " << x << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
              /* ByteCodePtr[0] = cMul; */ // redundant, matches cMul @ 1
              goto Lac;
          }
          break;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cNeg", "", "");
          goto Lad;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cNeg",
            "[-x]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lac;
      }
      goto Default0;
  TailCall_cInv:
    case cInv:
      switch(ByteCodePtr[0])
      {
        case cInv:
          FP_TRACE_BYTECODE_OPTIMIZATION("cInv cInv", "", "");
          goto Lad;
        case cImmed:
          x = ImmedPtr[0];
          if(x!=Value_t(0))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x!=Value_t(0)] cInv",
              "[Value_t(1)/x]",
              "    with x = " << x << "\n");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Lae;
          }
          break;
      }
      goto Default0;
  TailCall_cMul:
    case cMul:
      switch(ByteCodePtr[0])
      {
        case cInv:
          FP_TRACE_BYTECODE_OPTIMIZATION("cInv cMul", "cDiv", "");
          goto Laf;
        case cDup:
          FP_TRACE_BYTECODE_OPTIMIZATION("cDup cMul", "cSqr", "");
          goto Lag;
        case cImmed:
          x = ImmedPtr[0];
          if(x==Value_t(0))
          {
            switch(ByteCodePtr[-1])
            {
              default:
                A = ByteCodePtr[-1];
                if(A >= VarBegin)
                {
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "A[A >= VarBegin] x[x==Value_t(0)] cMul",
                    "[x]",
                    "    with x = " << x
                        << ", A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                        << "\n");
                  /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                  goto Lah;
                }
            }
          }
          switch(ByteCodePtr[-1])
          {
            case cNeg:
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "cNeg x cMul",
                "[-x] cMul",
                "    with x = " << x << "\n");
              /* opcode = cMul; */ // redundant, matches cMul @ 0
              goto Lai;
            case cMul:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "y cMul x cMul",
                    "[y*x] cMul",
                    "    with x = " << x
                        << ", y = " << y
                        << "\n");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                  goto Laj;
              }
              break;
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cMul",
                "[y*x]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Laj;
          }
          if(x==Value_t(1))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x==Value_t(1)] cMul",
              "",
              "    with x = " << x << "\n");
            goto Lak;
          }
          if(x==Value_t(2))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x==Value_t(2)] cMul",
              "cDup cAdd",
              "    with x = " << x << "\n");
            goto Lal;
          }
          if(x==Value_t(-1))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x==Value_t(-1)] cMul",
              "cNeg",
              "    with x = " << x << "\n");
            goto Lam;
          }
          break;
        default:
          A = ByteCodePtr[0];
          if(A >= VarBegin)
          {
            switch(ByteCodePtr[-1])
            {
              case cMul:
                switch(ByteCodePtr[-2])
                {
                  default:
                    B = ByteCodePtr[-2];
                    if(B==A)
                    {
                      FP_TRACE_BYTECODE_OPTIMIZATION(
                        "B[B==A] cMul A[A >= VarBegin] cMul",
                        "B cSqr cMul",
                        "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                            << ", B = " << (B < VarBegin ? FP_GetOpcodeName(OPCODE(B)) : "<var>")
                            << "\n");
                      /* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
                      /* opcode = cMul; */ // redundant, matches cMul @ 0
                      goto Lan;
                    }
                }
                goto Default1;
              default: Default1:;
                B = ByteCodePtr[-1];
                if(B==A)
                {
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "B[B==A] A[A >= VarBegin] cMul",
                    "B cSqr",
                    "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                        << ", B = " << (B < VarBegin ? FP_GetOpcodeName(OPCODE(B)) : "<var>")
                        << "\n");
                  /* ByteCodePtr[-1] = B; */ // redundant, matches B @ 2
                  goto Lag;
                }
            }
          }
      }
      goto Default0;
  TailCall_cDiv:
    case cDiv:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          if(x!=Value_t(0))
          {
            switch(ByteCodePtr[-1])
            {
              case cImmed:
                y = ImmedPtr[-1];
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "y x[x!=Value_t(0)] cDiv",
                  "[y/x]",
                  "    with x = " << x
                      << ", y = " << y
                      << "\n");
                /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
                goto Lba;
            }
          }
          switch(ByteCodePtr[-1])
          {
            case cNeg:
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "cNeg x cDiv",
                "[-x] cDiv",
                "    with x = " << x << "\n");
              /* opcode = cDiv; */ // redundant, matches cDiv @ 0
              goto Lbb;
          }
          if(x==Value_t(1))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x==Value_t(1)] cDiv",
              "",
              "    with x = " << x << "\n");
            goto Lak;
          }
          break;
      }
      goto Default0;
  TailCall_cMod:
    case cMod:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          if(x!=Value_t(0))
          {
            switch(ByteCodePtr[-1])
            {
              case cImmed:
                y = ImmedPtr[-1];
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "y x[x!=Value_t(0)] cMod",
                  "[fp_mod(y,x)]",
                  "    with x = " << x
                      << ", y = " << y
                      << "\n");
                /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
                goto Lbc;
            }
          }
          break;
      }
      goto Default0;
  TailCall_cAdd:
    case cAdd:
      switch(ByteCodePtr[0])
      {
        case cDup:
          switch(ByteCodePtr[-1])
          {
            case cAdd:
              switch(ByteCodePtr[-2])
              {
                case cDup:
                  FP_TRACE_BYTECODE_OPTIMIZATION("cDup cAdd cDup cAdd", "[Value_t(4)] cMul", "");
                  goto Lbd;
              }
              break;
          }
          break;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cAdd", "cSub", "");
          goto Lbe;
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cAdd:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "y cAdd x cAdd",
                    "[y+x] cAdd",
                    "    with x = " << x
                        << ", y = " << y
                        << "\n");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cAdd; */ // redundant, matches cAdd @ 2
                  goto Lbf;
              }
              break;
            case cSub:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "y cSub x cAdd",
                    "[y-x] cSub",
                    "    with x = " << x
                        << ", y = " << y
                        << "\n");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cSub; */ // redundant, matches cSub @ 2
                  goto Lbg;
              }
              break;
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cAdd",
                "[y+x]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lbf;
          }
          if(x==Value_t(0))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x==Value_t(0)] cAdd",
              "",
              "    with x = " << x << "\n");
            goto Lak;
          }
          break;
      }
      goto Default0;
  TailCall_cSub:
    case cSub:
      switch(ByteCodePtr[0])
      {
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cSub", "cAdd", "");
          goto Lbh;
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cSub:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "y cSub x cSub",
                    "[y+x] cSub",
                    "    with x = " << x
                        << ", y = " << y
                        << "\n");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cSub; */ // redundant, matches cSub @ 2
                  goto Lbf;
              }
              break;
            case cAdd:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "y cAdd x cSub",
                    "[y-x] cAdd",
                    "    with x = " << x
                        << ", y = " << y
                        << "\n");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cAdd; */ // redundant, matches cAdd @ 2
                  goto Lbg;
              }
              break;
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cSub",
                "[y-x]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lbg;
          }
          if(x==Value_t(0))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x==Value_t(0)] cSub",
              "",
              "    with x = " << x << "\n");
            goto Lak;
          }
          break;
      }
      goto Default0;
  TailCall_cMin:
    case cMin:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cMin",
                "[Min(x,y)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lbi;
          }
          break;
      }
      goto Default0;
  TailCall_cMax:
    case cMax:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cMax",
                "[Max(x,y)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lbj;
          }
          break;
      }
      goto Default0;
  TailCall_cNot:
    case cNot:
      switch(ByteCodePtr[0])
      {
        case cLess:
          FP_TRACE_BYTECODE_OPTIMIZATION("cLess cNot", "cGreaterOrEq", "");
          goto Lbk;
        case cLessOrEq:
          FP_TRACE_BYTECODE_OPTIMIZATION("cLessOrEq cNot", "cGreater", "");
          goto Lbl;
        case cGreater:
          FP_TRACE_BYTECODE_OPTIMIZATION("cGreater cNot", "cLessOrEq", "");
          goto Lbm;
        case cGreaterOrEq:
          FP_TRACE_BYTECODE_OPTIMIZATION("cGreaterOrEq cNot", "cLess", "");
          goto Lbn;
        case cEqual:
          FP_TRACE_BYTECODE_OPTIMIZATION("cEqual cNot", "cNEqual", "");
          goto Lca;
        case cNEqual:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNEqual cNot", "cEqual", "");
          goto Lcb;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cNot", "cNot", "");
          /* opcode = cNot; */ // redundant, matches cNot @ 0
          goto Lcc;
        case cAbs:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAbs cNot", "cNot", "");
          /* opcode = cNot; */ // redundant, matches cNot @ 0
          goto Lcc;
        case cNot:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNot cNot", "cNotNot", "");
          goto Lcd;
        case cNotNot:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNotNot cNot", "cNot", "");
          /* opcode = cNot; */ // redundant, matches cNot @ 0
          goto Lcc;
        case cAbsNotNot:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAbsNotNot cNot", "cAbsNot", "");
          goto Lce;
        case cAbsNot:
          switch(ByteCodePtr[-1])
          {
            default:
              A = ByteCodePtr[-1];
              if(IsLogicalOpcode(A))
              {
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "A[IsLogicalOpcode(A)] cAbsNot cNot",
                  "A",
                  "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>") << "\n");
                /* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
                goto Lad;
              }
              if(A!=cImmed)
              {
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "A[A!=cImmed] cAbsNot cNot",
                  "A cAbsNotNot",
                  "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>") << "\n");
                /* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
                goto Lcf;
              }
          }
          goto Default2;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cNot",
            "[!truthValue(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lcg;
        default: Default2:;
          A = ByteCodePtr[0];
          if(IsNeverNegativeValueOpcode(A))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "A[IsNeverNegativeValueOpcode(A)] cNot",
              "A cAbsNot",
              "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>") << "\n");
            /* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
            goto Lch;
          }
      }
      goto Default0;
  TailCall_cLess:
    case cLess:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          if(x==Value_t(0))
          {
            switch(ByteCodePtr[-1])
            {
              default:
                A = ByteCodePtr[-1];
                if(IsNeverNegativeValueOpcode(A))
                {
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(0)] cLess",
                    "A [x] cMul",
                    "    with x = " << x
                        << ", A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                        << "\n");
                  /* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
                  /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                  /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
                  goto Lci;
                }
            }
          }
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cLess",
                "[fp_less(y,x)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lcj;
          }
          break;
      }
      goto Default0;
  TailCall_cLessOrEq:
    case cLessOrEq:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cLessOrEq",
                "[fp_lessOrEq(y,x)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lck;
          }
          break;
      }
      goto Default0;
  TailCall_cGreater:
    case cGreater:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cGreater",
                "[fp_less(x,y)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lcl;
          }
          break;
      }
      goto Default0;
  TailCall_cGreaterOrEq:
    case cGreaterOrEq:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cGreaterOrEq",
                "[fp_lessOrEq(x,y)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lcm;
          }
          break;
      }
      goto Default0;
  TailCall_cEqual:
    case cEqual:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cEqual",
                "[fp_equal(y,x)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lcn;
          }
          break;
      }
      goto Default0;
  TailCall_cNEqual:
    case cNEqual:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cNEqual",
                "[fp_nequal(y,x)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lda;
          }
          break;
      }
      goto Default0;
  TailCall_cAnd:
    case cAnd:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cAnd",
                "[truthValue(x)&&truthValue(y)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Ldb;
          }
          break;
      }
      goto Default0;
  TailCall_cOr:
    case cOr:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cOr",
                "[truthValue(x)||truthValue(y)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Ldc;
          }
          break;
      }
      goto Default0;
    default: Default0:;
      A = opcode;
      if(A >= VarBegin)
      {
        switch(ByteCodePtr[0])
        {
          default:
            B = ByteCodePtr[0];
            if(B==A)
            {
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "B[B==A] A[A >= VarBegin]",
                "A cDup",
                "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                    << ", B = " << (B < VarBegin ? FP_GetOpcodeName(OPCODE(B)) : "<var>")
                    << "\n");
              goto Ldd;
            }
        }
      }
      if(IsUnaryOpcode(A))
      {
        switch(ByteCodePtr[0])
        {
          default:
            B = ByteCodePtr[0];
            if(B >= VarBegin)
            {
              switch(ByteCodePtr[-1])
              {
                default:
                  C = ByteCodePtr[-1];
                  if(C==A)
                  {
                    switch(ByteCodePtr[-2])
                    {
                      default:
                        D = ByteCodePtr[-2];
                        if(D==B)
                        {
                          FP_TRACE_BYTECODE_OPTIMIZATION(
                            "D[D==B] C[C==A] B[B >= VarBegin] A[IsUnaryOpcode(A)]",
                            "D C cDup",
                            "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                                << ", B = " << (B < VarBegin ? FP_GetOpcodeName(OPCODE(B)) : "<var>")
                                << ", C = " << (C < VarBegin ? FP_GetOpcodeName(OPCODE(C)) : "<var>")
                                << ", D = " << (D < VarBegin ? FP_GetOpcodeName(OPCODE(D)) : "<var>")
                                << "\n");
                          /* ByteCodePtr[-2] = D; */ // redundant, matches D @ 3
                          /* ByteCodePtr[-1] = C; */ // redundant, matches C @ 2
                          goto Lde;
                        }
                    }
                  }
              }
            }
        }
      }
  }
  goto Ldf;
Laa: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     goto TailCall_cAbs;
Lab: ImmedPtr[0] = fp_abs(x); return;
Lac: ImmedPtr[0] = -x; return;
Lad: data->ByteCode.pop_back(); return;
Lae: ImmedPtr[0] = Value_t(1)/x; return;
Laf: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cDiv;
Ldg: goto TailCall_cDiv;
Lag: data->ByteCode.pop_back();
     AddFunctionOpcode(cSqr); return;
Lah: ByteCodePtr[-1] = cImmed; goto Lad;
Lai: ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     ByteCodePtr -= 1;
     data->ByteCode.pop_back();
Ldh: goto TailCall_cMul;
Laj: ImmedPtr[-1] = y*x;
Lak: data->Immed.pop_back(); goto Lad;
Lal: ByteCodePtr[0] = cDup;
     ImmedPtr -= 1;
     data->Immed.pop_back();
Ldi: opcode = cAdd;
     goto TailCall_cAdd;
Lam: data->Immed.pop_back();
     data->ByteCode.pop_back();
     opcode = cNeg;
     FP_ReDefinePointers();
     goto TailCall_cNeg;
Lan: data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cSqr);
Ldj: FP_ReDefinePointers(); goto Ldh;
Lba: ImmedPtr[-1] = y/x; goto Lak;
Lbb: ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     ByteCodePtr -= 1;
     data->ByteCode.pop_back(); goto Ldg;
Lbc: ImmedPtr[-1] = fp_mod(y,x); goto Lak;
Lbd: data->Immed.push_back(Value_t(4));
     ByteCodePtr[-2] = cImmed;
     ByteCodePtr -= 2;
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     opcode = cMul; goto Ldj;
Lbe: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cSub;
     goto TailCall_cSub;
Lbf: ImmedPtr[-1] = y+x; goto Lak;
Lbg: ImmedPtr[-1] = y-x; goto Lak;
Lbh: ByteCodePtr -= 1;
     data->ByteCode.pop_back(); goto Ldi;
Lbi: ImmedPtr[-1] = Min(x,y); goto Lak;
Lbj: ImmedPtr[-1] = Max(x,y); goto Lak;
Lbk: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cGreaterOrEq;
     goto TailCall_cGreaterOrEq;
Lbl: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cGreater;
     goto TailCall_cGreater;
Lbm: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cLessOrEq;
     goto TailCall_cLessOrEq;
Lbn: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cLess;
     goto TailCall_cLess;
Lca: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cNEqual;
     goto TailCall_cNEqual;
Lcb: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cEqual;
     goto TailCall_cEqual;
Lcc: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     goto TailCall_cNot;
Lcd: data->ByteCode.pop_back();
     AddFunctionOpcode(cNotNot); return;
Lce: data->ByteCode.pop_back();
Lch: AddFunctionOpcode(cAbsNot); return;
Lcf: data->ByteCode.pop_back();
     AddFunctionOpcode(cAbsNotNot); return;
Lcg: ImmedPtr[0] = !truthValue(x); return;
Lci: opcode = cMul; goto Ldh;
Lcj: ImmedPtr[-1] = fp_less(y,x); goto Lak;
Lck: ImmedPtr[-1] = fp_lessOrEq(y,x); goto Lak;
Lcl: ImmedPtr[-1] = fp_less(x,y); goto Lak;
Lcm: ImmedPtr[-1] = fp_lessOrEq(x,y); goto Lak;
Lcn: ImmedPtr[-1] = fp_equal(y,x); goto Lak;
Lda: ImmedPtr[-1] = fp_nequal(y,x); goto Lak;
Ldb: ImmedPtr[-1] = truthValue(x)&&truthValue(y); goto Lak;
Ldc: ImmedPtr[-1] = truthValue(x)||truthValue(y); goto Lak;
Ldd: data->ByteCode.pop_back();
     AddFunctionOpcode(A);
     data->ByteCode.push_back(cDup); return;
Lde: ByteCodePtr[0] = cDup; return;
Ldf: data->ByteCode.push_back(opcode); return;
return;
// This list of dummy gotos is here to inhibit
// compiler warnings on unused labels
goto TailCall_cAnd;goto TailCall_cEqual;goto TailCall_cGreater;
goto TailCall_cGreaterOrEq;goto TailCall_cInv;goto TailCall_cLess;
goto TailCall_cLessOrEq;goto TailCall_cMax;goto TailCall_cMin;
goto TailCall_cMod;goto TailCall_cNEqual;goto TailCall_cOr;
goto TailCall_cSub;
#endif

#if(FP_FLOAT_VERSION)
  Value_t x;
  Value_t y;
  unsigned A;
  unsigned B;
  unsigned C;
  unsigned D;
  switch(opcode)
  {
  TailCall_cPow:
    case cPow:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          if(!isEvenInteger(x*Value_t(2)))
          {
            switch(ByteCodePtr[-1])
            {
              case cSqr:
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "cSqr x[!isEvenInteger(x*Value_t(2))] cPow",
                  "cAbs [x*Value_t(2)] cPow",
                  "    with x = " << x << "\n");
                /* opcode = cPow; */ // redundant, matches cPow @ 0
                goto Ldk;
            }
          }
          if(IsIntegerConst(x))
          {
            switch(ByteCodePtr[-1])
            {
              case cPow:
                switch(ByteCodePtr[-2])
                {
                  case cImmed:
                    y = ImmedPtr[-1];
                    if(!IsIntegerConst(y))
                    {
                      FP_TRACE_BYTECODE_OPTIMIZATION(
                        "y[!IsIntegerConst(y)] cPow x[IsIntegerConst(x)] cPow",
                        "[y*x] cPow",
                        "    with x = " << x
                            << ", y = " << y
                            << "\n");
                      /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                      /* ByteCodePtr[-1] = cPow; */ // redundant, matches cPow @ 2
                      goto Laj;
                    }
                    break;
                }
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "cPow x[IsIntegerConst(x)] cPow",
                  "[x] cMul cPow",
                  "    with x = " << x << "\n");
                /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                /* opcode = cPow; */ // redundant, matches cPow @ 0
                goto Ldl;
              case cExp:
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "cExp x[IsIntegerConst(x)] cPow",
                  "[x] cMul cExp",
                  "    with x = " << x << "\n");
                /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                goto Ldm;
              case cExp2:
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "cExp2 x[IsIntegerConst(x)] cPow",
                  "[x] cMul cExp2",
                  "    with x = " << x << "\n");
                /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                goto Ldn;
            }
          }
          if(isEvenInteger(x))
          {
            switch(ByteCodePtr[-1])
            {
              case cAbs:
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "cAbs x[isEvenInteger(x)] cPow",
                  "[x] cPow",
                  "    with x = " << x << "\n");
                /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                /* opcode = cPow; */ // redundant, matches cPow @ 0
                goto Lea;
              case cMul:
                switch(ByteCodePtr[-2])
                {
                  case cAbs:
                    FP_TRACE_BYTECODE_OPTIMIZATION(
                      "cAbs cMul x[isEvenInteger(x)] cPow",
                      "cMul [x] cPow",
                      "    with x = " << x << "\n");
                    /* opcode = cPow; */ // redundant, matches cPow @ 0
                    goto Leb;
                }
                break;
            }
          }
          if(x==Value_t(0.5))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x==Value_t(0.5)] cPow",
              "cSqrt",
              "    with x = " << x << "\n");
            goto Lec;
          }
          if(x==Value_t(1)/Value_t(3))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x==Value_t(1)/Value_t(3)] cPow",
              "cCbrt",
              "    with x = " << x << "\n");
            goto Led;
          }
          if(x==Value_t(1)/Value_t(-3))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x==Value_t(1)/Value_t(-3)] cPow",
              "cCbrt cInv",
              "    with x = " << x << "\n");
            goto Lee;
          }
          if(x==Value_t(-0.5))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x==Value_t(-0.5)] cPow",
              "cRSqrt",
              "    with x = " << x << "\n");
            goto Lef;
          }
          if(x==Value_t(-1))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x==Value_t(-1)] cPow",
              "cInv",
              "    with x = " << x << "\n");
            goto Leg;
          }
          switch(ByteCodePtr[-1])
          {
            case cPow:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  if(isEvenInteger(y)&&!isEvenInteger(x*y))
                  {
                    FP_TRACE_BYTECODE_OPTIMIZATION(
                      "y[isEvenInteger(y)&&!isEvenInteger(x*y)] cPow x cPow",
                      "cAbs [y*x] cPow",
                      "    with x = " << x
                          << ", y = " << y
                          << "\n");
                    /* opcode = cPow; */ // redundant, matches cPow @ 0
                    goto Leh;
                  }
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "y cPow x cPow",
                    "[y*x] cPow",
                    "    with x = " << x
                        << ", y = " << y
                        << "\n");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cPow; */ // redundant, matches cPow @ 2
                  goto Laj;
              }
              break;
            case cSqr:
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "cSqr x cPow",
                "[x*Value_t(2)] cPow",
                "    with x = " << x << "\n");
              /* opcode = cPow; */ // redundant, matches cPow @ 0
              goto Lei;
            case cImmed:
              y = ImmedPtr[-1];
              if( y!=Value_t(0) || x>=Value_t(0))
              {
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "y[ y!=Value_t(0) || x>=Value_t(0)] x cPow",
                  "[fp_pow(y,x)]",
                  "    with x = " << x
                      << ", y = " << y
                      << "\n");
                /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
                goto Lej;
              }
              break;
          }
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cPow",
            "[DO_POWI]",
            "    with x = " << x << "\n");
          if(TryCompilePowi(x))
            return;
          break;
      }
      goto Default0;
  TailCall_cSqrt:
    case cSqrt:
      switch(ByteCodePtr[0])
      {
        case cSqr:
          FP_TRACE_BYTECODE_OPTIMIZATION("cSqr cSqrt", "cAbs", "");
          goto Lek;
        case cImmed:
          x = ImmedPtr[0];
          if(x>=Value_t(0))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x>=Value_t(0)] cSqrt",
              "[fp_sqrt(x)]",
              "    with x = " << x << "\n");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Lel;
          }
          break;
      }
      goto Default0;
  TailCall_cAbs:
    case cAbs:
      switch(ByteCodePtr[0])
      {
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cAbs", "cAbs", "");
          /* opcode = cAbs; */ // redundant, matches cAbs @ 0
          goto Laa;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cAbs",
            "[fp_abs(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lab;
        default:
          A = ByteCodePtr[0];
          if(IsNeverNegativeValueOpcode(A))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "A[IsNeverNegativeValueOpcode(A)] cAbs",
              "A",
              "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>") << "\n");
            /* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
            return;
          }
      }
      goto Default0;
  TailCall_cAcos:
    case cAcos:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cAcos",
            "[fp_acos(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lem;
      }
      goto Default0;
  TailCall_cAcosh:
    case cAcosh:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          if(x>=Value_t(-1)&&x<=Value_t(1))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x>=Value_t(-1)&&x<=Value_t(1)] cAcosh",
              "[fp_acosh(x)]",
              "    with x = " << x << "\n");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Len;
          }
          break;
      }
      goto Default0;
  TailCall_cAsinh:
    case cAsinh:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          if(x>=Value_t(-1)&&x<=Value_t(1))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x>=Value_t(-1)&&x<=Value_t(1)] cAsinh",
              "[fp_asinh(x)]",
              "    with x = " << x << "\n");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Lfa;
          }
          break;
      }
      goto Default0;
  TailCall_cAtan:
    case cAtan:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cAtan",
            "[fp_atan(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lfb;
      }
      goto Default0;
  TailCall_cAtanh:
    case cAtanh:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cAtanh",
            "[fp_atanh(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lfc;
      }
      goto Default0;
  TailCall_cCbrt:
    case cCbrt:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cCbrt",
            "[fp_cbrt(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lfd;
      }
      goto Default0;
  TailCall_cCeil:
    case cCeil:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cCeil",
            "[fp_ceil(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lfe;
        default:
          A = ByteCodePtr[0];
          if(IsAlwaysIntegerOpcode(A))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "A[IsAlwaysIntegerOpcode(A)] cCeil",
              "A",
              "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>") << "\n");
            /* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
            return;
          }
      }
      goto Default0;
  TailCall_cCos:
    case cCos:
      switch(ByteCodePtr[0])
      {
        case cAcos:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAcos cCos", "", "");
          goto Lad;
        case cAbs:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAbs cCos", "cCos", "");
          /* opcode = cCos; */ // redundant, matches cCos @ 0
          goto Lff;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cCos", "cCos", "");
          /* opcode = cCos; */ // redundant, matches cCos @ 0
          goto Lff;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cCos",
            "[fp_cos(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lfg;
      }
      goto Default0;
  TailCall_cCosh:
    case cCosh:
      switch(ByteCodePtr[0])
      {
        case cAcosh:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAcosh cCosh", "", "");
          goto Lad;
        case cAbs:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAbs cCosh", "cCosh", "");
          /* opcode = cCosh; */ // redundant, matches cCosh @ 0
          goto Lfh;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cCosh", "cCosh", "");
          /* opcode = cCosh; */ // redundant, matches cCosh @ 0
          goto Lfh;
        case cAsinh:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAsinh cCosh", "[DO_STACKPLUS1] cSqr [Value_t(1)] cAdd cSqrt", "");
          incStackPtr();
          --StackPtr;
          goto Lfi;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cCosh",
            "[fp_cosh(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lfj;
      }
      goto Default0;
  TailCall_cExp:
    case cExp:
      switch(ByteCodePtr[0])
      {
        case cLog:
          FP_TRACE_BYTECODE_OPTIMIZATION("cLog cExp", "", "");
          goto Lad;
        case cAdd:
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              x = ImmedPtr[0];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "x cAdd cExp",
                "cExp [fp_exp(x)] cMul",
                "    with x = " << x << "\n");
              goto Lfk;
          }
          break;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cExp",
            "[fp_exp(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lfl;
      }
      goto Default0;
  TailCall_cExp2:
    case cExp2:
      switch(ByteCodePtr[0])
      {
        case cLog2:
          FP_TRACE_BYTECODE_OPTIMIZATION("cLog2 cExp2", "", "");
          goto Lad;
        case cAdd:
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              x = ImmedPtr[0];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "x cAdd cExp2",
                "cExp2 [fp_exp2(x)] cMul",
                "    with x = " << x << "\n");
              goto Lfm;
          }
          break;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cExp2",
            "[fp_exp2(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lfn;
      }
      goto Default0;
  TailCall_cFloor:
    case cFloor:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cFloor",
            "[fp_floor(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lga;
        default:
          A = ByteCodePtr[0];
          if(IsAlwaysIntegerOpcode(A))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "A[IsAlwaysIntegerOpcode(A)] cFloor",
              "A",
              "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>") << "\n");
            /* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
            return;
          }
      }
      goto Default0;
  TailCall_cInt:
    case cInt:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cInt",
            "[fp_int(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lgb;
        default:
          A = ByteCodePtr[0];
          if(IsAlwaysIntegerOpcode(A))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "A[IsAlwaysIntegerOpcode(A)] cInt",
              "A",
              "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>") << "\n");
            /* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
            return;
          }
      }
      goto Default0;
  TailCall_cLog:
    case cLog:
      switch(ByteCodePtr[0])
      {
        case cSqr:
          FP_TRACE_BYTECODE_OPTIMIZATION("cSqr cLog", "cAbs cLog cDup cAdd", "");
          goto Lgc;
        case cExp:
          FP_TRACE_BYTECODE_OPTIMIZATION("cExp cLog", "", "");
          goto Lad;
        case cImmed:
          x = ImmedPtr[0];
          if(x>=Value_t(0))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x>=Value_t(0)] cLog",
              "[fp_log(x)]",
              "    with x = " << x << "\n");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Lgd;
          }
          break;
      }
      goto Default0;
  TailCall_cLog10:
    case cLog10:
      switch(ByteCodePtr[0])
      {
        case cSqr:
          FP_TRACE_BYTECODE_OPTIMIZATION("cSqr cLog10", "cAbs cLog10 cDup cAdd", "");
          goto Lge;
        case cImmed:
          x = ImmedPtr[0];
          if(x>=Value_t(0))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x>=Value_t(0)] cLog10",
              "[fp_log10(x)]",
              "    with x = " << x << "\n");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Lgf;
          }
          break;
      }
      goto Default0;
  TailCall_cLog2:
    case cLog2:
      switch(ByteCodePtr[0])
      {
        case cSqr:
          FP_TRACE_BYTECODE_OPTIMIZATION("cSqr cLog2", "cAbs cLog2 cDup cAdd", "");
          goto Lgg;
        case cExp2:
          FP_TRACE_BYTECODE_OPTIMIZATION("cExp2 cLog2", "", "");
          goto Lad;
        case cImmed:
          x = ImmedPtr[0];
          if(x>=Value_t(0))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x>=Value_t(0)] cLog2",
              "[fp_log2(x)]",
              "    with x = " << x << "\n");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Lgh;
          }
          break;
      }
      goto Default0;
  TailCall_cSin:
    case cSin:
      switch(ByteCodePtr[0])
      {
        case cAsin:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAsin cSin", "", "");
          goto Lad;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cSin", "cSin cNeg", "");
          goto Lgi;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cSin",
            "[fp_sin(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lgj;
      }
      goto Default0;
  TailCall_cSinh:
    case cSinh:
      switch(ByteCodePtr[0])
      {
        case cAsinh:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAsinh cSinh", "", "");
          goto Lad;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cSinh", "cSinh cNeg", "");
          goto Lgk;
        case cAcosh:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAcosh cSinh", "[DO_STACKPLUS1] cSqr [Value_t(-1)] cAdd cSqrt", "");
          incStackPtr();
          --StackPtr;
          goto Lgl;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cSinh",
            "[fp_sinh(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lgm;
      }
      goto Default0;
  TailCall_cTan:
    case cTan:
      switch(ByteCodePtr[0])
      {
        case cAtan:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAtan cTan", "", "");
          goto Lad;
        case cAtan2:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAtan2 cTan", "cDiv", "");
          goto Laf;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cTan", "cTan cNeg", "");
          goto Lgn;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cTan",
            "[fp_tan(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lha;
      }
      goto Default0;
  TailCall_cTanh:
    case cTanh:
      switch(ByteCodePtr[0])
      {
        case cAtanh:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAtanh cTanh", "", "");
          goto Lad;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cTanh", "cTanh cNeg", "");
          goto Lhb;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cTanh",
            "[fp_tanh(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lhc;
      }
      goto Default0;
  TailCall_cTrunc:
    case cTrunc:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cTrunc",
            "[fp_trunc(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lhd;
        default:
          A = ByteCodePtr[0];
          if(IsAlwaysIntegerOpcode(A))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "A[IsAlwaysIntegerOpcode(A)] cTrunc",
              "A",
              "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>") << "\n");
            /* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
            return;
          }
      }
      goto Default0;
  TailCall_cDeg:
    case cDeg:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cDeg",
            "[RadiansToDegrees(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lhe;
      }
      goto Default0;
  TailCall_cRad:
    case cRad:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cRad",
            "[DegreesToRadians(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lhf;
      }
      goto Default0;
  TailCall_cNeg:
    case cNeg:
      switch(ByteCodePtr[0])
      {
        case cMul:
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              x = ImmedPtr[0];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "x cMul cNeg",
                "[-x] cMul",
                "    with x = " << x << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
              /* ByteCodePtr[0] = cMul; */ // redundant, matches cMul @ 1
              goto Lac;
          }
          break;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cNeg", "", "");
          goto Lad;
        case cFloor:
          FP_TRACE_BYTECODE_OPTIMIZATION("cFloor cNeg", "cNeg cCeil", "");
          goto Lhg;
        case cCeil:
          FP_TRACE_BYTECODE_OPTIMIZATION("cCeil cNeg", "cNeg cFloor", "");
          goto Lhh;
        case cSin:
          switch(ByteCodePtr[-1])
          {
            case cMul:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  x = ImmedPtr[0];
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "x cMul cSin cNeg",
                    "[-x] cMul cSin",
                    "    with x = " << x << "\n");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
                  /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                  /* ByteCodePtr[0] = cSin; */ // redundant, matches cSin @ 1
                  goto Lac;
              }
              break;
          }
          break;
        case cSinh:
          switch(ByteCodePtr[-1])
          {
            case cMul:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  x = ImmedPtr[0];
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "x cMul cSinh cNeg",
                    "[-x] cMul cSinh",
                    "    with x = " << x << "\n");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
                  /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                  /* ByteCodePtr[0] = cSinh; */ // redundant, matches cSinh @ 1
                  goto Lac;
              }
              break;
          }
          break;
        case cTan:
          switch(ByteCodePtr[-1])
          {
            case cMul:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  x = ImmedPtr[0];
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "x cMul cTan cNeg",
                    "[-x] cMul cTan",
                    "    with x = " << x << "\n");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
                  /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                  /* ByteCodePtr[0] = cTan; */ // redundant, matches cTan @ 1
                  goto Lac;
              }
              break;
          }
          break;
        case cTanh:
          switch(ByteCodePtr[-1])
          {
            case cMul:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  x = ImmedPtr[0];
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "x cMul cTanh cNeg",
                    "[-x] cMul cTanh",
                    "    with x = " << x << "\n");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
                  /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                  /* ByteCodePtr[0] = cTanh; */ // redundant, matches cTanh @ 1
                  goto Lac;
              }
              break;
          }
          break;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cNeg",
            "[-x]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lac;
      }
      goto Default0;
  TailCall_cInv:
    case cInv:
      switch(ByteCodePtr[0])
      {
        case cInv:
          FP_TRACE_BYTECODE_OPTIMIZATION("cInv cInv", "", "");
          goto Lad;
        case cPow:
          FP_TRACE_BYTECODE_OPTIMIZATION("cPow cInv", "cNeg cPow", "");
          goto Lhi;
        case cSin:
          FP_TRACE_BYTECODE_OPTIMIZATION("cSin cInv", "cCsc", "");
          goto Lhj;
        case cCos:
          FP_TRACE_BYTECODE_OPTIMIZATION("cCos cInv", "cSec", "");
          goto Lhk;
        case cTan:
          FP_TRACE_BYTECODE_OPTIMIZATION("cTan cInv", "cCot", "");
          goto Lhl;
        case cCsc:
          FP_TRACE_BYTECODE_OPTIMIZATION("cCsc cInv", "cSin", "");
          goto Lhm;
        case cSec:
          FP_TRACE_BYTECODE_OPTIMIZATION("cSec cInv", "cCos", "");
          goto Lhn;
        case cCot:
          FP_TRACE_BYTECODE_OPTIMIZATION("cCot cInv", "cTan", "");
          goto Lia;
        case cImmed:
          x = ImmedPtr[0];
          if(x!=Value_t(0))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x!=Value_t(0)] cInv",
              "[Value_t(1)/x]",
              "    with x = " << x << "\n");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Lae;
          }
          break;
      }
      goto Default0;
  TailCall_cMul:
    case cMul:
      switch(ByteCodePtr[0])
      {
        case cInv:
          FP_TRACE_BYTECODE_OPTIMIZATION("cInv cMul", "cDiv", "");
          goto Laf;
        case cPow:
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              x = ImmedPtr[0];
              if(x<0)
              {
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "x[x<0] cPow cMul",
                  "[-x] cPow cDiv",
                  "    with x = " << x << "\n");
                /* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
                /* ByteCodePtr[0] = cPow; */ // redundant, matches cPow @ 1
                goto Lib;
              }
              break;
          }
          goto Default1;
        case cDup:
          FP_TRACE_BYTECODE_OPTIMIZATION("cDup cMul", "cSqr", "");
          goto Lag;
        case cImmed:
          x = ImmedPtr[0];
          if(x==Value_t(0))
          {
            switch(ByteCodePtr[-1])
            {
              default:
                A = ByteCodePtr[-1];
                if(A >= VarBegin)
                {
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "A[A >= VarBegin] x[x==Value_t(0)] cMul",
                    "[x]",
                    "    with x = " << x
                        << ", A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                        << "\n");
                  /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                  goto Lah;
                }
            }
          }
          switch(ByteCodePtr[-1])
          {
            case cDeg:
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "cDeg x cMul",
                "[RadiansToDegrees(x)] cMul",
                "    with x = " << x << "\n");
              /* opcode = cMul; */ // redundant, matches cMul @ 0
              goto Lic;
            case cRad:
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "cRad x cMul",
                "[DegreesToRadians(x)] cMul",
                "    with x = " << x << "\n");
              /* opcode = cMul; */ // redundant, matches cMul @ 0
              goto Lid;
            case cNeg:
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "cNeg x cMul",
                "[-x] cMul",
                "    with x = " << x << "\n");
              /* opcode = cMul; */ // redundant, matches cMul @ 0
              goto Lai;
            case cMul:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  if((y*x)==GetRadiansToDegreesFactor<Value_t>())
                  {
                    FP_TRACE_BYTECODE_OPTIMIZATION(
                      "y[(y*x)==GetRadiansToDegreesFactor<Value_t>()] cMul x cMul",
                      "cDeg",
                      "    with x = " << x
                          << ", y = " << y
                          << "\n");
                    goto Lie;
                  }
                  if((y*x)==GetDegreesToRadiansFactor<Value_t>())
                  {
                    FP_TRACE_BYTECODE_OPTIMIZATION(
                      "y[(y*x)==GetDegreesToRadiansFactor<Value_t>()] cMul x cMul",
                      "cRad",
                      "    with x = " << x
                          << ", y = " << y
                          << "\n");
                    goto Lif;
                  }
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "y cMul x cMul",
                    "[y*x] cMul",
                    "    with x = " << x
                        << ", y = " << y
                        << "\n");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                  goto Laj;
              }
              break;
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cMul",
                "[y*x]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Laj;
          }
          if(x==Value_t(1))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x==Value_t(1)] cMul",
              "",
              "    with x = " << x << "\n");
            goto Lak;
          }
          if(x==Value_t(2))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x==Value_t(2)] cMul",
              "cDup cAdd",
              "    with x = " << x << "\n");
            goto Lal;
          }
          if(x==GetRadiansToDegreesFactor<Value_t>())
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x==GetRadiansToDegreesFactor<Value_t>()] cMul",
              "cDeg",
              "    with x = " << x << "\n");
            goto Lig;
          }
          if(x==GetDegreesToRadiansFactor<Value_t>())
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x==GetDegreesToRadiansFactor<Value_t>()] cMul",
              "cRad",
              "    with x = " << x << "\n");
            goto Lih;
          }
          if(x==Value_t(-1))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x==Value_t(-1)] cMul",
              "cNeg",
              "    with x = " << x << "\n");
            goto Lam;
          }
          break;
        default: Default1:;
          A = ByteCodePtr[0];
          if(A >= VarBegin)
          {
            switch(ByteCodePtr[-1])
            {
              case cMul:
                switch(ByteCodePtr[-2])
                {
                  default:
                    B = ByteCodePtr[-2];
                    if(B==A)
                    {
                      FP_TRACE_BYTECODE_OPTIMIZATION(
                        "B[B==A] cMul A[A >= VarBegin] cMul",
                        "B cSqr cMul",
                        "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                            << ", B = " << (B < VarBegin ? FP_GetOpcodeName(OPCODE(B)) : "<var>")
                            << "\n");
                      /* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
                      /* opcode = cMul; */ // redundant, matches cMul @ 0
                      goto Lan;
                    }
                }
                goto Default2;
              default: Default2:;
                B = ByteCodePtr[-1];
                if(B==A)
                {
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "B[B==A] A[A >= VarBegin] cMul",
                    "B cSqr",
                    "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                        << ", B = " << (B < VarBegin ? FP_GetOpcodeName(OPCODE(B)) : "<var>")
                        << "\n");
                  /* ByteCodePtr[-1] = B; */ // redundant, matches B @ 2
                  goto Lag;
                }
            }
          }
      }
      goto Default0;
  TailCall_cDiv:
    case cDiv:
      switch(ByteCodePtr[0])
      {
        case cInv:
          FP_TRACE_BYTECODE_OPTIMIZATION("cInv cDiv", "cMul", "");
          goto Lii;
        case cExp:
          switch(ByteCodePtr[-1])
          {
            case cMul:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  x = ImmedPtr[0];
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "x cMul cExp cDiv",
                    "[-x] cMul cExp cMul",
                    "    with x = " << x << "\n");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
                  /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                  /* ByteCodePtr[0] = cExp; */ // redundant, matches cExp @ 1
                  goto Lij;
              }
              break;
          }
          break;
        case cExp2:
          switch(ByteCodePtr[-1])
          {
            case cMul:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  x = ImmedPtr[0];
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "x cMul cExp2 cDiv",
                    "[-x] cMul cExp2 cMul",
                    "    with x = " << x << "\n");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
                  /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                  /* ByteCodePtr[0] = cExp2; */ // redundant, matches cExp2 @ 1
                  goto Lij;
              }
              break;
          }
          break;
        case cSin:
          FP_TRACE_BYTECODE_OPTIMIZATION("cSin cDiv", "cCsc cMul", "");
          goto Lik;
        case cCos:
          FP_TRACE_BYTECODE_OPTIMIZATION("cCos cDiv", "cSec cMul", "");
          goto Lil;
        case cTan:
          FP_TRACE_BYTECODE_OPTIMIZATION("cTan cDiv", "cCot cMul", "");
          goto Lim;
        case cCsc:
          FP_TRACE_BYTECODE_OPTIMIZATION("cCsc cDiv", "cSin cMul", "");
          goto Lin;
        case cSec:
          FP_TRACE_BYTECODE_OPTIMIZATION("cSec cDiv", "cCos cMul", "");
          goto Lja;
        case cCot:
          FP_TRACE_BYTECODE_OPTIMIZATION("cCot cDiv", "cTan cMul", "");
          goto Ljb;
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cNeg:
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "cNeg x cDiv",
                "[-x] cDiv",
                "    with x = " << x << "\n");
              /* opcode = cDiv; */ // redundant, matches cDiv @ 0
              goto Lbb;
          }
          if(x==Value_t(1))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x==Value_t(1)] cDiv",
              "",
              "    with x = " << x << "\n");
            goto Lak;
          }
          if(x!=Value_t(0))
          {
            switch(ByteCodePtr[-1])
            {
              case cMul:
                switch(ByteCodePtr[-2])
                {
                  case cImmed:
                    y = ImmedPtr[-1];
                    if((y/x)==GetRadiansToDegreesFactor<Value_t>())
                    {
                      FP_TRACE_BYTECODE_OPTIMIZATION(
                        "y[(y/x)==GetRadiansToDegreesFactor<Value_t>()] cMul x[x!=Value_t(0)] cDiv",
                        "cDeg",
                        "    with x = " << x
                            << ", y = " << y
                            << "\n");
                      goto Lie;
                    }
                    if((y/x)==GetDegreesToRadiansFactor<Value_t>())
                    {
                      FP_TRACE_BYTECODE_OPTIMIZATION(
                        "y[(y/x)==GetDegreesToRadiansFactor<Value_t>()] cMul x[x!=Value_t(0)] cDiv",
                        "cRad",
                        "    with x = " << x
                            << ", y = " << y
                            << "\n");
                      goto Lif;
                    }
                    FP_TRACE_BYTECODE_OPTIMIZATION(
                      "y cMul x[x!=Value_t(0)] cDiv",
                      "[y/x] cMul",
                      "    with x = " << x
                          << ", y = " << y
                          << "\n");
                    /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                    /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                    goto Lba;
                }
                break;
              case cImmed:
                y = ImmedPtr[-1];
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "y x[x!=Value_t(0)] cDiv",
                  "[y/x]",
                  "    with x = " << x
                      << ", y = " << y
                      << "\n");
                /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
                goto Lba;
            }
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x!=Value_t(0)] cDiv",
              "[Value_t(1)/x] cMul",
              "    with x = " << x << "\n");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Ljc;
          }
          break;
      }
      goto Default0;
  TailCall_cMod:
    case cMod:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          if(x!=Value_t(0))
          {
            switch(ByteCodePtr[-1])
            {
              case cImmed:
                y = ImmedPtr[-1];
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "y x[x!=Value_t(0)] cMod",
                  "[fp_mod(y,x)]",
                  "    with x = " << x
                      << ", y = " << y
                      << "\n");
                /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
                goto Lbc;
            }
          }
          break;
      }
      goto Default0;
  TailCall_cAdd:
    case cAdd:
      switch(ByteCodePtr[0])
      {
        case cDup:
          switch(ByteCodePtr[-1])
          {
            case cAdd:
              switch(ByteCodePtr[-2])
              {
                case cDup:
                  FP_TRACE_BYTECODE_OPTIMIZATION("cDup cAdd cDup cAdd", "[Value_t(4)] cMul", "");
                  goto Lbd;
              }
              break;
          }
          break;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cAdd", "cSub", "");
          goto Lbe;
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cAdd:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "y cAdd x cAdd",
                    "[y+x] cAdd",
                    "    with x = " << x
                        << ", y = " << y
                        << "\n");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cAdd; */ // redundant, matches cAdd @ 2
                  goto Lbf;
              }
              break;
            case cSub:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "y cSub x cAdd",
                    "[y-x] cSub",
                    "    with x = " << x
                        << ", y = " << y
                        << "\n");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cSub; */ // redundant, matches cSub @ 2
                  goto Lbg;
              }
              break;
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cAdd",
                "[y+x]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lbf;
          }
          if(x==Value_t(0))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x==Value_t(0)] cAdd",
              "",
              "    with x = " << x << "\n");
            goto Lak;
          }
          break;
      }
      goto Default0;
  TailCall_cSub:
    case cSub:
      switch(ByteCodePtr[0])
      {
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cSub", "cAdd", "");
          goto Lbh;
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cSub:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "y cSub x cSub",
                    "[y+x] cSub",
                    "    with x = " << x
                        << ", y = " << y
                        << "\n");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cSub; */ // redundant, matches cSub @ 2
                  goto Lbf;
              }
              break;
            case cAdd:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "y cAdd x cSub",
                    "[y-x] cAdd",
                    "    with x = " << x
                        << ", y = " << y
                        << "\n");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cAdd; */ // redundant, matches cAdd @ 2
                  goto Lbg;
              }
              break;
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cSub",
                "[y-x]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lbg;
          }
          if(x==Value_t(0))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "x[x==Value_t(0)] cSub",
              "",
              "    with x = " << x << "\n");
            goto Lak;
          }
          break;
      }
      goto Default0;
  TailCall_cMin:
    case cMin:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cMin",
                "[Min(x,y)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lbi;
          }
          break;
      }
      goto Default0;
  TailCall_cMax:
    case cMax:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cMax",
                "[Max(x,y)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lbj;
          }
          break;
      }
      goto Default0;
  TailCall_cAtan2:
    case cAtan2:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cAtan2",
                "[fp_atan2(y,x)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Ljd;
          }
          break;
      }
      goto Default0;
  TailCall_cNot:
    case cNot:
      switch(ByteCodePtr[0])
      {
        case cLess:
          FP_TRACE_BYTECODE_OPTIMIZATION("cLess cNot", "cGreaterOrEq", "");
          goto Lbk;
        case cLessOrEq:
          FP_TRACE_BYTECODE_OPTIMIZATION("cLessOrEq cNot", "cGreater", "");
          goto Lbl;
        case cGreater:
          FP_TRACE_BYTECODE_OPTIMIZATION("cGreater cNot", "cLessOrEq", "");
          goto Lbm;
        case cGreaterOrEq:
          FP_TRACE_BYTECODE_OPTIMIZATION("cGreaterOrEq cNot", "cLess", "");
          goto Lbn;
        case cEqual:
          FP_TRACE_BYTECODE_OPTIMIZATION("cEqual cNot", "cNEqual", "");
          goto Lca;
        case cNEqual:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNEqual cNot", "cEqual", "");
          goto Lcb;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cNot", "cNot", "");
          /* opcode = cNot; */ // redundant, matches cNot @ 0
          goto Lcc;
        case cAbs:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAbs cNot", "cNot", "");
          /* opcode = cNot; */ // redundant, matches cNot @ 0
          goto Lcc;
        case cNot:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNot cNot", "cNotNot", "");
          goto Lcd;
        case cNotNot:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNotNot cNot", "cNot", "");
          /* opcode = cNot; */ // redundant, matches cNot @ 0
          goto Lcc;
        case cAbsNotNot:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAbsNotNot cNot", "cAbsNot", "");
          goto Lce;
        case cAbsNot:
          switch(ByteCodePtr[-1])
          {
            default:
              A = ByteCodePtr[-1];
              if(IsLogicalOpcode(A))
              {
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "A[IsLogicalOpcode(A)] cAbsNot cNot",
                  "A",
                  "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>") << "\n");
                /* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
                goto Lad;
              }
              if(A!=cImmed)
              {
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "A[A!=cImmed] cAbsNot cNot",
                  "A cAbsNotNot",
                  "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>") << "\n");
                /* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
                goto Lcf;
              }
          }
          goto Default3;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION(
            "x cNot",
            "[!truthValue(x)]",
            "    with x = " << x << "\n");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lcg;
        default: Default3:;
          A = ByteCodePtr[0];
          if(IsNeverNegativeValueOpcode(A))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION(
              "A[IsNeverNegativeValueOpcode(A)] cNot",
              "A cAbsNot",
              "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>") << "\n");
            /* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
            goto Lch;
          }
      }
      goto Default0;
  TailCall_cLess:
    case cLess:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          if(x!=Value_t(0))
          {
            switch(ByteCodePtr[-1])
            {
              case cAbs:
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "cAbs x[x!=Value_t(0)] cLess",
                  "[Value_t(0.5)/x] cMul cNot",
                  "    with x = " << x << "\n");
                goto Lje;
            }
          }
          if(x==Value_t(0))
          {
            switch(ByteCodePtr[-1])
            {
              default:
                A = ByteCodePtr[-1];
                if(IsNeverNegativeValueOpcode(A))
                {
                  FP_TRACE_BYTECODE_OPTIMIZATION(
                    "A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(0)] cLess",
                    "A [x] cMul",
                    "    with x = " << x
                        << ", A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                        << "\n");
                  /* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
                  /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                  /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
                  goto Lci;
                }
            }
          }
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cLess",
                "[fp_less(y,x)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lcj;
          }
          break;
      }
      goto Default0;
  TailCall_cLessOrEq:
    case cLessOrEq:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cLessOrEq",
                "[fp_lessOrEq(y,x)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lck;
          }
          break;
      }
      goto Default0;
  TailCall_cGreater:
    case cGreater:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cGreater",
                "[fp_less(x,y)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lcl;
          }
          break;
      }
      goto Default0;
  TailCall_cGreaterOrEq:
    case cGreaterOrEq:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          if(x!=Value_t(0))
          {
            switch(ByteCodePtr[-1])
            {
              case cAbs:
                FP_TRACE_BYTECODE_OPTIMIZATION(
                  "cAbs x[x!=Value_t(0)] cGreaterOrEq",
                  "[Value_t(0.5)/x] cMul cNotNot",
                  "    with x = " << x << "\n");
                goto Ljf;
            }
          }
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cGreaterOrEq",
                "[fp_lessOrEq(x,y)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lcm;
          }
          break;
      }
      goto Default0;
  TailCall_cEqual:
    case cEqual:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cEqual",
                "[fp_equal(y,x)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lcn;
          }
          break;
      }
      goto Default0;
  TailCall_cNEqual:
    case cNEqual:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cNEqual",
                "[fp_nequal(y,x)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lda;
          }
          break;
      }
      goto Default0;
  TailCall_cAnd:
    case cAnd:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cAnd",
                "[truthValue(x)&&truthValue(y)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Ldb;
          }
          break;
      }
      goto Default0;
  TailCall_cOr:
    case cOr:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "y x cOr",
                "[truthValue(x)||truthValue(y)]",
                "    with x = " << x
                    << ", y = " << y
                    << "\n");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Ldc;
          }
          break;
      }
      goto Default0;
    default: Default0:;
      A = opcode;
      if(A >= VarBegin)
      {
        switch(ByteCodePtr[0])
        {
          default:
            B = ByteCodePtr[0];
            if(B==A)
            {
              FP_TRACE_BYTECODE_OPTIMIZATION(
                "B[B==A] A[A >= VarBegin]",
                "A cDup",
                "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                    << ", B = " << (B < VarBegin ? FP_GetOpcodeName(OPCODE(B)) : "<var>")
                    << "\n");
              goto Ldd;
            }
        }
      }
      if(IsUnaryOpcode(A))
      {
        switch(ByteCodePtr[0])
        {
          default:
            B = ByteCodePtr[0];
            if(B >= VarBegin)
            {
              switch(ByteCodePtr[-1])
              {
                default:
                  C = ByteCodePtr[-1];
                  if(C==A)
                  {
                    switch(ByteCodePtr[-2])
                    {
                      default:
                        D = ByteCodePtr[-2];
                        if(D==B)
                        {
                          FP_TRACE_BYTECODE_OPTIMIZATION(
                            "D[D==B] C[C==A] B[B >= VarBegin] A[IsUnaryOpcode(A)]",
                            "D C cDup",
                            "    with A = " << (A < VarBegin ? FP_GetOpcodeName(OPCODE(A)) : "<var>")
                                << ", B = " << (B < VarBegin ? FP_GetOpcodeName(OPCODE(B)) : "<var>")
                                << ", C = " << (C < VarBegin ? FP_GetOpcodeName(OPCODE(C)) : "<var>")
                                << ", D = " << (D < VarBegin ? FP_GetOpcodeName(OPCODE(D)) : "<var>")
                                << "\n");
                          /* ByteCodePtr[-2] = D; */ // redundant, matches D @ 3
                          /* ByteCodePtr[-1] = C; */ // redundant, matches C @ 2
                          goto Lde;
                        }
                    }
                  }
              }
            }
        }
      }
  }
  goto Ldf;
Laa: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
Ljg: goto TailCall_cAbs;
Lab: ImmedPtr[0] = fp_abs(x); return;
Lac: ImmedPtr[0] = -x; return;
Lad: data->ByteCode.pop_back(); return;
Lae: ImmedPtr[0] = Value_t(1)/x; return;
Laf: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
Ljh: opcode = cDiv;
Ldg: goto TailCall_cDiv;
Lag: data->ByteCode.pop_back();
     AddFunctionOpcode(cSqr); return;
Lah: ByteCodePtr[-1] = cImmed; goto Lad;
Lai: ImmedPtr[0] = -x;
Lji: ByteCodePtr[-1] = cImmed;
     ByteCodePtr -= 1;
     data->ByteCode.pop_back();
Ldh: goto TailCall_cMul;
Laj: ImmedPtr[-1] = y*x;
Lak: data->Immed.pop_back(); goto Lad;
Lal: ByteCodePtr[0] = cDup;
     ImmedPtr -= 1;
     data->Immed.pop_back();
Ldi: opcode = cAdd;
Ljj: goto TailCall_cAdd;
Lam: data->Immed.pop_back();
     data->ByteCode.pop_back();
Ljk: opcode = cNeg;
     FP_ReDefinePointers();
     goto TailCall_cNeg;
Lan: data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cSqr);
Ldj: FP_ReDefinePointers(); goto Ldh;
Lba: ImmedPtr[-1] = y/x; goto Lak;
Lbb: ImmedPtr[0] = -x;
     ByteCodePtr[-1] = cImmed;
     ByteCodePtr -= 1;
     data->ByteCode.pop_back(); goto Ldg;
Lbc: ImmedPtr[-1] = fp_mod(y,x); goto Lak;
Lbd: data->Immed.push_back(Value_t(4));
     ByteCodePtr[-2] = cImmed;
     ByteCodePtr -= 2;
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
Ljl: opcode = cMul; goto Ldj;
Lbe: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cSub;
     goto TailCall_cSub;
Lbf: ImmedPtr[-1] = y+x; goto Lak;
Lbg: ImmedPtr[-1] = y-x; goto Lak;
Lbh: ByteCodePtr -= 1;
     data->ByteCode.pop_back(); goto Ldi;
Lbi: ImmedPtr[-1] = Min(x,y); goto Lak;
Lbj: ImmedPtr[-1] = Max(x,y); goto Lak;
Lbk: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cGreaterOrEq;
     goto TailCall_cGreaterOrEq;
Lbl: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cGreater;
     goto TailCall_cGreater;
Lbm: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cLessOrEq;
     goto TailCall_cLessOrEq;
Lbn: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cLess;
     goto TailCall_cLess;
Lca: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cNEqual;
     goto TailCall_cNEqual;
Lcb: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cEqual;
     goto TailCall_cEqual;
Lcc: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
Ljm: goto TailCall_cNot;
Lcd: data->ByteCode.pop_back();
Ljn: AddFunctionOpcode(cNotNot); return;
Lce: data->ByteCode.pop_back();
Lch: AddFunctionOpcode(cAbsNot); return;
Lcf: data->ByteCode.pop_back();
     AddFunctionOpcode(cAbsNotNot); return;
Lcg: ImmedPtr[0] = !truthValue(x); return;
Lci: opcode = cMul; goto Ldh;
Lcj: ImmedPtr[-1] = fp_less(y,x); goto Lak;
Lck: ImmedPtr[-1] = fp_lessOrEq(y,x); goto Lak;
Lcl: ImmedPtr[-1] = fp_less(x,y); goto Lak;
Lcm: ImmedPtr[-1] = fp_lessOrEq(x,y); goto Lak;
Lcn: ImmedPtr[-1] = fp_equal(y,x); goto Lak;
Lda: ImmedPtr[-1] = fp_nequal(y,x); goto Lak;
Ldb: ImmedPtr[-1] = truthValue(x)&&truthValue(y); goto Lak;
Ldc: ImmedPtr[-1] = truthValue(x)||truthValue(y); goto Lak;
Ldd: data->ByteCode.pop_back();
     AddFunctionOpcode(A);
     data->ByteCode.push_back(cDup); return;
Lde: ByteCodePtr[0] = cDup; return;
Ldf: data->ByteCode.push_back(opcode); return;
Ldk: data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     data->Immed.push_back(x*Value_t(2));
Lka: data->ByteCode.push_back(cImmed);
Lkb: FP_ReDefinePointers();
Lkc: goto TailCall_cPow;
Ldl: ByteCodePtr[-1] = cImmed;
     data->ByteCode.pop_back();
     AddFunctionOpcode(cMul); goto Lkb;
Ldm: ByteCodePtr[-1] = cImmed;
     data->ByteCode.pop_back();
     AddFunctionOpcode(cMul);
     opcode = cExp;
     FP_ReDefinePointers();
     goto TailCall_cExp;
Ldn: ByteCodePtr[-1] = cImmed;
     data->ByteCode.pop_back();
     AddFunctionOpcode(cMul);
     opcode = cExp2;
     FP_ReDefinePointers();
     goto TailCall_cExp2;
Lea: ByteCodePtr[-1] = cImmed;
     ByteCodePtr -= 1;
     data->ByteCode.pop_back(); goto Lkc;
Leb: data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cMul);
     data->Immed.push_back(x); goto Lka;
Lec: data->Immed.pop_back();
     data->ByteCode.pop_back();
Lkd: opcode = cSqrt;
     FP_ReDefinePointers();
     goto TailCall_cSqrt;
Led: data->Immed.pop_back();
     data->ByteCode.pop_back();
     opcode = cCbrt;
     FP_ReDefinePointers();
     goto TailCall_cCbrt;
Lee: data->Immed.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cCbrt);
Lke: opcode = cInv;
     FP_ReDefinePointers();
     goto TailCall_cInv;
Lef: data->Immed.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cRSqrt); return;
Leg: data->Immed.pop_back();
     data->ByteCode.pop_back(); goto Lke;
Leh: data->Immed.pop_back();
     data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     data->Immed.push_back(y*x); goto Lka;
Lei: ImmedPtr[0] = x*Value_t(2); goto Lea;
Lej: ImmedPtr[-1] = fp_pow(y,x); goto Lak;
Lek: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cAbs; goto Ljg;
Lel: ImmedPtr[0] = fp_sqrt(x); return;
Lem: ImmedPtr[0] = fp_acos(x); return;
Len: ImmedPtr[0] = fp_acosh(x); return;
Lfa: ImmedPtr[0] = fp_asinh(x); return;
Lfb: ImmedPtr[0] = fp_atan(x); return;
Lfc: ImmedPtr[0] = fp_atanh(x); return;
Lfd: ImmedPtr[0] = fp_cbrt(x); return;
Lfe: ImmedPtr[0] = fp_ceil(x); return;
Lff: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
Lkf: goto TailCall_cCos;
Lfg: ImmedPtr[0] = fp_cos(x); return;
Lfh: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     goto TailCall_cCosh;
Lfi: data->ByteCode.pop_back();
     AddFunctionOpcode(cSqr);
     data->Immed.push_back(Value_t(1));
Lkg: data->ByteCode.push_back(cImmed);
     AddFunctionOpcode(cAdd); goto Lkd;
Lfj: ImmedPtr[0] = fp_cosh(x); return;
Lfk: data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cExp);
     data->Immed.push_back(fp_exp(x));
Lkh: data->ByteCode.push_back(cImmed); goto Ljl;
Lfl: ImmedPtr[0] = fp_exp(x); return;
Lfm: data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cExp2);
     data->Immed.push_back(fp_exp2(x)); goto Lkh;
Lfn: ImmedPtr[0] = fp_exp2(x); return;
Lga: ImmedPtr[0] = fp_floor(x); return;
Lgb: ImmedPtr[0] = fp_int(x); return;
Lgc: data->ByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     AddFunctionOpcode(cLog);
Lki: data->ByteCode.push_back(cDup);
     opcode = cAdd;
     FP_ReDefinePointers(); goto Ljj;
Lgd: ImmedPtr[0] = fp_log(x); return;
Lge: data->ByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     AddFunctionOpcode(cLog10); goto Lki;
Lgf: ImmedPtr[0] = fp_log10(x); return;
Lgg: data->ByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     AddFunctionOpcode(cLog2); goto Lki;
Lgh: ImmedPtr[0] = fp_log2(x); return;
Lgi: data->ByteCode.pop_back();
     AddFunctionOpcode(cSin); goto Ljk;
Lgj: ImmedPtr[0] = fp_sin(x); return;
Lgk: data->ByteCode.pop_back();
     AddFunctionOpcode(cSinh); goto Ljk;
Lgl: data->ByteCode.pop_back();
     AddFunctionOpcode(cSqr);
     data->Immed.push_back(Value_t(-1)); goto Lkg;
Lgm: ImmedPtr[0] = fp_sinh(x); return;
Lgn: data->ByteCode.pop_back();
     AddFunctionOpcode(cTan); goto Ljk;
Lha: ImmedPtr[0] = fp_tan(x); return;
Lhb: data->ByteCode.pop_back();
     AddFunctionOpcode(cTanh); goto Ljk;
Lhc: ImmedPtr[0] = fp_tanh(x); return;
Lhd: ImmedPtr[0] = fp_trunc(x); return;
Lhe: ImmedPtr[0] = RadiansToDegrees(x); return;
Lhf: ImmedPtr[0] = DegreesToRadians(x); return;
Lhg: data->ByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     opcode = cCeil;
     FP_ReDefinePointers();
     goto TailCall_cCeil;
Lhh: data->ByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     opcode = cFloor;
     FP_ReDefinePointers();
     goto TailCall_cFloor;
Lhi: data->ByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     opcode = cPow; goto Lkb;
Lhj: data->ByteCode.pop_back();
     AddFunctionOpcode(cCsc); return;
Lhk: data->ByteCode.pop_back();
     AddFunctionOpcode(cSec); return;
Lhl: data->ByteCode.pop_back();
     AddFunctionOpcode(cCot); return;
Lhm: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cSin;
     goto TailCall_cSin;
Lhn: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cCos; goto Lkf;
Lia: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cTan;
     goto TailCall_cTan;
Lib: ImmedPtr[0] = -x; goto Ljh;
Lic: ImmedPtr[0] = RadiansToDegrees(x); goto Lji;
Lid: ImmedPtr[0] = DegreesToRadians(x); goto Lji;
Lie: data->Immed.pop_back();
     data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
Lkj: data->ByteCode.pop_back();
     opcode = cDeg;
     FP_ReDefinePointers();
     goto TailCall_cDeg;
Lif: data->Immed.pop_back();
     data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
Lkk: data->ByteCode.pop_back();
     opcode = cRad;
     FP_ReDefinePointers();
     goto TailCall_cRad;
Lig: data->Immed.pop_back(); goto Lkj;
Lih: data->Immed.pop_back(); goto Lkk;
Lii: ByteCodePtr -= 1;
     data->ByteCode.pop_back(); goto Lci;
Lij: ImmedPtr[0] = -x; goto Lci;
Lik: data->ByteCode.pop_back();
     AddFunctionOpcode(cCsc); goto Ljl;
Lil: data->ByteCode.pop_back();
     AddFunctionOpcode(cSec); goto Ljl;
Lim: data->ByteCode.pop_back();
     AddFunctionOpcode(cCot); goto Ljl;
Lin: data->ByteCode.pop_back();
     AddFunctionOpcode(cSin); goto Ljl;
Lja: data->ByteCode.pop_back();
     AddFunctionOpcode(cCos); goto Ljl;
Ljb: data->ByteCode.pop_back();
     AddFunctionOpcode(cTan); goto Ljl;
Ljc: ImmedPtr[0] = Value_t(1)/x; goto Lci;
Ljd: ImmedPtr[-1] = fp_atan2(y,x); goto Lak;
Lje: ImmedPtr[0] = Value_t(0.5)/x;
     ByteCodePtr[-1] = cImmed;
     data->ByteCode.pop_back();
     AddFunctionOpcode(cMul);
     opcode = cNot;
     FP_ReDefinePointers(); goto Ljm;
Ljf: ImmedPtr[0] = Value_t(0.5)/x;
     ByteCodePtr[-1] = cImmed;
     data->ByteCode.pop_back();
     AddFunctionOpcode(cMul); goto Ljn;
return;
// This list of dummy gotos is here to inhibit
// compiler warnings on unused labels
goto TailCall_cAcos;goto TailCall_cAcosh;goto TailCall_cAnd;
goto TailCall_cAsinh;goto TailCall_cAtan;goto TailCall_cAtan2;
goto TailCall_cAtanh;goto TailCall_cCbrt;goto TailCall_cEqual;
goto TailCall_cExp;goto TailCall_cExp2;goto TailCall_cGreater;
goto TailCall_cGreaterOrEq;goto TailCall_cInt;goto TailCall_cInv;
goto TailCall_cLess;goto TailCall_cLessOrEq;goto TailCall_cLog;
goto TailCall_cLog10;goto TailCall_cLog2;goto TailCall_cMax;
goto TailCall_cMin;goto TailCall_cMod;goto TailCall_cNEqual;
goto TailCall_cOr;goto TailCall_cSinh;goto TailCall_cSub;
goto TailCall_cTanh;goto TailCall_cTrunc;
#endif

#undef FP_ReDefinePointers
#undef FP_TRACE_BYTECODE_OPTIMIZATION
