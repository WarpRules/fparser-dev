/* Function Parser for C++ v4.0.2   

   Note: This file contains generated code and is thus not
   intended to be to be modified by hand. It was generated by
   fpoptimizer/bytecoderules_parser which is available in the
   development package.

   Note: You don't need to add this file to your project. It's
   enough for it to be in the same directory as fparser.cc. This
   file is internally #included by fparser.cc.
*/

#define FP_TRACE_BYTECODE_OPTIMIZATION(from,to)
//#define FP_TRACE_BYTECODE_OPTIMIZATION(from,to) std::cout << "Changing \"" from "\"\n    into \"" to "\"\n"
  unsigned* ByteCodePtr;
  Value_t*   ImmedPtr;
  #define FP_ReDefinePointers() \
    ByteCodePtr = !data->ByteCode.empty() ? &data->ByteCode[0] + data->ByteCode.size() - 1 : 0; \
    ImmedPtr    = !data->Immed.empty()    ? &data->Immed[0]    + data->Immed.size()    - 1 : 0;
  FP_ReDefinePointers();
#if(!FP_FLOAT_VERSION)
  Value_t x;
  unsigned A;
  Value_t y;
  unsigned B;
  unsigned C;
  unsigned D;
  switch(opcode)
  {
  TailCall_cNeg:
    case cNeg:
      switch(ByteCodePtr[0])
      {
        case cMul:
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              x = ImmedPtr[0];
              FP_TRACE_BYTECODE_OPTIMIZATION("x cMul cNeg", "[-x] cMul");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
              /* ByteCodePtr[0] = cMul; */ // redundant, matches cMul @ 1
              goto Laa;
          }
          goto Default0;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cNeg", "");
          goto Lab;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cNeg", "[-x]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Laa;
        default: Default0:;
      }
      goto Default1;
  TailCall_cInv:
    case cInv:
      switch(ByteCodePtr[0])
      {
        case cInv:
          FP_TRACE_BYTECODE_OPTIMIZATION("cInv cInv", "");
          goto Lab;
        case cImmed:
          x = ImmedPtr[0];
          if(x!=Value_t(0))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x!=Value_t(0)] cInv", "[Value_t(1)/x]");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Lac;
          }
          break;
      }
      goto Default1;
  TailCall_cMul:
    case cMul:
      switch(ByteCodePtr[0])
      {
        case cInv:
          FP_TRACE_BYTECODE_OPTIMIZATION("cInv cMul", "cDiv");
          goto Lad;
        case cDup:
          FP_TRACE_BYTECODE_OPTIMIZATION("cDup cMul", "cSqr");
          goto Lae;
        case cImmed:
          x = ImmedPtr[0];
          if(x==Value_t(0))
          {
            switch(ByteCodePtr[-1])
            {
              case cImmed: break;
              default:
                A = ByteCodePtr[-1];
                if(A >= VarBegin)
                {
                  FP_TRACE_BYTECODE_OPTIMIZATION("A[A >= VarBegin] x[x==Value_t(0)] cMul", "[x]");
                  /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                  goto Laf;
                }
            }
          }
          switch(ByteCodePtr[-1])
          {
            case cNeg:
              FP_TRACE_BYTECODE_OPTIMIZATION("cNeg x cMul", "[-x] cMul");
              /* opcode = cMul; */ // redundant, matches cMul @ 0
              goto Lag;
            case cMul:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  FP_TRACE_BYTECODE_OPTIMIZATION("y cMul x cMul", "[y*x] cMul");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                  goto Lah;
              }
              goto Default2;
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cMul", "[y*x]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lah;
            default: Default2:;
          }
          if(x==Value_t(1))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x==Value_t(1)] cMul", "");
            goto Lai;
          }
          if(x==Value_t(2))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x==Value_t(2)] cMul", "cDup cAdd");
            goto Laj;
          }
          if(x==Value_t(-1))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x==Value_t(-1)] cMul", "cNeg");
            goto Lak;
          }
          break;
        default:
          A = ByteCodePtr[0];
          if(A >= VarBegin)
          {
            switch(ByteCodePtr[-1])
            {
              case cMul:
                switch(ByteCodePtr[-2])
                {
                  case cImmed: break;
                  default:
                    B = ByteCodePtr[-2];
                    if(B==A)
                    {
                      FP_TRACE_BYTECODE_OPTIMIZATION("B[B==A] cMul A[A >= VarBegin] cMul", "B cSqr cMul");
                      /* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
                      /* opcode = cMul; */ // redundant, matches cMul @ 0
                      goto Lal;
                    }
                }
                goto Default3;
              case cImmed: break;
              default: Default3:;
                B = ByteCodePtr[-1];
                if(B==A)
                {
                  FP_TRACE_BYTECODE_OPTIMIZATION("B[B==A] A[A >= VarBegin] cMul", "B cSqr");
                  /* ByteCodePtr[-1] = B; */ // redundant, matches B @ 2
                  goto Lae;
                }
            }
          }
      }
      goto Default1;
  TailCall_cDiv:
    case cDiv:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          if(x!=Value_t(0))
          {
            switch(ByteCodePtr[-1])
            {
              case cImmed:
                y = ImmedPtr[-1];
                FP_TRACE_BYTECODE_OPTIMIZATION("y x[x!=Value_t(0)] cDiv", "[y/x]");
                /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
                goto Lam;
            }
          }
          switch(ByteCodePtr[-1])
          {
            case cNeg:
              FP_TRACE_BYTECODE_OPTIMIZATION("cNeg x cDiv", "[-x] cDiv");
              /* opcode = cDiv; */ // redundant, matches cDiv @ 0
              goto Lan;
          }
          if(x==Value_t(1))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x==Value_t(1)] cDiv", "");
            goto Lai;
          }
          break;
      }
      goto Default1;
  TailCall_cMod:
    case cMod:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          if(x!=Value_t(0))
          {
            switch(ByteCodePtr[-1])
            {
              case cImmed:
                y = ImmedPtr[-1];
                FP_TRACE_BYTECODE_OPTIMIZATION("y x[x!=Value_t(0)] cMod", "[fp_mod(y,x)]");
                /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
                goto Lba;
            }
          }
          break;
      }
      goto Default1;
  TailCall_cAdd:
    case cAdd:
      switch(ByteCodePtr[0])
      {
        case cDup:
          switch(ByteCodePtr[-1])
          {
            case cAdd:
              switch(ByteCodePtr[-2])
              {
                case cDup:
                  FP_TRACE_BYTECODE_OPTIMIZATION("cDup cAdd cDup cAdd", "[4] cMul");
                  goto Lbb;
              }
              goto Default4;
            case cImmed: break;
            default: Default4:;
          }
          goto Default5;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cAdd", "cSub");
          goto Lbc;
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cAdd:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  FP_TRACE_BYTECODE_OPTIMIZATION("y cAdd x cAdd", "[y+x] cAdd");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cAdd; */ // redundant, matches cAdd @ 2
                  goto Lbd;
              }
              goto Default6;
            case cSub:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  FP_TRACE_BYTECODE_OPTIMIZATION("y cSub x cAdd", "[y-x] cSub");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cSub; */ // redundant, matches cSub @ 2
                  goto Lbe;
              }
              goto Default6;
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cAdd", "[y+x]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lbd;
            default: Default6:;
          }
          if(x==Value_t(0))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x==Value_t(0)] cAdd", "");
            goto Lai;
          }
          break;
        default: Default5:;
      }
      goto Default1;
  TailCall_cSub:
    case cSub:
      switch(ByteCodePtr[0])
      {
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cSub", "cAdd");
          goto Lbf;
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cSub:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  FP_TRACE_BYTECODE_OPTIMIZATION("y cSub x cSub", "[y+x] cSub");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cSub; */ // redundant, matches cSub @ 2
                  goto Lbd;
              }
              goto Default7;
            case cAdd:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  FP_TRACE_BYTECODE_OPTIMIZATION("y cAdd x cSub", "[y-x] cAdd");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cAdd; */ // redundant, matches cAdd @ 2
                  goto Lbe;
              }
              goto Default7;
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cSub", "[y-x]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lbe;
            default: Default7:;
          }
          if(x==Value_t(0))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x==Value_t(0)] cSub", "");
            goto Lai;
          }
          break;
      }
      goto Default1;
  TailCall_cMin:
    case cMin:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cMin", "[Min(x,y)]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lbg;
          }
          break;
      }
      goto Default1;
  TailCall_cMax:
    case cMax:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cMax", "[Max(x,y)]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lbh;
          }
          break;
      }
      goto Default1;
  TailCall_cNot:
    case cNot:
      switch(ByteCodePtr[0])
      {
        case cLess:
          FP_TRACE_BYTECODE_OPTIMIZATION("cLess cNot", "cGreaterOrEq");
          goto Lbi;
        case cLessOrEq:
          FP_TRACE_BYTECODE_OPTIMIZATION("cLessOrEq cNot", "cGreater");
          goto Lbj;
        case cGreater:
          FP_TRACE_BYTECODE_OPTIMIZATION("cGreater cNot", "cLessOrEq");
          goto Lbk;
        case cGreaterOrEq:
          FP_TRACE_BYTECODE_OPTIMIZATION("cGreaterOrEq cNot", "cLess");
          goto Lbl;
        case cEqual:
          FP_TRACE_BYTECODE_OPTIMIZATION("cEqual cNot", "cNEqual");
          goto Lbm;
        case cNEqual:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNEqual cNot", "cEqual");
          goto Lbn;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cNot", "cNot");
          /* opcode = cNot; */ // redundant, matches cNot @ 0
          goto Lca;
        case cAbs:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAbs cNot", "cNot");
          /* opcode = cNot; */ // redundant, matches cNot @ 0
          goto Lca;
        case cNot:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNot cNot", "cNotNot");
          goto Lcb;
        case cNotNot:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNotNot cNot", "cNot");
          /* opcode = cNot; */ // redundant, matches cNot @ 0
          goto Lca;
        case cAbsNotNot:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAbsNotNot cNot", "cAbsNot");
          goto Lcc;
        case cAbsNot:
          switch(ByteCodePtr[-1])
          {
            case cImmed: break;
            default:
              A = ByteCodePtr[-1];
              if(IsLogicalOpcode(A))
              {
                FP_TRACE_BYTECODE_OPTIMIZATION("A[IsLogicalOpcode(A)] cAbsNot cNot", "A");
                /* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
                goto Lab;
              }
              FP_TRACE_BYTECODE_OPTIMIZATION("A cAbsNot cNot", "A cAbsNotNot");
              /* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
              goto Lcd;
          }
          goto Default8;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cNot", "[!truthValue(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lce;
        default: Default8:;
          A = ByteCodePtr[0];
          if(IsNeverNegativeValueOpcode(A))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("A[IsNeverNegativeValueOpcode(A)] cNot", "A cAbsNot");
            /* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
            goto Lcf;
          }
      }
      goto Default1;
  TailCall_cLess:
    case cLess:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          if(x==Value_t(0))
          {
            switch(ByteCodePtr[-1])
            {
              case cImmed: break;
              default:
                A = ByteCodePtr[-1];
                if(IsNeverNegativeValueOpcode(A))
                {
                  FP_TRACE_BYTECODE_OPTIMIZATION("A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(0)] cLess", "A [x] cMul");
                  /* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
                  /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                  /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
                  goto Lcg;
                }
            }
          }
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cLess", "[fp_less(y,x)]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lch;
          }
          break;
      }
      goto Default1;
  TailCall_cLessOrEq:
    case cLessOrEq:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cLessOrEq", "[fp_lessOrEq(y,x)]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lci;
          }
          break;
      }
      goto Default1;
  TailCall_cGreater:
    case cGreater:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cGreater", "[fp_less(x,y)]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lcj;
          }
          break;
      }
      goto Default1;
  TailCall_cGreaterOrEq:
    case cGreaterOrEq:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cGreaterOrEq", "[fp_lessOrEq(x,y)]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lck;
          }
          break;
      }
      goto Default1;
  TailCall_cEqual:
    case cEqual:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cEqual", "[fp_equal(y,x)]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lcl;
          }
          break;
      }
      goto Default1;
  TailCall_cNEqual:
    case cNEqual:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cNEqual", "[fp_nequal(y,x)]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lcm;
          }
          break;
      }
      goto Default1;
  TailCall_cAnd:
    case cAnd:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cAnd", "[truthValue(x)&&truthValue(y)]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lcn;
          }
          break;
      }
      goto Default1;
  TailCall_cOr:
    case cOr:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cOr", "[truthValue(x)||truthValue(y)]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lda;
          }
          break;
      }
      goto Default1;
  TailCall_cAbs:
    case cAbs:
      switch(ByteCodePtr[0])
      {
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cAbs", "cAbs");
          /* opcode = cAbs; */ // redundant, matches cAbs @ 0
          goto Ldb;
        case cImmed: break;
        default:
          A = ByteCodePtr[0];
          if(IsNeverNegativeValueOpcode(A))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("A[IsNeverNegativeValueOpcode(A)] cAbs", "A");
            /* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
            return;
          }
      }
      goto Default1;
    case cImmed: break;
    default: Default1:;
      A = opcode;
      if(A >= VarBegin)
      {
        switch(ByteCodePtr[0])
        {
          case cImmed: break;
          default:
            B = ByteCodePtr[0];
            if(B==A)
            {
              FP_TRACE_BYTECODE_OPTIMIZATION("B[B==A] A[A >= VarBegin]", "A cDup");
              goto Ldc;
            }
        }
      }
      if(IsUnaryOpcode(A))
      {
        switch(ByteCodePtr[0])
        {
          case cImmed: break;
          default:
            B = ByteCodePtr[0];
            if(B >= VarBegin)
            {
              switch(ByteCodePtr[-1])
              {
                case cImmed: break;
                default:
                  C = ByteCodePtr[-1];
                  if(C==A)
                  {
                    switch(ByteCodePtr[-2])
                    {
                      case cImmed: break;
                      default:
                        D = ByteCodePtr[-2];
                        if(D==B)
                        {
                          FP_TRACE_BYTECODE_OPTIMIZATION("D[D==B] C[C==A] B[B >= VarBegin] A[IsUnaryOpcode(A)]", "D C cDup");
                          /* ByteCodePtr[-2] = D; */ // redundant, matches D @ 3
                          /* ByteCodePtr[-1] = C; */ // redundant, matches C @ 2
                          goto Ldd;
                        }
                    }
                  }
              }
            }
        }
      }
  }
  goto Lde;
Laa: ImmedPtr[0] = -x; return;
Lab: data->ByteCode.pop_back(); return;
Lac: ImmedPtr[0] = Value_t(1)/x; return;
Lad: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cDiv;
Ldf: goto TailCall_cDiv;
Lae: data->ByteCode.pop_back();
     AddFunctionOpcode(cSqr); return;
Laf: data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cImmed); return;
Lag: ImmedPtr[0] = -x;
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cImmed);
Ldg: FP_ReDefinePointers();
Ldh: goto TailCall_cMul;
Lah: ImmedPtr[-1] = y*x;
Lai: data->Immed.pop_back(); goto Lab;
Laj: data->Immed.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cDup);
     opcode = cAdd;
     FP_ReDefinePointers();
Ldi: goto TailCall_cAdd;
Lak: data->Immed.pop_back();
     data->ByteCode.pop_back();
     opcode = cNeg;
     FP_ReDefinePointers();
     goto TailCall_cNeg;
Lal: data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cSqr); goto Ldg;
Lam: ImmedPtr[-1] = y/x; goto Lai;
Lan: ImmedPtr[0] = -x;
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cImmed);
     FP_ReDefinePointers(); goto Ldf;
Lba: ImmedPtr[-1] = fp_mod(y,x); goto Lai;
Lbb: data->Immed.push_back(4);
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cImmed);
     opcode = cMul; goto Ldg;
Lbc: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cSub;
     goto TailCall_cSub;
Lbd: ImmedPtr[-1] = y+x; goto Lai;
Lbe: ImmedPtr[-1] = y-x; goto Lai;
Lbf: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cAdd; goto Ldi;
Lbg: ImmedPtr[-1] = Min(x,y); goto Lai;
Lbh: ImmedPtr[-1] = Max(x,y); goto Lai;
Lbi: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cGreaterOrEq;
     goto TailCall_cGreaterOrEq;
Lbj: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cGreater;
     goto TailCall_cGreater;
Lbk: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cLessOrEq;
     goto TailCall_cLessOrEq;
Lbl: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cLess;
     goto TailCall_cLess;
Lbm: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cNEqual;
     goto TailCall_cNEqual;
Lbn: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cEqual;
     goto TailCall_cEqual;
Lca: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     goto TailCall_cNot;
Lcb: data->ByteCode.pop_back();
     AddFunctionOpcode(cNotNot); return;
Lcc: data->ByteCode.pop_back();
Lcf: AddFunctionOpcode(cAbsNot); return;
Lcd: data->ByteCode.pop_back();
     AddFunctionOpcode(cAbsNotNot); return;
Lce: ImmedPtr[0] = !truthValue(x); return;
Lcg: opcode = cMul; goto Ldh;
Lch: ImmedPtr[-1] = fp_less(y,x); goto Lai;
Lci: ImmedPtr[-1] = fp_lessOrEq(y,x); goto Lai;
Lcj: ImmedPtr[-1] = fp_less(x,y); goto Lai;
Lck: ImmedPtr[-1] = fp_lessOrEq(x,y); goto Lai;
Lcl: ImmedPtr[-1] = fp_equal(y,x); goto Lai;
Lcm: ImmedPtr[-1] = fp_nequal(y,x); goto Lai;
Lcn: ImmedPtr[-1] = truthValue(x)&&truthValue(y); goto Lai;
Lda: ImmedPtr[-1] = truthValue(x)||truthValue(y); goto Lai;
Ldb: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     goto TailCall_cAbs;
Ldc: data->ByteCode.pop_back();
     AddFunctionOpcode(A);
Ldj: AddFunctionOpcode(cDup); return;
Ldd: data->ByteCode.pop_back(); goto Ldj;
Lde: data->ByteCode.push_back(opcode); return;
return;
// This list of dummy gotos is here to inhibit
// compiler warnings on unused labels
goto TailCall_cAnd;goto TailCall_cEqual;goto TailCall_cGreater;
goto TailCall_cGreaterOrEq;goto TailCall_cInv;goto TailCall_cLess;
goto TailCall_cLessOrEq;goto TailCall_cMax;goto TailCall_cMin;
goto TailCall_cMod;goto TailCall_cNEqual;goto TailCall_cOr;
goto TailCall_cSub;
#endif
#if(FP_FLOAT_VERSION)
  Value_t x;
  Value_t y;
  unsigned A;
  unsigned B;
  unsigned C;
  unsigned D;
  switch(opcode)
  {
  TailCall_cPow:
    case cPow:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          if(!isEvenInteger(x*Value_t(2)))
          {
            switch(ByteCodePtr[-1])
            {
              case cSqr:
                FP_TRACE_BYTECODE_OPTIMIZATION("cSqr x[!isEvenInteger(x*Value_t(2))] cPow", "cAbs [x*Value_t(2)] cPow");
                /* opcode = cPow; */ // redundant, matches cPow @ 0
                goto Ldk;
            }
          }
          if(IsIntegerConst(x))
          {
            switch(ByteCodePtr[-1])
            {
              case cPow:
                switch(ByteCodePtr[-2])
                {
                  case cImmed:
                    y = ImmedPtr[-1];
                    if(!IsIntegerConst(y))
                    {
                      FP_TRACE_BYTECODE_OPTIMIZATION("y[!IsIntegerConst(y)] cPow x[IsIntegerConst(x)] cPow", "[y*x] cPow");
                      /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                      /* ByteCodePtr[-1] = cPow; */ // redundant, matches cPow @ 2
                      goto Lah;
                    }
                    break;
                }
                FP_TRACE_BYTECODE_OPTIMIZATION("cPow x[IsIntegerConst(x)] cPow", "[x] cMul cPow");
                /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                /* opcode = cPow; */ // redundant, matches cPow @ 0
                goto Ldl;
              case cExp:
                FP_TRACE_BYTECODE_OPTIMIZATION("cExp x[IsIntegerConst(x)] cPow", "[x] cMul cExp");
                /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                goto Ldm;
              case cExp2:
                FP_TRACE_BYTECODE_OPTIMIZATION("cExp2 x[IsIntegerConst(x)] cPow", "[x] cMul cExp2");
                /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                goto Ldn;
            }
          }
          if(isEvenInteger(x))
          {
            switch(ByteCodePtr[-1])
            {
              case cAbs:
                FP_TRACE_BYTECODE_OPTIMIZATION("cAbs x[isEvenInteger(x)] cPow", "[x] cPow");
                /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                /* opcode = cPow; */ // redundant, matches cPow @ 0
                goto Lea;
              case cMul:
                switch(ByteCodePtr[-2])
                {
                  case cAbs:
                    FP_TRACE_BYTECODE_OPTIMIZATION("cAbs cMul x[isEvenInteger(x)] cPow", "cMul [x] cPow");
                    /* opcode = cPow; */ // redundant, matches cPow @ 0
                    goto Leb;
                }
                goto Default0;
              case cImmed: break;
              default: Default0:;
            }
          }
          if(x==Value_t(0.5))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x==Value_t(0.5)] cPow", "cSqrt");
            goto Lec;
          }
          if(x==Value_t(1)/Value_t(3))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x==Value_t(1)/Value_t(3)] cPow", "cCbrt");
            goto Led;
          }
          if(x==Value_t(1)/Value_t(-3))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x==Value_t(1)/Value_t(-3)] cPow", "cCbrt cInv");
            goto Lee;
          }
          if(x==Value_t(-0.5))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x==Value_t(-0.5)] cPow", "cRSqrt");
            goto Lef;
          }
          if(x==Value_t(-1))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x==Value_t(-1)] cPow", "cInv");
            goto Leg;
          }
          switch(ByteCodePtr[-1])
          {
            case cPow:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  if(isEvenInteger(y)&&!isEvenInteger(x*y))
                  {
                    FP_TRACE_BYTECODE_OPTIMIZATION("y[isEvenInteger(y)&&!isEvenInteger(x*y)] cPow x cPow", "cAbs [y*x] cPow");
                    /* opcode = cPow; */ // redundant, matches cPow @ 0
                    goto Leh;
                  }
                  FP_TRACE_BYTECODE_OPTIMIZATION("y cPow x cPow", "[y*x] cPow");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cPow; */ // redundant, matches cPow @ 2
                  goto Lah;
              }
              goto Default1;
            case cSqr:
              FP_TRACE_BYTECODE_OPTIMIZATION("cSqr x cPow", "[x*Value_t(2)] cPow");
              /* opcode = cPow; */ // redundant, matches cPow @ 0
              goto Lei;
            case cImmed:
              y = ImmedPtr[-1];
              if( y!=Value_t(0) || x>=Value_t(0))
              {
                FP_TRACE_BYTECODE_OPTIMIZATION("y[ y!=Value_t(0) || x>=Value_t(0)] x cPow", "[fp_pow(y,x)]");
                /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
                goto Lej;
              }
              break;
            default: Default1:;
          }
          FP_TRACE_BYTECODE_OPTIMIZATION("x cPow", "[DO_POWI]");
          if(TryCompilePowi(x))
            return;
          break;
      }
      goto Default2;
  TailCall_cSqrt:
    case cSqrt:
      switch(ByteCodePtr[0])
      {
        case cSqr:
          FP_TRACE_BYTECODE_OPTIMIZATION("cSqr cSqrt", "cAbs");
          goto Lek;
        case cImmed:
          x = ImmedPtr[0];
          if(x>=Value_t(0))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x>=Value_t(0)] cSqrt", "[fp_sqrt(x)]");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Lel;
          }
          break;
      }
      goto Default2;
  TailCall_cAbs:
    case cAbs:
      switch(ByteCodePtr[0])
      {
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cAbs", "cAbs");
          /* opcode = cAbs; */ // redundant, matches cAbs @ 0
          goto Ldb;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cAbs", "[fp_abs(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lem;
        default:
          A = ByteCodePtr[0];
          if(IsNeverNegativeValueOpcode(A))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("A[IsNeverNegativeValueOpcode(A)] cAbs", "A");
            /* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
            return;
          }
      }
      goto Default2;
  TailCall_cAcos:
    case cAcos:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cAcos", "[fp_acos(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Len;
      }
      goto Default2;
  TailCall_cAcosh:
    case cAcosh:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          if(x>=Value_t(-1)&&x<=Value_t(1))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x>=Value_t(-1)&&x<=Value_t(1)] cAcosh", "[fp_acosh(x)]");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Lfa;
          }
          break;
      }
      goto Default2;
  TailCall_cAsinh:
    case cAsinh:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          if(x>=Value_t(-1)&&x<=Value_t(1))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x>=Value_t(-1)&&x<=Value_t(1)] cAsinh", "[fp_asinh(x)]");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Lfb;
          }
          break;
      }
      goto Default2;
  TailCall_cAtan:
    case cAtan:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cAtan", "[fp_atan(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lfc;
      }
      goto Default2;
  TailCall_cAtanh:
    case cAtanh:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cAtanh", "[fp_atanh(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lfd;
      }
      goto Default2;
  TailCall_cCbrt:
    case cCbrt:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cCbrt", "[fp_cbrt(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lfe;
      }
      goto Default2;
  TailCall_cCeil:
    case cCeil:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cCeil", "[fp_ceil(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lff;
        default:
          A = ByteCodePtr[0];
          if(IsAlwaysIntegerOpcode(A))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("A[IsAlwaysIntegerOpcode(A)] cCeil", "A");
            /* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
            return;
          }
      }
      goto Default2;
  TailCall_cCos:
    case cCos:
      switch(ByteCodePtr[0])
      {
        case cAcos:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAcos cCos", "");
          goto Lab;
        case cAbs:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAbs cCos", "cCos");
          /* opcode = cCos; */ // redundant, matches cCos @ 0
          goto Lfg;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cCos", "cCos");
          /* opcode = cCos; */ // redundant, matches cCos @ 0
          goto Lfg;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cCos", "[fp_cos(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lfh;
      }
      goto Default2;
  TailCall_cCosh:
    case cCosh:
      switch(ByteCodePtr[0])
      {
        case cAcosh:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAcosh cCosh", "");
          goto Lab;
        case cAbs:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAbs cCosh", "cCosh");
          /* opcode = cCosh; */ // redundant, matches cCosh @ 0
          goto Lfi;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cCosh", "cCosh");
          /* opcode = cCosh; */ // redundant, matches cCosh @ 0
          goto Lfi;
        case cAsinh:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAsinh cCosh", "[DO_STACKPLUS1] cSqr [Value_t(1)] cAdd cSqrt");
          incStackPtr();
          --StackPtr;
          goto Lfj;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cCosh", "[fp_cosh(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lfk;
      }
      goto Default2;
  TailCall_cExp:
    case cExp:
      switch(ByteCodePtr[0])
      {
        case cLog:
          FP_TRACE_BYTECODE_OPTIMIZATION("cLog cExp", "");
          goto Lab;
        case cAdd:
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              x = ImmedPtr[0];
              FP_TRACE_BYTECODE_OPTIMIZATION("x cAdd cExp", "cExp [fp_exp(x)] cMul");
              goto Lfl;
          }
          goto Default3;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cExp", "[fp_exp(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lfm;
        default: Default3:;
      }
      goto Default2;
  TailCall_cExp2:
    case cExp2:
      switch(ByteCodePtr[0])
      {
        case cLog2:
          FP_TRACE_BYTECODE_OPTIMIZATION("cLog2 cExp2", "");
          goto Lab;
        case cAdd:
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              x = ImmedPtr[0];
              FP_TRACE_BYTECODE_OPTIMIZATION("x cAdd cExp2", "cExp2 [fp_exp2(x)] cMul");
              goto Lfn;
          }
          goto Default4;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cExp2", "[fp_exp2(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lga;
        default: Default4:;
      }
      goto Default2;
  TailCall_cFloor:
    case cFloor:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cFloor", "[fp_floor(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lgb;
        default:
          A = ByteCodePtr[0];
          if(IsAlwaysIntegerOpcode(A))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("A[IsAlwaysIntegerOpcode(A)] cFloor", "A");
            /* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
            return;
          }
      }
      goto Default2;
  TailCall_cInt:
    case cInt:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cInt", "[fp_int(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lgc;
        default:
          A = ByteCodePtr[0];
          if(IsAlwaysIntegerOpcode(A))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("A[IsAlwaysIntegerOpcode(A)] cInt", "A");
            /* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
            return;
          }
      }
      goto Default2;
  TailCall_cLog:
    case cLog:
      switch(ByteCodePtr[0])
      {
        case cSqr:
          FP_TRACE_BYTECODE_OPTIMIZATION("cSqr cLog", "cAbs cLog cDup cAdd");
          goto Lgd;
        case cExp:
          FP_TRACE_BYTECODE_OPTIMIZATION("cExp cLog", "");
          goto Lab;
        case cImmed:
          x = ImmedPtr[0];
          if(x>=Value_t(0))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x>=Value_t(0)] cLog", "[fp_log(x)]");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Lge;
          }
          break;
      }
      goto Default2;
  TailCall_cLog10:
    case cLog10:
      switch(ByteCodePtr[0])
      {
        case cSqr:
          FP_TRACE_BYTECODE_OPTIMIZATION("cSqr cLog10", "cAbs cLog10 cDup cAdd");
          goto Lgf;
        case cImmed:
          x = ImmedPtr[0];
          if(x>=Value_t(0))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x>=Value_t(0)] cLog10", "[fp_log10(x)]");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Lgg;
          }
          break;
      }
      goto Default2;
  TailCall_cLog2:
    case cLog2:
      switch(ByteCodePtr[0])
      {
        case cSqr:
          FP_TRACE_BYTECODE_OPTIMIZATION("cSqr cLog2", "cAbs cLog2 cDup cAdd");
          goto Lgh;
        case cExp2:
          FP_TRACE_BYTECODE_OPTIMIZATION("cExp2 cLog2", "");
          goto Lab;
        case cImmed:
          x = ImmedPtr[0];
          if(x>=Value_t(0))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x>=Value_t(0)] cLog2", "[fp_log2(x)]");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Lgi;
          }
          break;
      }
      goto Default2;
  TailCall_cSin:
    case cSin:
      switch(ByteCodePtr[0])
      {
        case cAsin:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAsin cSin", "");
          goto Lab;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cSin", "cSin cNeg");
          goto Lgj;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cSin", "[fp_sin(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lgk;
      }
      goto Default2;
  TailCall_cSinh:
    case cSinh:
      switch(ByteCodePtr[0])
      {
        case cAsinh:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAsinh cSinh", "");
          goto Lab;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cSinh", "cSinh cNeg");
          goto Lgl;
        case cAcosh:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAcosh cSinh", "[DO_STACKPLUS1] cSqr [Value_t(-1)] cAdd cSqrt");
          incStackPtr();
          --StackPtr;
          goto Lgm;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cSinh", "[fp_sinh(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lgn;
      }
      goto Default2;
  TailCall_cTan:
    case cTan:
      switch(ByteCodePtr[0])
      {
        case cAtan:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAtan cTan", "");
          goto Lab;
        case cAtan2:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAtan2 cTan", "cDiv");
          goto Lad;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cTan", "cTan cNeg");
          goto Lha;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cTan", "[fp_tan(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lhb;
      }
      goto Default2;
  TailCall_cTanh:
    case cTanh:
      switch(ByteCodePtr[0])
      {
        case cAtanh:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAtanh cTanh", "");
          goto Lab;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cTanh", "cTanh cNeg");
          goto Lhc;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cTanh", "[fp_tanh(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lhd;
      }
      goto Default2;
  TailCall_cTrunc:
    case cTrunc:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cTrunc", "[fp_trunc(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lhe;
        default:
          A = ByteCodePtr[0];
          if(IsAlwaysIntegerOpcode(A))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("A[IsAlwaysIntegerOpcode(A)] cTrunc", "A");
            /* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
            return;
          }
      }
      goto Default2;
  TailCall_cDeg:
    case cDeg:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cDeg", "[RadiansToDegrees(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lhf;
      }
      goto Default2;
  TailCall_cRad:
    case cRad:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cRad", "[DegreesToRadians(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lhg;
      }
      goto Default2;
  TailCall_cNeg:
    case cNeg:
      switch(ByteCodePtr[0])
      {
        case cMul:
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              x = ImmedPtr[0];
              FP_TRACE_BYTECODE_OPTIMIZATION("x cMul cNeg", "[-x] cMul");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
              /* ByteCodePtr[0] = cMul; */ // redundant, matches cMul @ 1
              goto Laa;
          }
          goto Default5;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cNeg", "");
          goto Lab;
        case cFloor:
          FP_TRACE_BYTECODE_OPTIMIZATION("cFloor cNeg", "cNeg cCeil");
          goto Lhh;
        case cCeil:
          FP_TRACE_BYTECODE_OPTIMIZATION("cCeil cNeg", "cNeg cFloor");
          goto Lhi;
        case cSin:
          switch(ByteCodePtr[-1])
          {
            case cMul:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  x = ImmedPtr[0];
                  FP_TRACE_BYTECODE_OPTIMIZATION("x cMul cSin cNeg", "[-x] cMul cSin");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
                  /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                  /* ByteCodePtr[0] = cSin; */ // redundant, matches cSin @ 1
                  goto Laa;
              }
              goto Default6;
            case cImmed: break;
            default: Default6:;
          }
          goto Default5;
        case cSinh:
          switch(ByteCodePtr[-1])
          {
            case cMul:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  x = ImmedPtr[0];
                  FP_TRACE_BYTECODE_OPTIMIZATION("x cMul cSinh cNeg", "[-x] cMul cSinh");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
                  /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                  /* ByteCodePtr[0] = cSinh; */ // redundant, matches cSinh @ 1
                  goto Laa;
              }
              goto Default7;
            case cImmed: break;
            default: Default7:;
          }
          goto Default5;
        case cTan:
          switch(ByteCodePtr[-1])
          {
            case cMul:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  x = ImmedPtr[0];
                  FP_TRACE_BYTECODE_OPTIMIZATION("x cMul cTan cNeg", "[-x] cMul cTan");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
                  /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                  /* ByteCodePtr[0] = cTan; */ // redundant, matches cTan @ 1
                  goto Laa;
              }
              goto Default8;
            case cImmed: break;
            default: Default8:;
          }
          goto Default5;
        case cTanh:
          switch(ByteCodePtr[-1])
          {
            case cMul:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  x = ImmedPtr[0];
                  FP_TRACE_BYTECODE_OPTIMIZATION("x cMul cTanh cNeg", "[-x] cMul cTanh");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
                  /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                  /* ByteCodePtr[0] = cTanh; */ // redundant, matches cTanh @ 1
                  goto Laa;
              }
              goto Default9;
            case cImmed: break;
            default: Default9:;
          }
          goto Default5;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cNeg", "[-x]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Laa;
        default: Default5:;
      }
      goto Default2;
  TailCall_cInv:
    case cInv:
      switch(ByteCodePtr[0])
      {
        case cInv:
          FP_TRACE_BYTECODE_OPTIMIZATION("cInv cInv", "");
          goto Lab;
        case cPow:
          FP_TRACE_BYTECODE_OPTIMIZATION("cPow cInv", "cNeg cPow");
          goto Lhj;
        case cSin:
          FP_TRACE_BYTECODE_OPTIMIZATION("cSin cInv", "cCsc");
          goto Lhk;
        case cCos:
          FP_TRACE_BYTECODE_OPTIMIZATION("cCos cInv", "cSec");
          goto Lhl;
        case cTan:
          FP_TRACE_BYTECODE_OPTIMIZATION("cTan cInv", "cCot");
          goto Lhm;
        case cCsc:
          FP_TRACE_BYTECODE_OPTIMIZATION("cCsc cInv", "cSin");
          goto Lhn;
        case cSec:
          FP_TRACE_BYTECODE_OPTIMIZATION("cSec cInv", "cCos");
          goto Lia;
        case cCot:
          FP_TRACE_BYTECODE_OPTIMIZATION("cCot cInv", "cTan");
          goto Lib;
        case cImmed:
          x = ImmedPtr[0];
          if(x!=Value_t(0))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x!=Value_t(0)] cInv", "[Value_t(1)/x]");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Lac;
          }
          break;
      }
      goto Default2;
  TailCall_cMul:
    case cMul:
      switch(ByteCodePtr[0])
      {
        case cInv:
          FP_TRACE_BYTECODE_OPTIMIZATION("cInv cMul", "cDiv");
          goto Lad;
        case cPow:
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              x = ImmedPtr[0];
              if(x<0)
              {
                FP_TRACE_BYTECODE_OPTIMIZATION("x[x<0] cPow cMul", "[-x] cPow cDiv");
                /* ByteCodePtr[-1] = cImmed; */ // redundant, matches x @ 2
                /* ByteCodePtr[0] = cPow; */ // redundant, matches cPow @ 1
                goto Lic;
              }
              break;
          }
          goto Default10;
        case cDup:
          FP_TRACE_BYTECODE_OPTIMIZATION("cDup cMul", "cSqr");
          goto Lae;
        case cImmed:
          x = ImmedPtr[0];
          if(x==Value_t(0))
          {
            switch(ByteCodePtr[-1])
            {
              case cImmed: break;
              default:
                A = ByteCodePtr[-1];
                if(A >= VarBegin)
                {
                  FP_TRACE_BYTECODE_OPTIMIZATION("A[A >= VarBegin] x[x==Value_t(0)] cMul", "[x]");
                  /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                  goto Laf;
                }
            }
          }
          switch(ByteCodePtr[-1])
          {
            case cDeg:
              FP_TRACE_BYTECODE_OPTIMIZATION("cDeg x cMul", "[RadiansToDegrees(x)] cMul");
              /* opcode = cMul; */ // redundant, matches cMul @ 0
              goto Lid;
            case cRad:
              FP_TRACE_BYTECODE_OPTIMIZATION("cRad x cMul", "[DegreesToRadians(x)] cMul");
              /* opcode = cMul; */ // redundant, matches cMul @ 0
              goto Lie;
            case cNeg:
              FP_TRACE_BYTECODE_OPTIMIZATION("cNeg x cMul", "[-x] cMul");
              /* opcode = cMul; */ // redundant, matches cMul @ 0
              goto Lag;
            case cMul:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  if((y*x)==GetRadiansToDegreesFactor<Value_t>())
                  {
                    FP_TRACE_BYTECODE_OPTIMIZATION("y[(y*x)==GetRadiansToDegreesFactor<Value_t>()] cMul x cMul", "cDeg");
                    goto Lif;
                  }
                  if((y*x)==GetDegreesToRadiansFactor<Value_t>())
                  {
                    FP_TRACE_BYTECODE_OPTIMIZATION("y[(y*x)==GetDegreesToRadiansFactor<Value_t>()] cMul x cMul", "cRad");
                    goto Lig;
                  }
                  FP_TRACE_BYTECODE_OPTIMIZATION("y cMul x cMul", "[y*x] cMul");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                  goto Lah;
              }
              goto Default11;
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cMul", "[y*x]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lah;
            default: Default11:;
          }
          if(x==Value_t(1))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x==Value_t(1)] cMul", "");
            goto Lai;
          }
          if(x==Value_t(2))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x==Value_t(2)] cMul", "cDup cAdd");
            goto Laj;
          }
          if(x==GetRadiansToDegreesFactor<Value_t>())
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x==GetRadiansToDegreesFactor<Value_t>()] cMul", "cDeg");
            goto Lih;
          }
          if(x==GetDegreesToRadiansFactor<Value_t>())
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x==GetDegreesToRadiansFactor<Value_t>()] cMul", "cRad");
            goto Lii;
          }
          if(x==Value_t(-1))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x==Value_t(-1)] cMul", "cNeg");
            goto Lak;
          }
          break;
        default: Default10:;
          A = ByteCodePtr[0];
          if(A >= VarBegin)
          {
            switch(ByteCodePtr[-1])
            {
              case cMul:
                switch(ByteCodePtr[-2])
                {
                  case cImmed: break;
                  default:
                    B = ByteCodePtr[-2];
                    if(B==A)
                    {
                      FP_TRACE_BYTECODE_OPTIMIZATION("B[B==A] cMul A[A >= VarBegin] cMul", "B cSqr cMul");
                      /* ByteCodePtr[-2] = B; */ // redundant, matches B @ 3
                      /* opcode = cMul; */ // redundant, matches cMul @ 0
                      goto Lal;
                    }
                }
                goto Default12;
              case cImmed: break;
              default: Default12:;
                B = ByteCodePtr[-1];
                if(B==A)
                {
                  FP_TRACE_BYTECODE_OPTIMIZATION("B[B==A] A[A >= VarBegin] cMul", "B cSqr");
                  /* ByteCodePtr[-1] = B; */ // redundant, matches B @ 2
                  goto Lae;
                }
            }
          }
      }
      goto Default2;
  TailCall_cDiv:
    case cDiv:
      switch(ByteCodePtr[0])
      {
        case cInv:
          FP_TRACE_BYTECODE_OPTIMIZATION("cInv cDiv", "cMul");
          goto Lij;
        case cExp:
          switch(ByteCodePtr[-1])
          {
            case cMul:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  x = ImmedPtr[0];
                  FP_TRACE_BYTECODE_OPTIMIZATION("x cMul cExp cDiv", "[-x] cMul cExp cMul");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
                  /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                  /* ByteCodePtr[0] = cExp; */ // redundant, matches cExp @ 1
                  goto Lik;
              }
              goto Default13;
            case cImmed: break;
            default: Default13:;
          }
          goto Default14;
        case cExp2:
          switch(ByteCodePtr[-1])
          {
            case cMul:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  x = ImmedPtr[0];
                  FP_TRACE_BYTECODE_OPTIMIZATION("x cMul cExp2 cDiv", "[-x] cMul cExp2 cMul");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches x @ 3
                  /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                  /* ByteCodePtr[0] = cExp2; */ // redundant, matches cExp2 @ 1
                  goto Lik;
              }
              goto Default15;
            case cImmed: break;
            default: Default15:;
          }
          goto Default14;
        case cSin:
          FP_TRACE_BYTECODE_OPTIMIZATION("cSin cDiv", "cCsc cMul");
          goto Lil;
        case cCos:
          FP_TRACE_BYTECODE_OPTIMIZATION("cCos cDiv", "cSec cMul");
          goto Lim;
        case cTan:
          FP_TRACE_BYTECODE_OPTIMIZATION("cTan cDiv", "cCot cMul");
          goto Lin;
        case cCsc:
          FP_TRACE_BYTECODE_OPTIMIZATION("cCsc cDiv", "cSin cMul");
          goto Lja;
        case cSec:
          FP_TRACE_BYTECODE_OPTIMIZATION("cSec cDiv", "cCos cMul");
          goto Ljb;
        case cCot:
          FP_TRACE_BYTECODE_OPTIMIZATION("cCot cDiv", "cTan cMul");
          goto Ljc;
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cNeg:
              FP_TRACE_BYTECODE_OPTIMIZATION("cNeg x cDiv", "[-x] cDiv");
              /* opcode = cDiv; */ // redundant, matches cDiv @ 0
              goto Lan;
          }
          if(x==Value_t(1))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x==Value_t(1)] cDiv", "");
            goto Lai;
          }
          if(x!=Value_t(0))
          {
            switch(ByteCodePtr[-1])
            {
              case cMul:
                switch(ByteCodePtr[-2])
                {
                  case cImmed:
                    y = ImmedPtr[-1];
                    if((y/x)==GetRadiansToDegreesFactor<Value_t>())
                    {
                      FP_TRACE_BYTECODE_OPTIMIZATION("y[(y/x)==GetRadiansToDegreesFactor<Value_t>()] cMul x[x!=Value_t(0)] cDiv", "cDeg");
                      goto Lif;
                    }
                    if((y/x)==GetDegreesToRadiansFactor<Value_t>())
                    {
                      FP_TRACE_BYTECODE_OPTIMIZATION("y[(y/x)==GetDegreesToRadiansFactor<Value_t>()] cMul x[x!=Value_t(0)] cDiv", "cRad");
                      goto Lig;
                    }
                    FP_TRACE_BYTECODE_OPTIMIZATION("y cMul x[x!=Value_t(0)] cDiv", "[y/x] cMul");
                    /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                    /* ByteCodePtr[-1] = cMul; */ // redundant, matches cMul @ 2
                    goto Lam;
                }
                goto Default16;
              case cImmed:
                y = ImmedPtr[-1];
                FP_TRACE_BYTECODE_OPTIMIZATION("y x[x!=Value_t(0)] cDiv", "[y/x]");
                /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
                goto Lam;
              default: Default16:;
            }
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x!=Value_t(0)] cDiv", "[Value_t(1)/x] cMul");
            /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
            goto Ljd;
          }
          break;
        default: Default14:;
      }
      goto Default2;
  TailCall_cMod:
    case cMod:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          if(x!=Value_t(0))
          {
            switch(ByteCodePtr[-1])
            {
              case cImmed:
                y = ImmedPtr[-1];
                FP_TRACE_BYTECODE_OPTIMIZATION("y x[x!=Value_t(0)] cMod", "[fp_mod(y,x)]");
                /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
                goto Lba;
            }
          }
          break;
      }
      goto Default2;
  TailCall_cAdd:
    case cAdd:
      switch(ByteCodePtr[0])
      {
        case cDup:
          switch(ByteCodePtr[-1])
          {
            case cAdd:
              switch(ByteCodePtr[-2])
              {
                case cDup:
                  FP_TRACE_BYTECODE_OPTIMIZATION("cDup cAdd cDup cAdd", "[4] cMul");
                  goto Lbb;
              }
              goto Default17;
            case cImmed: break;
            default: Default17:;
          }
          goto Default18;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cAdd", "cSub");
          goto Lbc;
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cAdd:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  FP_TRACE_BYTECODE_OPTIMIZATION("y cAdd x cAdd", "[y+x] cAdd");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cAdd; */ // redundant, matches cAdd @ 2
                  goto Lbd;
              }
              goto Default19;
            case cSub:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  FP_TRACE_BYTECODE_OPTIMIZATION("y cSub x cAdd", "[y-x] cSub");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cSub; */ // redundant, matches cSub @ 2
                  goto Lbe;
              }
              goto Default19;
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cAdd", "[y+x]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lbd;
            default: Default19:;
          }
          if(x==Value_t(0))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x==Value_t(0)] cAdd", "");
            goto Lai;
          }
          break;
        default: Default18:;
      }
      goto Default2;
  TailCall_cSub:
    case cSub:
      switch(ByteCodePtr[0])
      {
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cSub", "cAdd");
          goto Lbf;
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cSub:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  FP_TRACE_BYTECODE_OPTIMIZATION("y cSub x cSub", "[y+x] cSub");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cSub; */ // redundant, matches cSub @ 2
                  goto Lbd;
              }
              goto Default20;
            case cAdd:
              switch(ByteCodePtr[-2])
              {
                case cImmed:
                  y = ImmedPtr[-1];
                  FP_TRACE_BYTECODE_OPTIMIZATION("y cAdd x cSub", "[y-x] cAdd");
                  /* ByteCodePtr[-2] = cImmed; */ // redundant, matches y @ 3
                  /* ByteCodePtr[-1] = cAdd; */ // redundant, matches cAdd @ 2
                  goto Lbe;
              }
              goto Default20;
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cSub", "[y-x]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lbe;
            default: Default20:;
          }
          if(x==Value_t(0))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("x[x==Value_t(0)] cSub", "");
            goto Lai;
          }
          break;
      }
      goto Default2;
  TailCall_cMin:
    case cMin:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cMin", "[Min(x,y)]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lbg;
          }
          break;
      }
      goto Default2;
  TailCall_cMax:
    case cMax:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cMax", "[Max(x,y)]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lbh;
          }
          break;
      }
      goto Default2;
  TailCall_cAtan2:
    case cAtan2:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cAtan2", "[fp_atan2(y,x)]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lje;
          }
          break;
      }
      goto Default2;
  TailCall_cNot:
    case cNot:
      switch(ByteCodePtr[0])
      {
        case cLess:
          FP_TRACE_BYTECODE_OPTIMIZATION("cLess cNot", "cGreaterOrEq");
          goto Lbi;
        case cLessOrEq:
          FP_TRACE_BYTECODE_OPTIMIZATION("cLessOrEq cNot", "cGreater");
          goto Lbj;
        case cGreater:
          FP_TRACE_BYTECODE_OPTIMIZATION("cGreater cNot", "cLessOrEq");
          goto Lbk;
        case cGreaterOrEq:
          FP_TRACE_BYTECODE_OPTIMIZATION("cGreaterOrEq cNot", "cLess");
          goto Lbl;
        case cEqual:
          FP_TRACE_BYTECODE_OPTIMIZATION("cEqual cNot", "cNEqual");
          goto Lbm;
        case cNEqual:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNEqual cNot", "cEqual");
          goto Lbn;
        case cNeg:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNeg cNot", "cNot");
          /* opcode = cNot; */ // redundant, matches cNot @ 0
          goto Lca;
        case cAbs:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAbs cNot", "cNot");
          /* opcode = cNot; */ // redundant, matches cNot @ 0
          goto Lca;
        case cNot:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNot cNot", "cNotNot");
          goto Lcb;
        case cNotNot:
          FP_TRACE_BYTECODE_OPTIMIZATION("cNotNot cNot", "cNot");
          /* opcode = cNot; */ // redundant, matches cNot @ 0
          goto Lca;
        case cAbsNotNot:
          FP_TRACE_BYTECODE_OPTIMIZATION("cAbsNotNot cNot", "cAbsNot");
          goto Lcc;
        case cAbsNot:
          switch(ByteCodePtr[-1])
          {
            case cImmed: break;
            default:
              A = ByteCodePtr[-1];
              if(IsLogicalOpcode(A))
              {
                FP_TRACE_BYTECODE_OPTIMIZATION("A[IsLogicalOpcode(A)] cAbsNot cNot", "A");
                /* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
                goto Lab;
              }
              FP_TRACE_BYTECODE_OPTIMIZATION("A cAbsNot cNot", "A cAbsNotNot");
              /* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
              goto Lcd;
          }
          goto Default21;
        case cImmed:
          x = ImmedPtr[0];
          FP_TRACE_BYTECODE_OPTIMIZATION("x cNot", "[!truthValue(x)]");
          /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
          goto Lce;
        default: Default21:;
          A = ByteCodePtr[0];
          if(IsNeverNegativeValueOpcode(A))
          {
            FP_TRACE_BYTECODE_OPTIMIZATION("A[IsNeverNegativeValueOpcode(A)] cNot", "A cAbsNot");
            /* ByteCodePtr[0] = A; */ // redundant, matches A @ 1
            goto Lcf;
          }
      }
      goto Default2;
  TailCall_cLess:
    case cLess:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          if(x!=Value_t(0))
          {
            switch(ByteCodePtr[-1])
            {
              case cAbs:
                FP_TRACE_BYTECODE_OPTIMIZATION("cAbs x[x!=Value_t(0)] cLess", "[Value_t(0.5)/x] cMul cNot");
                goto Ljf;
            }
          }
          if(x==Value_t(0))
          {
            switch(ByteCodePtr[-1])
            {
              case cImmed: break;
              default:
                A = ByteCodePtr[-1];
                if(IsNeverNegativeValueOpcode(A))
                {
                  FP_TRACE_BYTECODE_OPTIMIZATION("A[IsNeverNegativeValueOpcode(A)] x[x==Value_t(0)] cLess", "A [x] cMul");
                  /* ByteCodePtr[-1] = A; */ // redundant, matches A @ 2
                  /* ImmedPtr[0] = x; */ // redundant, matches x @ 1
                  /* ByteCodePtr[0] = cImmed; */ // redundant, matches x @ 1
                  goto Lcg;
                }
            }
          }
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cLess", "[fp_less(y,x)]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lch;
          }
          break;
      }
      goto Default2;
  TailCall_cLessOrEq:
    case cLessOrEq:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cLessOrEq", "[fp_lessOrEq(y,x)]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lci;
          }
          break;
      }
      goto Default2;
  TailCall_cGreater:
    case cGreater:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cGreater", "[fp_less(x,y)]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lcj;
          }
          break;
      }
      goto Default2;
  TailCall_cGreaterOrEq:
    case cGreaterOrEq:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          if(x!=Value_t(0))
          {
            switch(ByteCodePtr[-1])
            {
              case cAbs:
                FP_TRACE_BYTECODE_OPTIMIZATION("cAbs x[x!=Value_t(0)] cGreaterOrEq", "[Value_t(0.5)/x] cMul cNotNot");
                goto Ljg;
            }
          }
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cGreaterOrEq", "[fp_lessOrEq(x,y)]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lck;
          }
          break;
      }
      goto Default2;
  TailCall_cEqual:
    case cEqual:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cEqual", "[fp_equal(y,x)]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lcl;
          }
          break;
      }
      goto Default2;
  TailCall_cNEqual:
    case cNEqual:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cNEqual", "[fp_nequal(y,x)]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lcm;
          }
          break;
      }
      goto Default2;
  TailCall_cAnd:
    case cAnd:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cAnd", "[truthValue(x)&&truthValue(y)]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lcn;
          }
          break;
      }
      goto Default2;
  TailCall_cOr:
    case cOr:
      switch(ByteCodePtr[0])
      {
        case cImmed:
          x = ImmedPtr[0];
          switch(ByteCodePtr[-1])
          {
            case cImmed:
              y = ImmedPtr[-1];
              FP_TRACE_BYTECODE_OPTIMIZATION("y x cOr", "[truthValue(x)||truthValue(y)]");
              /* ByteCodePtr[-1] = cImmed; */ // redundant, matches y @ 2
              goto Lda;
          }
          break;
      }
      goto Default2;
    case cImmed: break;
    default: Default2:;
      A = opcode;
      if(A >= VarBegin)
      {
        switch(ByteCodePtr[0])
        {
          case cImmed: break;
          default:
            B = ByteCodePtr[0];
            if(B==A)
            {
              FP_TRACE_BYTECODE_OPTIMIZATION("B[B==A] A[A >= VarBegin]", "A cDup");
              goto Ldc;
            }
        }
      }
      if(IsUnaryOpcode(A))
      {
        switch(ByteCodePtr[0])
        {
          case cImmed: break;
          default:
            B = ByteCodePtr[0];
            if(B >= VarBegin)
            {
              switch(ByteCodePtr[-1])
              {
                case cImmed: break;
                default:
                  C = ByteCodePtr[-1];
                  if(C==A)
                  {
                    switch(ByteCodePtr[-2])
                    {
                      case cImmed: break;
                      default:
                        D = ByteCodePtr[-2];
                        if(D==B)
                        {
                          FP_TRACE_BYTECODE_OPTIMIZATION("D[D==B] C[C==A] B[B >= VarBegin] A[IsUnaryOpcode(A)]", "D C cDup");
                          /* ByteCodePtr[-2] = D; */ // redundant, matches D @ 3
                          /* ByteCodePtr[-1] = C; */ // redundant, matches C @ 2
                          goto Ldd;
                        }
                    }
                  }
              }
            }
        }
      }
  }
  goto Lde;
Laa: ImmedPtr[0] = -x; return;
Lab: data->ByteCode.pop_back(); return;
Lac: ImmedPtr[0] = Value_t(1)/x; return;
Lad: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
Ljh: opcode = cDiv;
Ldf: goto TailCall_cDiv;
Lae: data->ByteCode.pop_back();
     AddFunctionOpcode(cSqr); return;
Laf: data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cImmed); return;
Lag: ImmedPtr[0] = -x;
Lji: data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cImmed);
Ldg: FP_ReDefinePointers();
Ldh: goto TailCall_cMul;
Lah: ImmedPtr[-1] = y*x;
Lai: data->Immed.pop_back(); goto Lab;
Laj: data->Immed.pop_back();
     data->ByteCode.pop_back();
Ljj: AddFunctionOpcode(cDup);
     opcode = cAdd;
     FP_ReDefinePointers();
Ldi: goto TailCall_cAdd;
Lak: data->Immed.pop_back();
     data->ByteCode.pop_back();
Ljk: opcode = cNeg;
     FP_ReDefinePointers();
     goto TailCall_cNeg;
Lal: data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cSqr); goto Ldg;
Lam: ImmedPtr[-1] = y/x; goto Lai;
Lan: ImmedPtr[0] = -x;
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cImmed);
     FP_ReDefinePointers(); goto Ldf;
Lba: ImmedPtr[-1] = fp_mod(y,x); goto Lai;
Lbb: data->Immed.push_back(4);
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
Ljl: AddFunctionOpcode(cImmed);
Ljm: opcode = cMul; goto Ldg;
Lbc: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cSub;
     goto TailCall_cSub;
Lbd: ImmedPtr[-1] = y+x; goto Lai;
Lbe: ImmedPtr[-1] = y-x; goto Lai;
Lbf: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cAdd; goto Ldi;
Lbg: ImmedPtr[-1] = Min(x,y); goto Lai;
Lbh: ImmedPtr[-1] = Max(x,y); goto Lai;
Lbi: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cGreaterOrEq;
     goto TailCall_cGreaterOrEq;
Lbj: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cGreater;
     goto TailCall_cGreater;
Lbk: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cLessOrEq;
     goto TailCall_cLessOrEq;
Lbl: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cLess;
     goto TailCall_cLess;
Lbm: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cNEqual;
     goto TailCall_cNEqual;
Lbn: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cEqual;
     goto TailCall_cEqual;
Lca: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
Ljn: goto TailCall_cNot;
Lcb: data->ByteCode.pop_back();
Lka: AddFunctionOpcode(cNotNot); return;
Lcc: data->ByteCode.pop_back();
Lcf: AddFunctionOpcode(cAbsNot); return;
Lcd: data->ByteCode.pop_back();
     AddFunctionOpcode(cAbsNotNot); return;
Lce: ImmedPtr[0] = !truthValue(x); return;
Lcg: opcode = cMul; goto Ldh;
Lch: ImmedPtr[-1] = fp_less(y,x); goto Lai;
Lci: ImmedPtr[-1] = fp_lessOrEq(y,x); goto Lai;
Lcj: ImmedPtr[-1] = fp_less(x,y); goto Lai;
Lck: ImmedPtr[-1] = fp_lessOrEq(x,y); goto Lai;
Lcl: ImmedPtr[-1] = fp_equal(y,x); goto Lai;
Lcm: ImmedPtr[-1] = fp_nequal(y,x); goto Lai;
Lcn: ImmedPtr[-1] = truthValue(x)&&truthValue(y); goto Lai;
Lda: ImmedPtr[-1] = truthValue(x)||truthValue(y); goto Lai;
Ldb: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
Lkb: goto TailCall_cAbs;
Ldc: data->ByteCode.pop_back();
     AddFunctionOpcode(A);
Ldj: AddFunctionOpcode(cDup); return;
Ldd: data->ByteCode.pop_back(); goto Ldj;
Lde: data->ByteCode.push_back(opcode); return;
Ldk: data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     data->Immed.push_back(x*Value_t(2));
Lkc: AddFunctionOpcode(cImmed);
Lkd: FP_ReDefinePointers();
     goto TailCall_cPow;
Ldl: data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cImmed);
     AddFunctionOpcode(cMul); goto Lkd;
Ldm: data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cImmed);
     AddFunctionOpcode(cMul);
     opcode = cExp;
     FP_ReDefinePointers();
     goto TailCall_cExp;
Ldn: data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cImmed);
     AddFunctionOpcode(cMul);
     opcode = cExp2;
     FP_ReDefinePointers();
     goto TailCall_cExp2;
Lea: data->ByteCode.pop_back();
     data->ByteCode.pop_back(); goto Lkc;
Leb: data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cMul);
     data->Immed.push_back(x); goto Lkc;
Lec: data->Immed.pop_back();
     data->ByteCode.pop_back();
Lke: opcode = cSqrt;
     FP_ReDefinePointers();
     goto TailCall_cSqrt;
Led: data->Immed.pop_back();
     data->ByteCode.pop_back();
     opcode = cCbrt;
     FP_ReDefinePointers();
     goto TailCall_cCbrt;
Lee: data->Immed.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cCbrt);
Lkf: opcode = cInv;
     FP_ReDefinePointers();
     goto TailCall_cInv;
Lef: data->Immed.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cRSqrt); return;
Leg: data->Immed.pop_back();
     data->ByteCode.pop_back(); goto Lkf;
Leh: data->Immed.pop_back();
     data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     data->Immed.push_back(y*x); goto Lkc;
Lei: ImmedPtr[0] = x*Value_t(2); goto Lea;
Lej: ImmedPtr[-1] = fp_pow(y,x); goto Lai;
Lek: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cAbs; goto Lkb;
Lel: ImmedPtr[0] = fp_sqrt(x); return;
Lem: ImmedPtr[0] = fp_abs(x); return;
Len: ImmedPtr[0] = fp_acos(x); return;
Lfa: ImmedPtr[0] = fp_acosh(x); return;
Lfb: ImmedPtr[0] = fp_asinh(x); return;
Lfc: ImmedPtr[0] = fp_atan(x); return;
Lfd: ImmedPtr[0] = fp_atanh(x); return;
Lfe: ImmedPtr[0] = fp_cbrt(x); return;
Lff: ImmedPtr[0] = fp_ceil(x); return;
Lfg: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
Lkg: goto TailCall_cCos;
Lfh: ImmedPtr[0] = fp_cos(x); return;
Lfi: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     goto TailCall_cCosh;
Lfj: data->ByteCode.pop_back();
     AddFunctionOpcode(cSqr);
     data->Immed.push_back(Value_t(1));
Lkh: AddFunctionOpcode(cImmed);
     AddFunctionOpcode(cAdd); goto Lke;
Lfk: ImmedPtr[0] = fp_cosh(x); return;
Lfl: data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cExp);
     data->Immed.push_back(fp_exp(x)); goto Ljl;
Lfm: ImmedPtr[0] = fp_exp(x); return;
Lfn: data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cExp2);
     data->Immed.push_back(fp_exp2(x)); goto Ljl;
Lga: ImmedPtr[0] = fp_exp2(x); return;
Lgb: ImmedPtr[0] = fp_floor(x); return;
Lgc: ImmedPtr[0] = fp_int(x); return;
Lgd: data->ByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     AddFunctionOpcode(cLog); goto Ljj;
Lge: ImmedPtr[0] = fp_log(x); return;
Lgf: data->ByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     AddFunctionOpcode(cLog10); goto Ljj;
Lgg: ImmedPtr[0] = fp_log10(x); return;
Lgh: data->ByteCode.pop_back();
     AddFunctionOpcode(cAbs);
     AddFunctionOpcode(cLog2); goto Ljj;
Lgi: ImmedPtr[0] = fp_log2(x); return;
Lgj: data->ByteCode.pop_back();
     AddFunctionOpcode(cSin); goto Ljk;
Lgk: ImmedPtr[0] = fp_sin(x); return;
Lgl: data->ByteCode.pop_back();
     AddFunctionOpcode(cSinh); goto Ljk;
Lgm: data->ByteCode.pop_back();
     AddFunctionOpcode(cSqr);
     data->Immed.push_back(Value_t(-1)); goto Lkh;
Lgn: ImmedPtr[0] = fp_sinh(x); return;
Lha: data->ByteCode.pop_back();
     AddFunctionOpcode(cTan); goto Ljk;
Lhb: ImmedPtr[0] = fp_tan(x); return;
Lhc: data->ByteCode.pop_back();
     AddFunctionOpcode(cTanh); goto Ljk;
Lhd: ImmedPtr[0] = fp_tanh(x); return;
Lhe: ImmedPtr[0] = fp_trunc(x); return;
Lhf: ImmedPtr[0] = RadiansToDegrees(x); return;
Lhg: ImmedPtr[0] = DegreesToRadians(x); return;
Lhh: data->ByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     opcode = cCeil;
     FP_ReDefinePointers();
     goto TailCall_cCeil;
Lhi: data->ByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     opcode = cFloor;
     FP_ReDefinePointers();
     goto TailCall_cFloor;
Lhj: data->ByteCode.pop_back();
     AddFunctionOpcode(cNeg);
     opcode = cPow; goto Lkd;
Lhk: data->ByteCode.pop_back();
     AddFunctionOpcode(cCsc); return;
Lhl: data->ByteCode.pop_back();
     AddFunctionOpcode(cSec); return;
Lhm: data->ByteCode.pop_back();
     AddFunctionOpcode(cCot); return;
Lhn: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cSin;
     goto TailCall_cSin;
Lia: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cCos; goto Lkg;
Lib: ByteCodePtr -= 1;
     data->ByteCode.pop_back();
     opcode = cTan;
     goto TailCall_cTan;
Lic: ImmedPtr[0] = -x; goto Ljh;
Lid: ImmedPtr[0] = RadiansToDegrees(x); goto Lji;
Lie: ImmedPtr[0] = DegreesToRadians(x); goto Lji;
Lif: data->Immed.pop_back();
     data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
Lki: data->ByteCode.pop_back();
     opcode = cDeg;
     FP_ReDefinePointers();
     goto TailCall_cDeg;
Lig: data->Immed.pop_back();
     data->Immed.pop_back();
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
Lkj: data->ByteCode.pop_back();
     opcode = cRad;
     FP_ReDefinePointers();
     goto TailCall_cRad;
Lih: data->Immed.pop_back(); goto Lki;
Lii: data->Immed.pop_back(); goto Lkj;
Lij: ByteCodePtr -= 1;
     data->ByteCode.pop_back(); goto Lcg;
Lik: ImmedPtr[0] = -x; goto Lcg;
Lil: data->ByteCode.pop_back();
     AddFunctionOpcode(cCsc); goto Ljm;
Lim: data->ByteCode.pop_back();
     AddFunctionOpcode(cSec); goto Ljm;
Lin: data->ByteCode.pop_back();
     AddFunctionOpcode(cCot); goto Ljm;
Lja: data->ByteCode.pop_back();
     AddFunctionOpcode(cSin); goto Ljm;
Ljb: data->ByteCode.pop_back();
     AddFunctionOpcode(cCos); goto Ljm;
Ljc: data->ByteCode.pop_back();
     AddFunctionOpcode(cTan); goto Ljm;
Ljd: ImmedPtr[0] = Value_t(1)/x; goto Lcg;
Lje: ImmedPtr[-1] = fp_atan2(y,x); goto Lai;
Ljf: ImmedPtr[0] = Value_t(0.5)/x;
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cImmed);
     AddFunctionOpcode(cMul);
     opcode = cNot;
     FP_ReDefinePointers(); goto Ljn;
Ljg: ImmedPtr[0] = Value_t(0.5)/x;
     data->ByteCode.pop_back();
     data->ByteCode.pop_back();
     AddFunctionOpcode(cImmed);
     AddFunctionOpcode(cMul); goto Lka;
return;
// This list of dummy gotos is here to inhibit
// compiler warnings on unused labels
goto TailCall_cAcos;goto TailCall_cAcosh;goto TailCall_cAnd;
goto TailCall_cAsinh;goto TailCall_cAtan;goto TailCall_cAtan2;
goto TailCall_cAtanh;goto TailCall_cCbrt;goto TailCall_cEqual;
goto TailCall_cExp;goto TailCall_cExp2;goto TailCall_cGreater;
goto TailCall_cGreaterOrEq;goto TailCall_cInt;goto TailCall_cInv;
goto TailCall_cLess;goto TailCall_cLessOrEq;goto TailCall_cLog;
goto TailCall_cLog10;goto TailCall_cLog2;goto TailCall_cMax;
goto TailCall_cMin;goto TailCall_cMod;goto TailCall_cNEqual;
goto TailCall_cOr;goto TailCall_cSinh;goto TailCall_cSub;
goto TailCall_cTanh;goto TailCall_cTrunc;
#endif
#undef FP_ReDefinePointers
#undef FP_TRACE_BYTECODE_OPTIMIZATION
